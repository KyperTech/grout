{"version":3,"sources":["/source/matter-library.js","/source/src/matter-library.js"],"names":["global","factory","exports","module","require","define","amd","Matter","Firebase","axios","polyfill","this","serverUrl","tokenName","console","error","interceptors","request","use","config","localStorage","getItem","headers","Authorization","log","reject","matter_library__Matter","signup","signupData","post","then","response","login","loginData","password","username","Error","put","window","setItem","data","token","logout","getCurrentUser","get","getAuthToken","getApps","errRes","matter_library"],"mappings":"CAAC,SAAUA,EAAQC,GACC,gBAAZC,UAA0C,mBAAXC,QAAyBA,OAAOD,QAAUD,EAAQG,QAAQ,YAAaA,QAAQ,SAAUA,QAAQ,sBACrH,kBAAXC,SAAyBA,OAAOC,IAAMD,QAAQ,WAAY,QAAS,qBAAsBJ,GAChGD,EAAOO,OAASN,EAAQD,EAAOQ,SAAUR,EAAOS,MAAOT,EAAOU,WAC7DC,KAAM,SAAUH,EAAUC,EAAOC,GAAY,YCA/C,IAAME,GAAY,wBAEZC,EAAY,QAEK,oBAAZL,IACVM,QAAQC,MAAM,sCAEK,mBAATN,GACVK,QAAQC,MAAM,mCAGdN,EAAMO,aAAaC,QAAQC,IAAI,SAASC,GAOvC,MAJIC,cAAaC,QAAQR,KACxBM,EAAOG,SAAWC,cAAiB,UAAYH,aAAaC,QAAQR,IACpEC,QAAQU,IAAI,wCAENL,GACL,SAASJ,GAEX,MAzBFL,GAyBiBe,OAAOV,IAIxB,IA7BAW,IA8BCC,OAAM,SAACC,GACN,MAAOnB,GAAMoB,KAAKjB,EAAY,UAAWgB,GACxCE,KAAK,SAASC,GACbjB,QAAQU,IAAIO,KAEb,SAAS,SAASA,GACjBjB,QAAQU,IAAIO,MAIfC,MAAK,SAACC,GACL,IAAKA,IAAcA,EAAUC,WAAaD,EAAUE,SACnD,KAAM,IAAIC,OAAM,oDAEjB,OAAO3B,GAAM4B,IAAIzB,EAAY,SAAUqB,GACtCH,KAAK,SAASC,GAOd,MALAjB,SAAQU,IAAIO,GAC4B,OAApCX,aAAaC,QAAQR,KACxByB,OAAOlB,aAAamB,QAAQ1B,EAAWkB,EAASS,KAAKC,OACrD3B,QAAQU,IAAI,wBAAyBc,OAAOlB,aAAaC,QAAQR,KAE3DkB,EAASS,OACd,SAAS,SAAST,GACpBjB,QAAQU,IAAIO,MAIdW,OAAM,WACLjC,EAAM4B,IAAIzB,EAAY,cACnBkB,KAAK,SAASC,GACfjB,QAAQU,IAAIO,KACX,SAAS,SAASA,GACnBjB,QAAQU,IAAIO,MAIfY,eAAc,WAEblC,EAAMmC,IAAIhC,EAAY,YACnBkB,KAAK,SAASC,GAEhBjB,QAAQU,IAAIO,KACV,SAAS,SAASA,GACpBjB,QAAQU,IAAIO,MAIdc,aAAY,WAEX,MAAqD,mBAA1CP,QAAOlB,aAAaC,QAAQR,GAC/B,KAEDO,aAAaC,QAAQR,IAG7BiC,QAAO,WAEN,MAAOrC,GAAMmC,IAAIhC,EAAY,YAC1BkB,KAAK,SAASC,GAEf,MADAjB,SAAQU,IAAI,eAAgBO,EAASS,MAC9BT,EAASS,OACf,SAAS,SAASO,GAEpB,MADCjC,SAAQU,IAAIuB,GACNA,MA9FVC,EAAAtB,CDwGC,OAAOsB","file":"matter-library.min.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('firebase'), require('axios'), require('babelify/polyfill')) :\n\ttypeof define === 'function' && define.amd ? define(['firebase', 'axios', 'babelify/polyfill'], factory) :\n\tglobal.Matter = factory(global.Firebase, global.axios, global.polyfill)\n}(this, function (Firebase, axios, polyfill) { 'use strict';\n\n\tconst serverUrl = 'http://localhost:4000';\n\tconst fbUrl = 'https://pruvit.firebaseio.com';\n\tconst tokenName = 'matter';\n\n\tif (typeof Firebase == 'undefined') {\n\t\tconsole.error('Firebase is required to use Matter');\n\t}\n\tif (typeof axios == 'undefined') {\n\t\tconsole.error('Axios is required to use Matter');\n\t} else {\n\t\t// Add a request interceptor\n\t\taxios.interceptors.request.use(function(config) {\n\t\t\t// Do something before request is sent\n\t\t\t//TODO: Handle there already being headers\n\t\t\tif (localStorage.getItem(tokenName)) {\n\t\t\t\tconfig.headers = {'Authorization': 'Bearer ' + localStorage.getItem(tokenName)};\n\t\t\t\tconsole.log('Set auth header through interceptor');\n\t\t\t}\n\t\t\treturn config;\n\t\t}, function(error) {\n\t\t\t// Do something with request error\n\t\t\treturn polyfill.reject(error);\n\t\t});\n\t}\n\n\tlet matter_library__Matter = {\n\t\tsignup(signupData) {\n\t\t\treturn axios.post(serverUrl + '/signup', signupData)\n\t\t\t.then(function(response) {\n\t\t\t  console.log(response);\n\t\t\t})\n\t\t\t['catch'](function(response) {\n\t\t\t  console.log(response);\n\t\t\t});\n\t\t},\n\n\t\tlogin(loginData) {\n\t\t\tif (!loginData || !loginData.password || !loginData.username) {\n\t\t\t\tthrow new Error('Username/Email and Password are required to login');\n\t\t\t}\n\t\t\treturn axios.put(serverUrl + '/login', loginData)\n\t\t\t.then(function(response) {\n\t\t\t\t//TODO: Save token locally\n\t\t\t\tconsole.log(response);\n\t\t\t\tif (localStorage.getItem(tokenName) === null) {\n\t\t\t\t\twindow.localStorage.setItem(tokenName, response.data.token);\n\t\t\t\t\tconsole.log('token set to storage:', window.localStorage.getItem(tokenName));\n\t\t\t\t}\n\t\t\t\treturn response.data;\n\t\t\t})['catch'](function(response) {\n\t\t\t\tconsole.log(response);\n\t\t\t});\n\t\t},\n\n\t\tlogout() {\n\t\t\taxios.put(serverUrl + '/logout', {\n\t\t\t}).then(function(response) {\n\t\t\t  console.log(response);\n\t\t\t})['catch'](function(response) {\n\t\t\t  console.log(response);\n\t\t\t});\n\t\t},\n\n\t\tgetCurrentUser() {\n\t\t\t//TODO: Check Current user variable\n\t\t\taxios.get(serverUrl + '/user', {\n\t\t\t}).then(function(response) {\n\t\t\t\t//TODO: Save user information locally\n\t\t\t\tconsole.log(response);\n\t\t\t})['catch'](function(response) {\n\t\t\t\tconsole.log(response);\n\t\t\t});\n\t\t},\n\n\t\tgetAuthToken() {\n\t\t\t//TODO: Load token from storage\n\t\t\tif (typeof window.localStorage.getItem(tokenName) == 'undefined') {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn localStorage.getItem(tokenName);\n\t\t},\n\n\t\tgetApps() {\n\t\t\t//TODO:Set authentication header\n\t\t\treturn axios.get(serverUrl + '/apps', {\n\t\t\t}).then(function(response) {\n\t\t\t  console.log('Apps loaded:', response.data);\n\t\t\t  return response.data;\n\t\t\t})['catch'](function(errRes) {\n\t\t\t  console.log(errRes);\n\t\t\t\treturn errRes;\n\t\t\t});\n\t\t}\n\n\t};\n\n\tvar matter_library = matter_library__Matter;\n\n\treturn matter_library;\n\n}));\n","import Firebase from 'firebase';\nimport axios from 'axios';\nimport Promise from 'babelify/polyfill';\n\nconst serverUrl = 'http://localhost:4000';\nconst fbUrl = 'https://pruvit.firebaseio.com';\nconst tokenName = 'matter';\n\nif (typeof Firebase == 'undefined') {\n\tconsole.error('Firebase is required to use Matter');\n}\nif (typeof axios == 'undefined') {\n\tconsole.error('Axios is required to use Matter');\n} else {\n\t// Add a request interceptor\n\taxios.interceptors.request.use(function(config) {\n\t\t// Do something before request is sent\n\t\t//TODO: Handle there already being headers\n\t\tif (localStorage.getItem(tokenName)) {\n\t\t\tconfig.headers = {'Authorization': 'Bearer ' + localStorage.getItem(tokenName)};\n\t\t\tconsole.log('Set auth header through interceptor');\n\t\t}\n\t\treturn config;\n\t}, function(error) {\n\t\t// Do something with request error\n\t\treturn Promise.reject(error);\n\t});\n}\n\nlet Matter = {\n\tsignup(signupData) {\n\t\treturn axios.post(serverUrl + '/signup', signupData)\n\t\t.then(function(response) {\n\t\t  console.log(response);\n\t\t})\n\t\t['catch'](function(response) {\n\t\t  console.log(response);\n\t\t});\n\t},\n\n\tlogin(loginData) {\n\t\tif (!loginData || !loginData.password || !loginData.username) {\n\t\t\tthrow new Error('Username/Email and Password are required to login');\n\t\t}\n\t\treturn axios.put(serverUrl + '/login', loginData)\n\t\t.then(function(response) {\n\t\t\t//TODO: Save token locally\n\t\t\tconsole.log(response);\n\t\t\tif (localStorage.getItem(tokenName) === null) {\n\t\t\t\twindow.localStorage.setItem(tokenName, response.data.token);\n\t\t\t\tconsole.log('token set to storage:', window.localStorage.getItem(tokenName));\n\t\t\t}\n\t\t\treturn response.data;\n\t\t})['catch'](function(response) {\n\t\t\tconsole.log(response);\n\t\t});\n\t},\n\n\tlogout() {\n\t\taxios.put(serverUrl + '/logout', {\n\t\t}).then(function(response) {\n\t\t  console.log(response);\n\t\t})['catch'](function(response) {\n\t\t  console.log(response);\n\t\t});\n\t},\n\n\tgetCurrentUser() {\n\t\t//TODO: Check Current user variable\n\t\taxios.get(serverUrl + '/user', {\n\t\t}).then(function(response) {\n\t\t\t//TODO: Save user information locally\n\t\t\tconsole.log(response);\n\t\t})['catch'](function(response) {\n\t\t\tconsole.log(response);\n\t\t});\n\t},\n\n\tgetAuthToken() {\n\t\t//TODO: Load token from storage\n\t\tif (typeof window.localStorage.getItem(tokenName) == 'undefined') {\n\t\t\treturn null;\n\t\t}\n\t\treturn localStorage.getItem(tokenName);\n\t},\n\n\tgetApps() {\n\t\t//TODO:Set authentication header\n\t\treturn axios.get(serverUrl + '/apps', {\n\t\t}).then(function(response) {\n\t\t  console.log('Apps loaded:', response.data);\n\t\t  return response.data;\n\t\t})['catch'](function(errRes) {\n\t\t  console.log(errRes);\n\t\t\treturn errRes;\n\t\t});\n\t}\n\n};\n\nexport default Matter;\n\n"],"sourceRoot":"/source/"}