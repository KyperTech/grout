(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Grout"] = factory();
	else
		root["Grout"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(70);
	module.exports = __webpack_require__(70);


/***/ },
/* 1 */
/***/ function(module, exports) {

	/*********************************************************************
	 * These are commonly used parsers for CSS Values they take a string *
	 * to parse and return a string after it's been converted, if needed *
	 ********************************************************************/
	'use strict';

	exports.TYPES = {
	    INTEGER: 1,
	    NUMBER: 2,
	    LENGTH: 3,
	    PERCENT: 4,
	    URL: 5,
	    COLOR: 6,
	    STRING: 7,
	    ANGLE: 8,
	    KEYWORD: 9,
	    NULL_OR_EMPTY_STR: 10
	};

	/*jslint regexp: true*/
	// rough regular expressions
	var integerRegEx = /^[\-+]?[0-9]+$/;
	var numberRegEx = /^[\-+]?[0-9]*\.[0-9]+$/;
	var lengthRegEx = /^(0|[\-+]?[0-9]*\.?[0-9]+(in|cm|em|mm|pt|pc|px))$/;
	var percentRegEx = /^[\-+]?[0-9]*\.?[0-9]+%$/;
	var urlRegEx = /^url\(\s*([^\)]*)\s*\)$/;
	var stringRegEx = /^("[^"]*"|'[^']*')$/;
	var colorRegEx1 = /^#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F]([0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])?$/;
	var colorRegEx2 = /^rgb\(([^\)]*)\)$/;
	var colorRegEx3 = /^rgba\(([^\)]*)\)$/;
	var angleRegEx = /^([\-+]?[0-9]*\.?[0-9]+)(deg|grad|rad)$/;
	/*jslint regexp: false*/

	// This will return one of the above types based on the passed in string
	exports.valueType = function valueType(val) {
	    if (val === '' || val === null) {
	        return exports.TYPES.NULL_OR_EMPTY_STR;
	    }
	    if (typeof val === 'number') {
	        val = val.toString();
	    }

	    if (typeof val !== 'string') {
	        return undefined;
	    }

	    if (integerRegEx.test(val)) {
	        return exports.TYPES.INTEGER;
	    }
	    if (numberRegEx.test(val)) {
	        return exports.TYPES.NUMBER;
	    }
	    if (lengthRegEx.test(val)) {
	        return exports.TYPES.LENGTH;
	    }
	    if (percentRegEx.test(val)) {
	        return exports.TYPES.PERCENT;
	    }
	    if (urlRegEx.test(val)) {
	        return exports.TYPES.URL;
	    }
	    if (stringRegEx.test(val)) {
	        return exports.TYPES.STRING;
	    }
	    if (angleRegEx.test(val)) {
	        return exports.TYPES.ANGLE;
	    }
	    if (colorRegEx1.test(val)) {
	        return exports.TYPES.COLOR;
	    }
	    var res = colorRegEx2.exec(val);
	    var parts;
	    if (res !== null) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 3) {
	            return undefined;
	        }
	        if (parts.every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {
	            return exports.TYPES.COLOR;
	        }
	        return undefined;
	    }
	    res = colorRegEx3.exec(val);
	    if (res !== null) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 4) {
	            return undefined;
	        }
	        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx)) || parts.every(integerRegEx.test.bind(integerRegEx))) {
	            if (numberRegEx.test(parts[3])) {
	                return exports.TYPES.COLOR;
	            }
	        }
	        return undefined;
	    }

	    // could still be a color, one of the standard keyword colors
	    val = val.toLowerCase();
	    switch (val) {
	    case 'maroon':
	    case 'red':
	    case 'orange':
	    case 'yellow':
	    case 'olive':
	    case 'purple':
	    case 'fuchsia':
	    case 'white':
	    case 'lime':
	    case 'green':
	    case 'navy':
	    case 'blue':
	    case 'aqua':
	    case 'teal':
	    case 'black':
	    case 'silver':
	    case 'gray':
	        // the following are deprecated in CSS3
	    case 'activeborder':
	    case 'activecaption':
	    case 'appworkspace':
	    case 'background':
	    case 'buttonface':
	    case 'buttonhighlight':
	    case 'buttonshadow':
	    case 'buttontext':
	    case 'captiontext':
	    case 'graytext':
	    case 'highlight':
	    case 'highlighttext':
	    case 'inactiveborder':
	    case 'inactivecaption':
	    case 'inactivecaptiontext':
	    case 'infobackground':
	    case 'infotext':
	    case 'menu':
	    case 'menutext':
	    case 'scrollbar':
	    case 'threeddarkshadow':
	    case 'threedface':
	    case 'threedhighlight':
	    case 'threedlightshadow':
	    case 'threedshadow':
	    case 'window':
	    case 'windowframe':
	    case 'windowtext':
	        return exports.TYPES.COLOR;
	    default:
	        return exports.TYPES.KEYWORD;
	    }
	};

	exports.parseInteger = function parseInteger(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.INTEGER) {
	        return undefined;
	    }
	    return String(parseInt(val, 10));
	};

	exports.parseNumber = function parseNumber(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.NUMBER && type !== exports.TYPES.INTEGER) {
	        return undefined;
	    }
	    return String(parseFloat(val));
	};

	exports.parseLength = function parseLength(val) {
	    if (val === 0 || val === '0') {
	        return '0px';
	    }
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.LENGTH) {
	        return undefined;
	    }
	    return val;
	};

	exports.parsePercent = function parsePercent(val) {
	    if (val === 0 || val === '0') {
	        return '0%';
	    }
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.PERCENT) {
	        return undefined;
	    }
	    return val;
	};

	// either a length or a percent
	exports.parseMeasurement = function parseMeasurement(val) {
	    var length = exports.parseLength(val);
	    if (length !== undefined) {
	        return length;
	    }
	    return exports.parsePercent(val);
	};

	exports.parseUrl = function parseUrl(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    var res = urlRegEx.exec(val);
	    // does it match the regex?
	    if (!res) {
	        return undefined;
	    }
	    var str = res[1];
	    // if it starts with single or double quotes, does it end with the same?
	    if ((str[0] === '"' || str[0] === "'") && str[0] !== str[str.length - 1]) {
	        return undefined;
	    }
	    if (str[0] === '"' || str[0] === "'") {
	        str = str.substr(1, str.length - 2);
	    }

	    var i;
	    for (i = 0; i < str.length; i++) {
	        switch (str[i]) {
	        case '(':
	        case ')':
	        case ' ':
	        case '\t':
	        case '\n':
	        case "'":
	        case '"':
	            return undefined;
	        case '\\':
	            i++;
	            break;
	        }
	    }

	    return 'url(' + str + ')';
	};

	exports.parseString = function parseString(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.STRING) {
	        return undefined;
	    }
	    var i;
	    for (i = 1; i < val.length - 1; i++) {
	        switch (val[i]) {
	        case val[0]:
	            return undefined;
	        case '\\':
	            i++;
	            while (i < val.length - 1 && /[0-9A-Fa-f]/.test(val[i])) {
	                i++;
	            }
	            break;
	        }
	    }
	    if (i >= val.length) {
	        return undefined;
	    }
	    return val;
	};

	exports.parseColor = function parseColor(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    var red, green, blue, alpha = 1;
	    var parts;
	    var res = colorRegEx1.exec(val);
	    // is it #aaa or #ababab
	    if (res) {
	        var hex = val.substr(1);
	        if (hex.length === 3) {
	            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	        }
	        red = parseInt(hex.substr(0, 2), 16);
	        green = parseInt(hex.substr(2, 2), 16);
	        blue = parseInt(hex.substr(4, 2), 16);
	        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	    }

	    res = colorRegEx2.exec(val);
	    if (res) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 3) {
	            return undefined;
	        }
	        if (parts.every(percentRegEx.test.bind(percentRegEx))) {
	            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);
	            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);
	            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);
	        } else if (parts.every(integerRegEx.test.bind(integerRegEx))) {
	            red = parseInt(parts[0], 10);
	            green = parseInt(parts[1], 10);
	            blue = parseInt(parts[2], 10);
	        } else {
	            return undefined;
	        }
	        red = Math.min(255, Math.max(0, red));
	        green = Math.min(255, Math.max(0, green));
	        blue = Math.min(255, Math.max(0, blue));
	        return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	    }

	    res = colorRegEx3.exec(val);
	    if (res) {
	        parts = res[1].split(/\s*,\s*/);
	        if (parts.length !== 4) {
	            return undefined;
	        }
	        if (parts.slice(0, 3).every(percentRegEx.test.bind(percentRegEx))) {
	            red = Math.floor(parseFloat(parts[0].slice(0, -1)) * 255 / 100);
	            green = Math.floor(parseFloat(parts[1].slice(0, -1)) * 255 / 100);
	            blue = Math.floor(parseFloat(parts[2].slice(0, -1)) * 255 / 100);
	            alpha = parseFloat(parts[3]);
	        } else if (parts.slice(0, 3).every(integerRegEx.test.bind(integerRegEx))) {
	            red = parseInt(parts[0], 10);
	            green = parseInt(parts[1], 10);
	            blue = parseInt(parts[2], 10);
	            alpha = parseFloat(parts[3]);
	        } else {
	            return undefined;
	        }
	        if (isNaN(alpha)) {
	            alpha = 1;
	        }
	        red = Math.min(255, Math.max(0, red));
	        green = Math.min(255, Math.max(0, green));
	        blue = Math.min(255, Math.max(0, blue));
	        alpha = Math.min(1, Math.max(0, alpha));
	        if (alpha === 1) {
	            return 'rgb(' + red + ', ' + green + ', ' + blue + ')';
	        }
	        return 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + alpha + ')';
	    }

	    if (type === exports.TYPES.COLOR) {
	        return val;
	    }
	    return undefined;
	};

	exports.parseAngle = function parseAngle(val) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.ANGLE) {
	        return undefined;
	    }
	    var res = angleRegEx.exec(val);
	    var flt = parseFloat(res[1]);
	    if (res[2] === 'rad') {
	        flt *= 180 / Math.PI;
	    } else if (res[2] === 'grad') {
	        flt *= 360 / 400;
	    }

	    while (flt < 0) {
	        flt += 360;
	    }
	    while (flt > 360) {
	        flt -= 360;
	    }
	    return flt + 'deg';
	};

	exports.parseKeyword = function parseKeyword(val, valid_keywords) {
	    var type = exports.valueType(val);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        return val;
	    }
	    if (type !== exports.TYPES.KEYWORD) {
	        return undefined;
	    }
	    val = val.toString().toLowerCase();
	    var i;
	    for (i = 0; i < valid_keywords.length; i++) {
	        if (valid_keywords[i].toLowerCase() === val) {
	            return valid_keywords[i];
	        }
	    }
	    return undefined;
	};

	// utility to translate from border-width to borderWidth
	var dashedToCamelCase = function (dashed) {
	    var i;
	    var camel = '';
	    var nextCap = false;
	    for (i = 0; i < dashed.length; i++) {
	        if (dashed[i] !== '-') {
	            camel += nextCap ? dashed[i].toUpperCase() : dashed[i];
	            nextCap = false;
	        } else {
	            nextCap = true;
	        }
	    }
	    return camel;
	};
	exports.dashedToCamelCase = dashedToCamelCase;

	var is_space = /\s/;
	var opening_deliminators = ['"', '\'', '('];
	var closing_deliminators = ['"', '\'', ')'];
	// this splits on whitespace, but keeps quoted and parened parts together
	var getParts = function (str) {
	    var deliminator_stack = [];
	    var length = str.length;
	    var i;
	    var parts = [];
	    var current_part = '';
	    var opening_index;
	    var closing_index;
	    for (i = 0; i < length; i++) {
	        opening_index = opening_deliminators.indexOf(str[i]);
	        closing_index = closing_deliminators.indexOf(str[i]);
	        if (is_space.test(str[i])) {
	            if (deliminator_stack.length === 0) {
	                parts.push(current_part);
	                current_part = '';
	            } else {
	                current_part += str[i];
	            }
	        } else {
	            if (str[i] === '\\') {
	                i++;
	                current_part += str[i];
	            } else {
	                current_part += str[i];
	                if (closing_index !== -1 && closing_index === deliminator_stack[deliminator_stack.length - 1]) {
	                    deliminator_stack.pop();
	                } else if (opening_index !== -1) {
	                    deliminator_stack.push(opening_index);
	                }
	            }
	        }
	    }
	    if (current_part !== '') {
	        parts.push(current_part);
	    }
	    return parts;
	};

	/*
	 * this either returns undefined meaning that it isn't valid
	 * or returns an object where the keys are dashed short
	 * hand properties and the values are the values to set
	 * on them
	 */
	exports.shorthandParser = function parse(v, shorthand_for) {
	    var obj = {};
	    var type = exports.valueType(v);
	    if (type === exports.TYPES.NULL_OR_EMPTY_STR) {
	        Object.keys(shorthand_for).forEach(function (property) {
	            obj[property] = v;
	        });
	        return obj;
	    }

	    if (typeof v === 'number') {
	        v = v.toString();
	    }

	    if (typeof v !== 'string') {
	        return undefined;
	    }

	    if (v.toLowerCase() === 'inherit') {
	        return {};
	    }
	    var parts = getParts(v);
	    var valid = true;
	    parts.forEach(function (part) {
	        var part_valid = false;
	        Object.keys(shorthand_for).forEach(function (property) {
	            if (shorthand_for[property].isValid(part)) {
	                part_valid = true;
	                obj[property] = part;
	            }
	        });
	        valid = valid && part_valid;
	    });
	    if (!valid) {
	        return undefined;
	    }
	    return obj;
	};

	exports.shorthandSetter = function (property, shorthand_for) {
	    return function (v) {
	        var obj = exports.shorthandParser(v, shorthand_for);
	        if (obj === undefined) {
	            return;
	        }
	        //console.log('shorthandSetter for:', property, 'obj:', obj);
	        Object.keys(obj).forEach(function (subprop) {
	            // in case subprop is an implicit property, this will clear
	            // *its* subpropertiesX
	            var camel = dashedToCamelCase(subprop);
	            this[camel] = obj[subprop];
	            // in case it gets translated into something else (0 -> 0px)
	            obj[subprop] = this[camel];
	            this.removeProperty(subprop);
	            this._values[subprop] = obj[subprop];
	        }, this);
	        Object.keys(shorthand_for).forEach(function (subprop) {
	            if (!obj.hasOwnProperty(subprop)) {
	                this.removeProperty(subprop);
	                delete this._values[subprop];
	            }
	        }, this);
	        // in case the value is something like 'none' that removes all values,
	        // check that the generated one is not empty, first remove the property
	        // if it already exists, then call the shorthandGetter, if it's an empty
	        // string, don't set the property
	        this.removeProperty(property);
	        var calculated = exports.shorthandGetter(property, shorthand_for).call(this);
	        if (calculated !== '') {
	            this._setProperty(property, calculated);
	        }
	    };
	};

	exports.shorthandGetter = function (property, shorthand_for) {
	    return function () {
	        if (this._values[property] !== undefined) {
	            return this.getPropertyValue(property);
	        }
	        return Object.keys(shorthand_for).map(function (subprop) {
	            return this.getPropertyValue(subprop);
	        }, this).filter(function (value) {
	            return value !== '';
	        }).join(' ');
	    };
	};

	// isValid(){1,4} | inherit
	// if one, it applies to all
	// if two, the first applies to the top and bottom, and the second to left and right
	// if three, the first applies to the top, the second to left and right, the third bottom
	// if four, top, right, bottom, left
	exports.implicitSetter = function (property_before, property_after, isValid, parser) {
	    property_after = property_after || '';
	    if (property_after !== '') {
	        property_after = '-' + property_after;
	    }

	    return function (v) {
	        if (typeof v === 'number') {
	            v = v.toString();
	        }
	        if (typeof v !== 'string') {
	            return undefined;
	        }
	        var parts;
	        if (v.toLowerCase() === 'inherit' || v === '') {
	            parts = [v];
	        } else {
	            parts = getParts(v);
	        }
	        if (parts.length < 1 || parts.length > 4) {
	            return undefined;
	        }

	        if (!parts.every(isValid)) {
	            return undefined;
	        }

	        this._setProperty(property_before + property_after, parts.map(function (part) { return parser(part); }).join(' '));

	        this.removeProperty(property_before + '-top' + property_after);
	        this.removeProperty(property_before + '-right' + property_after);
	        this.removeProperty(property_before + '-bottom' + property_after);
	        this.removeProperty(property_before + '-left' + property_after);
	        switch (parts.length) {
	        case 1:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[0]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[0]);
	            this._values[property_before + '-left' + property_after] = parser(parts[0]);
	            return v;
	        case 2:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[0]);
	            this._values[property_before + '-left' + property_after] = parser(parts[1]);
	            return v;
	        case 3:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[2]);
	            this._values[property_before + '-left' + property_after] = parser(parts[1]);
	            return v;
	        case 4:
	            this._values[property_before + '-top' + property_after] = parser(parts[0]);
	            this._values[property_before + '-right' + property_after] = parser(parts[1]);
	            this._values[property_before + '-bottom' + property_after] = parser(parts[2]);
	            this._values[property_before + '-left' + property_after] = parser(parts[3]);
	            return v;
	        }
	    };
	};

	var camel_to_dashed = /[A-Z]/g;
	/*jslint regexp: true*/
	var first_segment = /^\([^\-]\)-/;
	/*jslint regexp: false*/
	var vendor_prefixes = ['o', 'moz', 'ms', 'webkit'];
	exports.camelToDashed = function (camel_case) {
	    var match;
	    var dashed = camel_case.replace(camel_to_dashed, '-$&').toLowerCase();
	    match = dashed.match(first_segment);
	    if (match && vendor_prefixes.indexOf(match[1]) !== -1) {
	        dashed = '-' + dashed;
	    }
	    return dashed;
	};


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * The main AWS namespace
	 */
	var AWS = { util: __webpack_require__(5) };

	/**
	 * @api private
	 * @!macro [new] nobrowser
	 *   @note This feature is not supported in the browser environment of the SDK.
	 */
	var _hidden = {}; _hidden.toString(); // hack to parse macro

	module.exports = AWS;

	AWS.util.update(AWS, {

	  /**
	   * @constant
	   */
	  VERSION: '2.2.21',

	  /**
	   * @api private
	   */
	  Signers: {},

	  /**
	   * @api private
	   */
	  Protocol: {
	    Json: __webpack_require__(61),
	    Query: __webpack_require__(140),
	    Rest: __webpack_require__(37),
	    RestJson: __webpack_require__(141),
	    RestXml: __webpack_require__(142)
	  },

	  /**
	   * @api private
	   */
	  XML: {
	    Builder: __webpack_require__(654),
	    Parser: null // conditionally set based on environment
	  },

	  /**
	   * @api private
	   */
	  JSON: {
	    Builder: __webpack_require__(59),
	    Parser: __webpack_require__(60)
	  },

	  /**
	   * @api private
	   */
	  Model: {
	    Api: __webpack_require__(135),
	    Operation: __webpack_require__(137),
	    Shape: __webpack_require__(31),
	    Paginator: __webpack_require__(138),
	    ResourceWaiter: __webpack_require__(139)
	  },

	  util: __webpack_require__(5),

	  /**
	   * @api private
	   */
	  apiLoader: function() { throw new Error('No API loader set'); }
	});

	__webpack_require__(645);

	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(630);
	__webpack_require__(631);
	__webpack_require__(624);
	__webpack_require__(628);

	__webpack_require__(623);
	__webpack_require__(58);
	__webpack_require__(143);
	__webpack_require__(635);
	__webpack_require__(641);
	__webpack_require__(643);
	__webpack_require__(642);
	__webpack_require__(648);
	__webpack_require__(638);

	/**
	 * @readonly
	 * @return [AWS.SequentialExecutor] a collection of global event listeners that
	 *   are attached to every sent request.
	 * @see AWS.Request AWS.Request for a list of events to listen for
	 * @example Logging the time taken to send a request
	 *   AWS.events.on('send', function startSend(resp) {
	 *     resp.startTime = new Date().getTime();
	 *   }).on('complete', function calculateTime(resp) {
	 *     var time = (new Date().getTime() - resp.startTime) / 1000;
	 *     console.log('Request took ' + time + ' seconds');
	 *   });
	 *
	 *   new AWS.S3().listBuckets(); // prints 'Request took 0.285 seconds'
	 */
	AWS.events = new AWS.SequentialExecutor();


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	var path = __webpack_require__(14);
	var url = __webpack_require__(9);

	exports.toFileUrl = function (fileName) {
	  // Beyond just the `path.resolve`, this is mostly for the benefit of Windows,
	  // where we need to convert "\" to "/" and add an extra "/" prefix before the
	  // drive letter.
	  var pathname = path.resolve(process.cwd(), fileName).replace(/\\/g, "/");
	  if (pathname[0] !== "/") {
	    pathname = "/" + pathname;
	  }

	  return "file://" + pathname;
	};

	/**
	 * Define a setter on an object
	 *
	 * This method replaces any existing setter but leaves getters in place.
	 *
	 * - `object` {Object} the object to define the setter on
	 * - `property` {String} the name of the setter
	 * - `setterFn` {Function} the setter
	 */
	exports.defineSetter = function defineSetter(object, property, setterFn) {
	  var descriptor = Object.getOwnPropertyDescriptor(object, property) || {
	    configurable: true,
	    enumerable: true
	  };

	  descriptor.set = setterFn;

	  Object.defineProperty(object, property, descriptor);
	};

	/**
	 * Define a getter on an object
	 *
	 * This method replaces any existing getter but leaves setters in place.
	 *
	 * - `object` {Object} the object to define the getter on
	 * - `property` {String} the name of the getter
	 * - `getterFn` {Function} the getter
	 */
	exports.defineGetter = function defineGetter(object, property, getterFn) {
	  var descriptor = Object.getOwnPropertyDescriptor(object, property) || {
	    configurable: true,
	    enumerable: true
	  };

	  descriptor.get = getterFn;

	  Object.defineProperty(object, property, descriptor);
	};

	/**
	 * Create an object with the given prototype
	 *
	 * Optionally augment the created object.
	 *
	 * - `prototype` {Object} the created object's prototype
	 * - `[properties]` {Object} properties to attach to the created object
	 */
	exports.createFrom = function createFrom(prototype, properties) {
	  properties = properties || {};

	  var descriptors = {};
	  Object.getOwnPropertyNames(properties).forEach(function (name) {
	    descriptors[name] = Object.getOwnPropertyDescriptor(properties, name);
	  });

	  return Object.create(prototype, descriptors);
	};

	/**
	 * Create an inheritance relationship between two classes
	 *
	 * Optionally augment the inherited prototype.
	 *
	 * - `Superclass` {Function} the inherited class
	 * - `Subclass` {Function} the inheriting class
	 * - `[properties]` {Object} properties to attach to the inherited prototype
	 */
	exports.inheritFrom = function inheritFrom(Superclass, Subclass, properties) {
	  properties = properties || {};

	  Object.defineProperty(properties, "constructor", {
	    value: Subclass,
	    writable: true,
	    configurable: true
	  });

	  Subclass.prototype = exports.createFrom(Superclass.prototype, properties);
	};

	/**
	 * Define a list of constants on a constructor and its .prototype
	 *
	 * - `Constructor` {Function} the constructor to define the constants on
	 * - `propertyMap` {Object}  key/value map of properties to define
	 */
	exports.addConstants = function addConstants(Constructor, propertyMap) {
	  for (var property in propertyMap) {
	    var value = propertyMap[property];
	    addConstant(Constructor, property, value);
	    addConstant(Constructor.prototype, property, value);
	  }
	};

	function addConstant(object, property, value) {
	  Object.defineProperty(object, property, {
	    configurable: false,
	    enumerable: true,
	    value: value,
	    writable: false
	  });
	}

	var memoizeQueryTypeCounter = 0;

	/**
	 * Returns a version of a method that memoizes specific types of calls on the object
	 *
	 * - `fn` {Function} the method to be memozied
	 */
	exports.memoizeQuery = function memoizeQuery(fn) {
	  // Only memoize query functions with arity <= 2
	  if (fn.length > 2) {
	    return fn;
	  }

	  var type = memoizeQueryTypeCounter++;

	  return function () {
	    if (!this._memoizedQueries) {
	      return fn.apply(this, arguments);
	    }

	    if (!this._memoizedQueries[type]) {
	      this._memoizedQueries[type] = Object.create(null);
	    }

	    var key;
	    if (arguments.length === 1 && typeof arguments[0] === "string") {
	      key = arguments[0];
	    } else if (arguments.length === 2 && typeof arguments[0] === "string" && typeof arguments[1] === "string") {
	      key = arguments[0] + "::" + arguments[1];
	    } else {
	      return fn.apply(this, arguments);
	    }

	    if (!(key in this._memoizedQueries[type])) {
	      this._memoizedQueries[type][key] = fn.apply(this, arguments);
	    }
	    return this._memoizedQueries[type][key];
	  };
	};

	/**
	* A slightly-more-compliant version of `url.resolve`, taking care of a few Node bugs.
	*/
	exports.resolveHref = function resolveHref(baseUrl, href) {
	  var about = "about:blank";

	  // if we're redirecting to another site on about:blank, just let it through
	  if (href.substring(0, about.length) === about) {
	    return href;
	  }

	  // if we have to resolve from about:blank we need a bit of special logic
	  if (baseUrl.substring(0, about.length) === about) {
	    if (href.search(/^([A-Za-z0-9]+):/) === 0) { // we have an absolute url
	      baseUrl = href;
	      href = "";
	    } else if (href[0] === "#") { // we have a location hash on about:blank
	      return baseUrl.split(/#/)[0] + href;
	    } else if (!href) { // we just have some base url
	      return baseUrl;
	    } else { // must be a file url
	      baseUrl = "file://" + href;
	      href = "";
	    }
	  }

	  if (baseUrl === resolveHref.memoizedUrl && resolveHref.cache && resolveHref.cache[href]) {
	    return resolveHref.cache[href];
	  }

	  // When switching protocols, the path doesn't get canonicalized (i.e. .s and ..s are still left):
	  // https://github.com/joyent/node/issues/5453
	  var intermediate = url.resolve(baseUrl, href);

	  // This canonicalizes the path, at the cost of overwriting the hash.
	  var nextStep = url.resolve(intermediate, "#");

	  // But it breaks file URLs by removing their colon O_o, so put that back.
	  nextStep = nextStep.replace(/^file:\/\/([a-z])\//i, "file:///$1:/");

	  // So, insert the hash back in, if there was one.
	  var parsed = url.parse(intermediate);
	  var fixed = nextStep.slice(0, -1) + (parsed.hash || "");

	  // Finally, fix file:/// URLs on Windows, where Node removes their drive letters:
	  // https://github.com/joyent/node/issues/5452
	  if (/^file\:\/\/\/[a-z]\:\//i.test(baseUrl) && /^file\:\/\/\//.test(fixed) &&
	      !/^file\:\/\/\/[a-z]\:\//i.test(fixed)) {
	    fixed = fixed.replace(/^file\:\/\/\//, baseUrl.substring(0, 11));
	  }

	  // HORRIBLE HACK: encode \u00E4 correctly just so that we pass
	  // https://github.com/w3c/web-platform-tests/blob/e75f01a689a3481f5c773315c2c2527712cf8c2c/dom/nodes/DOMImplementation-createHTMLDocument.html#L71-L72
	  // Eventually we should replace this with a real URL parser based on the URL standard.
	  fixed = fixed.replace(/\u00E4/, "%C3%A4");

	  if (baseUrl !== resolveHref.memoizedUrl) {
	    resolveHref.memoizedUrl = baseUrl;
	    resolveHref.cache = {};
	  }
	  resolveHref.cache[href] = fixed;

	  return fixed;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* eslint guard-for-in:0 */

	var cryptoLib = __webpack_require__(667);
	var Buffer = __webpack_require__(7).Buffer;
	var AWS;

	/**
	 * A set of utility methods for use with the AWS SDK.
	 *
	 * @!attribute abort
	 *   Return this value from an iterator function {each} or {arrayEach}
	 *   to break out of the iteration.
	 *   @example Breaking out of an iterator function
	 *     AWS.util.each({a: 1, b: 2, c: 3}, function(key, value) {
	 *       if (key == 'b') return AWS.util.abort;
	 *     });
	 *   @see each
	 *   @see arrayEach
	 * @api private
	 */
	var util = {
	  engine: function engine() {
	    if (util.isBrowser() && typeof navigator !== 'undefined') {
	      return navigator.userAgent;
	    } else {
	      return process.platform + '/' + process.version;
	    }
	  },

	  userAgent: function userAgent() {
	    var name = util.isBrowser() ? 'js' : 'nodejs';
	    var agent = 'aws-sdk-' + name + '/' + __webpack_require__(2).VERSION;
	    if (name === 'nodejs') agent += ' ' + util.engine();
	    return agent;
	  },

	  isBrowser: function isBrowser() { return process && process.browser; },
	  isNode: function isNode() { return !util.isBrowser(); },
	  nodeRequire: function nodeRequire(module) {
	    if (util.isNode()) return !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	  },
	  multiRequire: function multiRequire(module1, module2) {
	    return !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	  },

	  uriEscape: function uriEscape(string) {
	    var output = encodeURIComponent(string);
	    output = output.replace(/[^A-Za-z0-9_.~\-%]+/g, escape);

	    // AWS percent-encodes some extra non-standard characters in a URI
	    output = output.replace(/[*]/g, function(ch) {
	      return '%' + ch.charCodeAt(0).toString(16).toUpperCase();
	    });

	    return output;
	  },

	  uriEscapePath: function uriEscapePath(string) {
	    var parts = [];
	    util.arrayEach(string.split('/'), function (part) {
	      parts.push(util.uriEscape(part));
	    });
	    return parts.join('/');
	  },

	  urlParse: function urlParse(url) {
	    return __webpack_require__(9).parse(url);
	  },

	  urlFormat: function urlFormat(url) {
	    return __webpack_require__(9).format(url);
	  },

	  queryStringParse: function queryStringParse(qs) {
	    return __webpack_require__(685).parse(qs);
	  },

	  queryParamsToString: function queryParamsToString(params) {
	    var items = [];
	    var escape = util.uriEscape;
	    var sortedKeys = Object.keys(params).sort();

	    util.arrayEach(sortedKeys, function(name) {
	      var value = params[name];
	      var ename = escape(name);
	      var result = ename + '=';
	      if (Array.isArray(value)) {
	        var vals = [];
	        util.arrayEach(value, function(item) { vals.push(escape(item)); });
	        result = ename + '=' + vals.sort().join('&' + ename + '=');
	      } else if (value !== undefined && value !== null) {
	        result = ename + '=' + escape(value);
	      }
	      items.push(result);
	    });

	    return items.join('&');
	  },

	  readFileSync: function readFileSync(path) {
	    if (typeof window !== 'undefined') return null;
	    return util.nodeRequire('fs').readFileSync(path, 'utf-8');
	  },

	  base64: {

	    encode: function encode64(string) {
	      return new Buffer(string).toString('base64');
	    },

	    decode: function decode64(string) {
	      return new Buffer(string, 'base64');
	    }

	  },

	  Buffer: Buffer,

	  buffer: {
	    toStream: function toStream(buffer) {
	      if (!util.Buffer.isBuffer(buffer)) buffer = new util.Buffer(buffer);

	      var readable = new (util.nodeRequire('stream').Readable)();
	      var pos = 0;
	      readable._read = function(size) {
	        if (pos >= buffer.length) return readable.push(null);

	        var end = pos + size;
	        if (end > buffer.length) end = buffer.length;
	        readable.push(buffer.slice(pos, end));
	        pos = end;
	      };

	      return readable;
	    },

	    /**
	     * Concatenates a list of Buffer objects.
	     */
	    concat: function(buffers) {
	      var length = 0,
	          offset = 0,
	          buffer = null, i;

	      for (i = 0; i < buffers.length; i++) {
	        length += buffers[i].length;
	      }

	      buffer = new Buffer(length);

	      for (i = 0; i < buffers.length; i++) {
	        buffers[i].copy(buffer, offset);
	        offset += buffers[i].length;
	      }

	      return buffer;
	    }
	  },

	  string: {
	    byteLength: function byteLength(string) {
	      if (string === null || string === undefined) return 0;
	      if (typeof string === 'string') string = new Buffer(string);

	      if (typeof string.byteLength === 'number') {
	        return string.byteLength;
	      } else if (typeof string.length === 'number') {
	        return string.length;
	      } else if (typeof string.size === 'number') {
	        return string.size;
	      } else if (typeof string.path === 'string') {
	        return util.nodeRequire('fs').lstatSync(string.path).size;
	      } else {
	        throw util.error(new Error('Cannot determine length of ' + string),
	          { object: string });
	      }
	    },

	    upperFirst: function upperFirst(string) {
	      return string[0].toUpperCase() + string.substr(1);
	    },

	    lowerFirst: function lowerFirst(string) {
	      return string[0].toLowerCase() + string.substr(1);
	    }
	  },

	  ini: {
	    parse: function string(ini) {
	      var currentSection, map = {};
	      util.arrayEach(ini.split(/\r?\n/), function(line) {
	        line = line.split(/(^|\s);/)[0]; // remove comments
	        var section = line.match(/^\s*\[([^\[\]]+)\]\s*$/);
	        if (section) {
	          currentSection = section[1];
	        } else if (currentSection) {
	          var item = line.match(/^\s*(.+?)\s*=\s*(.+?)\s*$/);
	          if (item) {
	            map[currentSection] = map[currentSection] || {};
	            map[currentSection][item[1]] = item[2];
	          }
	        }
	      });

	      return map;
	    }
	  },

	  fn: {
	    noop: function() {},

	    /**
	     * Turn a synchronous function into as "async" function by making it call
	     * a callback. The underlying function is called with all but the last argument,
	     * which is treated as the callback. The callback is passed passed a first argument
	     * of null on success to mimick standard node callbacks.
	     */
	    makeAsync: function makeAsync(fn, expectedArgs) {
	      if (expectedArgs && expectedArgs <= fn.length) {
	        return fn;
	      }

	      return function() {
	        var args = Array.prototype.slice.call(arguments, 0);
	        var callback = args.pop();
	        var result = fn.apply(null, args);
	        callback(result);
	      };
	    }
	  },

	  jamespath: {
	    query: function query(expression, data) {
	      if (!data) return [];

	      var results = [];
	      var expressions = expression.split(/\s+\|\|\s+/);
	      util.arrayEach.call(this, expressions, function (expr) {
	        var objects = [data];
	        var tokens = expr.split('.');
	        util.arrayEach.call(this, tokens, function (token) {
	          var match = token.match('^(.+?)(?:\\[(-?\\d+|\\*|)\\])?$');
	          var newObjects = [];
	          util.arrayEach.call(this, objects, function (obj) {
	            if (match[1] === '*') {
	              util.arrayEach.call(this, obj, function (value) {
	                newObjects.push(value);
	              });
	            } else if (obj.hasOwnProperty(match[1])) {
	              newObjects.push(obj[match[1]]);
	            }
	          });
	          objects = newObjects;

	          // handle indexing (token[0], token[-1])
	          if (match[2] !== undefined) {
	            newObjects = [];
	            util.arrayEach.call(this, objects, function (obj) {
	              if (Array.isArray(obj)) {
	                if (match[2] === '*' || match[2] === '') {
	                  newObjects = newObjects.concat(obj);
	                } else {
	                  var idx = parseInt(match[2], 10);
	                  if (idx < 0) idx = obj.length + idx; // negative indexing
	                  newObjects.push(obj[idx]);
	                }
	              }
	            });
	            objects = newObjects;
	          }

	          if (objects.length === 0) return util.abort;
	        });

	        if (objects.length > 0) {
	          results = objects;
	          return util.abort;
	        }
	      });

	      return results;
	    },

	    find: function find(expression, data) {
	      return util.jamespath.query(expression, data)[0];
	    }
	  },

	  /**
	   * Date and time utility functions.
	   */
	  date: {

	    /**
	     * @return [Date] the current JavaScript date object. Since all
	     *   AWS services rely on this date object, you can override
	     *   this function to provide a special time value to AWS service
	     *   requests.
	     */
	    getDate: function getDate() {
	      if (!AWS) AWS = __webpack_require__(2);
	      if (AWS.config.systemClockOffset) { // use offset when non-zero
	        return new Date(new Date().getTime() + AWS.config.systemClockOffset);
	      } else {
	        return new Date();
	      }
	    },

	    /**
	     * @return [String] the date in ISO-8601 format
	     */
	    iso8601: function iso8601(date) {
	      if (date === undefined) { date = util.date.getDate(); }
	      return date.toISOString().replace(/\.\d{3}Z$/, 'Z');
	    },

	    /**
	     * @return [String] the date in RFC 822 format
	     */
	    rfc822: function rfc822(date) {
	      if (date === undefined) { date = util.date.getDate(); }
	      return date.toUTCString();
	    },

	    /**
	     * @return [Integer] the UNIX timestamp value for the current time
	     */
	    unixTimestamp: function unixTimestamp(date) {
	      if (date === undefined) { date = util.date.getDate(); }
	      return date.getTime() / 1000;
	    },

	    /**
	     * @param [String,number,Date] date
	     * @return [Date]
	     */
	    from: function format(date) {
	      if (typeof date === 'number') {
	        return new Date(date * 1000); // unix timestamp
	      } else {
	        return new Date(date);
	      }
	    },

	    /**
	     * Given a Date or date-like value, this function formats the
	     * date into a string of the requested value.
	     * @param [String,number,Date] date
	     * @param [String] formatter Valid formats are:
	     #   * 'iso8601'
	     #   * 'rfc822'
	     #   * 'unixTimestamp'
	     * @return [String]
	     */
	    format: function format(date, formatter) {
	      if (!formatter) formatter = 'iso8601';
	      return util.date[formatter](util.date.from(date));
	    },

	    parseTimestamp: function parseTimestamp(value) {
	      if (typeof value === 'number') { // unix timestamp (number)
	        return new Date(value * 1000);
	      } else if (value.match(/^\d+$/)) { // unix timestamp
	        return new Date(value * 1000);
	      } else if (value.match(/^\d{4}/)) { // iso8601
	        return new Date(value);
	      } else if (value.match(/^\w{3},/)) { // rfc822
	        return new Date(value);
	      } else {
	        throw util.error(
	          new Error('unhandled timestamp format: ' + value),
	          {code: 'TimestampParserError'});
	      }
	    }

	  },

	  crypto: {
	    crc32Table: [
	     0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419,
	     0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4,
	     0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07,
	     0x90BF1D91, 0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,
	     0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856,
	     0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,
	     0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4,
	     0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,
	     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,
	     0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A,
	     0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599,
	     0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,
	     0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190,
	     0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F,
	     0x9FBFE4A5, 0xE8B8D433, 0x7807C9A2, 0x0F00F934, 0x9609A88E,
	     0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,
	     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED,
	     0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,
	     0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3,
	     0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,
	     0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A,
	     0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5,
	     0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010,
	     0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,
	     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17,
	     0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6,
	     0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,
	     0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,
	     0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 0xF00F9344,
	     0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,
	     0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A,
	     0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,
	     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1,
	     0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C,
	     0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF,
	     0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,
	     0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE,
	     0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31,
	     0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C,
	     0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,
	     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B,
	     0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,
	     0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1,
	     0x18B74777, 0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,
	     0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,
	     0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7,
	     0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66,
	     0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,
	     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605,
	     0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8,
	     0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B,
	     0x2D02EF8D],

	    crc32: function crc32(data) {
	      var tbl = util.crypto.crc32Table;
	      var crc = 0 ^ -1;

	      if (typeof data === 'string') {
	        data = new Buffer(data);
	      }

	      for (var i = 0; i < data.length; i++) {
	        var code = data.readUInt8(i);
	        crc = (crc >>> 8) ^ tbl[(crc ^ code) & 0xFF];
	      }
	      return (crc ^ -1) >>> 0;
	    },

	    hmac: function hmac(key, string, digest, fn) {
	      if (!digest) digest = 'binary';
	      if (digest === 'buffer') { digest = undefined; }
	      if (!fn) fn = 'sha256';
	      if (typeof string === 'string') string = new Buffer(string);
	      return cryptoLib.createHmac(fn, key).update(string).digest(digest);
	    },

	    md5: function md5(data, digest, callback) {
	      return util.crypto.hash('md5', data, digest, callback);
	    },

	    sha256: function sha256(data, digest, callback) {
	      return util.crypto.hash('sha256', data, digest, callback);
	    },

	    hash: function(algorithm, data, digest, callback) {
	      var hash = util.crypto.createHash(algorithm);
	      if (!digest) { digest = 'binary'; }
	      if (digest === 'buffer') { digest = undefined; }
	      if (typeof data === 'string') data = new Buffer(data);
	      var sliceFn = util.arraySliceFn(data);
	      var isBuffer = Buffer.isBuffer(data);
	      //Identifying objects with an ArrayBuffer as buffers
	      if (util.isBrowser() && data && data.buffer instanceof ArrayBuffer) isBuffer = true;

	      if (callback && typeof data === 'object' &&
	          typeof data.on === 'function' && !isBuffer) {
	        data.on('data', function(chunk) { hash.update(chunk); });
	        data.on('error', function(err) { callback(err); });
	        data.on('end', function() { callback(null, hash.digest(digest)); });
	      } else if (callback && sliceFn && !isBuffer &&
	                 typeof FileReader !== 'undefined') {
	        // this might be a File/Blob
	        var index = 0, size = 1024 * 512;
	        var reader = new FileReader();
	        reader.onerror = function() {
	          callback(new Error('Failed to read data.'));
	        };
	        reader.onload = function() {
	          var buf = new Buffer(new Uint8Array(reader.result));
	          hash.update(buf);
	          index += buf.length;
	          reader._continueReading();
	        };
	        reader._continueReading = function() {
	          if (index >= data.size) {
	            callback(null, hash.digest(digest));
	            return;
	          }

	          var back = index + size;
	          if (back > data.size) back = data.size;
	          reader.readAsArrayBuffer(sliceFn.call(data, index, back));
	        };

	        reader._continueReading();
	      } else {
	        if (util.isBrowser() && typeof data === 'object' && !isBuffer) {
	          data = new Buffer(new Uint8Array(data));
	        }
	        var out = hash.update(data).digest(digest);
	        if (callback) callback(null, out);
	        return out;
	      }
	    },

	    toHex: function toHex(data) {
	      var out = [];
	      for (var i = 0; i < data.length; i++) {
	        out.push(('0' + data.charCodeAt(i).toString(16)).substr(-2, 2));
	      }
	      return out.join('');
	    },

	    createHash: function createHash(algorithm) {
	      return cryptoLib.createHash(algorithm);
	    }

	  },

	  /** @!ignore */

	  /* Abort constant */
	  abort: {},

	  each: function each(object, iterFunction) {
	    for (var key in object) {
	      if (object.hasOwnProperty(key)) {
	        var ret = iterFunction.call(this, key, object[key]);
	        if (ret === util.abort) break;
	      }
	    }
	  },

	  arrayEach: function arrayEach(array, iterFunction) {
	    for (var idx in array) {
	      if (array.hasOwnProperty(idx)) {
	        var ret = iterFunction.call(this, array[idx], parseInt(idx, 10));
	        if (ret === util.abort) break;
	      }
	    }
	  },

	  update: function update(obj1, obj2) {
	    util.each(obj2, function iterator(key, item) {
	      obj1[key] = item;
	    });
	    return obj1;
	  },

	  merge: function merge(obj1, obj2) {
	    return util.update(util.copy(obj1), obj2);
	  },

	  copy: function copy(object) {
	    if (object === null || object === undefined) return object;
	    var dupe = {};
	    // jshint forin:false
	    for (var key in object) {
	      dupe[key] = object[key];
	    }
	    return dupe;
	  },

	  isEmpty: function isEmpty(obj) {
	    for (var prop in obj) {
	      if (obj.hasOwnProperty(prop)) {
	        return false;
	      }
	    }
	    return true;
	  },

	  arraySliceFn: function arraySliceFn(obj) {
	    var fn = obj.slice || obj.webkitSlice || obj.mozSlice;
	    return typeof fn === 'function' ? fn : null;
	  },

	  isType: function isType(obj, type) {
	    // handle cross-"frame" objects
	    if (typeof type === 'function') type = util.typeName(type);
	    return Object.prototype.toString.call(obj) === '[object ' + type + ']';
	  },

	  typeName: function typeName(type) {
	    if (type.hasOwnProperty('name')) return type.name;
	    var str = type.toString();
	    var match = str.match(/^\s*function (.+)\(/);
	    return match ? match[1] : str;
	  },

	  error: function error(err, options) {
	    var originalError = null;
	    if (typeof err.message === 'string' && err.message !== '') {
	      if (typeof options === 'string' || (options && options.message)) {
	        originalError = util.copy(err);
	        originalError.message = err.message;
	      }
	    }
	    err.message = err.message || null;

	    if (typeof options === 'string') {
	      err.message = options;
	    } else if (typeof options === 'object' && options !== null) {
	      util.update(err, options);
	      if (options.message)
	        err.message = options.message;
	      if (options.code || options.name)
	        err.code = options.code || options.name;
	      if (options.stack)
	        err.stack = options.stack;
	    }

	    if (typeof Object.defineProperty === 'function') {
	      Object.defineProperty(err, 'name', {writable: true, enumerable: false});
	      Object.defineProperty(err, 'message', {enumerable: true});
	    }

	    err.name = options && options.name || err.name || err.code || 'Error';
	    err.time = new Date();

	    if (originalError) err.originalError = originalError;

	    return err;
	  },

	  /**
	   * @api private
	   */
	  inherit: function inherit(klass, features) {
	    var newObject = null;
	    if (features === undefined) {
	      features = klass;
	      klass = Object;
	      newObject = {};
	    } else {
	      var ctor = function ConstructorWrapper() {};
	      ctor.prototype = klass.prototype;
	      newObject = new ctor();
	    }

	    // constructor not supplied, create pass-through ctor
	    if (features.constructor === Object) {
	      features.constructor = function() {
	        if (klass !== Object) {
	          return klass.apply(this, arguments);
	        }
	      };
	    }

	    features.constructor.prototype = newObject;
	    util.update(features.constructor.prototype, features);
	    features.constructor.__super__ = klass;
	    return features.constructor;
	  },

	  /**
	   * @api private
	   */
	  mixin: function mixin() {
	    var klass = arguments[0];
	    for (var i = 1; i < arguments.length; i++) {
	      // jshint forin:false
	      for (var prop in arguments[i].prototype) {
	        var fn = arguments[i].prototype[prop];
	        if (prop !== 'constructor') {
	          klass.prototype[prop] = fn;
	        }
	      }
	    }
	    return klass;
	  },

	  /**
	   * @api private
	   */
	  hideProperties: function hideProperties(obj, props) {
	    if (typeof Object.defineProperty !== 'function') return;

	    util.arrayEach(props, function (key) {
	      Object.defineProperty(obj, key, {
	        enumerable: false, writable: true, configurable: true });
	    });
	  },

	  /**
	   * @api private
	   */
	  property: function property(obj, name, value, enumerable, isValue) {
	    var opts = {
	      configurable: true,
	      enumerable: enumerable !== undefined ? enumerable : true
	    };
	    if (typeof value === 'function' && !isValue) {
	      opts.get = value;
	    }
	    else {
	      opts.value = value; opts.writable = true;
	    }

	    Object.defineProperty(obj, name, opts);
	  },

	  /**
	   * @api private
	   */
	  memoizedProperty: function memoizedProperty(obj, name, get, enumerable) {
	    var cachedValue = null;

	    // build enumerable attribute for each value with lazy accessor.
	    util.property(obj, name, function() {
	      if (cachedValue === null) {
	        cachedValue = get();
	      }
	      return cachedValue;
	    }, enumerable);
	  },

	  /**
	   * TODO Remove in major version revision
	   * This backfill populates response data without the
	   * top-level payload name.
	   *
	   * @api private
	   */
	  hoistPayloadMember: function hoistPayloadMember(resp) {
	    var req = resp.request;
	    var operation = req.operation;
	    var output = req.service.api.operations[operation].output;
	    if (output.payload) {
	      var payloadMember = output.members[output.payload];
	      var responsePayload = resp.data[output.payload];
	      if (payloadMember.type === 'structure') {
	        util.each(responsePayload, function(key, value) {
	          util.property(resp.data, key, value, false);
	        });
	      }
	    }
	  },

	  /**
	   * Compute SHA-256 checksums of streams
	   *
	   * @api private
	   */
	  computeSha256: function computeSha256(body, done) {
	    if (util.isNode()) {
	      var Stream = util.nodeRequire('stream').Stream;
	      var fs = util.nodeRequire('fs');
	      if (body instanceof Stream) {
	        if (typeof body.path === 'string') { // assume file object
	          body = fs.createReadStream(body.path);
	        } else { // TODO support other stream types
	          return done(new Error('Non-file stream objects are ' +
	                                'not supported with SigV4'));
	        }
	      }
	    }

	    util.crypto.sha256(body, 'hex', function(err, sha) {
	      if (err) done(err);
	      else done(null, sha);
	    });
	  },

	  /**
	   * @api private
	   */
	  isClockSkewed: function isClockSkewed(serverTime) {
	    if (serverTime) {
	      util.property(AWS.config, 'isClockSkewed',
	        Math.abs(new Date().getTime() - serverTime) >= 300000, false);
	      return AWS.config.isClockSkewed;
	    }
	  },

	  applyClockOffset: function applyClockOffset(serverTime) {
	    if (serverTime)
	      AWS.config.systemClockOffset = serverTime - new Date().getTime();
	  },

	  /**
	   * @api private
	   */
	  extractRequestId: function extractRequestId(resp) {
	    var requestId = resp.httpResponse.headers['x-amz-request-id'] ||
	                     resp.httpResponse.headers['x-amzn-requestid'];

	    if (!requestId && resp.data && resp.data.ResponseMetadata) {
	      requestId = resp.data.ResponseMetadata.RequestId;
	    }

	    if (requestId) {
	      resp.requestId = requestId;
	    }

	    if (resp.error) {
	      resp.error.requestId = requestId;
	    }
	  }
	};

	module.exports = util;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/**
	 * @license
	 * lodash 3.10.1 (Custom Build) <https://lodash.com/>
	 * Build: `lodash modern -d -o ./index.js`
	 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
	 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
	 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	 * Available under MIT license <https://lodash.com/license>
	 */
	;(function() {

	  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
	  var undefined;

	  /** Used as the semantic version number. */
	  var VERSION = '3.10.1';

	  /** Used to compose bitmasks for wrapper metadata. */
	  var BIND_FLAG = 1,
	      BIND_KEY_FLAG = 2,
	      CURRY_BOUND_FLAG = 4,
	      CURRY_FLAG = 8,
	      CURRY_RIGHT_FLAG = 16,
	      PARTIAL_FLAG = 32,
	      PARTIAL_RIGHT_FLAG = 64,
	      ARY_FLAG = 128,
	      REARG_FLAG = 256;

	  /** Used as default options for `_.trunc`. */
	  var DEFAULT_TRUNC_LENGTH = 30,
	      DEFAULT_TRUNC_OMISSION = '...';

	  /** Used to detect when a function becomes hot. */
	  var HOT_COUNT = 150,
	      HOT_SPAN = 16;

	  /** Used as the size to enable large array optimizations. */
	  var LARGE_ARRAY_SIZE = 200;

	  /** Used to indicate the type of lazy iteratees. */
	  var LAZY_FILTER_FLAG = 1,
	      LAZY_MAP_FLAG = 2;

	  /** Used as the `TypeError` message for "Functions" methods. */
	  var FUNC_ERROR_TEXT = 'Expected a function';

	  /** Used as the internal argument placeholder. */
	  var PLACEHOLDER = '__lodash_placeholder__';

	  /** `Object#toString` result references. */
	  var argsTag = '[object Arguments]',
	      arrayTag = '[object Array]',
	      boolTag = '[object Boolean]',
	      dateTag = '[object Date]',
	      errorTag = '[object Error]',
	      funcTag = '[object Function]',
	      mapTag = '[object Map]',
	      numberTag = '[object Number]',
	      objectTag = '[object Object]',
	      regexpTag = '[object RegExp]',
	      setTag = '[object Set]',
	      stringTag = '[object String]',
	      weakMapTag = '[object WeakMap]';

	  var arrayBufferTag = '[object ArrayBuffer]',
	      float32Tag = '[object Float32Array]',
	      float64Tag = '[object Float64Array]',
	      int8Tag = '[object Int8Array]',
	      int16Tag = '[object Int16Array]',
	      int32Tag = '[object Int32Array]',
	      uint8Tag = '[object Uint8Array]',
	      uint8ClampedTag = '[object Uint8ClampedArray]',
	      uint16Tag = '[object Uint16Array]',
	      uint32Tag = '[object Uint32Array]';

	  /** Used to match empty string literals in compiled template source. */
	  var reEmptyStringLeading = /\b__p \+= '';/g,
	      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
	      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

	  /** Used to match HTML entities and HTML characters. */
	  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
	      reUnescapedHtml = /[&<>"'`]/g,
	      reHasEscapedHtml = RegExp(reEscapedHtml.source),
	      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

	  /** Used to match template delimiters. */
	  var reEscape = /<%-([\s\S]+?)%>/g,
	      reEvaluate = /<%([\s\S]+?)%>/g,
	      reInterpolate = /<%=([\s\S]+?)%>/g;

	  /** Used to match property names within property paths. */
	  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	      reIsPlainProp = /^\w*$/,
	      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	  /**
	   * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	   * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	   */
	  var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	      reHasRegExpChars = RegExp(reRegExpChars.source);

	  /** Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks). */
	  var reComboMark = /[\u0300-\u036f\ufe20-\ufe23]/g;

	  /** Used to match backslashes in property paths. */
	  var reEscapeChar = /\\(\\)?/g;

	  /** Used to match [ES template delimiters](http://ecma-international.org/ecma-262/6.0/#sec-template-literal-lexical-components). */
	  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

	  /** Used to match `RegExp` flags from their coerced string values. */
	  var reFlags = /\w*$/;

	  /** Used to detect hexadecimal string values. */
	  var reHasHexPrefix = /^0[xX]/;

	  /** Used to detect host constructors (Safari > 5). */
	  var reIsHostCtor = /^\[object .+?Constructor\]$/;

	  /** Used to detect unsigned integer values. */
	  var reIsUint = /^\d+$/;

	  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
	  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

	  /** Used to ensure capturing order of template delimiters. */
	  var reNoMatch = /($^)/;

	  /** Used to match unescaped characters in compiled string literals. */
	  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

	  /** Used to match words to create compound words. */
	  var reWords = (function() {
	    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
	        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

	    return RegExp(upper + '+(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
	  }());

	  /** Used to assign default `context` object properties. */
	  var contextProps = [
	    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
	    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
	    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'isFinite',
	    'parseFloat', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
	    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap'
	  ];

	  /** Used to make template sourceURLs easier to identify. */
	  var templateCounter = -1;

	  /** Used to identify `toStringTag` values of typed arrays. */
	  var typedArrayTags = {};
	  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	  typedArrayTags[uint32Tag] = true;
	  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	  /** Used to identify `toStringTag` values supported by `_.clone`. */
	  var cloneableTags = {};
	  cloneableTags[argsTag] = cloneableTags[arrayTag] =
	  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	  cloneableTags[dateTag] = cloneableTags[float32Tag] =
	  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	  cloneableTags[numberTag] = cloneableTags[objectTag] =
	  cloneableTags[regexpTag] = cloneableTags[stringTag] =
	  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	  cloneableTags[errorTag] = cloneableTags[funcTag] =
	  cloneableTags[mapTag] = cloneableTags[setTag] =
	  cloneableTags[weakMapTag] = false;

	  /** Used to map latin-1 supplementary letters to basic latin letters. */
	  var deburredLetters = {
	    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	    '\xc7': 'C',  '\xe7': 'c',
	    '\xd0': 'D',  '\xf0': 'd',
	    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
	    '\xd1': 'N',  '\xf1': 'n',
	    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
	    '\xc6': 'Ae', '\xe6': 'ae',
	    '\xde': 'Th', '\xfe': 'th',
	    '\xdf': 'ss'
	  };

	  /** Used to map characters to HTML entities. */
	  var htmlEscapes = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#39;',
	    '`': '&#96;'
	  };

	  /** Used to map HTML entities to characters. */
	  var htmlUnescapes = {
	    '&amp;': '&',
	    '&lt;': '<',
	    '&gt;': '>',
	    '&quot;': '"',
	    '&#39;': "'",
	    '&#96;': '`'
	  };

	  /** Used to determine if values are of the language type `Object`. */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used to escape characters for inclusion in compiled regexes. */
	  var regexpEscapes = {
	    '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	    '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	    'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	    'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	    'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	  };

	  /** Used to escape characters for inclusion in compiled string literals. */
	  var stringEscapes = {
	    '\\': '\\',
	    "'": "'",
	    '\n': 'n',
	    '\r': 'r',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  /** Detect free variable `exports`. */
	  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

	  /** Detect free variable `module`. */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js. */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global && global.Object && global;

	  /** Detect free variable `self`. */
	  var freeSelf = objectTypes[typeof self] && self && self.Object && self;

	  /** Detect free variable `window`. */
	  var freeWindow = objectTypes[typeof window] && window && window.Object && window;

	  /** Detect the popular CommonJS extension `module.exports`. */
	  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

	  /**
	   * Used as a reference to the global object.
	   *
	   * The `this` value is used if it's the global object to avoid Greasemonkey's
	   * restricted `window` object, otherwise the `window` object is used.
	   */
	  var root = freeGlobal || ((freeWindow !== (this && this.window)) && freeWindow) || freeSelf || this;

	  /*--------------------------------------------------------------------------*/

	  /**
	   * The base implementation of `compareAscending` which compares values and
	   * sorts them in ascending order without guaranteeing a stable sort.
	   *
	   * @private
	   * @param {*} value The value to compare.
	   * @param {*} other The other value to compare.
	   * @returns {number} Returns the sort order indicator for `value`.
	   */
	  function baseCompareAscending(value, other) {
	    if (value !== other) {
	      var valIsNull = value === null,
	          valIsUndef = value === undefined,
	          valIsReflexive = value === value;

	      var othIsNull = other === null,
	          othIsUndef = other === undefined,
	          othIsReflexive = other === other;

	      if ((value > other && !othIsNull) || !valIsReflexive ||
	          (valIsNull && !othIsUndef && othIsReflexive) ||
	          (valIsUndef && othIsReflexive)) {
	        return 1;
	      }
	      if ((value < other && !valIsNull) || !othIsReflexive ||
	          (othIsNull && !valIsUndef && valIsReflexive) ||
	          (othIsUndef && valIsReflexive)) {
	        return -1;
	      }
	    }
	    return 0;
	  }

	  /**
	   * The base implementation of `_.findIndex` and `_.findLastIndex` without
	   * support for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {Function} predicate The function invoked per iteration.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseFindIndex(array, predicate, fromRight) {
	    var length = array.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      if (predicate(array[index], index, array)) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.indexOf` without support for binary searches.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {*} value The value to search for.
	   * @param {number} fromIndex The index to search from.
	   * @returns {number} Returns the index of the matched value, else `-1`.
	   */
	  function baseIndexOf(array, value, fromIndex) {
	    if (value !== value) {
	      return indexOfNaN(array, fromIndex);
	    }
	    var index = fromIndex - 1,
	        length = array.length;

	    while (++index < length) {
	      if (array[index] === value) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * The base implementation of `_.isFunction` without support for environments
	   * with incorrect `typeof` results.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	   */
	  function baseIsFunction(value) {
	    // Avoid a Chakra JIT bug in compatibility modes of IE 11.
	    // See https://github.com/jashkenas/underscore/issues/1621 for more details.
	    return typeof value == 'function' || false;
	  }

	  /**
	   * Converts `value` to a string if it's not one. An empty string is returned
	   * for `null` or `undefined` values.
	   *
	   * @private
	   * @param {*} value The value to process.
	   * @returns {string} Returns the string.
	   */
	  function baseToString(value) {
	    return value == null ? '' : (value + '');
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the first character not found in `chars`.
	   */
	  function charsLeftIndex(string, chars) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last character
	   * of `string` that is not found in `chars`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @param {string} chars The characters to find.
	   * @returns {number} Returns the index of the last character not found in `chars`.
	   */
	  function charsRightIndex(string, chars) {
	    var index = string.length;

	    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
	    return index;
	  }

	  /**
	   * Used by `_.sortBy` to compare transformed elements of a collection and stable
	   * sort them in ascending order.
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareAscending(object, other) {
	    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	  }

	  /**
	   * Used by `_.sortByOrder` to compare multiple properties of a value to another
	   * and stable sort them.
	   *
	   * If `orders` is unspecified, all valuess are sorted in ascending order. Otherwise,
	   * a value is sorted in ascending order if its corresponding order is "asc", and
	   * descending if "desc".
	   *
	   * @private
	   * @param {Object} object The object to compare.
	   * @param {Object} other The other object to compare.
	   * @param {boolean[]} orders The order to sort by for each property.
	   * @returns {number} Returns the sort order indicator for `object`.
	   */
	  function compareMultiple(object, other, orders) {
	    var index = -1,
	        objCriteria = object.criteria,
	        othCriteria = other.criteria,
	        length = objCriteria.length,
	        ordersLength = orders.length;

	    while (++index < length) {
	      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
	      if (result) {
	        if (index >= ordersLength) {
	          return result;
	        }
	        var order = orders[index];
	        return result * ((order === 'asc' || order === true) ? 1 : -1);
	      }
	    }
	    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
	    // that causes it, under certain circumstances, to provide the same value for
	    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
	    // for more details.
	    //
	    // This also ensures a stable sort in V8 and other engines.
	    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
	    return object.index - other.index;
	  }

	  /**
	   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
	   *
	   * @private
	   * @param {string} letter The matched letter to deburr.
	   * @returns {string} Returns the deburred letter.
	   */
	  function deburrLetter(letter) {
	    return deburredLetters[letter];
	  }

	  /**
	   * Used by `_.escape` to convert characters to HTML entities.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeHtmlChar(chr) {
	    return htmlEscapes[chr];
	  }

	  /**
	   * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @param {string} leadingChar The capture group for a leading character.
	   * @param {string} whitespaceChar The capture group for a whitespace character.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	    if (leadingChar) {
	      chr = regexpEscapes[chr];
	    } else if (whitespaceChar) {
	      chr = stringEscapes[chr];
	    }
	    return '\\' + chr;
	  }

	  /**
	   * Used by `_.template` to escape characters for inclusion in compiled string literals.
	   *
	   * @private
	   * @param {string} chr The matched character to escape.
	   * @returns {string} Returns the escaped character.
	   */
	  function escapeStringChar(chr) {
	    return '\\' + stringEscapes[chr];
	  }

	  /**
	   * Gets the index at which the first occurrence of `NaN` is found in `array`.
	   *
	   * @private
	   * @param {Array} array The array to search.
	   * @param {number} fromIndex The index to search from.
	   * @param {boolean} [fromRight] Specify iterating from right to left.
	   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	   */
	  function indexOfNaN(array, fromIndex, fromRight) {
	    var length = array.length,
	        index = fromIndex + (fromRight ? 0 : -1);

	    while ((fromRight ? index-- : ++index < length)) {
	      var other = array[index];
	      if (other !== other) {
	        return index;
	      }
	    }
	    return -1;
	  }

	  /**
	   * Checks if `value` is object-like.
	   *
	   * @private
	   * @param {*} value The value to check.
	   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	   */
	  function isObjectLike(value) {
	    return !!value && typeof value == 'object';
	  }

	  /**
	   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
	   * character code is whitespace.
	   *
	   * @private
	   * @param {number} charCode The character code to inspect.
	   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
	   */
	  function isSpace(charCode) {
	    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
	      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
	  }

	  /**
	   * Replaces all `placeholder` elements in `array` with an internal placeholder
	   * and returns an array of their indexes.
	   *
	   * @private
	   * @param {Array} array The array to modify.
	   * @param {*} placeholder The placeholder to replace.
	   * @returns {Array} Returns the new array of placeholder indexes.
	   */
	  function replaceHolders(array, placeholder) {
	    var index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      if (array[index] === placeholder) {
	        array[index] = PLACEHOLDER;
	        result[++resIndex] = index;
	      }
	    }
	    return result;
	  }

	  /**
	   * An implementation of `_.uniq` optimized for sorted arrays without support
	   * for callback shorthands and `this` binding.
	   *
	   * @private
	   * @param {Array} array The array to inspect.
	   * @param {Function} [iteratee] The function invoked per iteration.
	   * @returns {Array} Returns the new duplicate-value-free array.
	   */
	  function sortedUniq(array, iteratee) {
	    var seen,
	        index = -1,
	        length = array.length,
	        resIndex = -1,
	        result = [];

	    while (++index < length) {
	      var value = array[index],
	          computed = iteratee ? iteratee(value, index, array) : value;

	      if (!index || seen !== computed) {
	        seen = computed;
	        result[++resIndex] = value;
	      }
	    }
	    return result;
	  }

	  /**
	   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the first non-whitespace character.
	   */
	  function trimmedLeftIndex(string) {
	    var index = -1,
	        length = string.length;

	    while (++index < length && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
	   * character of `string`.
	   *
	   * @private
	   * @param {string} string The string to inspect.
	   * @returns {number} Returns the index of the last non-whitespace character.
	   */
	  function trimmedRightIndex(string) {
	    var index = string.length;

	    while (index-- && isSpace(string.charCodeAt(index))) {}
	    return index;
	  }

	  /**
	   * Used by `_.unescape` to convert HTML entities to characters.
	   *
	   * @private
	   * @param {string} chr The matched character to unescape.
	   * @returns {string} Returns the unescaped character.
	   */
	  function unescapeHtmlChar(chr) {
	    return htmlUnescapes[chr];
	  }

	  /*--------------------------------------------------------------------------*/

	  /**
	   * Create a new pristine `lodash` function using the given `context` object.
	   *
	   * @static
	   * @memberOf _
	   * @category Utility
	   * @param {Object} [context=root] The context object.
	   * @returns {Function} Returns a new `lodash` function.
	   * @example
	   *
	   * _.mixin({ 'foo': _.constant('foo') });
	   *
	   * var lodash = _.runInContext();
	   * lodash.mixin({ 'bar': lodash.constant('bar') });
	   *
	   * _.isFunction(_.foo);
	   * // => true
	   * _.isFunction(_.bar);
	   * // => false
	   *
	   * lodash.isFunction(lodash.foo);
	   * // => false
	   * lodash.isFunction(lodash.bar);
	   * // => true
	   *
	   * // using `context` to mock `Date#getTime` use in `_.now`
	   * var mock = _.runInContext({
	   *   'Date': function() {
	   *     return { 'getTime': getTimeMock };
	   *   }
	   * });
	   *
	   * // or creating a suped-up `defer` in Node.js
	   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
	   */
	  function runInContext(context) {
	    // Avoid issues with some ES3 environments that attempt to use values, named
	    // after built-in constructors like `Object`, for the creation of literals.
	    // ES5 clears this up by stating that literals must use built-in constructors.
	    // See https://es5.github.io/#x11.1.5 for more details.
	    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

	    /** Native constructor references. */
	    var Array = context.Array,
	        Date = context.Date,
	        Error = context.Error,
	        Function = context.Function,
	        Math = context.Math,
	        Number = context.Number,
	        Object = context.Object,
	        RegExp = context.RegExp,
	        String = context.String,
	        TypeError = context.TypeError;

	    /** Used for native method references. */
	    var arrayProto = Array.prototype,
	        objectProto = Object.prototype,
	        stringProto = String.prototype;

	    /** Used to resolve the decompiled source of functions. */
	    var fnToString = Function.prototype.toString;

	    /** Used to check objects for own properties. */
	    var hasOwnProperty = objectProto.hasOwnProperty;

	    /** Used to generate unique IDs. */
	    var idCounter = 0;

	    /**
	     * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	     * of values.
	     */
	    var objToString = objectProto.toString;

	    /** Used to restore the original `_` reference in `_.noConflict`. */
	    var oldDash = root._;

	    /** Used to detect if a method is native. */
	    var reIsNative = RegExp('^' +
	      fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	    );

	    /** Native method references. */
	    var ArrayBuffer = context.ArrayBuffer,
	        clearTimeout = context.clearTimeout,
	        parseFloat = context.parseFloat,
	        pow = Math.pow,
	        propertyIsEnumerable = objectProto.propertyIsEnumerable,
	        Set = getNative(context, 'Set'),
	        setTimeout = context.setTimeout,
	        splice = arrayProto.splice,
	        Uint8Array = context.Uint8Array,
	        WeakMap = getNative(context, 'WeakMap');

	    /* Native method references for those with the same name as other `lodash` methods. */
	    var nativeCeil = Math.ceil,
	        nativeCreate = getNative(Object, 'create'),
	        nativeFloor = Math.floor,
	        nativeIsArray = getNative(Array, 'isArray'),
	        nativeIsFinite = context.isFinite,
	        nativeKeys = getNative(Object, 'keys'),
	        nativeMax = Math.max,
	        nativeMin = Math.min,
	        nativeNow = getNative(Date, 'now'),
	        nativeParseInt = context.parseInt,
	        nativeRandom = Math.random;

	    /** Used as references for `-Infinity` and `Infinity`. */
	    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
	        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

	    /** Used as references for the maximum length and index of an array. */
	    var MAX_ARRAY_LENGTH = 4294967295,
	        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
	        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

	    /**
	     * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	     * of an array-like value.
	     */
	    var MAX_SAFE_INTEGER = 9007199254740991;

	    /** Used to store function metadata. */
	    var metaMap = WeakMap && new WeakMap;

	    /** Used to lookup unminified function names. */
	    var realNames = {};

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object which wraps `value` to enable implicit chaining.
	     * Methods that operate on and return arrays, collections, and functions can
	     * be chained together. Methods that retrieve a single value or may return a
	     * primitive value will automatically end the chain returning the unwrapped
	     * value. Explicit chaining may be enabled using `_.chain`. The execution of
	     * chained methods is lazy, that is, execution is deferred until `_#value`
	     * is implicitly or explicitly called.
	     *
	     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
	     * fusion is an optimization strategy which merge iteratee calls; this can help
	     * to avoid the creation of intermediate data structures and greatly reduce the
	     * number of iteratee executions.
	     *
	     * Chaining is supported in custom builds as long as the `_#value` method is
	     * directly or indirectly included in the build.
	     *
	     * In addition to lodash methods, wrappers have `Array` and `String` methods.
	     *
	     * The wrapper `Array` methods are:
	     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`,
	     * `splice`, and `unshift`
	     *
	     * The wrapper `String` methods are:
	     * `replace` and `split`
	     *
	     * The wrapper methods that support shortcut fusion are:
	     * `compact`, `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`,
	     * `first`, `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`,
	     * `slice`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `toArray`,
	     * and `where`
	     *
	     * The chainable wrapper methods are:
	     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
	     * `callback`, `chain`, `chunk`, `commit`, `compact`, `concat`, `constant`,
	     * `countBy`, `create`, `curry`, `debounce`, `defaults`, `defaultsDeep`,
	     * `defer`, `delay`, `difference`, `drop`, `dropRight`, `dropRightWhile`,
	     * `dropWhile`, `fill`, `filter`, `flatten`, `flattenDeep`, `flow`, `flowRight`,
	     * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
	     * `functions`, `groupBy`, `indexBy`, `initial`, `intersection`, `invert`,
	     * `invoke`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`,
	     * `matchesProperty`, `memoize`, `merge`, `method`, `methodOf`, `mixin`,
	     * `modArgs`, `negate`, `omit`, `once`, `pairs`, `partial`, `partialRight`,
	     * `partition`, `pick`, `plant`, `pluck`, `property`, `propertyOf`, `pull`,
	     * `pullAt`, `push`, `range`, `rearg`, `reject`, `remove`, `rest`, `restParam`,
	     * `reverse`, `set`, `shuffle`, `slice`, `sort`, `sortBy`, `sortByAll`,
	     * `sortByOrder`, `splice`, `spread`, `take`, `takeRight`, `takeRightWhile`,
	     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
	     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `unzipWith`, `values`,
	     * `valuesIn`, `where`, `without`, `wrap`, `xor`, `zip`, `zipObject`, `zipWith`
	     *
	     * The wrapper methods that are **not** chainable by default are:
	     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clone`, `cloneDeep`,
	     * `deburr`, `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
	     * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`,
	     * `floor`, `get`, `gt`, `gte`, `has`, `identity`, `includes`, `indexOf`,
	     * `inRange`, `isArguments`, `isArray`, `isBoolean`, `isDate`, `isElement`,
	     * `isEmpty`, `isEqual`, `isError`, `isFinite` `isFunction`, `isMatch`,
	     * `isNative`, `isNaN`, `isNull`, `isNumber`, `isObject`, `isPlainObject`,
	     * `isRegExp`, `isString`, `isUndefined`, `isTypedArray`, `join`, `kebabCase`,
	     * `last`, `lastIndexOf`, `lt`, `lte`, `max`, `min`, `noConflict`, `noop`,
	     * `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`, `random`, `reduce`,
	     * `reduceRight`, `repeat`, `result`, `round`, `runInContext`, `shift`, `size`,
	     * `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`, `startCase`,
	     * `startsWith`, `sum`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
	     * `unescape`, `uniqueId`, `value`, and `words`
	     *
	     * The wrapper method `sample` will return a wrapped value when `n` is provided,
	     * otherwise an unwrapped value is returned.
	     *
	     * @name _
	     * @constructor
	     * @category Chain
	     * @param {*} value The value to wrap in a `lodash` instance.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var wrapped = _([1, 2, 3]);
	     *
	     * // returns an unwrapped value
	     * wrapped.reduce(function(total, n) {
	     *   return total + n;
	     * });
	     * // => 6
	     *
	     * // returns a wrapped value
	     * var squares = wrapped.map(function(n) {
	     *   return n * n;
	     * });
	     *
	     * _.isArray(squares);
	     * // => false
	     *
	     * _.isArray(squares.value());
	     * // => true
	     */
	    function lodash(value) {
	      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
	        if (value instanceof LodashWrapper) {
	          return value;
	        }
	        if (hasOwnProperty.call(value, '__chain__') && hasOwnProperty.call(value, '__wrapped__')) {
	          return wrapperClone(value);
	        }
	      }
	      return new LodashWrapper(value);
	    }

	    /**
	     * The function whose prototype all chaining wrappers inherit from.
	     *
	     * @private
	     */
	    function baseLodash() {
	      // No operation performed.
	    }

	    /**
	     * The base constructor for creating `lodash` wrapper objects.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
	     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
	     */
	    function LodashWrapper(value, chainAll, actions) {
	      this.__wrapped__ = value;
	      this.__actions__ = actions || [];
	      this.__chain__ = !!chainAll;
	    }

	    /**
	     * An object environment feature flags.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    var support = lodash.support = {};

	    /**
	     * By default, the template delimiters used by lodash are like those in
	     * embedded Ruby (ERB). Change the following template settings to use
	     * alternative delimiters.
	     *
	     * @static
	     * @memberOf _
	     * @type Object
	     */
	    lodash.templateSettings = {

	      /**
	       * Used to detect `data` property values to be HTML-escaped.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'escape': reEscape,

	      /**
	       * Used to detect code to be evaluated.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'evaluate': reEvaluate,

	      /**
	       * Used to detect `data` property values to inject.
	       *
	       * @memberOf _.templateSettings
	       * @type RegExp
	       */
	      'interpolate': reInterpolate,

	      /**
	       * Used to reference the data object in the template text.
	       *
	       * @memberOf _.templateSettings
	       * @type string
	       */
	      'variable': '',

	      /**
	       * Used to import variables into the compiled template.
	       *
	       * @memberOf _.templateSettings
	       * @type Object
	       */
	      'imports': {

	        /**
	         * A reference to the `lodash` function.
	         *
	         * @memberOf _.templateSettings.imports
	         * @type Function
	         */
	        '_': lodash
	      }
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
	     *
	     * @private
	     * @param {*} value The value to wrap.
	     */
	    function LazyWrapper(value) {
	      this.__wrapped__ = value;
	      this.__actions__ = [];
	      this.__dir__ = 1;
	      this.__filtered__ = false;
	      this.__iteratees__ = [];
	      this.__takeCount__ = POSITIVE_INFINITY;
	      this.__views__ = [];
	    }

	    /**
	     * Creates a clone of the lazy wrapper object.
	     *
	     * @private
	     * @name clone
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the cloned `LazyWrapper` object.
	     */
	    function lazyClone() {
	      var result = new LazyWrapper(this.__wrapped__);
	      result.__actions__ = arrayCopy(this.__actions__);
	      result.__dir__ = this.__dir__;
	      result.__filtered__ = this.__filtered__;
	      result.__iteratees__ = arrayCopy(this.__iteratees__);
	      result.__takeCount__ = this.__takeCount__;
	      result.__views__ = arrayCopy(this.__views__);
	      return result;
	    }

	    /**
	     * Reverses the direction of lazy iteration.
	     *
	     * @private
	     * @name reverse
	     * @memberOf LazyWrapper
	     * @returns {Object} Returns the new reversed `LazyWrapper` object.
	     */
	    function lazyReverse() {
	      if (this.__filtered__) {
	        var result = new LazyWrapper(this);
	        result.__dir__ = -1;
	        result.__filtered__ = true;
	      } else {
	        result = this.clone();
	        result.__dir__ *= -1;
	      }
	      return result;
	    }

	    /**
	     * Extracts the unwrapped value from its lazy wrapper.
	     *
	     * @private
	     * @name value
	     * @memberOf LazyWrapper
	     * @returns {*} Returns the unwrapped value.
	     */
	    function lazyValue() {
	      var array = this.__wrapped__.value(),
	          dir = this.__dir__,
	          isArr = isArray(array),
	          isRight = dir < 0,
	          arrLength = isArr ? array.length : 0,
	          view = getView(0, arrLength, this.__views__),
	          start = view.start,
	          end = view.end,
	          length = end - start,
	          index = isRight ? end : (start - 1),
	          iteratees = this.__iteratees__,
	          iterLength = iteratees.length,
	          resIndex = 0,
	          takeCount = nativeMin(length, this.__takeCount__);

	      if (!isArr || arrLength < LARGE_ARRAY_SIZE || (arrLength == length && takeCount == length)) {
	        return baseWrapperValue((isRight && isArr) ? array.reverse() : array, this.__actions__);
	      }
	      var result = [];

	      outer:
	      while (length-- && resIndex < takeCount) {
	        index += dir;

	        var iterIndex = -1,
	            value = array[index];

	        while (++iterIndex < iterLength) {
	          var data = iteratees[iterIndex],
	              iteratee = data.iteratee,
	              type = data.type,
	              computed = iteratee(value);

	          if (type == LAZY_MAP_FLAG) {
	            value = computed;
	          } else if (!computed) {
	            if (type == LAZY_FILTER_FLAG) {
	              continue outer;
	            } else {
	              break outer;
	            }
	          }
	        }
	        result[resIndex++] = value;
	      }
	      return result;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a cache object to store key/value pairs.
	     *
	     * @private
	     * @static
	     * @name Cache
	     * @memberOf _.memoize
	     */
	    function MapCache() {
	      this.__data__ = {};
	    }

	    /**
	     * Removes `key` and its value from the cache.
	     *
	     * @private
	     * @name delete
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to remove.
	     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
	     */
	    function mapDelete(key) {
	      return this.has(key) && delete this.__data__[key];
	    }

	    /**
	     * Gets the cached value for `key`.
	     *
	     * @private
	     * @name get
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to get.
	     * @returns {*} Returns the cached value.
	     */
	    function mapGet(key) {
	      return key == '__proto__' ? undefined : this.__data__[key];
	    }

	    /**
	     * Checks if a cached value for `key` exists.
	     *
	     * @private
	     * @name has
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the entry to check.
	     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	     */
	    function mapHas(key) {
	      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
	    }

	    /**
	     * Sets `value` to `key` of the cache.
	     *
	     * @private
	     * @name set
	     * @memberOf _.memoize.Cache
	     * @param {string} key The key of the value to cache.
	     * @param {*} value The value to cache.
	     * @returns {Object} Returns the cache object.
	     */
	    function mapSet(key, value) {
	      if (key != '__proto__') {
	        this.__data__[key] = value;
	      }
	      return this;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     *
	     * Creates a cache object to store unique values.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     */
	    function SetCache(values) {
	      var length = values ? values.length : 0;

	      this.data = { 'hash': nativeCreate(null), 'set': new Set };
	      while (length--) {
	        this.push(values[length]);
	      }
	    }

	    /**
	     * Checks if `value` is in `cache` mimicking the return signature of
	     * `_.indexOf` by returning `0` if the value is found, else `-1`.
	     *
	     * @private
	     * @param {Object} cache The cache to search.
	     * @param {*} value The value to search for.
	     * @returns {number} Returns `0` if `value` is found, else `-1`.
	     */
	    function cacheIndexOf(cache, value) {
	      var data = cache.data,
	          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	      return result ? 0 : -1;
	    }

	    /**
	     * Adds `value` to the cache.
	     *
	     * @private
	     * @name push
	     * @memberOf SetCache
	     * @param {*} value The value to cache.
	     */
	    function cachePush(value) {
	      var data = this.data;
	      if (typeof value == 'string' || isObject(value)) {
	        data.set.add(value);
	      } else {
	        data.hash[value] = true;
	      }
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a new array joining `array` with `other`.
	     *
	     * @private
	     * @param {Array} array The array to join.
	     * @param {Array} other The other array to join.
	     * @returns {Array} Returns the new concatenated array.
	     */
	    function arrayConcat(array, other) {
	      var index = -1,
	          length = array.length,
	          othIndex = -1,
	          othLength = other.length,
	          result = Array(length + othLength);

	      while (++index < length) {
	        result[index] = array[index];
	      }
	      while (++othIndex < othLength) {
	        result[index++] = other[othIndex];
	      }
	      return result;
	    }

	    /**
	     * Copies the values of `source` to `array`.
	     *
	     * @private
	     * @param {Array} source The array to copy values from.
	     * @param {Array} [array=[]] The array to copy values to.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayCopy(source, array) {
	      var index = -1,
	          length = source.length;

	      array || (array = Array(length));
	      while (++index < length) {
	        array[index] = source[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEach` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEach(array, iteratee) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (iteratee(array[index], index, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.forEachRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayEachRight(array, iteratee) {
	      var length = array.length;

	      while (length--) {
	        if (iteratee(array[length], length, array) === false) {
	          break;
	        }
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.every` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     */
	    function arrayEvery(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (!predicate(array[index], index, array)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseExtremum` for arrays which invokes `iteratee`
	     * with one argument: (value).
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function arrayExtremum(array, iteratee, comparator, exValue) {
	      var index = -1,
	          length = array.length,
	          computed = exValue,
	          result = computed;

	      while (++index < length) {
	        var value = array[index],
	            current = +iteratee(value);

	        if (comparator(current, computed)) {
	          computed = current;
	          result = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.filter` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function arrayFilter(array, predicate) {
	      var index = -1,
	          length = array.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.map` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function arrayMap(array, iteratee) {
	      var index = -1,
	          length = array.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = iteratee(array[index], index, array);
	      }
	      return result;
	    }

	    /**
	     * Appends the elements of `values` to `array`.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {Array} values The values to append.
	     * @returns {Array} Returns `array`.
	     */
	    function arrayPush(array, values) {
	      var index = -1,
	          length = values.length,
	          offset = array.length;

	      while (++index < length) {
	        array[offset + index] = values[index];
	      }
	      return array;
	    }

	    /**
	     * A specialized version of `_.reduce` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the first element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduce(array, iteratee, accumulator, initFromArray) {
	      var index = -1,
	          length = array.length;

	      if (initFromArray && length) {
	        accumulator = array[++index];
	      }
	      while (++index < length) {
	        accumulator = iteratee(accumulator, array[index], index, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.reduceRight` for arrays without support for
	     * callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {boolean} [initFromArray] Specify using the last element of `array`
	     *  as the initial value.
	     * @returns {*} Returns the accumulated value.
	     */
	    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
	      var length = array.length;
	      if (initFromArray && length) {
	        accumulator = array[--length];
	      }
	      while (length--) {
	        accumulator = iteratee(accumulator, array[length], length, array);
	      }
	      return accumulator;
	    }

	    /**
	     * A specialized version of `_.some` for arrays without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function arraySome(array, predicate) {
	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        if (predicate(array[index], index, array)) {
	          return true;
	        }
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `_.sum` for arrays without support for callback
	     * shorthands and `this` binding..
	     *
	     * @private
	     * @param {Array} array The array to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function arraySum(array, iteratee) {
	      var length = array.length,
	          result = 0;

	      while (length--) {
	        result += +iteratee(array[length]) || 0;
	      }
	      return result;
	    }

	    /**
	     * Used by `_.defaults` to customize its `_.assign` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : objectValue;
	    }

	    /**
	     * Used by `_.template` to customize its `_.assign` use.
	     *
	     * **Note:** This function is like `assignDefaults` except that it ignores
	     * inherited property values when checking if a property is `undefined`.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @param {string} key The key associated with the object and source values.
	     * @param {Object} object The destination object.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function assignOwnDefaults(objectValue, sourceValue, key, object) {
	      return (objectValue === undefined || !hasOwnProperty.call(object, key))
	        ? sourceValue
	        : objectValue;
	    }

	    /**
	     * A specialized version of `_.assign` for customizing assigned values without
	     * support for argument juggling, multiple sources, and `this` binding `customizer`
	     * functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Object} Returns `object`.
	     */
	    function assignWith(object, source, customizer) {
	      var index = -1,
	          props = keys(source),
	          length = props.length;

	      while (++index < length) {
	        var key = props[index],
	            value = object[key],
	            result = customizer(value, source[key], key, object, source);

	        if ((result === result ? (result !== value) : (value === value)) ||
	            (value === undefined && !(key in object))) {
	          object[key] = result;
	        }
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.assign` without support for argument juggling,
	     * multiple sources, and `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @returns {Object} Returns `object`.
	     */
	    function baseAssign(object, source) {
	      return source == null
	        ? object
	        : baseCopy(source, keys(source), object);
	    }

	    /**
	     * The base implementation of `_.at` without support for string collections
	     * and individual key arguments.
	     *
	     * @private
	     * @param {Array|Object} collection The collection to iterate over.
	     * @param {number[]|string[]} props The property names or indexes of elements to pick.
	     * @returns {Array} Returns the new array of picked elements.
	     */
	    function baseAt(collection, props) {
	      var index = -1,
	          isNil = collection == null,
	          isArr = !isNil && isArrayLike(collection),
	          length = isArr ? collection.length : 0,
	          propsLength = props.length,
	          result = Array(propsLength);

	      while(++index < propsLength) {
	        var key = props[index];
	        if (isArr) {
	          result[index] = isIndex(key, length) ? collection[key] : undefined;
	        } else {
	          result[index] = isNil ? undefined : collection[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * Copies properties of `source` to `object`.
	     *
	     * @private
	     * @param {Object} source The object to copy properties from.
	     * @param {Array} props The property names to copy.
	     * @param {Object} [object={}] The object to copy properties to.
	     * @returns {Object} Returns `object`.
	     */
	    function baseCopy(source, props, object) {
	      object || (object = {});

	      var index = -1,
	          length = props.length;

	      while (++index < length) {
	        var key = props[index];
	        object[key] = source[key];
	      }
	      return object;
	    }

	    /**
	     * The base implementation of `_.callback` which supports specifying the
	     * number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function baseCallback(func, thisArg, argCount) {
	      var type = typeof func;
	      if (type == 'function') {
	        return thisArg === undefined
	          ? func
	          : bindCallback(func, thisArg, argCount);
	      }
	      if (func == null) {
	        return identity;
	      }
	      if (type == 'object') {
	        return baseMatches(func);
	      }
	      return thisArg === undefined
	        ? property(func)
	        : baseMatchesProperty(func, thisArg);
	    }

	    /**
	     * The base implementation of `_.clone` without support for argument juggling
	     * and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {string} [key] The key of `value`.
	     * @param {Object} [object] The object `value` belongs to.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates clones with source counterparts.
	     * @returns {*} Returns the cloned value.
	     */
	    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	      var result;
	      if (customizer) {
	        result = object ? customizer(value, key, object) : customizer(value);
	      }
	      if (result !== undefined) {
	        return result;
	      }
	      if (!isObject(value)) {
	        return value;
	      }
	      var isArr = isArray(value);
	      if (isArr) {
	        result = initCloneArray(value);
	        if (!isDeep) {
	          return arrayCopy(value, result);
	        }
	      } else {
	        var tag = objToString.call(value),
	            isFunc = tag == funcTag;

	        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	          result = initCloneObject(isFunc ? {} : value);
	          if (!isDeep) {
	            return baseAssign(result, value);
	          }
	        } else {
	          return cloneableTags[tag]
	            ? initCloneByTag(value, tag, isDeep)
	            : (object ? value : {});
	        }
	      }
	      // Check for circular references and return its corresponding clone.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == value) {
	          return stackB[length];
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate it with its clone.
	      stackA.push(value);
	      stackB.push(result);

	      // Recursively populate clone (susceptible to call stack limits).
	      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.create` without support for assigning
	     * properties to the created object.
	     *
	     * @private
	     * @param {Object} prototype The object to inherit from.
	     * @returns {Object} Returns the new object.
	     */
	    var baseCreate = (function() {
	      function object() {}
	      return function(prototype) {
	        if (isObject(prototype)) {
	          object.prototype = prototype;
	          var result = new object;
	          object.prototype = undefined;
	        }
	        return result || {};
	      };
	    }());

	    /**
	     * The base implementation of `_.delay` and `_.defer` which accepts an index
	     * of where to slice the arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {Object} args The arguments provide to `func`.
	     * @returns {number} Returns the timer id.
	     */
	    function baseDelay(func, wait, args) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return setTimeout(function() { func.apply(undefined, args); }, wait);
	    }

	    /**
	     * The base implementation of `_.difference` which accepts a single array
	     * of values to exclude.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Array} values The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     */
	    function baseDifference(array, values) {
	      var length = array ? array.length : 0,
	          result = [];

	      if (!length) {
	        return result;
	      }
	      var index = -1,
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,
	          valuesLength = values.length;

	      if (cache) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	        values = cache;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index];

	        if (isCommon && value === value) {
	          var valuesIndex = valuesLength;
	          while (valuesIndex--) {
	            if (values[valuesIndex] === value) {
	              continue outer;
	            }
	          }
	          result.push(value);
	        }
	        else if (indexOf(values, value, 0) < 0) {
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.forEach` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEach = createBaseEach(baseForOwn);

	    /**
	     * The base implementation of `_.forEachRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array|Object|string} Returns `collection`.
	     */
	    var baseEachRight = createBaseEach(baseForOwnRight, true);

	    /**
	     * The base implementation of `_.every` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`
	     */
	    function baseEvery(collection, predicate) {
	      var result = true;
	      baseEach(collection, function(value, index, collection) {
	        result = !!predicate(value, index, collection);
	        return result;
	      });
	      return result;
	    }

	    /**
	     * Gets the extremum value of `collection` invoking `iteratee` for each value
	     * in `collection` to generate the criterion by which the value is ranked.
	     * The `iteratee` is invoked with three arguments: (value, index|key, collection).
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {*} Returns the extremum value.
	     */
	    function baseExtremum(collection, iteratee, comparator, exValue) {
	      var computed = exValue,
	          result = computed;

	      baseEach(collection, function(value, index, collection) {
	        var current = +iteratee(value, index, collection);
	        if (comparator(current, computed) || (current === exValue && current === result)) {
	          computed = current;
	          result = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.fill` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     */
	    function baseFill(array, value, start, end) {
	      var length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : (end >>> 0);
	      start >>>= 0;

	      while (start < length) {
	        array[start++] = value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.filter` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Array} Returns the new filtered array.
	     */
	    function baseFilter(collection, predicate) {
	      var result = [];
	      baseEach(collection, function(value, index, collection) {
	        if (predicate(value, index, collection)) {
	          result.push(value);
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
	     * without support for callback shorthands and `this` binding, which iterates
	     * over `collection` using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @param {boolean} [retKey] Specify returning the key of the found element
	     *  instead of the element itself.
	     * @returns {*} Returns the found element or its key, else `undefined`.
	     */
	    function baseFind(collection, predicate, eachFunc, retKey) {
	      var result;
	      eachFunc(collection, function(value, key, collection) {
	        if (predicate(value, key, collection)) {
	          result = retKey ? key : value;
	          return false;
	        }
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.flatten` with added support for restricting
	     * flattening and specifying the start index.
	     *
	     * @private
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
	     * @param {Array} [result=[]] The initial result value.
	     * @returns {Array} Returns the new flattened array.
	     */
	    function baseFlatten(array, isDeep, isStrict, result) {
	      result || (result = []);

	      var index = -1,
	          length = array.length;

	      while (++index < length) {
	        var value = array[index];
	        if (isObjectLike(value) && isArrayLike(value) &&
	            (isStrict || isArray(value) || isArguments(value))) {
	          if (isDeep) {
	            // Recursively flatten arrays (susceptible to call stack limits).
	            baseFlatten(value, isDeep, isStrict, result);
	          } else {
	            arrayPush(result, value);
	          }
	        } else if (!isStrict) {
	          result[result.length] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `baseForIn` and `baseForOwn` which iterates
	     * over `object` properties returned by `keysFunc` invoking `iteratee` for
	     * each property. Iteratee functions may exit iteration early by explicitly
	     * returning `false`.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseFor = createBaseFor();

	    /**
	     * This function is like `baseFor` except that it iterates over properties
	     * in the opposite order.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {Function} keysFunc The function to get the keys of `object`.
	     * @returns {Object} Returns `object`.
	     */
	    var baseForRight = createBaseFor(true);

	    /**
	     * The base implementation of `_.forIn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForIn(object, iteratee) {
	      return baseFor(object, iteratee, keysIn);
	    }

	    /**
	     * The base implementation of `_.forOwn` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwn(object, iteratee) {
	      return baseFor(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.forOwnRight` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Object} Returns `object`.
	     */
	    function baseForOwnRight(object, iteratee) {
	      return baseForRight(object, iteratee, keys);
	    }

	    /**
	     * The base implementation of `_.functions` which creates an array of
	     * `object` function property names filtered from those provided.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} props The property names to filter.
	     * @returns {Array} Returns the new array of filtered property names.
	     */
	    function baseFunctions(object, props) {
	      var index = -1,
	          length = props.length,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var key = props[index];
	        if (isFunction(object[key])) {
	          result[++resIndex] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `get` without support for string paths
	     * and default values.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} path The path of the property to get.
	     * @param {string} [pathKey] The key representation of path.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseGet(object, path, pathKey) {
	      if (object == null) {
	        return;
	      }
	      if (pathKey !== undefined && pathKey in toObject(object)) {
	        path = [pathKey];
	      }
	      var index = 0,
	          length = path.length;

	      while (object != null && index < length) {
	        object = object[path[index++]];
	      }
	      return (index && index == length) ? object : undefined;
	    }

	    /**
	     * The base implementation of `_.isEqual` without support for `this` binding
	     * `customizer` functions.
	     *
	     * @private
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     */
	    function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	      if (value === other) {
	        return true;
	      }
	      if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	        return value !== value && other !== other;
	      }
	      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	    }

	    /**
	     * A specialized version of `baseIsEqual` for arrays and objects which performs
	     * deep comparisons and tracks traversed objects enabling objects with circular
	     * references to be compared.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objIsArr = isArray(object),
	          othIsArr = isArray(other),
	          objTag = arrayTag,
	          othTag = arrayTag;

	      if (!objIsArr) {
	        objTag = objToString.call(object);
	        if (objTag == argsTag) {
	          objTag = objectTag;
	        } else if (objTag != objectTag) {
	          objIsArr = isTypedArray(object);
	        }
	      }
	      if (!othIsArr) {
	        othTag = objToString.call(other);
	        if (othTag == argsTag) {
	          othTag = objectTag;
	        } else if (othTag != objectTag) {
	          othIsArr = isTypedArray(other);
	        }
	      }
	      var objIsObj = objTag == objectTag,
	          othIsObj = othTag == objectTag,
	          isSameTag = objTag == othTag;

	      if (isSameTag && !(objIsArr || objIsObj)) {
	        return equalByTag(object, other, objTag);
	      }
	      if (!isLoose) {
	        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	        if (objIsWrapped || othIsWrapped) {
	          return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	        }
	      }
	      if (!isSameTag) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      // For more information on detecting circular references see https://es5.github.io/#JO.
	      stackA || (stackA = []);
	      stackB || (stackB = []);

	      var length = stackA.length;
	      while (length--) {
	        if (stackA[length] == object) {
	          return stackB[length] == other;
	        }
	      }
	      // Add `object` and `other` to the stack of traversed objects.
	      stackA.push(object);
	      stackB.push(other);

	      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	      stackA.pop();
	      stackB.pop();

	      return result;
	    }

	    /**
	     * The base implementation of `_.isMatch` without support for callback
	     * shorthands and `this` binding.
	     *
	     * @private
	     * @param {Object} object The object to inspect.
	     * @param {Array} matchData The propery names, values, and compare flags to match.
	     * @param {Function} [customizer] The function to customize comparing objects.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     */
	    function baseIsMatch(object, matchData, customizer) {
	      var index = matchData.length,
	          length = index,
	          noCustomizer = !customizer;

	      if (object == null) {
	        return !length;
	      }
	      object = toObject(object);
	      while (index--) {
	        var data = matchData[index];
	        if ((noCustomizer && data[2])
	              ? data[1] !== object[data[0]]
	              : !(data[0] in object)
	            ) {
	          return false;
	        }
	      }
	      while (++index < length) {
	        data = matchData[index];
	        var key = data[0],
	            objValue = object[key],
	            srcValue = data[1];

	        if (noCustomizer && data[2]) {
	          if (objValue === undefined && !(key in object)) {
	            return false;
	          }
	        } else {
	          var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	          if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	            return false;
	          }
	        }
	      }
	      return true;
	    }

	    /**
	     * The base implementation of `_.map` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {Array} Returns the new mapped array.
	     */
	    function baseMap(collection, iteratee) {
	      var index = -1,
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value, key, collection) {
	        result[++index] = iteratee(value, key, collection);
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.matches` which does not clone `source`.
	     *
	     * @private
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatches(source) {
	      var matchData = getMatchData(source);
	      if (matchData.length == 1 && matchData[0][2]) {
	        var key = matchData[0][0],
	            value = matchData[0][1];

	        return function(object) {
	          if (object == null) {
	            return false;
	          }
	          return object[key] === value && (value !== undefined || (key in toObject(object)));
	        };
	      }
	      return function(object) {
	        return baseIsMatch(object, matchData);
	      };
	    }

	    /**
	     * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	     *
	     * @private
	     * @param {string} path The path of the property to get.
	     * @param {*} srcValue The value to compare.
	     * @returns {Function} Returns the new function.
	     */
	    function baseMatchesProperty(path, srcValue) {
	      var isArr = isArray(path),
	          isCommon = isKey(path) && isStrictComparable(srcValue),
	          pathKey = (path + '');

	      path = toPath(path);
	      return function(object) {
	        if (object == null) {
	          return false;
	        }
	        var key = pathKey;
	        object = toObject(object);
	        if ((isArr || !isCommon) && !(key in object)) {
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          if (object == null) {
	            return false;
	          }
	          key = last(path);
	          object = toObject(object);
	        }
	        return object[key] === srcValue
	          ? (srcValue !== undefined || (key in object))
	          : baseIsEqual(srcValue, object[key], undefined, true);
	      };
	    }

	    /**
	     * The base implementation of `_.merge` without support for argument juggling,
	     * multiple sources, and `this` binding `customizer` functions.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {Object} Returns `object`.
	     */
	    function baseMerge(object, source, customizer, stackA, stackB) {
	      if (!isObject(object)) {
	        return object;
	      }
	      var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	          props = isSrcArr ? undefined : keys(source);

	      arrayEach(props || source, function(srcValue, key) {
	        if (props) {
	          key = srcValue;
	          srcValue = source[key];
	        }
	        if (isObjectLike(srcValue)) {
	          stackA || (stackA = []);
	          stackB || (stackB = []);
	          baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	        }
	        else {
	          var value = object[key],
	              result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	              isCommon = result === undefined;

	          if (isCommon) {
	            result = srcValue;
	          }
	          if ((result !== undefined || (isSrcArr && !(key in object))) &&
	              (isCommon || (result === result ? (result !== value) : (value === value)))) {
	            object[key] = result;
	          }
	        }
	      });
	      return object;
	    }

	    /**
	     * A specialized version of `baseMerge` for arrays and objects which performs
	     * deep merges and tracks traversed objects enabling objects with circular
	     * references to be merged.
	     *
	     * @private
	     * @param {Object} object The destination object.
	     * @param {Object} source The source object.
	     * @param {string} key The key of the value to merge.
	     * @param {Function} mergeFunc The function to merge values.
	     * @param {Function} [customizer] The function to customize merged values.
	     * @param {Array} [stackA=[]] Tracks traversed source objects.
	     * @param {Array} [stackB=[]] Associates values with source counterparts.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	      var length = stackA.length,
	          srcValue = source[key];

	      while (length--) {
	        if (stackA[length] == srcValue) {
	          object[key] = stackB[length];
	          return;
	        }
	      }
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	        if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	          result = isArray(value)
	            ? value
	            : (isArrayLike(value) ? arrayCopy(value) : []);
	        }
	        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	          result = isArguments(value)
	            ? toPlainObject(value)
	            : (isPlainObject(value) ? value : {});
	        }
	        else {
	          isCommon = false;
	        }
	      }
	      // Add the source value to the stack of traversed objects and associate
	      // it with its merged value.
	      stackA.push(srcValue);
	      stackB.push(result);

	      if (isCommon) {
	        // Recursively merge objects and arrays (susceptible to call stack limits).
	        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	      } else if (result === result ? (result !== value) : (value === value)) {
	        object[key] = result;
	      }
	    }

	    /**
	     * The base implementation of `_.property` without support for deep paths.
	     *
	     * @private
	     * @param {string} key The key of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function baseProperty(key) {
	      return function(object) {
	        return object == null ? undefined : object[key];
	      };
	    }

	    /**
	     * A specialized version of `baseProperty` which supports deep paths.
	     *
	     * @private
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     */
	    function basePropertyDeep(path) {
	      var pathKey = (path + '');
	      path = toPath(path);
	      return function(object) {
	        return baseGet(object, path, pathKey);
	      };
	    }

	    /**
	     * The base implementation of `_.pullAt` without support for individual
	     * index arguments and capturing the removed elements.
	     *
	     * @private
	     * @param {Array} array The array to modify.
	     * @param {number[]} indexes The indexes of elements to remove.
	     * @returns {Array} Returns `array`.
	     */
	    function basePullAt(array, indexes) {
	      var length = array ? indexes.length : 0;
	      while (length--) {
	        var index = indexes[length];
	        if (index != previous && isIndex(index)) {
	          var previous = index;
	          splice.call(array, index, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.random` without support for argument juggling
	     * and returning floating-point numbers.
	     *
	     * @private
	     * @param {number} min The minimum possible value.
	     * @param {number} max The maximum possible value.
	     * @returns {number} Returns the random number.
	     */
	    function baseRandom(min, max) {
	      return min + nativeFloor(nativeRandom() * (max - min + 1));
	    }

	    /**
	     * The base implementation of `_.reduce` and `_.reduceRight` without support
	     * for callback shorthands and `this` binding, which iterates over `collection`
	     * using the provided `eachFunc`.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {*} accumulator The initial value.
	     * @param {boolean} initFromCollection Specify using the first or last element
	     *  of `collection` as the initial value.
	     * @param {Function} eachFunc The function to iterate over `collection`.
	     * @returns {*} Returns the accumulated value.
	     */
	    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
	      eachFunc(collection, function(value, index, collection) {
	        accumulator = initFromCollection
	          ? (initFromCollection = false, value)
	          : iteratee(accumulator, value, index, collection);
	      });
	      return accumulator;
	    }

	    /**
	     * The base implementation of `setData` without support for hot loop detection.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var baseSetData = !metaMap ? identity : function(func, data) {
	      metaMap.set(func, data);
	      return func;
	    };

	    /**
	     * The base implementation of `_.slice` without an iteratee call guard.
	     *
	     * @private
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseSlice(array, start, end) {
	      var index = -1,
	          length = array.length;

	      start = start == null ? 0 : (+start || 0);
	      if (start < 0) {
	        start = -start > length ? 0 : (length + start);
	      }
	      end = (end === undefined || end > length) ? length : (+end || 0);
	      if (end < 0) {
	        end += length;
	      }
	      length = start > end ? 0 : ((end - start) >>> 0);
	      start >>>= 0;

	      var result = Array(length);
	      while (++index < length) {
	        result[index] = array[index + start];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.some` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     */
	    function baseSome(collection, predicate) {
	      var result;

	      baseEach(collection, function(value, index, collection) {
	        result = predicate(value, index, collection);
	        return !result;
	      });
	      return !!result;
	    }

	    /**
	     * The base implementation of `_.sortBy` which uses `comparer` to define
	     * the sort order of `array` and replaces criteria objects with their
	     * corresponding values.
	     *
	     * @private
	     * @param {Array} array The array to sort.
	     * @param {Function} comparer The function to define sort order.
	     * @returns {Array} Returns `array`.
	     */
	    function baseSortBy(array, comparer) {
	      var length = array.length;

	      array.sort(comparer);
	      while (length--) {
	        array[length] = array[length].value;
	      }
	      return array;
	    }

	    /**
	     * The base implementation of `_.sortByOrder` without param guards.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} orders The sort orders of `iteratees`.
	     * @returns {Array} Returns the new sorted array.
	     */
	    function baseSortByOrder(collection, iteratees, orders) {
	      var callback = getCallback(),
	          index = -1;

	      iteratees = arrayMap(iteratees, function(iteratee) { return callback(iteratee); });

	      var result = baseMap(collection, function(value) {
	        var criteria = arrayMap(iteratees, function(iteratee) { return iteratee(value); });
	        return { 'criteria': criteria, 'index': ++index, 'value': value };
	      });

	      return baseSortBy(result, function(object, other) {
	        return compareMultiple(object, other, orders);
	      });
	    }

	    /**
	     * The base implementation of `_.sum` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @returns {number} Returns the sum.
	     */
	    function baseSum(collection, iteratee) {
	      var result = 0;
	      baseEach(collection, function(value, index, collection) {
	        result += +iteratee(value, index, collection) || 0;
	      });
	      return result;
	    }

	    /**
	     * The base implementation of `_.uniq` without support for callback shorthands
	     * and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to inspect.
	     * @param {Function} [iteratee] The function invoked per iteration.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     */
	    function baseUniq(array, iteratee) {
	      var index = -1,
	          indexOf = getIndexOf(),
	          length = array.length,
	          isCommon = indexOf == baseIndexOf,
	          isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	          seen = isLarge ? createCache() : null,
	          result = [];

	      if (seen) {
	        indexOf = cacheIndexOf;
	        isCommon = false;
	      } else {
	        isLarge = false;
	        seen = iteratee ? [] : result;
	      }
	      outer:
	      while (++index < length) {
	        var value = array[index],
	            computed = iteratee ? iteratee(value, index, array) : value;

	        if (isCommon && value === value) {
	          var seenIndex = seen.length;
	          while (seenIndex--) {
	            if (seen[seenIndex] === computed) {
	              continue outer;
	            }
	          }
	          if (iteratee) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	        else if (indexOf(seen, computed, 0) < 0) {
	          if (iteratee || isLarge) {
	            seen.push(computed);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.values` and `_.valuesIn` which creates an
	     * array of `object` property values corresponding to the property names
	     * of `props`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array} props The property names to get values for.
	     * @returns {Object} Returns the array of property values.
	     */
	    function baseValues(object, props) {
	      var index = -1,
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        result[index] = object[props[index]];
	      }
	      return result;
	    }

	    /**
	     * The base implementation of `_.dropRightWhile`, `_.dropWhile`, `_.takeRightWhile`,
	     * and `_.takeWhile` without support for callback shorthands and `this` binding.
	     *
	     * @private
	     * @param {Array} array The array to query.
	     * @param {Function} predicate The function invoked per iteration.
	     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function baseWhile(array, predicate, isDrop, fromRight) {
	      var length = array.length,
	          index = fromRight ? length : -1;

	      while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {}
	      return isDrop
	        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
	        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
	    }

	    /**
	     * The base implementation of `wrapperValue` which returns the result of
	     * performing a sequence of actions on the unwrapped `value`, where each
	     * successive action is supplied the return value of the previous.
	     *
	     * @private
	     * @param {*} value The unwrapped value.
	     * @param {Array} actions Actions to peform to resolve the unwrapped value.
	     * @returns {*} Returns the resolved value.
	     */
	    function baseWrapperValue(value, actions) {
	      var result = value;
	      if (result instanceof LazyWrapper) {
	        result = result.value();
	      }
	      var index = -1,
	          length = actions.length;

	      while (++index < length) {
	        var action = actions[index];
	        result = action.func.apply(action.thisArg, arrayPush([result], action.args));
	      }
	      return result;
	    }

	    /**
	     * Performs a binary search of `array` to determine the index at which `value`
	     * should be inserted into `array` in order to maintain its sort order.
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndex(array, value, retHighest) {
	      var low = 0,
	          high = array ? array.length : low;

	      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
	        while (low < high) {
	          var mid = (low + high) >>> 1,
	              computed = array[mid];

	          if ((retHighest ? (computed <= value) : (computed < value)) && computed !== null) {
	            low = mid + 1;
	          } else {
	            high = mid;
	          }
	        }
	        return high;
	      }
	      return binaryIndexBy(array, value, identity, retHighest);
	    }

	    /**
	     * This function is like `binaryIndex` except that it invokes `iteratee` for
	     * `value` and each element of `array` to compute their sort ranking. The
	     * iteratee is invoked with one argument; (value).
	     *
	     * @private
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function} iteratee The function invoked per iteration.
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     */
	    function binaryIndexBy(array, value, iteratee, retHighest) {
	      value = iteratee(value);

	      var low = 0,
	          high = array ? array.length : 0,
	          valIsNaN = value !== value,
	          valIsNull = value === null,
	          valIsUndef = value === undefined;

	      while (low < high) {
	        var mid = nativeFloor((low + high) / 2),
	            computed = iteratee(array[mid]),
	            isDef = computed !== undefined,
	            isReflexive = computed === computed;

	        if (valIsNaN) {
	          var setLow = isReflexive || retHighest;
	        } else if (valIsNull) {
	          setLow = isReflexive && isDef && (retHighest || computed != null);
	        } else if (valIsUndef) {
	          setLow = isReflexive && (retHighest || isDef);
	        } else if (computed == null) {
	          setLow = false;
	        } else {
	          setLow = retHighest ? (computed <= value) : (computed < value);
	        }
	        if (setLow) {
	          low = mid + 1;
	        } else {
	          high = mid;
	        }
	      }
	      return nativeMin(high, MAX_ARRAY_INDEX);
	    }

	    /**
	     * A specialized version of `baseCallback` which only supports `this` binding
	     * and specifying the number of arguments to provide to `func`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {number} [argCount] The number of arguments to provide to `func`.
	     * @returns {Function} Returns the callback.
	     */
	    function bindCallback(func, thisArg, argCount) {
	      if (typeof func != 'function') {
	        return identity;
	      }
	      if (thisArg === undefined) {
	        return func;
	      }
	      switch (argCount) {
	        case 1: return function(value) {
	          return func.call(thisArg, value);
	        };
	        case 3: return function(value, index, collection) {
	          return func.call(thisArg, value, index, collection);
	        };
	        case 4: return function(accumulator, value, index, collection) {
	          return func.call(thisArg, accumulator, value, index, collection);
	        };
	        case 5: return function(value, other, key, object, source) {
	          return func.call(thisArg, value, other, key, object, source);
	        };
	      }
	      return function() {
	        return func.apply(thisArg, arguments);
	      };
	    }

	    /**
	     * Creates a clone of the given array buffer.
	     *
	     * @private
	     * @param {ArrayBuffer} buffer The array buffer to clone.
	     * @returns {ArrayBuffer} Returns the cloned array buffer.
	     */
	    function bufferClone(buffer) {
	      var result = new ArrayBuffer(buffer.byteLength),
	          view = new Uint8Array(result);

	      view.set(new Uint8Array(buffer));
	      return result;
	    }

	    /**
	     * Creates an array that is the composition of partially applied arguments,
	     * placeholders, and provided arguments into a single array of arguments.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to prepend to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgs(args, partials, holders) {
	      var holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          leftIndex = -1,
	          leftLength = partials.length,
	          result = Array(leftLength + argsLength);

	      while (++leftIndex < leftLength) {
	        result[leftIndex] = partials[leftIndex];
	      }
	      while (++argsIndex < holdersLength) {
	        result[holders[argsIndex]] = args[argsIndex];
	      }
	      while (argsLength--) {
	        result[leftIndex++] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * This function is like `composeArgs` except that the arguments composition
	     * is tailored for `_.partialRight`.
	     *
	     * @private
	     * @param {Array|Object} args The provided arguments.
	     * @param {Array} partials The arguments to append to those provided.
	     * @param {Array} holders The `partials` placeholder indexes.
	     * @returns {Array} Returns the new array of composed arguments.
	     */
	    function composeArgsRight(args, partials, holders) {
	      var holdersIndex = -1,
	          holdersLength = holders.length,
	          argsIndex = -1,
	          argsLength = nativeMax(args.length - holdersLength, 0),
	          rightIndex = -1,
	          rightLength = partials.length,
	          result = Array(argsLength + rightLength);

	      while (++argsIndex < argsLength) {
	        result[argsIndex] = args[argsIndex];
	      }
	      var offset = argsIndex;
	      while (++rightIndex < rightLength) {
	        result[offset + rightIndex] = partials[rightIndex];
	      }
	      while (++holdersIndex < holdersLength) {
	        result[offset + holders[holdersIndex]] = args[argsIndex++];
	      }
	      return result;
	    }

	    /**
	     * Creates a `_.countBy`, `_.groupBy`, `_.indexBy`, or `_.partition` function.
	     *
	     * @private
	     * @param {Function} setter The function to set keys and values of the accumulator object.
	     * @param {Function} [initializer] The function to initialize the accumulator object.
	     * @returns {Function} Returns the new aggregator function.
	     */
	    function createAggregator(setter, initializer) {
	      return function(collection, iteratee, thisArg) {
	        var result = initializer ? initializer() : {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        if (isArray(collection)) {
	          var index = -1,
	              length = collection.length;

	          while (++index < length) {
	            var value = collection[index];
	            setter(result, value, iteratee(value, index, collection), collection);
	          }
	        } else {
	          baseEach(collection, function(value, key, collection) {
	            setter(result, value, iteratee(value, key, collection), collection);
	          });
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @returns {Function} Returns the new assigner function.
	     */
	    function createAssigner(assigner) {
	      return restParam(function(object, sources) {
	        var index = -1,
	            length = object == null ? 0 : sources.length,
	            customizer = length > 2 ? sources[length - 2] : undefined,
	            guard = length > 2 ? sources[2] : undefined,
	            thisArg = length > 1 ? sources[length - 1] : undefined;

	        if (typeof customizer == 'function') {
	          customizer = bindCallback(customizer, thisArg, 5);
	          length -= 2;
	        } else {
	          customizer = typeof thisArg == 'function' ? thisArg : undefined;
	          length -= (customizer ? 1 : 0);
	        }
	        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	          customizer = length < 3 ? undefined : customizer;
	          length = 1;
	        }
	        while (++index < length) {
	          var source = sources[index];
	          if (source) {
	            assigner(object, source, customizer);
	          }
	        }
	        return object;
	      });
	    }

	    /**
	     * Creates a `baseEach` or `baseEachRight` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseEach(eachFunc, fromRight) {
	      return function(collection, iteratee) {
	        var length = collection ? getLength(collection) : 0;
	        if (!isLength(length)) {
	          return eachFunc(collection, iteratee);
	        }
	        var index = fromRight ? length : -1,
	            iterable = toObject(collection);

	        while ((fromRight ? index-- : ++index < length)) {
	          if (iteratee(iterable[index], index, iterable) === false) {
	            break;
	          }
	        }
	        return collection;
	      };
	    }

	    /**
	     * Creates a base function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new base function.
	     */
	    function createBaseFor(fromRight) {
	      return function(object, iteratee, keysFunc) {
	        var iterable = toObject(object),
	            props = keysFunc(object),
	            length = props.length,
	            index = fromRight ? length : -1;

	        while ((fromRight ? index-- : ++index < length)) {
	          var key = props[index];
	          if (iteratee(iterable[key], key, iterable) === false) {
	            break;
	          }
	        }
	        return object;
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the `this`
	     * binding of `thisArg`.
	     *
	     * @private
	     * @param {Function} func The function to bind.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createBindWrapper(func, thisArg) {
	      var Ctor = createCtorWrapper(func);

	      function wrapper() {
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(thisArg, arguments);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `Set` cache object to optimize linear searches of large arrays.
	     *
	     * @private
	     * @param {Array} [values] The values to cache.
	     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	     */
	    function createCache(values) {
	      return (nativeCreate && Set) ? new SetCache(values) : null;
	    }

	    /**
	     * Creates a function that produces compound words out of the words in a
	     * given string.
	     *
	     * @private
	     * @param {Function} callback The function to combine each word.
	     * @returns {Function} Returns the new compounder function.
	     */
	    function createCompounder(callback) {
	      return function(string) {
	        var index = -1,
	            array = words(deburr(string)),
	            length = array.length,
	            result = '';

	        while (++index < length) {
	          result = callback(result, array[index], index);
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that produces an instance of `Ctor` regardless of
	     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
	     *
	     * @private
	     * @param {Function} Ctor The constructor to wrap.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createCtorWrapper(Ctor) {
	      return function() {
	        // Use a `switch` statement to work with class constructors.
	        // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
	        // for more details.
	        var args = arguments;
	        switch (args.length) {
	          case 0: return new Ctor;
	          case 1: return new Ctor(args[0]);
	          case 2: return new Ctor(args[0], args[1]);
	          case 3: return new Ctor(args[0], args[1], args[2]);
	          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
	          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
	          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
	          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
	        }
	        var thisBinding = baseCreate(Ctor.prototype),
	            result = Ctor.apply(thisBinding, args);

	        // Mimic the constructor's `return` behavior.
	        // See https://es5.github.io/#x13.2.2 for more details.
	        return isObject(result) ? result : thisBinding;
	      };
	    }

	    /**
	     * Creates a `_.curry` or `_.curryRight` function.
	     *
	     * @private
	     * @param {boolean} flag The curry bit flag.
	     * @returns {Function} Returns the new curry function.
	     */
	    function createCurry(flag) {
	      function curryFunc(func, arity, guard) {
	        if (guard && isIterateeCall(func, arity, guard)) {
	          arity = undefined;
	        }
	        var result = createWrapper(func, flag, undefined, undefined, undefined, undefined, undefined, arity);
	        result.placeholder = curryFunc.placeholder;
	        return result;
	      }
	      return curryFunc;
	    }

	    /**
	     * Creates a `_.defaults` or `_.defaultsDeep` function.
	     *
	     * @private
	     * @param {Function} assigner The function to assign values.
	     * @param {Function} customizer The function to customize assigned values.
	     * @returns {Function} Returns the new defaults function.
	     */
	    function createDefaults(assigner, customizer) {
	      return restParam(function(args) {
	        var object = args[0];
	        if (object == null) {
	          return object;
	        }
	        args.push(customizer);
	        return assigner.apply(undefined, args);
	      });
	    }

	    /**
	     * Creates a `_.max` or `_.min` function.
	     *
	     * @private
	     * @param {Function} comparator The function used to compare values.
	     * @param {*} exValue The initial extremum value.
	     * @returns {Function} Returns the new extremum function.
	     */
	    function createExtremum(comparator, exValue) {
	      return function(collection, iteratee, thisArg) {
	        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	          iteratee = undefined;
	        }
	        iteratee = getCallback(iteratee, thisArg, 3);
	        if (iteratee.length == 1) {
	          collection = isArray(collection) ? collection : toIterable(collection);
	          var result = arrayExtremum(collection, iteratee, comparator, exValue);
	          if (!(collection.length && result === exValue)) {
	            return result;
	          }
	        }
	        return baseExtremum(collection, iteratee, comparator, exValue);
	      };
	    }

	    /**
	     * Creates a `_.find` or `_.findLast` function.
	     *
	     * @private
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFind(eachFunc, fromRight) {
	      return function(collection, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        if (isArray(collection)) {
	          var index = baseFindIndex(collection, predicate, fromRight);
	          return index > -1 ? collection[index] : undefined;
	        }
	        return baseFind(collection, predicate, eachFunc);
	      };
	    }

	    /**
	     * Creates a `_.findIndex` or `_.findLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindIndex(fromRight) {
	      return function(array, predicate, thisArg) {
	        if (!(array && array.length)) {
	          return -1;
	        }
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFindIndex(array, predicate, fromRight);
	      };
	    }

	    /**
	     * Creates a `_.findKey` or `_.findLastKey` function.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new find function.
	     */
	    function createFindKey(objectFunc) {
	      return function(object, predicate, thisArg) {
	        predicate = getCallback(predicate, thisArg, 3);
	        return baseFind(object, predicate, objectFunc, true);
	      };
	    }

	    /**
	     * Creates a `_.flow` or `_.flowRight` function.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify iterating from right to left.
	     * @returns {Function} Returns the new flow function.
	     */
	    function createFlow(fromRight) {
	      return function() {
	        var wrapper,
	            length = arguments.length,
	            index = fromRight ? length : -1,
	            leftIndex = 0,
	            funcs = Array(length);

	        while ((fromRight ? index-- : ++index < length)) {
	          var func = funcs[leftIndex++] = arguments[index];
	          if (typeof func != 'function') {
	            throw new TypeError(FUNC_ERROR_TEXT);
	          }
	          if (!wrapper && LodashWrapper.prototype.thru && getFuncName(func) == 'wrapper') {
	            wrapper = new LodashWrapper([], true);
	          }
	        }
	        index = wrapper ? -1 : length;
	        while (++index < length) {
	          func = funcs[index];

	          var funcName = getFuncName(func),
	              data = funcName == 'wrapper' ? getData(func) : undefined;

	          if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {
	            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
	          } else {
	            wrapper = (func.length == 1 && isLaziable(func)) ? wrapper[funcName]() : wrapper.thru(func);
	          }
	        }
	        return function() {
	          var args = arguments,
	              value = args[0];

	          if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {
	            return wrapper.plant(value).value();
	          }
	          var index = 0,
	              result = length ? funcs[index].apply(this, args) : value;

	          while (++index < length) {
	            result = funcs[index].call(this, result);
	          }
	          return result;
	        };
	      };
	    }

	    /**
	     * Creates a function for `_.forEach` or `_.forEachRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForEach(arrayFunc, eachFunc) {
	      return function(collection, iteratee, thisArg) {
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee)
	          : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	      };
	    }

	    /**
	     * Creates a function for `_.forIn` or `_.forInRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForIn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee, keysIn);
	      };
	    }

	    /**
	     * Creates a function for `_.forOwn` or `_.forOwnRight`.
	     *
	     * @private
	     * @param {Function} objectFunc The function to iterate over an object.
	     * @returns {Function} Returns the new each function.
	     */
	    function createForOwn(objectFunc) {
	      return function(object, iteratee, thisArg) {
	        if (typeof iteratee != 'function' || thisArg !== undefined) {
	          iteratee = bindCallback(iteratee, thisArg, 3);
	        }
	        return objectFunc(object, iteratee);
	      };
	    }

	    /**
	     * Creates a function for `_.mapKeys` or `_.mapValues`.
	     *
	     * @private
	     * @param {boolean} [isMapKeys] Specify mapping keys instead of values.
	     * @returns {Function} Returns the new map function.
	     */
	    function createObjectMapper(isMapKeys) {
	      return function(object, iteratee, thisArg) {
	        var result = {};
	        iteratee = getCallback(iteratee, thisArg, 3);

	        baseForOwn(object, function(value, key, object) {
	          var mapped = iteratee(value, key, object);
	          key = isMapKeys ? mapped : key;
	          value = isMapKeys ? value : mapped;
	          result[key] = value;
	        });
	        return result;
	      };
	    }

	    /**
	     * Creates a function for `_.padLeft` or `_.padRight`.
	     *
	     * @private
	     * @param {boolean} [fromRight] Specify padding from the right.
	     * @returns {Function} Returns the new pad function.
	     */
	    function createPadDir(fromRight) {
	      return function(string, length, chars) {
	        string = baseToString(string);
	        return (fromRight ? string : '') + createPadding(string, length, chars) + (fromRight ? '' : string);
	      };
	    }

	    /**
	     * Creates a `_.partial` or `_.partialRight` function.
	     *
	     * @private
	     * @param {boolean} flag The partial bit flag.
	     * @returns {Function} Returns the new partial function.
	     */
	    function createPartial(flag) {
	      var partialFunc = restParam(function(func, partials) {
	        var holders = replaceHolders(partials, partialFunc.placeholder);
	        return createWrapper(func, flag, undefined, partials, holders);
	      });
	      return partialFunc;
	    }

	    /**
	     * Creates a function for `_.reduce` or `_.reduceRight`.
	     *
	     * @private
	     * @param {Function} arrayFunc The function to iterate over an array.
	     * @param {Function} eachFunc The function to iterate over a collection.
	     * @returns {Function} Returns the new each function.
	     */
	    function createReduce(arrayFunc, eachFunc) {
	      return function(collection, iteratee, accumulator, thisArg) {
	        var initFromArray = arguments.length < 3;
	        return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	          ? arrayFunc(collection, iteratee, accumulator, initFromArray)
	          : baseReduce(collection, getCallback(iteratee, thisArg, 4), accumulator, initFromArray, eachFunc);
	      };
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with optional `this`
	     * binding of, partial application, and currying.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
	     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
	      var isAry = bitmask & ARY_FLAG,
	          isBind = bitmask & BIND_FLAG,
	          isBindKey = bitmask & BIND_KEY_FLAG,
	          isCurry = bitmask & CURRY_FLAG,
	          isCurryBound = bitmask & CURRY_BOUND_FLAG,
	          isCurryRight = bitmask & CURRY_RIGHT_FLAG,
	          Ctor = isBindKey ? undefined : createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it to other functions.
	        var length = arguments.length,
	            index = length,
	            args = Array(length);

	        while (index--) {
	          args[index] = arguments[index];
	        }
	        if (partials) {
	          args = composeArgs(args, partials, holders);
	        }
	        if (partialsRight) {
	          args = composeArgsRight(args, partialsRight, holdersRight);
	        }
	        if (isCurry || isCurryRight) {
	          var placeholder = wrapper.placeholder,
	              argsHolders = replaceHolders(args, placeholder);

	          length -= argsHolders.length;
	          if (length < arity) {
	            var newArgPos = argPos ? arrayCopy(argPos) : undefined,
	                newArity = nativeMax(arity - length, 0),
	                newsHolders = isCurry ? argsHolders : undefined,
	                newHoldersRight = isCurry ? undefined : argsHolders,
	                newPartials = isCurry ? args : undefined,
	                newPartialsRight = isCurry ? undefined : args;

	            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
	            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

	            if (!isCurryBound) {
	              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
	            }
	            var newData = [func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity],
	                result = createHybridWrapper.apply(undefined, newData);

	            if (isLaziable(func)) {
	              setData(result, newData);
	            }
	            result.placeholder = placeholder;
	            return result;
	          }
	        }
	        var thisBinding = isBind ? thisArg : this,
	            fn = isBindKey ? thisBinding[func] : func;

	        if (argPos) {
	          args = reorder(args, argPos);
	        }
	        if (isAry && ary < args.length) {
	          args.length = ary;
	        }
	        if (this && this !== root && this instanceof wrapper) {
	          fn = Ctor || createCtorWrapper(func);
	        }
	        return fn.apply(thisBinding, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates the padding required for `string` based on the given `length`.
	     * The `chars` string is truncated if the number of characters exceeds `length`.
	     *
	     * @private
	     * @param {string} string The string to create padding for.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the pad for `string`.
	     */
	    function createPadding(string, length, chars) {
	      var strLength = string.length;
	      length = +length;

	      if (strLength >= length || !nativeIsFinite(length)) {
	        return '';
	      }
	      var padLength = length - strLength;
	      chars = chars == null ? ' ' : (chars + '');
	      return repeat(chars, nativeCeil(padLength / chars.length)).slice(0, padLength);
	    }

	    /**
	     * Creates a function that wraps `func` and invokes it with the optional `this`
	     * binding of `thisArg` and the `partials` prepended to those provided to
	     * the wrapper.
	     *
	     * @private
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {Array} partials The arguments to prepend to those provided to the new function.
	     * @returns {Function} Returns the new bound function.
	     */
	    function createPartialWrapper(func, bitmask, thisArg, partials) {
	      var isBind = bitmask & BIND_FLAG,
	          Ctor = createCtorWrapper(func);

	      function wrapper() {
	        // Avoid `arguments` object use disqualifying optimizations by
	        // converting it to an array before providing it `func`.
	        var argsIndex = -1,
	            argsLength = arguments.length,
	            leftIndex = -1,
	            leftLength = partials.length,
	            args = Array(leftLength + argsLength);

	        while (++leftIndex < leftLength) {
	          args[leftIndex] = partials[leftIndex];
	        }
	        while (argsLength--) {
	          args[leftIndex++] = arguments[++argsIndex];
	        }
	        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
	        return fn.apply(isBind ? thisArg : this, args);
	      }
	      return wrapper;
	    }

	    /**
	     * Creates a `_.ceil`, `_.floor`, or `_.round` function.
	     *
	     * @private
	     * @param {string} methodName The name of the `Math` method to use when rounding.
	     * @returns {Function} Returns the new round function.
	     */
	    function createRound(methodName) {
	      var func = Math[methodName];
	      return function(number, precision) {
	        precision = precision === undefined ? 0 : (+precision || 0);
	        if (precision) {
	          precision = pow(10, precision);
	          return func(number * precision) / precision;
	        }
	        return func(number);
	      };
	    }

	    /**
	     * Creates a `_.sortedIndex` or `_.sortedLastIndex` function.
	     *
	     * @private
	     * @param {boolean} [retHighest] Specify returning the highest qualified index.
	     * @returns {Function} Returns the new index function.
	     */
	    function createSortedIndex(retHighest) {
	      return function(array, value, iteratee, thisArg) {
	        var callback = getCallback(iteratee);
	        return (iteratee == null && callback === baseCallback)
	          ? binaryIndex(array, value, retHighest)
	          : binaryIndexBy(array, value, callback(iteratee, thisArg, 1), retHighest);
	      };
	    }

	    /**
	     * Creates a function that either curries or invokes `func` with optional
	     * `this` binding and partially applied arguments.
	     *
	     * @private
	     * @param {Function|string} func The function or method name to reference.
	     * @param {number} bitmask The bitmask of flags.
	     *  The bitmask may be composed of the following flags:
	     *     1 - `_.bind`
	     *     2 - `_.bindKey`
	     *     4 - `_.curry` or `_.curryRight` of a bound function
	     *     8 - `_.curry`
	     *    16 - `_.curryRight`
	     *    32 - `_.partial`
	     *    64 - `_.partialRight`
	     *   128 - `_.rearg`
	     *   256 - `_.ary`
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param {Array} [partials] The arguments to be partially applied.
	     * @param {Array} [holders] The `partials` placeholder indexes.
	     * @param {Array} [argPos] The argument positions of the new function.
	     * @param {number} [ary] The arity cap of `func`.
	     * @param {number} [arity] The arity of `func`.
	     * @returns {Function} Returns the new wrapped function.
	     */
	    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
	      var isBindKey = bitmask & BIND_KEY_FLAG;
	      if (!isBindKey && typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = partials ? partials.length : 0;
	      if (!length) {
	        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
	        partials = holders = undefined;
	      }
	      length -= (holders ? holders.length : 0);
	      if (bitmask & PARTIAL_RIGHT_FLAG) {
	        var partialsRight = partials,
	            holdersRight = holders;

	        partials = holders = undefined;
	      }
	      var data = isBindKey ? undefined : getData(func),
	          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

	      if (data) {
	        mergeData(newData, data);
	        bitmask = newData[1];
	        arity = newData[9];
	      }
	      newData[9] = arity == null
	        ? (isBindKey ? 0 : func.length)
	        : (nativeMax(arity - length, 0) || 0);

	      if (bitmask == BIND_FLAG) {
	        var result = createBindWrapper(newData[0], newData[2]);
	      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
	        result = createPartialWrapper.apply(undefined, newData);
	      } else {
	        result = createHybridWrapper.apply(undefined, newData);
	      }
	      var setter = data ? baseSetData : setData;
	      return setter(result, newData);
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for arrays with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Array} array The array to compare.
	     * @param {Array} other The other array to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing arrays.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	     */
	    function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var index = -1,
	          arrLength = array.length,
	          othLength = other.length;

	      if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	        return false;
	      }
	      // Ignore non-index properties.
	      while (++index < arrLength) {
	        var arrValue = array[index],
	            othValue = other[index],
	            result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	        if (result !== undefined) {
	          if (result) {
	            continue;
	          }
	          return false;
	        }
	        // Recursively compare arrays (susceptible to call stack limits).
	        if (isLoose) {
	          if (!arraySome(other, function(othValue) {
	                return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	              })) {
	            return false;
	          }
	        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for comparing objects of
	     * the same `toStringTag`.
	     *
	     * **Note:** This function only supports comparing values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {string} tag The `toStringTag` of the objects to compare.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalByTag(object, other, tag) {
	      switch (tag) {
	        case boolTag:
	        case dateTag:
	          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	          return +object == +other;

	        case errorTag:
	          return object.name == other.name && object.message == other.message;

	        case numberTag:
	          // Treat `NaN` vs. `NaN` as equal.
	          return (object != +object)
	            ? other != +other
	            : object == +other;

	        case regexpTag:
	        case stringTag:
	          // Coerce regexes to strings and treat strings primitives and string
	          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	          return object == (other + '');
	      }
	      return false;
	    }

	    /**
	     * A specialized version of `baseIsEqualDeep` for objects with support for
	     * partial deep comparisons.
	     *
	     * @private
	     * @param {Object} object The object to compare.
	     * @param {Object} other The other object to compare.
	     * @param {Function} equalFunc The function to determine equivalents of values.
	     * @param {Function} [customizer] The function to customize comparing values.
	     * @param {boolean} [isLoose] Specify performing partial comparisons.
	     * @param {Array} [stackA] Tracks traversed `value` objects.
	     * @param {Array} [stackB] Tracks traversed `other` objects.
	     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	     */
	    function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	      var objProps = keys(object),
	          objLength = objProps.length,
	          othProps = keys(other),
	          othLength = othProps.length;

	      if (objLength != othLength && !isLoose) {
	        return false;
	      }
	      var index = objLength;
	      while (index--) {
	        var key = objProps[index];
	        if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	          return false;
	        }
	      }
	      var skipCtor = isLoose;
	      while (++index < objLength) {
	        key = objProps[index];
	        var objValue = object[key],
	            othValue = other[key],
	            result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	        // Recursively compare objects (susceptible to call stack limits).
	        if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	          return false;
	        }
	        skipCtor || (skipCtor = key == 'constructor');
	      }
	      if (!skipCtor) {
	        var objCtor = object.constructor,
	            othCtor = other.constructor;

	        // Non `Object` object instances with different constructors are not equal.
	        if (objCtor != othCtor &&
	            ('constructor' in object && 'constructor' in other) &&
	            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	          return false;
	        }
	      }
	      return true;
	    }

	    /**
	     * Gets the appropriate "callback" function. If the `_.callback` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseCallback` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function} Returns the chosen function or its result.
	     */
	    function getCallback(func, thisArg, argCount) {
	      var result = lodash.callback || callback;
	      result = result === callback ? baseCallback : result;
	      return argCount ? result(func, thisArg, argCount) : result;
	    }

	    /**
	     * Gets metadata for `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {*} Returns the metadata for `func`.
	     */
	    var getData = !metaMap ? noop : function(func) {
	      return metaMap.get(func);
	    };

	    /**
	     * Gets the name of `func`.
	     *
	     * @private
	     * @param {Function} func The function to query.
	     * @returns {string} Returns the function name.
	     */
	    function getFuncName(func) {
	      var result = func.name,
	          array = realNames[result],
	          length = array ? array.length : 0;

	      while (length--) {
	        var data = array[length],
	            otherFunc = data.func;
	        if (otherFunc == null || otherFunc == func) {
	          return data.name;
	        }
	      }
	      return result;
	    }

	    /**
	     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
	     * customized this function returns the custom method, otherwise it returns
	     * the `baseIndexOf` function. If arguments are provided the chosen function
	     * is invoked with them and its result is returned.
	     *
	     * @private
	     * @returns {Function|number} Returns the chosen function or its result.
	     */
	    function getIndexOf(collection, target, fromIndex) {
	      var result = lodash.indexOf || indexOf;
	      result = result === indexOf ? baseIndexOf : result;
	      return collection ? result(collection, target, fromIndex) : result;
	    }

	    /**
	     * Gets the "length" property value of `object`.
	     *
	     * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	     * that affects Safari on at least iOS 8.1-8.3 ARM64.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {*} Returns the "length" value.
	     */
	    var getLength = baseProperty('length');

	    /**
	     * Gets the propery names, values, and compare flags of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the match data of `object`.
	     */
	    function getMatchData(object) {
	      var result = pairs(object),
	          length = result.length;

	      while (length--) {
	        result[length][2] = isStrictComparable(result[length][1]);
	      }
	      return result;
	    }

	    /**
	     * Gets the native function at `key` of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {string} key The key of the method to get.
	     * @returns {*} Returns the function if it's native, else `undefined`.
	     */
	    function getNative(object, key) {
	      var value = object == null ? undefined : object[key];
	      return isNative(value) ? value : undefined;
	    }

	    /**
	     * Gets the view, applying any `transforms` to the `start` and `end` positions.
	     *
	     * @private
	     * @param {number} start The start of the view.
	     * @param {number} end The end of the view.
	     * @param {Array} transforms The transformations to apply to the view.
	     * @returns {Object} Returns an object containing the `start` and `end`
	     *  positions of the view.
	     */
	    function getView(start, end, transforms) {
	      var index = -1,
	          length = transforms.length;

	      while (++index < length) {
	        var data = transforms[index],
	            size = data.size;

	        switch (data.type) {
	          case 'drop':      start += size; break;
	          case 'dropRight': end -= size; break;
	          case 'take':      end = nativeMin(end, start + size); break;
	          case 'takeRight': start = nativeMax(start, end - size); break;
	        }
	      }
	      return { 'start': start, 'end': end };
	    }

	    /**
	     * Initializes an array clone.
	     *
	     * @private
	     * @param {Array} array The array to clone.
	     * @returns {Array} Returns the initialized clone.
	     */
	    function initCloneArray(array) {
	      var length = array.length,
	          result = new array.constructor(length);

	      // Add array properties assigned by `RegExp#exec`.
	      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	        result.index = array.index;
	        result.input = array.input;
	      }
	      return result;
	    }

	    /**
	     * Initializes an object clone.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneObject(object) {
	      var Ctor = object.constructor;
	      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	        Ctor = Object;
	      }
	      return new Ctor;
	    }

	    /**
	     * Initializes an object clone based on its `toStringTag`.
	     *
	     * **Note:** This function only supports cloning values with tags of
	     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	     *
	     * @private
	     * @param {Object} object The object to clone.
	     * @param {string} tag The `toStringTag` of the object to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @returns {Object} Returns the initialized clone.
	     */
	    function initCloneByTag(object, tag, isDeep) {
	      var Ctor = object.constructor;
	      switch (tag) {
	        case arrayBufferTag:
	          return bufferClone(object);

	        case boolTag:
	        case dateTag:
	          return new Ctor(+object);

	        case float32Tag: case float64Tag:
	        case int8Tag: case int16Tag: case int32Tag:
	        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	          var buffer = object.buffer;
	          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	        case numberTag:
	        case stringTag:
	          return new Ctor(object);

	        case regexpTag:
	          var result = new Ctor(object.source, reFlags.exec(object));
	          result.lastIndex = object.lastIndex;
	      }
	      return result;
	    }

	    /**
	     * Invokes the method at `path` on `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {Array} args The arguments to invoke the method with.
	     * @returns {*} Returns the result of the invoked method.
	     */
	    function invokePath(object, path, args) {
	      if (object != null && !isKey(path, object)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        path = last(path);
	      }
	      var func = object == null ? object : object[path];
	      return func == null ? undefined : func.apply(object, args);
	    }

	    /**
	     * Checks if `value` is array-like.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	     */
	    function isArrayLike(value) {
	      return value != null && isLength(getLength(value));
	    }

	    /**
	     * Checks if `value` is a valid array-like index.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	     */
	    function isIndex(value, length) {
	      value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	      length = length == null ? MAX_SAFE_INTEGER : length;
	      return value > -1 && value % 1 == 0 && value < length;
	    }

	    /**
	     * Checks if the provided arguments are from an iteratee call.
	     *
	     * @private
	     * @param {*} value The potential iteratee value argument.
	     * @param {*} index The potential iteratee index or key argument.
	     * @param {*} object The potential iteratee object argument.
	     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	     */
	    function isIterateeCall(value, index, object) {
	      if (!isObject(object)) {
	        return false;
	      }
	      var type = typeof index;
	      if (type == 'number'
	          ? (isArrayLike(object) && isIndex(index, object.length))
	          : (type == 'string' && index in object)) {
	        var other = object[index];
	        return value === value ? (value === other) : (other !== other);
	      }
	      return false;
	    }

	    /**
	     * Checks if `value` is a property name and not a property path.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @param {Object} [object] The object to query keys on.
	     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	     */
	    function isKey(value, object) {
	      var type = typeof value;
	      if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	        return true;
	      }
	      if (isArray(value)) {
	        return false;
	      }
	      var result = !reIsDeepProp.test(value);
	      return result || (object != null && value in toObject(object));
	    }

	    /**
	     * Checks if `func` has a lazy counterpart.
	     *
	     * @private
	     * @param {Function} func The function to check.
	     * @returns {boolean} Returns `true` if `func` has a lazy counterpart, else `false`.
	     */
	    function isLaziable(func) {
	      var funcName = getFuncName(func);
	      if (!(funcName in LazyWrapper.prototype)) {
	        return false;
	      }
	      var other = lodash[funcName];
	      if (func === other) {
	        return true;
	      }
	      var data = getData(other);
	      return !!data && func === data[0];
	    }

	    /**
	     * Checks if `value` is a valid array-like length.
	     *
	     * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	     */
	    function isLength(value) {
	      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	    }

	    /**
	     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	     *
	     * @private
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` if suitable for strict
	     *  equality comparisons, else `false`.
	     */
	    function isStrictComparable(value) {
	      return value === value && !isObject(value);
	    }

	    /**
	     * Merges the function metadata of `source` into `data`.
	     *
	     * Merging metadata reduces the number of wrappers required to invoke a function.
	     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
	     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
	     * augment function arguments, making the order in which they are executed important,
	     * preventing the merging of metadata. However, we make an exception for a safe
	     * common case where curried functions have `_.ary` and or `_.rearg` applied.
	     *
	     * @private
	     * @param {Array} data The destination metadata.
	     * @param {Array} source The source metadata.
	     * @returns {Array} Returns `data`.
	     */
	    function mergeData(data, source) {
	      var bitmask = data[1],
	          srcBitmask = source[1],
	          newBitmask = bitmask | srcBitmask,
	          isCommon = newBitmask < ARY_FLAG;

	      var isCombo =
	        (srcBitmask == ARY_FLAG && bitmask == CURRY_FLAG) ||
	        (srcBitmask == ARY_FLAG && bitmask == REARG_FLAG && data[7].length <= source[8]) ||
	        (srcBitmask == (ARY_FLAG | REARG_FLAG) && bitmask == CURRY_FLAG);

	      // Exit early if metadata can't be merged.
	      if (!(isCommon || isCombo)) {
	        return data;
	      }
	      // Use source `thisArg` if available.
	      if (srcBitmask & BIND_FLAG) {
	        data[2] = source[2];
	        // Set when currying a bound function.
	        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
	      }
	      // Compose partial arguments.
	      var value = source[3];
	      if (value) {
	        var partials = data[3];
	        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
	        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
	      }
	      // Compose partial right arguments.
	      value = source[5];
	      if (value) {
	        partials = data[5];
	        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
	        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
	      }
	      // Use source `argPos` if available.
	      value = source[7];
	      if (value) {
	        data[7] = arrayCopy(value);
	      }
	      // Use source `ary` if it's smaller.
	      if (srcBitmask & ARY_FLAG) {
	        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
	      }
	      // Use source `arity` if one is not provided.
	      if (data[9] == null) {
	        data[9] = source[9];
	      }
	      // Use source `func` and merge bitmasks.
	      data[0] = source[0];
	      data[1] = newBitmask;

	      return data;
	    }

	    /**
	     * Used by `_.defaultsDeep` to customize its `_.merge` use.
	     *
	     * @private
	     * @param {*} objectValue The destination object property value.
	     * @param {*} sourceValue The source object property value.
	     * @returns {*} Returns the value to assign to the destination object.
	     */
	    function mergeDefaults(objectValue, sourceValue) {
	      return objectValue === undefined ? sourceValue : merge(objectValue, sourceValue, mergeDefaults);
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties specified
	     * by `props`.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {string[]} props The property names to pick.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByArray(object, props) {
	      object = toObject(object);

	      var index = -1,
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index];
	        if (key in object) {
	          result[key] = object[key];
	        }
	      }
	      return result;
	    }

	    /**
	     * A specialized version of `_.pick` which picks `object` properties `predicate`
	     * returns truthy for.
	     *
	     * @private
	     * @param {Object} object The source object.
	     * @param {Function} predicate The function invoked per iteration.
	     * @returns {Object} Returns the new object.
	     */
	    function pickByCallback(object, predicate) {
	      var result = {};
	      baseForIn(object, function(value, key, object) {
	        if (predicate(value, key, object)) {
	          result[key] = value;
	        }
	      });
	      return result;
	    }

	    /**
	     * Reorder `array` according to the specified indexes where the element at
	     * the first index is assigned as the first element, the element at
	     * the second index is assigned as the second element, and so on.
	     *
	     * @private
	     * @param {Array} array The array to reorder.
	     * @param {Array} indexes The arranged array indexes.
	     * @returns {Array} Returns `array`.
	     */
	    function reorder(array, indexes) {
	      var arrLength = array.length,
	          length = nativeMin(indexes.length, arrLength),
	          oldArray = arrayCopy(array);

	      while (length--) {
	        var index = indexes[length];
	        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
	      }
	      return array;
	    }

	    /**
	     * Sets metadata for `func`.
	     *
	     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
	     * period of time, it will trip its breaker and transition to an identity function
	     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
	     * for more details.
	     *
	     * @private
	     * @param {Function} func The function to associate metadata with.
	     * @param {*} data The metadata.
	     * @returns {Function} Returns `func`.
	     */
	    var setData = (function() {
	      var count = 0,
	          lastCalled = 0;

	      return function(key, value) {
	        var stamp = now(),
	            remaining = HOT_SPAN - (stamp - lastCalled);

	        lastCalled = stamp;
	        if (remaining > 0) {
	          if (++count >= HOT_COUNT) {
	            return key;
	          }
	        } else {
	          count = 0;
	        }
	        return baseSetData(key, value);
	      };
	    }());

	    /**
	     * A fallback implementation of `Object.keys` which creates an array of the
	     * own enumerable property names of `object`.
	     *
	     * @private
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     */
	    function shimKeys(object) {
	      var props = keysIn(object),
	          propsLength = props.length,
	          length = propsLength && object.length;

	      var allowIndexes = !!length && isLength(length) &&
	        (isArray(object) || isArguments(object));

	      var index = -1,
	          result = [];

	      while (++index < propsLength) {
	        var key = props[index];
	        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * Converts `value` to an array-like object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array|Object} Returns the array-like object.
	     */
	    function toIterable(value) {
	      if (value == null) {
	        return [];
	      }
	      if (!isArrayLike(value)) {
	        return values(value);
	      }
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to an object if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Object} Returns the object.
	     */
	    function toObject(value) {
	      return isObject(value) ? value : Object(value);
	    }

	    /**
	     * Converts `value` to property path array if it's not one.
	     *
	     * @private
	     * @param {*} value The value to process.
	     * @returns {Array} Returns the property path array.
	     */
	    function toPath(value) {
	      if (isArray(value)) {
	        return value;
	      }
	      var result = [];
	      baseToString(value).replace(rePropName, function(match, number, quote, string) {
	        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	      });
	      return result;
	    }

	    /**
	     * Creates a clone of `wrapper`.
	     *
	     * @private
	     * @param {Object} wrapper The wrapper to clone.
	     * @returns {Object} Returns the cloned wrapper.
	     */
	    function wrapperClone(wrapper) {
	      return wrapper instanceof LazyWrapper
	        ? wrapper.clone()
	        : new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__, arrayCopy(wrapper.__actions__));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements split into groups the length of `size`.
	     * If `collection` can't be split evenly, the final chunk will be the remaining
	     * elements.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to process.
	     * @param {number} [size=1] The length of each chunk.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new array containing chunks.
	     * @example
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 2);
	     * // => [['a', 'b'], ['c', 'd']]
	     *
	     * _.chunk(['a', 'b', 'c', 'd'], 3);
	     * // => [['a', 'b', 'c'], ['d']]
	     */
	    function chunk(array, size, guard) {
	      if (guard ? isIterateeCall(array, size, guard) : size == null) {
	        size = 1;
	      } else {
	        size = nativeMax(nativeFloor(size) || 1, 1);
	      }
	      var index = 0,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = Array(nativeCeil(length / size));

	      while (index < length) {
	        result[++resIndex] = baseSlice(array, index, (index += size));
	      }
	      return result;
	    }

	    /**
	     * Creates an array with all falsey values removed. The values `false`, `null`,
	     * `0`, `""`, `undefined`, and `NaN` are falsey.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to compact.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.compact([0, 1, false, 2, '', 3]);
	     * // => [1, 2, 3]
	     */
	    function compact(array) {
	      var index = -1,
	          length = array ? array.length : 0,
	          resIndex = -1,
	          result = [];

	      while (++index < length) {
	        var value = array[index];
	        if (value) {
	          result[++resIndex] = value;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of unique `array` values not included in the other
	     * provided arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {...Array} [values] The arrays of values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.difference([1, 2, 3], [4, 2]);
	     * // => [1, 3]
	     */
	    var difference = restParam(function(array, values) {
	      return (isObjectLike(array) && isArrayLike(array))
	        ? baseDifference(array, baseFlatten(values, false, true))
	        : [];
	    });

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.drop([1, 2, 3]);
	     * // => [2, 3]
	     *
	     * _.drop([1, 2, 3], 2);
	     * // => [3]
	     *
	     * _.drop([1, 2, 3], 5);
	     * // => []
	     *
	     * _.drop([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function drop(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements dropped from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to drop.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRight([1, 2, 3]);
	     * // => [1, 2]
	     *
	     * _.dropRight([1, 2, 3], 2);
	     * // => [1]
	     *
	     * _.dropRight([1, 2, 3], 5);
	     * // => []
	     *
	     * _.dropRight([1, 2, 3], 0);
	     * // => [1, 2, 3]
	     */
	    function dropRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the end.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that match the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [1]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active', false), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` excluding elements dropped from the beginning.
	     * Elements are dropped until `predicate` returns falsey. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.dropWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.dropWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active', false), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.dropWhile(users, 'active'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function dropWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), true)
	        : [];
	    }

	    /**
	     * Fills elements of `array` with `value` from `start` up to, but not
	     * including, `end`.
	     *
	     * **Note:** This method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to fill.
	     * @param {*} value The value to fill `array` with.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _.fill(array, 'a');
	     * console.log(array);
	     * // => ['a', 'a', 'a']
	     *
	     * _.fill(Array(3), 2);
	     * // => [2, 2, 2]
	     *
	     * _.fill([4, 6, 8], '*', 1, 2);
	     * // => [4, '*', 8]
	     */
	    function fill(array, value, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
	        start = 0;
	        end = length;
	      }
	      return baseFill(array, value, start, end);
	    }

	    /**
	     * This method is like `_.find` except that it returns the index of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * _.findIndex(users, function(chr) {
	     *   return chr.user == 'barney';
	     * });
	     * // => 0
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findIndex(users, { 'user': 'fred', 'active': false });
	     * // => 1
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findIndex(users, 'active', false);
	     * // => 0
	     *
	     * // using the `_.property` callback shorthand
	     * _.findIndex(users, 'active');
	     * // => 2
	     */
	    var findIndex = createFindIndex();

	    /**
	     * This method is like `_.findIndex` except that it iterates over elements
	     * of `collection` from right to left.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {number} Returns the index of the found element, else `-1`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * _.findLastIndex(users, function(chr) {
	     *   return chr.user == 'pebbles';
	     * });
	     * // => 2
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
	     * // => 0
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastIndex(users, 'active', false);
	     * // => 2
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastIndex(users, 'active');
	     * // => 0
	     */
	    var findLastIndex = createFindIndex(true);

	    /**
	     * Gets the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias head
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the first element of `array`.
	     * @example
	     *
	     * _.first([1, 2, 3]);
	     * // => 1
	     *
	     * _.first([]);
	     * // => undefined
	     */
	    function first(array) {
	      return array ? array[0] : undefined;
	    }

	    /**
	     * Flattens a nested array. If `isDeep` is `true` the array is recursively
	     * flattened, otherwise it is only flattened a single level.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to flatten.
	     * @param {boolean} [isDeep] Specify a deep flatten.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flatten([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, [4]]
	     *
	     * // using `isDeep`
	     * _.flatten([1, [2, 3, [4]]], true);
	     * // => [1, 2, 3, 4]
	     */
	    function flatten(array, isDeep, guard) {
	      var length = array ? array.length : 0;
	      if (guard && isIterateeCall(array, isDeep, guard)) {
	        isDeep = false;
	      }
	      return length ? baseFlatten(array, isDeep) : [];
	    }

	    /**
	     * Recursively flattens a nested array.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to recursively flatten.
	     * @returns {Array} Returns the new flattened array.
	     * @example
	     *
	     * _.flattenDeep([1, [2, 3, [4]]]);
	     * // => [1, 2, 3, 4]
	     */
	    function flattenDeep(array) {
	      var length = array ? array.length : 0;
	      return length ? baseFlatten(array, true) : [];
	    }

	    /**
	     * Gets the index at which the first occurrence of `value` is found in `array`
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `array`. If `array` is sorted providing `true` for `fromIndex`
	     * performs a faster binary search.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
	     *  to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.indexOf([1, 2, 1, 2], 2);
	     * // => 1
	     *
	     * // using `fromIndex`
	     * _.indexOf([1, 2, 1, 2], 2, 2);
	     * // => 3
	     *
	     * // performing a binary search
	     * _.indexOf([1, 1, 2, 2], 2, true);
	     * // => 2
	     */
	    function indexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      if (typeof fromIndex == 'number') {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
	      } else if (fromIndex) {
	        var index = binaryIndex(array, value);
	        if (index < length &&
	            (value === value ? (value === array[index]) : (array[index] !== array[index]))) {
	          return index;
	        }
	        return -1;
	      }
	      return baseIndexOf(array, value, fromIndex || 0);
	    }

	    /**
	     * Gets all but the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.initial([1, 2, 3]);
	     * // => [1, 2]
	     */
	    function initial(array) {
	      return dropRight(array, 1);
	    }

	    /**
	     * Creates an array of unique values that are included in all of the provided
	     * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of shared values.
	     * @example
	     * _.intersection([1, 2], [4, 2], [2, 1]);
	     * // => [2]
	     */
	    var intersection = restParam(function(arrays) {
	      var othLength = arrays.length,
	          othIndex = othLength,
	          caches = Array(length),
	          indexOf = getIndexOf(),
	          isCommon = indexOf == baseIndexOf,
	          result = [];

	      while (othIndex--) {
	        var value = arrays[othIndex] = isArrayLike(value = arrays[othIndex]) ? value : [];
	        caches[othIndex] = (isCommon && value.length >= 120) ? createCache(othIndex && value) : null;
	      }
	      var array = arrays[0],
	          index = -1,
	          length = array ? array.length : 0,
	          seen = caches[0];

	      outer:
	      while (++index < length) {
	        value = array[index];
	        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value, 0)) < 0) {
	          var othIndex = othLength;
	          while (--othIndex) {
	            var cache = caches[othIndex];
	            if ((cache ? cacheIndexOf(cache, value) : indexOf(arrays[othIndex], value, 0)) < 0) {
	              continue outer;
	            }
	          }
	          if (seen) {
	            seen.push(value);
	          }
	          result.push(value);
	        }
	      }
	      return result;
	    });

	    /**
	     * Gets the last element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {*} Returns the last element of `array`.
	     * @example
	     *
	     * _.last([1, 2, 3]);
	     * // => 3
	     */
	    function last(array) {
	      var length = array ? array.length : 0;
	      return length ? array[length - 1] : undefined;
	    }

	    /**
	     * This method is like `_.indexOf` except that it iterates over elements of
	     * `array` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to search.
	     * @param {*} value The value to search for.
	     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
	     *  or `true` to perform a binary search on a sorted array.
	     * @returns {number} Returns the index of the matched value, else `-1`.
	     * @example
	     *
	     * _.lastIndexOf([1, 2, 1, 2], 2);
	     * // => 3
	     *
	     * // using `fromIndex`
	     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
	     * // => 1
	     *
	     * // performing a binary search
	     * _.lastIndexOf([1, 1, 2, 2], 2, true);
	     * // => 3
	     */
	    function lastIndexOf(array, value, fromIndex) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return -1;
	      }
	      var index = length;
	      if (typeof fromIndex == 'number') {
	        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
	      } else if (fromIndex) {
	        index = binaryIndex(array, value, true) - 1;
	        var other = array[index];
	        if (value === value ? (value === other) : (other !== other)) {
	          return index;
	        }
	        return -1;
	      }
	      if (value !== value) {
	        return indexOfNaN(array, index, true);
	      }
	      while (index--) {
	        if (array[index] === value) {
	          return index;
	        }
	      }
	      return -1;
	    }

	    /**
	     * Removes all provided values from `array` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * **Note:** Unlike `_.without`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...*} [values] The values to remove.
	     * @returns {Array} Returns `array`.
	     * @example
	     *
	     * var array = [1, 2, 3, 1, 2, 3];
	     *
	     * _.pull(array, 2, 3);
	     * console.log(array);
	     * // => [1, 1]
	     */
	    function pull() {
	      var args = arguments,
	          array = args[0];

	      if (!(array && array.length)) {
	        return array;
	      }
	      var index = 0,
	          indexOf = getIndexOf(),
	          length = args.length;

	      while (++index < length) {
	        var fromIndex = 0,
	            value = args[index];

	        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	          splice.call(array, fromIndex, 1);
	        }
	      }
	      return array;
	    }

	    /**
	     * Removes elements from `array` corresponding to the given indexes and returns
	     * an array of the removed elements. Indexes may be specified as an array of
	     * indexes or as individual arguments.
	     *
	     * **Note:** Unlike `_.at`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [5, 10, 15, 20];
	     * var evens = _.pullAt(array, 1, 3);
	     *
	     * console.log(array);
	     * // => [5, 15]
	     *
	     * console.log(evens);
	     * // => [10, 20]
	     */
	    var pullAt = restParam(function(array, indexes) {
	      indexes = baseFlatten(indexes);

	      var result = baseAt(array, indexes);
	      basePullAt(array, indexes.sort(baseCompareAscending));
	      return result;
	    });

	    /**
	     * Removes all elements from `array` that `predicate` returns truthy for
	     * and returns an array of the removed elements. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * **Note:** Unlike `_.filter`, this method mutates `array`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to modify.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new array of removed elements.
	     * @example
	     *
	     * var array = [1, 2, 3, 4];
	     * var evens = _.remove(array, function(n) {
	     *   return n % 2 == 0;
	     * });
	     *
	     * console.log(array);
	     * // => [1, 3]
	     *
	     * console.log(evens);
	     * // => [2, 4]
	     */
	    function remove(array, predicate, thisArg) {
	      var result = [];
	      if (!(array && array.length)) {
	        return result;
	      }
	      var index = -1,
	          indexes = [],
	          length = array.length;

	      predicate = getCallback(predicate, thisArg, 3);
	      while (++index < length) {
	        var value = array[index];
	        if (predicate(value, index, array)) {
	          result.push(value);
	          indexes.push(index);
	        }
	      }
	      basePullAt(array, indexes);
	      return result;
	    }

	    /**
	     * Gets all but the first element of `array`.
	     *
	     * @static
	     * @memberOf _
	     * @alias tail
	     * @category Array
	     * @param {Array} array The array to query.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.rest([1, 2, 3]);
	     * // => [2, 3]
	     */
	    function rest(array) {
	      return drop(array, 1);
	    }

	    /**
	     * Creates a slice of `array` from `start` up to, but not including, `end`.
	     *
	     * **Note:** This method is used instead of `Array#slice` to support node
	     * lists in IE < 9 and to ensure dense arrays are returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to slice.
	     * @param {number} [start=0] The start position.
	     * @param {number} [end=array.length] The end position.
	     * @returns {Array} Returns the slice of `array`.
	     */
	    function slice(array, start, end) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
	        start = 0;
	        end = length;
	      }
	      return baseSlice(array, start, end);
	    }

	    /**
	     * Uses a binary search to determine the lowest index at which `value` should
	     * be inserted into `array` in order to maintain its sort order. If an iteratee
	     * function is provided it is invoked for `value` and each element of `array`
	     * to compute their sort ranking. The iteratee is bound to `thisArg` and
	     * invoked with one argument; (value).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedIndex([30, 50], 40);
	     * // => 1
	     *
	     * _.sortedIndex([4, 4, 5, 5], 5);
	     * // => 2
	     *
	     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
	     *
	     * // using an iteratee function
	     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
	     *   return this.data[word];
	     * }, dict);
	     * // => 1
	     *
	     * // using the `_.property` callback shorthand
	     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
	     * // => 1
	     */
	    var sortedIndex = createSortedIndex();

	    /**
	     * This method is like `_.sortedIndex` except that it returns the highest
	     * index at which `value` should be inserted into `array` in order to
	     * maintain its sort order.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The sorted array to inspect.
	     * @param {*} value The value to evaluate.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the index at which `value` should be inserted
	     *  into `array`.
	     * @example
	     *
	     * _.sortedLastIndex([4, 4, 5, 5], 5);
	     * // => 4
	     */
	    var sortedLastIndex = createSortedIndex(true);

	    /**
	     * Creates a slice of `array` with `n` elements taken from the beginning.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.take([1, 2, 3]);
	     * // => [1]
	     *
	     * _.take([1, 2, 3], 2);
	     * // => [1, 2]
	     *
	     * _.take([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.take([1, 2, 3], 0);
	     * // => []
	     */
	    function take(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      return baseSlice(array, 0, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with `n` elements taken from the end.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {number} [n=1] The number of elements to take.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRight([1, 2, 3]);
	     * // => [3]
	     *
	     * _.takeRight([1, 2, 3], 2);
	     * // => [2, 3]
	     *
	     * _.takeRight([1, 2, 3], 5);
	     * // => [1, 2, 3]
	     *
	     * _.takeRight([1, 2, 3], 0);
	     * // => []
	     */
	    function takeRight(array, n, guard) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (guard ? isIterateeCall(array, n, guard) : n == null) {
	        n = 1;
	      }
	      n = length - (+n || 0);
	      return baseSlice(array, n < 0 ? 0 : n);
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the end. Elements are
	     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
	     * and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeRightWhile([1, 2, 3], function(n) {
	     *   return n > 1;
	     * });
	     * // => [2, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': true },
	     *   { 'user': 'fred',    'active': false },
	     *   { 'user': 'pebbles', 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeRightWhile(users, { 'user': 'pebbles', 'active': false }), 'user');
	     * // => ['pebbles']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active', false), 'user');
	     * // => ['fred', 'pebbles']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeRightWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3), false, true)
	        : [];
	    }

	    /**
	     * Creates a slice of `array` with elements taken from the beginning. Elements
	     * are taken until `predicate` returns falsey. The predicate is bound to
	     * `thisArg` and invoked with three arguments: (value, index, array).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to query.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the slice of `array`.
	     * @example
	     *
	     * _.takeWhile([1, 2, 3], function(n) {
	     *   return n < 3;
	     * });
	     * // => [1, 2]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'active': false },
	     *   { 'user': 'fred',    'active': false},
	     *   { 'user': 'pebbles', 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.takeWhile(users, { 'user': 'barney', 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active', false), 'user');
	     * // => ['barney', 'fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.takeWhile(users, 'active'), 'user');
	     * // => []
	     */
	    function takeWhile(array, predicate, thisArg) {
	      return (array && array.length)
	        ? baseWhile(array, getCallback(predicate, thisArg, 3))
	        : [];
	    }

	    /**
	     * Creates an array of unique values, in order, from all of the provided arrays
	     * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of combined values.
	     * @example
	     *
	     * _.union([1, 2], [4, 2], [2, 1]);
	     * // => [1, 2, 4]
	     */
	    var union = restParam(function(arrays) {
	      return baseUniq(baseFlatten(arrays, false, true));
	    });

	    /**
	     * Creates a duplicate-free version of an array, using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons, in which only the first occurence of each element
	     * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	     * for sorted arrays. If an iteratee function is provided it is invoked for
	     * each element in the array to generate the criterion by which uniqueness
	     * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, array).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias unique
	     * @category Array
	     * @param {Array} array The array to inspect.
	     * @param {boolean} [isSorted] Specify the array is sorted.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new duplicate-value-free array.
	     * @example
	     *
	     * _.uniq([2, 1, 2]);
	     * // => [2, 1]
	     *
	     * // using `isSorted`
	     * _.uniq([1, 1, 2], true);
	     * // => [1, 2]
	     *
	     * // using an iteratee function
	     * _.uniq([1, 2.5, 1.5, 2], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => [1, 2.5]
	     *
	     * // using the `_.property` callback shorthand
	     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	     * // => [{ 'x': 1 }, { 'x': 2 }]
	     */
	    function uniq(array, isSorted, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      if (isSorted != null && typeof isSorted != 'boolean') {
	        thisArg = iteratee;
	        iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	        isSorted = false;
	      }
	      var callback = getCallback();
	      if (!(iteratee == null && callback === baseCallback)) {
	        iteratee = callback(iteratee, thisArg, 3);
	      }
	      return (isSorted && getIndexOf() == baseIndexOf)
	        ? sortedUniq(array, iteratee)
	        : baseUniq(array, iteratee);
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an array of grouped
	     * elements and creates an array regrouping the elements to their pre-zip
	     * configuration.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     *
	     * _.unzip(zipped);
	     * // => [['fred', 'barney'], [30, 40], [true, false]]
	     */
	    function unzip(array) {
	      if (!(array && array.length)) {
	        return [];
	      }
	      var index = -1,
	          length = 0;

	      array = arrayFilter(array, function(group) {
	        if (isArrayLike(group)) {
	          length = nativeMax(group.length, length);
	          return true;
	        }
	      });
	      var result = Array(length);
	      while (++index < length) {
	        result[index] = arrayMap(array, baseProperty(index));
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.unzip` except that it accepts an iteratee to specify
	     * how regrouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array of grouped elements to process.
	     * @param {Function} [iteratee] The function to combine regrouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of regrouped elements.
	     * @example
	     *
	     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
	     * // => [[1, 10, 100], [2, 20, 200]]
	     *
	     * _.unzipWith(zipped, _.add);
	     * // => [3, 30, 300]
	     */
	    function unzipWith(array, iteratee, thisArg) {
	      var length = array ? array.length : 0;
	      if (!length) {
	        return [];
	      }
	      var result = unzip(array);
	      if (iteratee == null) {
	        return result;
	      }
	      iteratee = bindCallback(iteratee, thisArg, 4);
	      return arrayMap(result, function(group) {
	        return arrayReduce(group, iteratee, undefined, true);
	      });
	    }

	    /**
	     * Creates an array excluding all provided values using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {Array} array The array to filter.
	     * @param {...*} [values] The values to exclude.
	     * @returns {Array} Returns the new array of filtered values.
	     * @example
	     *
	     * _.without([1, 2, 1, 3], 1, 2);
	     * // => [3]
	     */
	    var without = restParam(function(array, values) {
	      return isArrayLike(array)
	        ? baseDifference(array, values)
	        : [];
	    });

	    /**
	     * Creates an array of unique values that is the [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
	     * of the provided arrays.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to inspect.
	     * @returns {Array} Returns the new array of values.
	     * @example
	     *
	     * _.xor([1, 2], [4, 2]);
	     * // => [1, 4]
	     */
	    function xor() {
	      var index = -1,
	          length = arguments.length;

	      while (++index < length) {
	        var array = arguments[index];
	        if (isArrayLike(array)) {
	          var result = result
	            ? arrayPush(baseDifference(result, array), baseDifference(array, result))
	            : array;
	        }
	      }
	      return result ? baseUniq(result) : [];
	    }

	    /**
	     * Creates an array of grouped elements, the first of which contains the first
	     * elements of the given arrays, the second of which contains the second elements
	     * of the given arrays, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
	     * // => [['fred', 30, true], ['barney', 40, false]]
	     */
	    var zip = restParam(unzip);

	    /**
	     * The inverse of `_.pairs`; this method returns an object composed from arrays
	     * of property names and values. Provide either a single two dimensional array,
	     * e.g. `[[key1, value1], [key2, value2]]` or two arrays, one of property names
	     * and one of corresponding values.
	     *
	     * @static
	     * @memberOf _
	     * @alias object
	     * @category Array
	     * @param {Array} props The property names.
	     * @param {Array} [values=[]] The property values.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * _.zipObject([['fred', 30], ['barney', 40]]);
	     * // => { 'fred': 30, 'barney': 40 }
	     *
	     * _.zipObject(['fred', 'barney'], [30, 40]);
	     * // => { 'fred': 30, 'barney': 40 }
	     */
	    function zipObject(props, values) {
	      var index = -1,
	          length = props ? props.length : 0,
	          result = {};

	      if (length && !values && !isArray(props[0])) {
	        values = [];
	      }
	      while (++index < length) {
	        var key = props[index];
	        if (values) {
	          result[key] = values[index];
	        } else if (key) {
	          result[key[0]] = key[1];
	        }
	      }
	      return result;
	    }

	    /**
	     * This method is like `_.zip` except that it accepts an iteratee to specify
	     * how grouped values should be combined. The `iteratee` is bound to `thisArg`
	     * and invoked with four arguments: (accumulator, value, index, group).
	     *
	     * @static
	     * @memberOf _
	     * @category Array
	     * @param {...Array} [arrays] The arrays to process.
	     * @param {Function} [iteratee] The function to combine grouped values.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new array of grouped elements.
	     * @example
	     *
	     * _.zipWith([1, 2], [10, 20], [100, 200], _.add);
	     * // => [111, 222]
	     */
	    var zipWith = restParam(function(arrays) {
	      var length = arrays.length,
	          iteratee = length > 2 ? arrays[length - 2] : undefined,
	          thisArg = length > 1 ? arrays[length - 1] : undefined;

	      if (length > 2 && typeof iteratee == 'function') {
	        length -= 2;
	      } else {
	        iteratee = (length > 1 && typeof thisArg == 'function') ? (--length, thisArg) : undefined;
	        thisArg = undefined;
	      }
	      arrays.length = length;
	      return unzipWith(arrays, iteratee, thisArg);
	    });

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a `lodash` object that wraps `value` with explicit method
	     * chaining enabled.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to wrap.
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36 },
	     *   { 'user': 'fred',    'age': 40 },
	     *   { 'user': 'pebbles', 'age': 1 }
	     * ];
	     *
	     * var youngest = _.chain(users)
	     *   .sortBy('age')
	     *   .map(function(chr) {
	     *     return chr.user + ' is ' + chr.age;
	     *   })
	     *   .first()
	     *   .value();
	     * // => 'pebbles is 1'
	     */
	    function chain(value) {
	      var result = lodash(value);
	      result.__chain__ = true;
	      return result;
	    }

	    /**
	     * This method invokes `interceptor` and returns `value`. The interceptor is
	     * bound to `thisArg` and invoked with one argument; (value). The purpose of
	     * this method is to "tap into" a method chain in order to perform operations
	     * on intermediate results within the chain.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * _([1, 2, 3])
	     *  .tap(function(array) {
	     *    array.pop();
	     *  })
	     *  .reverse()
	     *  .value();
	     * // => [2, 1]
	     */
	    function tap(value, interceptor, thisArg) {
	      interceptor.call(thisArg, value);
	      return value;
	    }

	    /**
	     * This method is like `_.tap` except that it returns the result of `interceptor`.
	     *
	     * @static
	     * @memberOf _
	     * @category Chain
	     * @param {*} value The value to provide to `interceptor`.
	     * @param {Function} interceptor The function to invoke.
	     * @param {*} [thisArg] The `this` binding of `interceptor`.
	     * @returns {*} Returns the result of `interceptor`.
	     * @example
	     *
	     * _('  abc  ')
	     *  .chain()
	     *  .trim()
	     *  .thru(function(value) {
	     *    return [value];
	     *  })
	     *  .value();
	     * // => ['abc']
	     */
	    function thru(value, interceptor, thisArg) {
	      return interceptor.call(thisArg, value);
	    }

	    /**
	     * Enables explicit method chaining on the wrapper object.
	     *
	     * @name chain
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // without explicit chaining
	     * _(users).first();
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // with explicit chaining
	     * _(users).chain()
	     *   .first()
	     *   .pick('user')
	     *   .value();
	     * // => { 'user': 'barney' }
	     */
	    function wrapperChain() {
	      return chain(this);
	    }

	    /**
	     * Executes the chained sequence and returns the wrapped result.
	     *
	     * @name commit
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).push(3);
	     *
	     * console.log(array);
	     * // => [1, 2]
	     *
	     * wrapped = wrapped.commit();
	     * console.log(array);
	     * // => [1, 2, 3]
	     *
	     * wrapped.last();
	     * // => 3
	     *
	     * console.log(array);
	     * // => [1, 2, 3]
	     */
	    function wrapperCommit() {
	      return new LodashWrapper(this.value(), this.__chain__);
	    }

	    /**
	     * Creates a new array joining a wrapped array with any additional arrays
	     * and/or values.
	     *
	     * @name concat
	     * @memberOf _
	     * @category Chain
	     * @param {...*} [values] The values to concatenate.
	     * @returns {Array} Returns the new concatenated array.
	     * @example
	     *
	     * var array = [1];
	     * var wrapped = _(array).concat(2, [3], [[4]]);
	     *
	     * console.log(wrapped.value());
	     * // => [1, 2, 3, [4]]
	     *
	     * console.log(array);
	     * // => [1]
	     */
	    var wrapperConcat = restParam(function(values) {
	      values = baseFlatten(values);
	      return this.thru(function(array) {
	        return arrayConcat(isArray(array) ? array : [toObject(array)], values);
	      });
	    });

	    /**
	     * Creates a clone of the chained sequence planting `value` as the wrapped value.
	     *
	     * @name plant
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2];
	     * var wrapped = _(array).map(function(value) {
	     *   return Math.pow(value, 2);
	     * });
	     *
	     * var other = [3, 4];
	     * var otherWrapped = wrapped.plant(other);
	     *
	     * otherWrapped.value();
	     * // => [9, 16]
	     *
	     * wrapped.value();
	     * // => [1, 4]
	     */
	    function wrapperPlant(value) {
	      var result,
	          parent = this;

	      while (parent instanceof baseLodash) {
	        var clone = wrapperClone(parent);
	        if (result) {
	          previous.__wrapped__ = clone;
	        } else {
	          result = clone;
	        }
	        var previous = clone;
	        parent = parent.__wrapped__;
	      }
	      previous.__wrapped__ = value;
	      return result;
	    }

	    /**
	     * Reverses the wrapped array so the first element becomes the last, the
	     * second element becomes the second to last, and so on.
	     *
	     * **Note:** This method mutates the wrapped array.
	     *
	     * @name reverse
	     * @memberOf _
	     * @category Chain
	     * @returns {Object} Returns the new reversed `lodash` wrapper instance.
	     * @example
	     *
	     * var array = [1, 2, 3];
	     *
	     * _(array).reverse().value()
	     * // => [3, 2, 1]
	     *
	     * console.log(array);
	     * // => [3, 2, 1]
	     */
	    function wrapperReverse() {
	      var value = this.__wrapped__;

	      var interceptor = function(value) {
	        return (wrapped && wrapped.__dir__ < 0) ? value : value.reverse();
	      };
	      if (value instanceof LazyWrapper) {
	        var wrapped = value;
	        if (this.__actions__.length) {
	          wrapped = new LazyWrapper(this);
	        }
	        wrapped = wrapped.reverse();
	        wrapped.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
	        return new LodashWrapper(wrapped, this.__chain__);
	      }
	      return this.thru(interceptor);
	    }

	    /**
	     * Produces the result of coercing the unwrapped value to a string.
	     *
	     * @name toString
	     * @memberOf _
	     * @category Chain
	     * @returns {string} Returns the coerced string value.
	     * @example
	     *
	     * _([1, 2, 3]).toString();
	     * // => '1,2,3'
	     */
	    function wrapperToString() {
	      return (this.value() + '');
	    }

	    /**
	     * Executes the chained sequence to extract the unwrapped value.
	     *
	     * @name value
	     * @memberOf _
	     * @alias run, toJSON, valueOf
	     * @category Chain
	     * @returns {*} Returns the resolved unwrapped value.
	     * @example
	     *
	     * _([1, 2, 3]).value();
	     * // => [1, 2, 3]
	     */
	    function wrapperValue() {
	      return baseWrapperValue(this.__wrapped__, this.__actions__);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates an array of elements corresponding to the given keys, or indexes,
	     * of `collection`. Keys may be specified as individual arguments or as arrays
	     * of keys.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(number|number[]|string|string[])} [props] The property names
	     *  or indexes of elements to pick, specified individually or in arrays.
	     * @returns {Array} Returns the new array of picked elements.
	     * @example
	     *
	     * _.at(['a', 'b', 'c'], [0, 2]);
	     * // => ['a', 'c']
	     *
	     * _.at(['barney', 'fred', 'pebbles'], 0, 2);
	     * // => ['barney', 'pebbles']
	     */
	    var at = restParam(function(collection, props) {
	      return baseAt(collection, baseFlatten(props));
	    });

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the number of times the key was returned by `iteratee`.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy([4.3, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': 1, '6': 2 }
	     *
	     * _.countBy(['one', 'two', 'three'], 'length');
	     * // => { '3': 2, '5': 1 }
	     */
	    var countBy = createAggregator(function(result, value, key) {
	      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
	    });

	    /**
	     * Checks if `predicate` returns truthy for **all** elements of `collection`.
	     * The predicate is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias all
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if all elements pass the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.every([true, 1, null, 'yes'], Boolean);
	     * // => false
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': false },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.every(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.every(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.every(users, 'active');
	     * // => false
	     */
	    function every(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayEvery : baseEvery;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning an array of all elements
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias select
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.filter([4, 5, 6], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 6]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.filter(users, { 'age': 36, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.filter(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.filter(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function filter(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, predicate);
	    }

	    /**
	     * Iterates over elements of `collection`, returning the first element
	     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
	     * invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias detect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': true },
	     *   { 'user': 'fred',    'age': 40, 'active': false },
	     *   { 'user': 'pebbles', 'age': 1,  'active': true }
	     * ];
	     *
	     * _.result(_.find(users, function(chr) {
	     *   return chr.age < 40;
	     * }), 'user');
	     * // => 'barney'
	     *
	     * // using the `_.matches` callback shorthand
	     * _.result(_.find(users, { 'age': 1, 'active': true }), 'user');
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.result(_.find(users, 'active', false), 'user');
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.result(_.find(users, 'active'), 'user');
	     * // => 'barney'
	     */
	    var find = createFind(baseEach);

	    /**
	     * This method is like `_.find` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * _.findLast([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 1;
	     * });
	     * // => 3
	     */
	    var findLast = createFind(baseEachRight, true);

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning the first element that has equivalent property
	     * values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {*} Returns the matched element, else `undefined`.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.result(_.findWhere(users, { 'age': 36, 'active': true }), 'user');
	     * // => 'barney'
	     *
	     * _.result(_.findWhere(users, { 'age': 40, 'active': false }), 'user');
	     * // => 'fred'
	     */
	    function findWhere(collection, source) {
	      return find(collection, baseMatches(source));
	    }

	    /**
	     * Iterates over elements of `collection` invoking `iteratee` for each element.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection). Iteratee functions may exit iteration early
	     * by explicitly returning `false`.
	     *
	     * **Note:** As with other "Collections" methods, objects with a "length" property
	     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	     * may be used for object iteration.
	     *
	     * @static
	     * @memberOf _
	     * @alias each
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEach(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from left to right and returns the array
	     *
	     * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	     *   console.log(n, key);
	     * });
	     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	     */
	    var forEach = createForEach(arrayEach, baseEach);

	    /**
	     * This method is like `_.forEach` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias eachRight
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array|Object|string} Returns `collection`.
	     * @example
	     *
	     * _([1, 2]).forEachRight(function(n) {
	     *   console.log(n);
	     * }).value();
	     * // => logs each value from right to left and returns the array
	     */
	    var forEachRight = createForEach(arrayEachRight, baseEachRight);

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is an array of the elements responsible for generating the key.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return Math.floor(n);
	     * });
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * _.groupBy([4.2, 6.1, 6.4], function(n) {
	     *   return this.floor(n);
	     * }, Math);
	     * // => { '4': [4.2], '6': [6.1, 6.4] }
	     *
	     * // using the `_.property` callback shorthand
	     * _.groupBy(['one', 'two', 'three'], 'length');
	     * // => { '3': ['one', 'two'], '5': ['three'] }
	     */
	    var groupBy = createAggregator(function(result, value, key) {
	      if (hasOwnProperty.call(result, key)) {
	        result[key].push(value);
	      } else {
	        result[key] = [value];
	      }
	    });

	    /**
	     * Checks if `value` is in `collection` using
	     * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	     * for equality comparisons. If `fromIndex` is negative, it is used as the offset
	     * from the end of `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @alias contains, include
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {*} target The value to search for.
	     * @param {number} [fromIndex=0] The index to search from.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	     * @example
	     *
	     * _.includes([1, 2, 3], 1);
	     * // => true
	     *
	     * _.includes([1, 2, 3], 1, 2);
	     * // => false
	     *
	     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	     * // => true
	     *
	     * _.includes('pebbles', 'eb');
	     * // => true
	     */
	    function includes(collection, target, fromIndex, guard) {
	      var length = collection ? getLength(collection) : 0;
	      if (!isLength(length)) {
	        collection = values(collection);
	        length = collection.length;
	      }
	      if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	        fromIndex = 0;
	      } else {
	        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	      }
	      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	        ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	        : (!!length && getIndexOf(collection, target, fromIndex) > -1);
	    }

	    /**
	     * Creates an object composed of keys generated from the results of running
	     * each element of `collection` through `iteratee`. The corresponding value
	     * of each key is the last element responsible for generating the key. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the composed aggregate object.
	     * @example
	     *
	     * var keyData = [
	     *   { 'dir': 'left', 'code': 97 },
	     *   { 'dir': 'right', 'code': 100 }
	     * ];
	     *
	     * _.indexBy(keyData, 'dir');
	     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return String.fromCharCode(object.code);
	     * });
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     *
	     * _.indexBy(keyData, function(object) {
	     *   return this.fromCharCode(object.code);
	     * }, String);
	     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
	     */
	    var indexBy = createAggregator(function(result, value, key) {
	      result[key] = value;
	    });

	    /**
	     * Invokes the method at `path` of each element in `collection`, returning
	     * an array of the results of each invoked method. Any additional arguments
	     * are provided to each invoked method. If `methodName` is a function it is
	     * invoked for, and `this` bound to, each element in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|Function|string} path The path of the method to invoke or
	     *  the function invoked per iteration.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
	     * // => [[1, 5, 7], [1, 2, 3]]
	     *
	     * _.invoke([123, 456], String.prototype.split, '');
	     * // => [['1', '2', '3'], ['4', '5', '6']]
	     */
	    var invoke = restParam(function(collection, path, args) {
	      var index = -1,
	          isFunc = typeof path == 'function',
	          isProp = isKey(path),
	          result = isArrayLike(collection) ? Array(collection.length) : [];

	      baseEach(collection, function(value) {
	        var func = isFunc ? path : ((isProp && value != null) ? value[path] : undefined);
	        result[++index] = func ? func.apply(value, args) : invokePath(value, path, args);
	      });
	      return result;
	    });

	    /**
	     * Creates an array of values by running each element in `collection` through
	     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	     *
	     * The guarded methods are:
	     * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	     * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	     * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	     * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	     * `sum`, `uniq`, and `words`
	     *
	     * @static
	     * @memberOf _
	     * @alias collect
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new mapped array.
	     * @example
	     *
	     * function timesThree(n) {
	     *   return n * 3;
	     * }
	     *
	     * _.map([1, 2], timesThree);
	     * // => [3, 6]
	     *
	     * _.map({ 'a': 1, 'b': 2 }, timesThree);
	     * // => [3, 6] (iteration order is not guaranteed)
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(users, 'user');
	     * // => ['barney', 'fred']
	     */
	    function map(collection, iteratee, thisArg) {
	      var func = isArray(collection) ? arrayMap : baseMap;
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return func(collection, iteratee);
	    }

	    /**
	     * Creates an array of elements split into two groups, the first of which
	     * contains elements `predicate` returns truthy for, while the second of which
	     * contains elements `predicate` returns falsey for. The predicate is bound
	     * to `thisArg` and invoked with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the array of grouped elements.
	     * @example
	     *
	     * _.partition([1, 2, 3], function(n) {
	     *   return n % 2;
	     * });
	     * // => [[1, 3], [2]]
	     *
	     * _.partition([1.2, 2.3, 3.4], function(n) {
	     *   return this.floor(n) % 2;
	     * }, Math);
	     * // => [[1.2, 3.4], [2.3]]
	     *
	     * var users = [
	     *   { 'user': 'barney',  'age': 36, 'active': false },
	     *   { 'user': 'fred',    'age': 40, 'active': true },
	     *   { 'user': 'pebbles', 'age': 1,  'active': false }
	     * ];
	     *
	     * var mapper = function(array) {
	     *   return _.pluck(array, 'user');
	     * };
	     *
	     * // using the `_.matches` callback shorthand
	     * _.map(_.partition(users, { 'age': 1, 'active': false }), mapper);
	     * // => [['pebbles'], ['barney', 'fred']]
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.map(_.partition(users, 'active', false), mapper);
	     * // => [['barney', 'pebbles'], ['fred']]
	     *
	     * // using the `_.property` callback shorthand
	     * _.map(_.partition(users, 'active'), mapper);
	     * // => [['fred'], ['barney', 'pebbles']]
	     */
	    var partition = createAggregator(function(result, value, key) {
	      result[key ? 0 : 1].push(value);
	    }, function() { return [[], []]; });

	    /**
	     * Gets the property value of `path` from all elements in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Array|string} path The path of the property to pluck.
	     * @returns {Array} Returns the property values.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.pluck(users, 'user');
	     * // => ['barney', 'fred']
	     *
	     * var userIndex = _.indexBy(users, 'user');
	     * _.pluck(userIndex, 'age');
	     * // => [36, 40] (iteration order is not guaranteed)
	     */
	    function pluck(collection, path) {
	      return map(collection, property(path));
	    }

	    /**
	     * Reduces `collection` to a value which is the accumulated result of running
	     * each element in `collection` through `iteratee`, where each successive
	     * invocation is supplied the return value of the previous. If `accumulator`
	     * is not provided the first element of `collection` is used as the initial
	     * value. The `iteratee` is bound to `thisArg` and invoked with four arguments:
	     * (accumulator, value, index|key, collection).
	     *
	     * Many lodash methods are guarded to work as iteratees for methods like
	     * `_.reduce`, `_.reduceRight`, and `_.transform`.
	     *
	     * The guarded methods are:
	     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `sortByAll`,
	     * and `sortByOrder`
	     *
	     * @static
	     * @memberOf _
	     * @alias foldl, inject
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.reduce([1, 2], function(total, n) {
	     *   return total + n;
	     * });
	     * // => 3
	     *
	     * _.reduce({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     *   return result;
	     * }, {});
	     * // => { 'a': 3, 'b': 6 } (iteration order is not guaranteed)
	     */
	    var reduce = createReduce(arrayReduce, baseEach);

	    /**
	     * This method is like `_.reduce` except that it iterates over elements of
	     * `collection` from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias foldr
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The initial value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * var array = [[0, 1], [2, 3], [4, 5]];
	     *
	     * _.reduceRight(array, function(flattened, other) {
	     *   return flattened.concat(other);
	     * }, []);
	     * // => [4, 5, 2, 3, 0, 1]
	     */
	    var reduceRight = createReduce(arrayReduceRight, baseEachRight);

	    /**
	     * The opposite of `_.filter`; this method returns the elements of `collection`
	     * that `predicate` does **not** return truthy for.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * _.reject([1, 2, 3, 4], function(n) {
	     *   return n % 2 == 0;
	     * });
	     * // => [1, 3]
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false },
	     *   { 'user': 'fred',   'age': 40, 'active': true }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.pluck(_.reject(users, { 'age': 40, 'active': true }), 'user');
	     * // => ['barney']
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.pluck(_.reject(users, 'active', false), 'user');
	     * // => ['fred']
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.reject(users, 'active'), 'user');
	     * // => ['barney']
	     */
	    function reject(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arrayFilter : baseFilter;
	      predicate = getCallback(predicate, thisArg, 3);
	      return func(collection, function(value, index, collection) {
	        return !predicate(value, index, collection);
	      });
	    }

	    /**
	     * Gets a random element or `n` random elements from a collection.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to sample.
	     * @param {number} [n] The number of elements to sample.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {*} Returns the random sample(s).
	     * @example
	     *
	     * _.sample([1, 2, 3, 4]);
	     * // => 2
	     *
	     * _.sample([1, 2, 3, 4], 2);
	     * // => [3, 1]
	     */
	    function sample(collection, n, guard) {
	      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
	        collection = toIterable(collection);
	        var length = collection.length;
	        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
	      }
	      var index = -1,
	          result = toArray(collection),
	          length = result.length,
	          lastIndex = length - 1;

	      n = nativeMin(n < 0 ? 0 : (+n || 0), length);
	      while (++index < n) {
	        var rand = baseRandom(index, lastIndex),
	            value = result[rand];

	        result[rand] = result[index];
	        result[index] = value;
	      }
	      result.length = n;
	      return result;
	    }

	    /**
	     * Creates an array of shuffled values, using a version of the
	     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to shuffle.
	     * @returns {Array} Returns the new shuffled array.
	     * @example
	     *
	     * _.shuffle([1, 2, 3, 4]);
	     * // => [4, 1, 3, 2]
	     */
	    function shuffle(collection) {
	      return sample(collection, POSITIVE_INFINITY);
	    }

	    /**
	     * Gets the size of `collection` by returning its length for array-like
	     * values or the number of own enumerable properties for objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to inspect.
	     * @returns {number} Returns the size of `collection`.
	     * @example
	     *
	     * _.size([1, 2, 3]);
	     * // => 3
	     *
	     * _.size({ 'a': 1, 'b': 2 });
	     * // => 2
	     *
	     * _.size('pebbles');
	     * // => 7
	     */
	    function size(collection) {
	      var length = collection ? getLength(collection) : 0;
	      return isLength(length) ? length : keys(collection).length;
	    }

	    /**
	     * Checks if `predicate` returns truthy for **any** element of `collection`.
	     * The function returns as soon as it finds a passing value and does not iterate
	     * over the entire collection. The predicate is bound to `thisArg` and invoked
	     * with three arguments: (value, index|key, collection).
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias any
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {boolean} Returns `true` if any element passes the predicate check,
	     *  else `false`.
	     * @example
	     *
	     * _.some([null, 0, 'yes', false], Boolean);
	     * // => true
	     *
	     * var users = [
	     *   { 'user': 'barney', 'active': true },
	     *   { 'user': 'fred',   'active': false }
	     * ];
	     *
	     * // using the `_.matches` callback shorthand
	     * _.some(users, { 'user': 'barney', 'active': false });
	     * // => false
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.some(users, 'active', false);
	     * // => true
	     *
	     * // using the `_.property` callback shorthand
	     * _.some(users, 'active');
	     * // => true
	     */
	    function some(collection, predicate, thisArg) {
	      var func = isArray(collection) ? arraySome : baseSome;
	      if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	        predicate = undefined;
	      }
	      if (typeof predicate != 'function' || thisArg !== undefined) {
	        predicate = getCallback(predicate, thisArg, 3);
	      }
	      return func(collection, predicate);
	    }

	    /**
	     * Creates an array of elements, sorted in ascending order by the results of
	     * running each element in a collection through `iteratee`. This method performs
	     * a stable sort, that is, it preserves the original sort order of equal elements.
	     * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	     * (value, index|key, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return Math.sin(n);
	     * });
	     * // => [3, 1, 2]
	     *
	     * _.sortBy([1, 2, 3], function(n) {
	     *   return this.sin(n);
	     * }, Math);
	     * // => [3, 1, 2]
	     *
	     * var users = [
	     *   { 'user': 'fred' },
	     *   { 'user': 'pebbles' },
	     *   { 'user': 'barney' }
	     * ];
	     *
	     * // using the `_.property` callback shorthand
	     * _.pluck(_.sortBy(users, 'user'), 'user');
	     * // => ['barney', 'fred', 'pebbles']
	     */
	    function sortBy(collection, iteratee, thisArg) {
	      if (collection == null) {
	        return [];
	      }
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      var index = -1;
	      iteratee = getCallback(iteratee, thisArg, 3);

	      var result = baseMap(collection, function(value, key, collection) {
	        return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	      });
	      return baseSortBy(result, compareAscending);
	    }

	    /**
	     * This method is like `_.sortBy` except that it can sort by multiple iteratees
	     * or property names.
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {...(Function|Function[]|Object|Object[]|string|string[])} iteratees
	     *  The iteratees to sort by, specified as individual values or arrays of values.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 34 }
	     * ];
	     *
	     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
	     * // => [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
	     *
	     * _.map(_.sortByAll(users, 'user', function(chr) {
	     *   return Math.floor(chr.age / 10);
	     * }), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    var sortByAll = restParam(function(collection, iteratees) {
	      if (collection == null) {
	        return [];
	      }
	      var guard = iteratees[2];
	      if (guard && isIterateeCall(iteratees[0], iteratees[1], guard)) {
	        iteratees.length = 1;
	      }
	      return baseSortByOrder(collection, baseFlatten(iteratees), []);
	    });

	    /**
	     * This method is like `_.sortByAll` except that it allows specifying the
	     * sort orders of the iteratees to sort by. If `orders` is unspecified, all
	     * values are sorted in ascending order. Otherwise, a value is sorted in
	     * ascending order if its corresponding order is "asc", and descending if "desc".
	     *
	     * If a property name is provided for an iteratee the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If an object is provided for an iteratee the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
	     * @param {boolean[]} [orders] The sort orders of `iteratees`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	     * @returns {Array} Returns the new sorted array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'fred',   'age': 48 },
	     *   { 'user': 'barney', 'age': 34 },
	     *   { 'user': 'fred',   'age': 42 },
	     *   { 'user': 'barney', 'age': 36 }
	     * ];
	     *
	     * // sort by `user` in ascending order and by `age` in descending order
	     * _.map(_.sortByOrder(users, ['user', 'age'], ['asc', 'desc']), _.values);
	     * // => [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
	     */
	    function sortByOrder(collection, iteratees, orders, guard) {
	      if (collection == null) {
	        return [];
	      }
	      if (guard && isIterateeCall(iteratees, orders, guard)) {
	        orders = undefined;
	      }
	      if (!isArray(iteratees)) {
	        iteratees = iteratees == null ? [] : [iteratees];
	      }
	      if (!isArray(orders)) {
	        orders = orders == null ? [] : [orders];
	      }
	      return baseSortByOrder(collection, iteratees, orders);
	    }

	    /**
	     * Performs a deep comparison between each element in `collection` and the
	     * source object, returning an array of all elements that have equivalent
	     * property values.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Collection
	     * @param {Array|Object|string} collection The collection to search.
	     * @param {Object} source The object of property values to match.
	     * @returns {Array} Returns the new filtered array.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': false, 'pets': ['hoppy'] },
	     *   { 'user': 'fred',   'age': 40, 'active': true, 'pets': ['baby puss', 'dino'] }
	     * ];
	     *
	     * _.pluck(_.where(users, { 'age': 36, 'active': false }), 'user');
	     * // => ['barney']
	     *
	     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
	     * // => ['fred']
	     */
	    function where(collection, source) {
	      return filter(collection, baseMatches(source));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Gets the number of milliseconds that have elapsed since the Unix epoch
	     * (1 January 1970 00:00:00 UTC).
	     *
	     * @static
	     * @memberOf _
	     * @category Date
	     * @example
	     *
	     * _.defer(function(stamp) {
	     *   console.log(_.now() - stamp);
	     * }, _.now());
	     * // => logs the number of milliseconds it took for the deferred function to be invoked
	     */
	    var now = nativeNow || function() {
	      return new Date().getTime();
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The opposite of `_.before`; this method creates a function that invokes
	     * `func` once it is called `n` or more times.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls before `func` is invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var saves = ['profile', 'settings'];
	     *
	     * var done = _.after(saves.length, function() {
	     *   console.log('done saving!');
	     * });
	     *
	     * _.forEach(saves, function(type) {
	     *   asyncSave({ 'type': type, 'complete': done });
	     * });
	     * // => logs 'done saving!' after the two async saves have completed
	     */
	    function after(n, func) {
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      n = nativeIsFinite(n = +n) ? n : 0;
	      return function() {
	        if (--n < 1) {
	          return func.apply(this, arguments);
	        }
	      };
	    }

	    /**
	     * Creates a function that accepts up to `n` arguments ignoring any
	     * additional arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to cap arguments for.
	     * @param {number} [n=func.length] The arity cap.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
	     * // => [6, 8, 10]
	     */
	    function ary(func, n, guard) {
	      if (guard && isIterateeCall(func, n, guard)) {
	        n = undefined;
	      }
	      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
	      return createWrapper(func, ARY_FLAG, undefined, undefined, undefined, undefined, n);
	    }

	    /**
	     * Creates a function that invokes `func`, with the `this` binding and arguments
	     * of the created function, while it is called less than `n` times. Subsequent
	     * calls to the created function return the result of the last `func` invocation.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {number} n The number of calls at which `func` is no longer invoked.
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * jQuery('#add').on('click', _.before(5, addContactToList));
	     * // => allows adding up to 4 contacts to the list
	     */
	    function before(n, func) {
	      var result;
	      if (typeof func != 'function') {
	        if (typeof n == 'function') {
	          var temp = n;
	          n = func;
	          func = temp;
	        } else {
	          throw new TypeError(FUNC_ERROR_TEXT);
	        }
	      }
	      return function() {
	        if (--n > 0) {
	          result = func.apply(this, arguments);
	        }
	        if (n <= 1) {
	          func = undefined;
	        }
	        return result;
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and prepends any additional `_.bind` arguments to those provided to the
	     * bound function.
	     *
	     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** Unlike native `Function#bind` this method does not set the "length"
	     * property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to bind.
	     * @param {*} thisArg The `this` binding of `func`.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var greet = function(greeting, punctuation) {
	     *   return greeting + ' ' + this.user + punctuation;
	     * };
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * var bound = _.bind(greet, object, 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * // using placeholders
	     * var bound = _.bind(greet, object, _, '!');
	     * bound('hi');
	     * // => 'hi fred!'
	     */
	    var bind = restParam(function(func, thisArg, partials) {
	      var bitmask = BIND_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bind.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(func, bitmask, thisArg, partials, holders);
	    });

	    /**
	     * Binds methods of an object to the object itself, overwriting the existing
	     * method. Method names may be specified as individual arguments or as arrays
	     * of method names. If no method names are provided all enumerable function
	     * properties, own and inherited, of `object` are bound.
	     *
	     * **Note:** This method does not set the "length" property of bound functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object to bind and assign the bound methods to.
	     * @param {...(string|string[])} [methodNames] The object method names to bind,
	     *  specified as individual method names or arrays of method names.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var view = {
	     *   'label': 'docs',
	     *   'onClick': function() {
	     *     console.log('clicked ' + this.label);
	     *   }
	     * };
	     *
	     * _.bindAll(view);
	     * jQuery('#docs').on('click', view.onClick);
	     * // => logs 'clicked docs' when the element is clicked
	     */
	    var bindAll = restParam(function(object, methodNames) {
	      methodNames = methodNames.length ? baseFlatten(methodNames) : functions(object);

	      var index = -1,
	          length = methodNames.length;

	      while (++index < length) {
	        var key = methodNames[index];
	        object[key] = createWrapper(object[key], BIND_FLAG, object);
	      }
	      return object;
	    });

	    /**
	     * Creates a function that invokes the method at `object[key]` and prepends
	     * any additional `_.bindKey` arguments to those provided to the bound function.
	     *
	     * This method differs from `_.bind` by allowing bound functions to reference
	     * methods that may be redefined or don't yet exist.
	     * See [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
	     * for more details.
	     *
	     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Object} object The object the method belongs to.
	     * @param {string} key The key of the method.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new bound function.
	     * @example
	     *
	     * var object = {
	     *   'user': 'fred',
	     *   'greet': function(greeting, punctuation) {
	     *     return greeting + ' ' + this.user + punctuation;
	     *   }
	     * };
	     *
	     * var bound = _.bindKey(object, 'greet', 'hi');
	     * bound('!');
	     * // => 'hi fred!'
	     *
	     * object.greet = function(greeting, punctuation) {
	     *   return greeting + 'ya ' + this.user + punctuation;
	     * };
	     *
	     * bound('!');
	     * // => 'hiya fred!'
	     *
	     * // using placeholders
	     * var bound = _.bindKey(object, 'greet', _, '!');
	     * bound('hi');
	     * // => 'hiya fred!'
	     */
	    var bindKey = restParam(function(object, key, partials) {
	      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
	      if (partials.length) {
	        var holders = replaceHolders(partials, bindKey.placeholder);
	        bitmask |= PARTIAL_FLAG;
	      }
	      return createWrapper(key, bitmask, object, partials, holders);
	    });

	    /**
	     * Creates a function that accepts one or more arguments of `func` that when
	     * called either invokes `func` returning its result, if all `func` arguments
	     * have been provided, or returns a function that accepts one or more of the
	     * remaining `func` arguments, and so on. The arity of `func` may be specified
	     * if `func.length` is not sufficient.
	     *
	     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
	     * may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curry(abc);
	     *
	     * curried(1)(2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2)(3);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(1)(_, 3)(2);
	     * // => [1, 2, 3]
	     */
	    var curry = createCurry(CURRY_FLAG);

	    /**
	     * This method is like `_.curry` except that arguments are applied to `func`
	     * in the manner of `_.partialRight` instead of `_.partial`.
	     *
	     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for provided arguments.
	     *
	     * **Note:** This method does not set the "length" property of curried functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to curry.
	     * @param {number} [arity=func.length] The arity of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the new curried function.
	     * @example
	     *
	     * var abc = function(a, b, c) {
	     *   return [a, b, c];
	     * };
	     *
	     * var curried = _.curryRight(abc);
	     *
	     * curried(3)(2)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(2, 3)(1);
	     * // => [1, 2, 3]
	     *
	     * curried(1, 2, 3);
	     * // => [1, 2, 3]
	     *
	     * // using placeholders
	     * curried(3)(1, _)(2);
	     * // => [1, 2, 3]
	     */
	    var curryRight = createCurry(CURRY_RIGHT_FLAG);

	    /**
	     * Creates a debounced function that delays invoking `func` until after `wait`
	     * milliseconds have elapsed since the last time the debounced function was
	     * invoked. The debounced function comes with a `cancel` method to cancel
	     * delayed invocations. Provide an options object to indicate that `func`
	     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	     * Subsequent calls to the debounced function return the result of the last
	     * `func` invocation.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the debounced function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.debounce` and `_.throttle`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to debounce.
	     * @param {number} [wait=0] The number of milliseconds to delay.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=false] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	     *  delayed before it is invoked.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new debounced function.
	     * @example
	     *
	     * // avoid costly calculations while the window size is in flux
	     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	     *
	     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	     *   'leading': true,
	     *   'trailing': false
	     * }));
	     *
	     * // ensure `batchLog` is invoked once after 1 second of debounced calls
	     * var source = new EventSource('/stream');
	     * jQuery(source).on('message', _.debounce(batchLog, 250, {
	     *   'maxWait': 1000
	     * }));
	     *
	     * // cancel a debounced call
	     * var todoChanges = _.debounce(batchLog, 1000);
	     * Object.observe(models.todo, todoChanges);
	     *
	     * Object.observe(models, function(changes) {
	     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	     *     todoChanges.cancel();
	     *   }
	     * }, ['delete']);
	     *
	     * // ...at some point `models.todo` is changed
	     * models.todo.completed = true;
	     *
	     * // ...before 1 second has passed `models.todo` is deleted
	     * // which cancels the debounced `todoChanges` call
	     * delete models.todo;
	     */
	    function debounce(func, wait, options) {
	      var args,
	          maxTimeoutId,
	          result,
	          stamp,
	          thisArg,
	          timeoutId,
	          trailingCall,
	          lastCalled = 0,
	          maxWait = false,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      wait = wait < 0 ? 0 : (+wait || 0);
	      if (options === true) {
	        var leading = true;
	        trailing = false;
	      } else if (isObject(options)) {
	        leading = !!options.leading;
	        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }

	      function cancel() {
	        if (timeoutId) {
	          clearTimeout(timeoutId);
	        }
	        if (maxTimeoutId) {
	          clearTimeout(maxTimeoutId);
	        }
	        lastCalled = 0;
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	      }

	      function complete(isCalled, id) {
	        if (id) {
	          clearTimeout(id);
	        }
	        maxTimeoutId = timeoutId = trailingCall = undefined;
	        if (isCalled) {
	          lastCalled = now();
	          result = func.apply(thisArg, args);
	          if (!timeoutId && !maxTimeoutId) {
	            args = thisArg = undefined;
	          }
	        }
	      }

	      function delayed() {
	        var remaining = wait - (now() - stamp);
	        if (remaining <= 0 || remaining > wait) {
	          complete(trailingCall, maxTimeoutId);
	        } else {
	          timeoutId = setTimeout(delayed, remaining);
	        }
	      }

	      function maxDelayed() {
	        complete(trailing, timeoutId);
	      }

	      function debounced() {
	        args = arguments;
	        stamp = now();
	        thisArg = this;
	        trailingCall = trailing && (timeoutId || !leading);

	        if (maxWait === false) {
	          var leadingCall = leading && !timeoutId;
	        } else {
	          if (!maxTimeoutId && !leading) {
	            lastCalled = stamp;
	          }
	          var remaining = maxWait - (stamp - lastCalled),
	              isCalled = remaining <= 0 || remaining > maxWait;

	          if (isCalled) {
	            if (maxTimeoutId) {
	              maxTimeoutId = clearTimeout(maxTimeoutId);
	            }
	            lastCalled = stamp;
	            result = func.apply(thisArg, args);
	          }
	          else if (!maxTimeoutId) {
	            maxTimeoutId = setTimeout(maxDelayed, remaining);
	          }
	        }
	        if (isCalled && timeoutId) {
	          timeoutId = clearTimeout(timeoutId);
	        }
	        else if (!timeoutId && wait !== maxWait) {
	          timeoutId = setTimeout(delayed, wait);
	        }
	        if (leadingCall) {
	          isCalled = true;
	          result = func.apply(thisArg, args);
	        }
	        if (isCalled && !timeoutId && !maxTimeoutId) {
	          args = thisArg = undefined;
	        }
	        return result;
	      }
	      debounced.cancel = cancel;
	      return debounced;
	    }

	    /**
	     * Defers invoking the `func` until the current call stack has cleared. Any
	     * additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to defer.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.defer(function(text) {
	     *   console.log(text);
	     * }, 'deferred');
	     * // logs 'deferred' after one or more milliseconds
	     */
	    var defer = restParam(function(func, args) {
	      return baseDelay(func, 1, args);
	    });

	    /**
	     * Invokes `func` after `wait` milliseconds. Any additional arguments are
	     * provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to delay.
	     * @param {number} wait The number of milliseconds to delay invocation.
	     * @param {...*} [args] The arguments to invoke the function with.
	     * @returns {number} Returns the timer id.
	     * @example
	     *
	     * _.delay(function(text) {
	     *   console.log(text);
	     * }, 1000, 'later');
	     * // => logs 'later' after one second
	     */
	    var delay = restParam(function(func, wait, args) {
	      return baseDelay(func, wait, args);
	    });

	    /**
	     * Creates a function that returns the result of invoking the provided
	     * functions with the `this` binding of the created function, where each
	     * successive invocation is supplied the return value of the previous.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flow(_.add, square);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flow = createFlow();

	    /**
	     * This method is like `_.flow` except that it creates a function that
	     * invokes the provided functions from right to left.
	     *
	     * @static
	     * @memberOf _
	     * @alias backflow, compose
	     * @category Function
	     * @param {...Function} [funcs] Functions to invoke.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var addSquare = _.flowRight(square, _.add);
	     * addSquare(1, 2);
	     * // => 9
	     */
	    var flowRight = createFlow(true);

	    /**
	     * Creates a function that memoizes the result of `func`. If `resolver` is
	     * provided it determines the cache key for storing the result based on the
	     * arguments provided to the memoized function. By default, the first argument
	     * provided to the memoized function is coerced to a string and used as the
	     * cache key. The `func` is invoked with the `this` binding of the memoized
	     * function.
	     *
	     * **Note:** The cache is exposed as the `cache` property on the memoized
	     * function. Its creation may be customized by replacing the `_.memoize.Cache`
	     * constructor with one whose instances implement the [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)
	     * method interface of `get`, `has`, and `set`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to have its output memoized.
	     * @param {Function} [resolver] The function to resolve the cache key.
	     * @returns {Function} Returns the new memoizing function.
	     * @example
	     *
	     * var upperCase = _.memoize(function(string) {
	     *   return string.toUpperCase();
	     * });
	     *
	     * upperCase('fred');
	     * // => 'FRED'
	     *
	     * // modifying the result cache
	     * upperCase.cache.set('fred', 'BARNEY');
	     * upperCase('fred');
	     * // => 'BARNEY'
	     *
	     * // replacing `_.memoize.Cache`
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'barney' };
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'fred' }
	     *
	     * _.memoize.Cache = WeakMap;
	     * var identity = _.memoize(_.identity);
	     *
	     * identity(object);
	     * // => { 'user': 'fred' }
	     * identity(other);
	     * // => { 'user': 'barney' }
	     */
	    function memoize(func, resolver) {
	      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var memoized = function() {
	        var args = arguments,
	            key = resolver ? resolver.apply(this, args) : args[0],
	            cache = memoized.cache;

	        if (cache.has(key)) {
	          return cache.get(key);
	        }
	        var result = func.apply(this, args);
	        memoized.cache = cache.set(key, result);
	        return result;
	      };
	      memoized.cache = new memoize.Cache;
	      return memoized;
	    }

	    /**
	     * Creates a function that runs each argument through a corresponding
	     * transform function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to wrap.
	     * @param {...(Function|Function[])} [transforms] The functions to transform
	     * arguments, specified as individual functions or arrays of functions.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function doubled(n) {
	     *   return n * 2;
	     * }
	     *
	     * function square(n) {
	     *   return n * n;
	     * }
	     *
	     * var modded = _.modArgs(function(x, y) {
	     *   return [x, y];
	     * }, square, doubled);
	     *
	     * modded(1, 2);
	     * // => [1, 4]
	     *
	     * modded(5, 10);
	     * // => [25, 20]
	     */
	    var modArgs = restParam(function(func, transforms) {
	      transforms = baseFlatten(transforms);
	      if (typeof func != 'function' || !arrayEvery(transforms, baseIsFunction)) {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      var length = transforms.length;
	      return restParam(function(args) {
	        var index = nativeMin(args.length, length);
	        while (index--) {
	          args[index] = transforms[index](args[index]);
	        }
	        return func.apply(this, args);
	      });
	    });

	    /**
	     * Creates a function that negates the result of the predicate `func`. The
	     * `func` predicate is invoked with the `this` binding and arguments of the
	     * created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} predicate The predicate to negate.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * function isEven(n) {
	     *   return n % 2 == 0;
	     * }
	     *
	     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
	     * // => [1, 3, 5]
	     */
	    function negate(predicate) {
	      if (typeof predicate != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function() {
	        return !predicate.apply(this, arguments);
	      };
	    }

	    /**
	     * Creates a function that is restricted to invoking `func` once. Repeat calls
	     * to the function return the value of the first call. The `func` is invoked
	     * with the `this` binding and arguments of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to restrict.
	     * @returns {Function} Returns the new restricted function.
	     * @example
	     *
	     * var initialize = _.once(createApplication);
	     * initialize();
	     * initialize();
	     * // `initialize` invokes `createApplication` once
	     */
	    function once(func) {
	      return before(2, func);
	    }

	    /**
	     * Creates a function that invokes `func` with `partial` arguments prepended
	     * to those provided to the new function. This method is like `_.bind` except
	     * it does **not** alter the `this` binding.
	     *
	     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var sayHelloTo = _.partial(greet, 'hello');
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     *
	     * // using placeholders
	     * var greetFred = _.partial(greet, _, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     */
	    var partial = createPartial(PARTIAL_FLAG);

	    /**
	     * This method is like `_.partial` except that partially applied arguments
	     * are appended to those provided to the new function.
	     *
	     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
	     * builds, may be used as a placeholder for partially applied arguments.
	     *
	     * **Note:** This method does not set the "length" property of partially
	     * applied functions.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to partially apply arguments to.
	     * @param {...*} [partials] The arguments to be partially applied.
	     * @returns {Function} Returns the new partially applied function.
	     * @example
	     *
	     * var greet = function(greeting, name) {
	     *   return greeting + ' ' + name;
	     * };
	     *
	     * var greetFred = _.partialRight(greet, 'fred');
	     * greetFred('hi');
	     * // => 'hi fred'
	     *
	     * // using placeholders
	     * var sayHelloTo = _.partialRight(greet, 'hello', _);
	     * sayHelloTo('fred');
	     * // => 'hello fred'
	     */
	    var partialRight = createPartial(PARTIAL_RIGHT_FLAG);

	    /**
	     * Creates a function that invokes `func` with arguments arranged according
	     * to the specified indexes where the argument value at the first index is
	     * provided as the first argument, the argument value at the second index is
	     * provided as the second argument, and so on.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to rearrange arguments for.
	     * @param {...(number|number[])} indexes The arranged argument indexes,
	     *  specified as individual indexes or arrays of indexes.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var rearged = _.rearg(function(a, b, c) {
	     *   return [a, b, c];
	     * }, 2, 0, 1);
	     *
	     * rearged('b', 'c', 'a')
	     * // => ['a', 'b', 'c']
	     *
	     * var map = _.rearg(_.map, [1, 0]);
	     * map(function(n) {
	     *   return n * 3;
	     * }, [1, 2, 3]);
	     * // => [3, 6, 9]
	     */
	    var rearg = restParam(function(func, indexes) {
	      return createWrapper(func, REARG_FLAG, undefined, undefined, undefined, baseFlatten(indexes));
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the
	     * created function and arguments from `start` and beyond provided as an array.
	     *
	     * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to apply a rest parameter to.
	     * @param {number} [start=func.length-1] The start position of the rest parameter.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.restParam(function(what, names) {
	     *   return what + ' ' + _.initial(names).join(', ') +
	     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	     * });
	     *
	     * say('hello', 'fred', 'barney', 'pebbles');
	     * // => 'hello fred, barney, & pebbles'
	     */
	    function restParam(func, start) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	      return function() {
	        var args = arguments,
	            index = -1,
	            length = nativeMax(args.length - start, 0),
	            rest = Array(length);

	        while (++index < length) {
	          rest[index] = args[start + index];
	        }
	        switch (start) {
	          case 0: return func.call(this, rest);
	          case 1: return func.call(this, args[0], rest);
	          case 2: return func.call(this, args[0], args[1], rest);
	        }
	        var otherArgs = Array(start + 1);
	        index = -1;
	        while (++index < start) {
	          otherArgs[index] = args[index];
	        }
	        otherArgs[start] = rest;
	        return func.apply(this, otherArgs);
	      };
	    }

	    /**
	     * Creates a function that invokes `func` with the `this` binding of the created
	     * function and an array of arguments much like [`Function#apply`](https://es5.github.io/#x15.3.4.3).
	     *
	     * **Note:** This method is based on the [spread operator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator).
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to spread arguments over.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var say = _.spread(function(who, what) {
	     *   return who + ' says ' + what;
	     * });
	     *
	     * say(['fred', 'hello']);
	     * // => 'fred says hello'
	     *
	     * // with a Promise
	     * var numbers = Promise.all([
	     *   Promise.resolve(40),
	     *   Promise.resolve(36)
	     * ]);
	     *
	     * numbers.then(_.spread(function(x, y) {
	     *   return x + y;
	     * }));
	     * // => a Promise of 76
	     */
	    function spread(func) {
	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      return function(array) {
	        return func.apply(this, array);
	      };
	    }

	    /**
	     * Creates a throttled function that only invokes `func` at most once per
	     * every `wait` milliseconds. The throttled function comes with a `cancel`
	     * method to cancel delayed invocations. Provide an options object to indicate
	     * that `func` should be invoked on the leading and/or trailing edge of the
	     * `wait` timeout. Subsequent calls to the throttled function return the
	     * result of the last `func` call.
	     *
	     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	     * on the trailing edge of the timeout only if the the throttled function is
	     * invoked more than once during the `wait` timeout.
	     *
	     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	     * for details over the differences between `_.throttle` and `_.debounce`.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {Function} func The function to throttle.
	     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.leading=true] Specify invoking on the leading
	     *  edge of the timeout.
	     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	     *  edge of the timeout.
	     * @returns {Function} Returns the new throttled function.
	     * @example
	     *
	     * // avoid excessively updating the position while scrolling
	     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	     *
	     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	     * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	     *   'trailing': false
	     * }));
	     *
	     * // cancel a trailing throttled call
	     * jQuery(window).on('popstate', throttled.cancel);
	     */
	    function throttle(func, wait, options) {
	      var leading = true,
	          trailing = true;

	      if (typeof func != 'function') {
	        throw new TypeError(FUNC_ERROR_TEXT);
	      }
	      if (options === false) {
	        leading = false;
	      } else if (isObject(options)) {
	        leading = 'leading' in options ? !!options.leading : leading;
	        trailing = 'trailing' in options ? !!options.trailing : trailing;
	      }
	      return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	    }

	    /**
	     * Creates a function that provides `value` to the wrapper function as its
	     * first argument. Any additional arguments provided to the function are
	     * appended to those provided to the wrapper function. The wrapper is invoked
	     * with the `this` binding of the created function.
	     *
	     * @static
	     * @memberOf _
	     * @category Function
	     * @param {*} value The value to wrap.
	     * @param {Function} wrapper The wrapper function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var p = _.wrap(_.escape, function(func, text) {
	     *   return '<p>' + func(text) + '</p>';
	     * });
	     *
	     * p('fred, barney, & pebbles');
	     * // => '<p>fred, barney, &amp; pebbles</p>'
	     */
	    function wrap(value, wrapper) {
	      wrapper = wrapper == null ? identity : wrapper;
	      return createWrapper(wrapper, PARTIAL_FLAG, undefined, [value], []);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	     * otherwise they are assigned by reference. If `customizer` is provided it is
	     * invoked to produce the cloned values. If `customizer` returns `undefined`
	     * cloning is handled by the method instead. The `customizer` is bound to
	     * `thisArg` and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to clone.
	     * @param {boolean} [isDeep] Specify a deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var shallow = _.clone(users);
	     * shallow[0] === users[0];
	     * // => true
	     *
	     * var deep = _.clone(users, true);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.clone(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(false);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 0
	     */
	    function clone(value, isDeep, customizer, thisArg) {
	      if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	        isDeep = false;
	      }
	      else if (typeof isDeep == 'function') {
	        thisArg = customizer;
	        customizer = isDeep;
	        isDeep = false;
	      }
	      return typeof customizer == 'function'
	        ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, isDeep);
	    }

	    /**
	     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
	     * to produce the cloned values. If `customizer` returns `undefined` cloning
	     * is handled by the method instead. The `customizer` is bound to `thisArg`
	     * and invoked with two argument; (value [, index|key, object]).
	     *
	     * **Note:** This method is loosely based on the
	     * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	     * The enumerable properties of `arguments` objects and objects created by
	     * constructors other than `Object` are cloned to plain `Object` objects. An
	     * empty object is returned for uncloneable values such as functions, DOM nodes,
	     * Maps, Sets, and WeakMaps.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to deep clone.
	     * @param {Function} [customizer] The function to customize cloning values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {*} Returns the deep cloned value.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * var deep = _.cloneDeep(users);
	     * deep[0] === users[0];
	     * // => false
	     *
	     * // using a customizer callback
	     * var el = _.cloneDeep(document.body, function(value) {
	     *   if (_.isElement(value)) {
	     *     return value.cloneNode(true);
	     *   }
	     * });
	     *
	     * el === document.body
	     * // => false
	     * el.nodeName
	     * // => BODY
	     * el.childNodes.length;
	     * // => 20
	     */
	    function cloneDeep(value, customizer, thisArg) {
	      return typeof customizer == 'function'
	        ? baseClone(value, true, bindCallback(customizer, thisArg, 1))
	        : baseClone(value, true);
	    }

	    /**
	     * Checks if `value` is greater than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
	     * @example
	     *
	     * _.gt(3, 1);
	     * // => true
	     *
	     * _.gt(3, 3);
	     * // => false
	     *
	     * _.gt(1, 3);
	     * // => false
	     */
	    function gt(value, other) {
	      return value > other;
	    }

	    /**
	     * Checks if `value` is greater than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is greater than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.gte(3, 1);
	     * // => true
	     *
	     * _.gte(3, 3);
	     * // => true
	     *
	     * _.gte(1, 3);
	     * // => false
	     */
	    function gte(value, other) {
	      return value >= other;
	    }

	    /**
	     * Checks if `value` is classified as an `arguments` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArguments(function() { return arguments; }());
	     * // => true
	     *
	     * _.isArguments([1, 2, 3]);
	     * // => false
	     */
	    function isArguments(value) {
	      return isObjectLike(value) && isArrayLike(value) &&
	        hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	    }

	    /**
	     * Checks if `value` is classified as an `Array` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isArray([1, 2, 3]);
	     * // => true
	     *
	     * _.isArray(function() { return arguments; }());
	     * // => false
	     */
	    var isArray = nativeIsArray || function(value) {
	      return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	    };

	    /**
	     * Checks if `value` is classified as a boolean primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isBoolean(false);
	     * // => true
	     *
	     * _.isBoolean(null);
	     * // => false
	     */
	    function isBoolean(value) {
	      return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	    }

	    /**
	     * Checks if `value` is classified as a `Date` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isDate(new Date);
	     * // => true
	     *
	     * _.isDate('Mon April 23 2012');
	     * // => false
	     */
	    function isDate(value) {
	      return isObjectLike(value) && objToString.call(value) == dateTag;
	    }

	    /**
	     * Checks if `value` is a DOM element.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
	     * @example
	     *
	     * _.isElement(document.body);
	     * // => true
	     *
	     * _.isElement('<body>');
	     * // => false
	     */
	    function isElement(value) {
	      return !!value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value);
	    }

	    /**
	     * Checks if `value` is empty. A value is considered empty unless it is an
	     * `arguments` object, array, string, or jQuery-like collection with a length
	     * greater than `0` or an object with own enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Array|Object|string} value The value to inspect.
	     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	     * @example
	     *
	     * _.isEmpty(null);
	     * // => true
	     *
	     * _.isEmpty(true);
	     * // => true
	     *
	     * _.isEmpty(1);
	     * // => true
	     *
	     * _.isEmpty([1, 2, 3]);
	     * // => false
	     *
	     * _.isEmpty({ 'a': 1 });
	     * // => false
	     */
	    function isEmpty(value) {
	      if (value == null) {
	        return true;
	      }
	      if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
	          (isObjectLike(value) && isFunction(value.splice)))) {
	        return !value.length;
	      }
	      return !keys(value).length;
	    }

	    /**
	     * Performs a deep comparison between two values to determine if they are
	     * equivalent. If `customizer` is provided it is invoked to compare values.
	     * If `customizer` returns `undefined` comparisons are handled by the method
	     * instead. The `customizer` is bound to `thisArg` and invoked with three
	     * arguments: (value, other [, index|key]).
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. Functions and DOM nodes
	     * are **not** supported. Provide a customizer function to extend support
	     * for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @alias eq
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var other = { 'user': 'fred' };
	     *
	     * object == other;
	     * // => false
	     *
	     * _.isEqual(object, other);
	     * // => true
	     *
	     * // using a customizer callback
	     * var array = ['hello', 'goodbye'];
	     * var other = ['hi', 'goodbye'];
	     *
	     * _.isEqual(array, other, function(value, other) {
	     *   if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
	     *     return true;
	     *   }
	     * });
	     * // => true
	     */
	    function isEqual(value, other, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      var result = customizer ? customizer(value, other) : undefined;
	      return  result === undefined ? baseIsEqual(value, other, customizer) : !!result;
	    }

	    /**
	     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
	     * `SyntaxError`, `TypeError`, or `URIError` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
	     * @example
	     *
	     * _.isError(new Error);
	     * // => true
	     *
	     * _.isError(Error);
	     * // => false
	     */
	    function isError(value) {
	      return isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag;
	    }

	    /**
	     * Checks if `value` is a finite primitive number.
	     *
	     * **Note:** This method is based on [`Number.isFinite`](http://ecma-international.org/ecma-262/6.0/#sec-number.isfinite).
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	     * @example
	     *
	     * _.isFinite(10);
	     * // => true
	     *
	     * _.isFinite('10');
	     * // => false
	     *
	     * _.isFinite(true);
	     * // => false
	     *
	     * _.isFinite(Object(10));
	     * // => false
	     *
	     * _.isFinite(Infinity);
	     * // => false
	     */
	    function isFinite(value) {
	      return typeof value == 'number' && nativeIsFinite(value);
	    }

	    /**
	     * Checks if `value` is classified as a `Function` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isFunction(_);
	     * // => true
	     *
	     * _.isFunction(/abc/);
	     * // => false
	     */
	    function isFunction(value) {
	      // The use of `Object#toString` avoids issues with the `typeof` operator
	      // in older versions of Chrome and Safari which return 'function' for regexes
	      // and Safari 8 equivalents which return 'object' for typed array constructors.
	      return isObject(value) && objToString.call(value) == funcTag;
	    }

	    /**
	     * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	     * @example
	     *
	     * _.isObject({});
	     * // => true
	     *
	     * _.isObject([1, 2, 3]);
	     * // => true
	     *
	     * _.isObject(1);
	     * // => false
	     */
	    function isObject(value) {
	      // Avoid a V8 JIT bug in Chrome 19-20.
	      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	      var type = typeof value;
	      return !!value && (type == 'object' || type == 'function');
	    }

	    /**
	     * Performs a deep comparison between `object` and `source` to determine if
	     * `object` contains equivalent property values. If `customizer` is provided
	     * it is invoked to compare values. If `customizer` returns `undefined`
	     * comparisons are handled by the method instead. The `customizer` is bound
	     * to `thisArg` and invoked with three arguments: (value, other, index|key).
	     *
	     * **Note:** This method supports comparing properties of arrays, booleans,
	     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
	     * and DOM nodes are **not** supported. Provide a customizer function to extend
	     * support for comparing other values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {Object} object The object to inspect.
	     * @param {Object} source The object of property values to match.
	     * @param {Function} [customizer] The function to customize value comparisons.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.isMatch(object, { 'age': 40 });
	     * // => true
	     *
	     * _.isMatch(object, { 'age': 36 });
	     * // => false
	     *
	     * // using a customizer callback
	     * var object = { 'greeting': 'hello' };
	     * var source = { 'greeting': 'hi' };
	     *
	     * _.isMatch(object, source, function(value, other) {
	     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
	     * });
	     * // => true
	     */
	    function isMatch(object, source, customizer, thisArg) {
	      customizer = typeof customizer == 'function' ? bindCallback(customizer, thisArg, 3) : undefined;
	      return baseIsMatch(object, getMatchData(source), customizer);
	    }

	    /**
	     * Checks if `value` is `NaN`.
	     *
	     * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
	     * which returns `true` for `undefined` and other non-numeric values.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	     * @example
	     *
	     * _.isNaN(NaN);
	     * // => true
	     *
	     * _.isNaN(new Number(NaN));
	     * // => true
	     *
	     * isNaN(undefined);
	     * // => true
	     *
	     * _.isNaN(undefined);
	     * // => false
	     */
	    function isNaN(value) {
	      // An `NaN` primitive is the only value that is not equal to itself.
	      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
	      return isNumber(value) && value != +value;
	    }

	    /**
	     * Checks if `value` is a native function.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	     * @example
	     *
	     * _.isNative(Array.prototype.push);
	     * // => true
	     *
	     * _.isNative(_);
	     * // => false
	     */
	    function isNative(value) {
	      if (value == null) {
	        return false;
	      }
	      if (isFunction(value)) {
	        return reIsNative.test(fnToString.call(value));
	      }
	      return isObjectLike(value) && reIsHostCtor.test(value);
	    }

	    /**
	     * Checks if `value` is `null`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	     * @example
	     *
	     * _.isNull(null);
	     * // => true
	     *
	     * _.isNull(void 0);
	     * // => false
	     */
	    function isNull(value) {
	      return value === null;
	    }

	    /**
	     * Checks if `value` is classified as a `Number` primitive or object.
	     *
	     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	     * as numbers, use the `_.isFinite` method.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isNumber(8.4);
	     * // => true
	     *
	     * _.isNumber(NaN);
	     * // => true
	     *
	     * _.isNumber('8.4');
	     * // => false
	     */
	    function isNumber(value) {
	      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	    }

	    /**
	     * Checks if `value` is a plain object, that is, an object created by the
	     * `Object` constructor or one with a `[[Prototype]]` of `null`.
	     *
	     * **Note:** This method assumes objects created by the `Object` constructor
	     * have no inherited enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     * }
	     *
	     * _.isPlainObject(new Foo);
	     * // => false
	     *
	     * _.isPlainObject([1, 2, 3]);
	     * // => false
	     *
	     * _.isPlainObject({ 'x': 0, 'y': 0 });
	     * // => true
	     *
	     * _.isPlainObject(Object.create(null));
	     * // => true
	     */
	    function isPlainObject(value) {
	      var Ctor;

	      // Exit early for non `Object` objects.
	      if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	          (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	        return false;
	      }
	      // IE < 9 iterates inherited properties before own properties. If the first
	      // iterated property is an object's own property then there are no inherited
	      // enumerable properties.
	      var result;
	      // In most environments an object's own properties are iterated before
	      // its inherited properties. If the last iterated property is an object's
	      // own property then there are no inherited enumerable properties.
	      baseForIn(value, function(subValue, key) {
	        result = key;
	      });
	      return result === undefined || hasOwnProperty.call(value, result);
	    }

	    /**
	     * Checks if `value` is classified as a `RegExp` object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isRegExp(/abc/);
	     * // => true
	     *
	     * _.isRegExp('/abc/');
	     * // => false
	     */
	    function isRegExp(value) {
	      return isObject(value) && objToString.call(value) == regexpTag;
	    }

	    /**
	     * Checks if `value` is classified as a `String` primitive or object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isString('abc');
	     * // => true
	     *
	     * _.isString(1);
	     * // => false
	     */
	    function isString(value) {
	      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	    }

	    /**
	     * Checks if `value` is classified as a typed array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	     * @example
	     *
	     * _.isTypedArray(new Uint8Array);
	     * // => true
	     *
	     * _.isTypedArray([]);
	     * // => false
	     */
	    function isTypedArray(value) {
	      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	    }

	    /**
	     * Checks if `value` is `undefined`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to check.
	     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
	     * @example
	     *
	     * _.isUndefined(void 0);
	     * // => true
	     *
	     * _.isUndefined(null);
	     * // => false
	     */
	    function isUndefined(value) {
	      return value === undefined;
	    }

	    /**
	     * Checks if `value` is less than `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
	     * @example
	     *
	     * _.lt(1, 3);
	     * // => true
	     *
	     * _.lt(3, 3);
	     * // => false
	     *
	     * _.lt(3, 1);
	     * // => false
	     */
	    function lt(value, other) {
	      return value < other;
	    }

	    /**
	     * Checks if `value` is less than or equal to `other`.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to compare.
	     * @param {*} other The other value to compare.
	     * @returns {boolean} Returns `true` if `value` is less than or equal to `other`, else `false`.
	     * @example
	     *
	     * _.lte(1, 3);
	     * // => true
	     *
	     * _.lte(3, 3);
	     * // => true
	     *
	     * _.lte(3, 1);
	     * // => false
	     */
	    function lte(value, other) {
	      return value <= other;
	    }

	    /**
	     * Converts `value` to an array.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Array} Returns the converted array.
	     * @example
	     *
	     * (function() {
	     *   return _.toArray(arguments).slice(1);
	     * }(1, 2, 3));
	     * // => [2, 3]
	     */
	    function toArray(value) {
	      var length = value ? getLength(value) : 0;
	      if (!isLength(length)) {
	        return values(value);
	      }
	      if (!length) {
	        return [];
	      }
	      return arrayCopy(value);
	    }

	    /**
	     * Converts `value` to a plain object flattening inherited enumerable
	     * properties of `value` to own properties of the plain object.
	     *
	     * @static
	     * @memberOf _
	     * @category Lang
	     * @param {*} value The value to convert.
	     * @returns {Object} Returns the converted plain object.
	     * @example
	     *
	     * function Foo() {
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.assign({ 'a': 1 }, new Foo);
	     * // => { 'a': 1, 'b': 2 }
	     *
	     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	     * // => { 'a': 1, 'b': 2, 'c': 3 }
	     */
	    function toPlainObject(value) {
	      return baseCopy(value, keysIn(value));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Recursively merges own enumerable properties of the source object(s), that
	     * don't resolve to `undefined` into the destination object. Subsequent sources
	     * overwrite property assignments of previous sources. If `customizer` is
	     * provided it is invoked to produce the merged values of the destination and
	     * source properties. If `customizer` returns `undefined` merging is handled
	     * by the method instead. The `customizer` is bound to `thisArg` and invoked
	     * with five arguments: (objectValue, sourceValue, key, object, source).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var users = {
	     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	     * };
	     *
	     * var ages = {
	     *   'data': [{ 'age': 36 }, { 'age': 40 }]
	     * };
	     *
	     * _.merge(users, ages);
	     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	     *
	     * // using a customizer callback
	     * var object = {
	     *   'fruits': ['apple'],
	     *   'vegetables': ['beet']
	     * };
	     *
	     * var other = {
	     *   'fruits': ['banana'],
	     *   'vegetables': ['carrot']
	     * };
	     *
	     * _.merge(object, other, function(a, b) {
	     *   if (_.isArray(a)) {
	     *     return a.concat(b);
	     *   }
	     * });
	     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	     */
	    var merge = createAssigner(baseMerge);

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object. Subsequent sources overwrite property assignments of previous sources.
	     * If `customizer` is provided it is invoked to produce the assigned values.
	     * The `customizer` is bound to `thisArg` and invoked with five arguments:
	     * (objectValue, sourceValue, key, object, source).
	     *
	     * **Note:** This method mutates `object` and is based on
	     * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	     *
	     * @static
	     * @memberOf _
	     * @alias extend
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @param {Function} [customizer] The function to customize assigned values.
	     * @param {*} [thisArg] The `this` binding of `customizer`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using a customizer callback
	     * var defaults = _.partialRight(_.assign, function(value, other) {
	     *   return _.isUndefined(value) ? other : value;
	     * });
	     *
	     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var assign = createAssigner(function(object, source, customizer) {
	      return customizer
	        ? assignWith(object, source, customizer)
	        : baseAssign(object, source);
	    });

	    /**
	     * Creates an object that inherits from the given `prototype` object. If a
	     * `properties` object is provided its own enumerable properties are assigned
	     * to the created object.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} prototype The object to inherit from.
	     * @param {Object} [properties] The properties to assign to the object.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * function Shape() {
	     *   this.x = 0;
	     *   this.y = 0;
	     * }
	     *
	     * function Circle() {
	     *   Shape.call(this);
	     * }
	     *
	     * Circle.prototype = _.create(Shape.prototype, {
	     *   'constructor': Circle
	     * });
	     *
	     * var circle = new Circle;
	     * circle instanceof Circle;
	     * // => true
	     *
	     * circle instanceof Shape;
	     * // => true
	     */
	    function create(prototype, properties, guard) {
	      var result = baseCreate(prototype);
	      if (guard && isIterateeCall(prototype, properties, guard)) {
	        properties = undefined;
	      }
	      return properties ? baseAssign(result, properties) : result;
	    }

	    /**
	     * Assigns own enumerable properties of source object(s) to the destination
	     * object for all destination properties that resolve to `undefined`. Once a
	     * property is set, additional values of the same property are ignored.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var defaults = createDefaults(assign, assignDefaults);

	    /**
	     * This method is like `_.defaults` except that it recursively assigns
	     * default properties.
	     *
	     * **Note:** This method mutates `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The destination object.
	     * @param {...Object} [sources] The source objects.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
	     * // => { 'user': { 'name': 'barney', 'age': 36 } }
	     *
	     */
	    var defaultsDeep = createDefaults(merge, mergeDefaults);

	    /**
	     * This method is like `_.find` except that it returns the key of the first
	     * element `predicate` returns truthy for instead of the element itself.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => 'barney' (iteration order is not guaranteed)
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findKey(users, { 'age': 1, 'active': true });
	     * // => 'pebbles'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findKey(users, 'active');
	     * // => 'barney'
	     */
	    var findKey = createFindKey(baseForOwn);

	    /**
	     * This method is like `_.findKey` except that it iterates over elements of
	     * a collection in the opposite order.
	     *
	     * If a property name is provided for `predicate` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `predicate` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to search.
	     * @param {Function|Object|string} [predicate=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
	     * @example
	     *
	     * var users = {
	     *   'barney':  { 'age': 36, 'active': true },
	     *   'fred':    { 'age': 40, 'active': false },
	     *   'pebbles': { 'age': 1,  'active': true }
	     * };
	     *
	     * _.findLastKey(users, function(chr) {
	     *   return chr.age < 40;
	     * });
	     * // => returns `pebbles` assuming `_.findKey` returns `barney`
	     *
	     * // using the `_.matches` callback shorthand
	     * _.findLastKey(users, { 'age': 36, 'active': true });
	     * // => 'barney'
	     *
	     * // using the `_.matchesProperty` callback shorthand
	     * _.findLastKey(users, 'active', false);
	     * // => 'fred'
	     *
	     * // using the `_.property` callback shorthand
	     * _.findLastKey(users, 'active');
	     * // => 'pebbles'
	     */
	    var findLastKey = createFindKey(baseForOwnRight);

	    /**
	     * Iterates over own and inherited enumerable properties of an object invoking
	     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
	     * with three arguments: (value, key, object). Iteratee functions may exit
	     * iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forIn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
	     */
	    var forIn = createForIn(baseFor);

	    /**
	     * This method is like `_.forIn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forInRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
	     */
	    var forInRight = createForIn(baseForRight);

	    /**
	     * Iterates over own enumerable properties of an object invoking `iteratee`
	     * for each property. The `iteratee` is bound to `thisArg` and invoked with
	     * three arguments: (value, key, object). Iteratee functions may exit iteration
	     * early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwn(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'a' and 'b' (iteration order is not guaranteed)
	     */
	    var forOwn = createForOwn(baseForOwn);

	    /**
	     * This method is like `_.forOwn` except that it iterates over properties of
	     * `object` in the opposite order.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.forOwnRight(new Foo, function(value, key) {
	     *   console.log(key);
	     * });
	     * // => logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
	     */
	    var forOwnRight = createForOwn(baseForOwnRight);

	    /**
	     * Creates an array of function property names from all enumerable properties,
	     * own and inherited, of `object`.
	     *
	     * @static
	     * @memberOf _
	     * @alias methods
	     * @category Object
	     * @param {Object} object The object to inspect.
	     * @returns {Array} Returns the new array of property names.
	     * @example
	     *
	     * _.functions(_);
	     * // => ['after', 'ary', 'assign', ...]
	     */
	    function functions(object) {
	      return baseFunctions(object, keysIn(object));
	    }

	    /**
	     * Gets the property value at `path` of `object`. If the resolved value is
	     * `undefined` the `defaultValue` is used in its place.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.get(object, 'a[0].b.c');
	     * // => 3
	     *
	     * _.get(object, ['a', '0', 'b', 'c']);
	     * // => 3
	     *
	     * _.get(object, 'a.b.c', 'default');
	     * // => 'default'
	     */
	    function get(object, path, defaultValue) {
	      var result = object == null ? undefined : baseGet(object, toPath(path), path + '');
	      return result === undefined ? defaultValue : result;
	    }

	    /**
	     * Checks if `path` is a direct property.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path to check.
	     * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	     * @example
	     *
	     * var object = { 'a': { 'b': { 'c': 3 } } };
	     *
	     * _.has(object, 'a');
	     * // => true
	     *
	     * _.has(object, 'a.b.c');
	     * // => true
	     *
	     * _.has(object, ['a', 'b', 'c']);
	     * // => true
	     */
	    function has(object, path) {
	      if (object == null) {
	        return false;
	      }
	      var result = hasOwnProperty.call(object, path);
	      if (!result && !isKey(path)) {
	        path = toPath(path);
	        object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	        if (object == null) {
	          return false;
	        }
	        path = last(path);
	        result = hasOwnProperty.call(object, path);
	      }
	      return result || (isLength(object.length) && isIndex(path, object.length) &&
	        (isArray(object) || isArguments(object)));
	    }

	    /**
	     * Creates an object composed of the inverted keys and values of `object`.
	     * If `object` contains duplicate values, subsequent values overwrite property
	     * assignments of previous values unless `multiValue` is `true`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to invert.
	     * @param {boolean} [multiValue] Allow multiple values per key.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Object} Returns the new inverted object.
	     * @example
	     *
	     * var object = { 'a': 1, 'b': 2, 'c': 1 };
	     *
	     * _.invert(object);
	     * // => { '1': 'c', '2': 'b' }
	     *
	     * // with `multiValue`
	     * _.invert(object, true);
	     * // => { '1': ['a', 'c'], '2': ['b'] }
	     */
	    function invert(object, multiValue, guard) {
	      if (guard && isIterateeCall(object, multiValue, guard)) {
	        multiValue = undefined;
	      }
	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = {};

	      while (++index < length) {
	        var key = props[index],
	            value = object[key];

	        if (multiValue) {
	          if (hasOwnProperty.call(result, value)) {
	            result[value].push(key);
	          } else {
	            result[value] = [key];
	          }
	        }
	        else {
	          result[value] = key;
	        }
	      }
	      return result;
	    }

	    /**
	     * Creates an array of the own enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects. See the
	     * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	     * for more details.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keys(new Foo);
	     * // => ['a', 'b'] (iteration order is not guaranteed)
	     *
	     * _.keys('hi');
	     * // => ['0', '1']
	     */
	    var keys = !nativeKeys ? shimKeys : function(object) {
	      var Ctor = object == null ? undefined : object.constructor;
	      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	          (typeof object != 'function' && isArrayLike(object))) {
	        return shimKeys(object);
	      }
	      return isObject(object) ? nativeKeys(object) : [];
	    };

	    /**
	     * Creates an array of the own and inherited enumerable property names of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property names.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.keysIn(new Foo);
	     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	     */
	    function keysIn(object) {
	      if (object == null) {
	        return [];
	      }
	      if (!isObject(object)) {
	        object = Object(object);
	      }
	      var length = object.length;
	      length = (length && isLength(length) &&
	        (isArray(object) || isArguments(object)) && length) || 0;

	      var Ctor = object.constructor,
	          index = -1,
	          isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	          result = Array(length),
	          skipIndexes = length > 0;

	      while (++index < length) {
	        result[index] = (index + '');
	      }
	      for (var key in object) {
	        if (!(skipIndexes && isIndex(key, length)) &&
	            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	          result.push(key);
	        }
	      }
	      return result;
	    }

	    /**
	     * The opposite of `_.mapValues`; this method creates an object with the
	     * same values as `object` and keys generated by running each own enumerable
	     * property of `object` through `iteratee`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
	     *   return key + value;
	     * });
	     * // => { 'a1': 1, 'b2': 2 }
	     */
	    var mapKeys = createObjectMapper(true);

	    /**
	     * Creates an object with the same keys as `object` and values generated by
	     * running each own enumerable property of `object` through `iteratee`. The
	     * iteratee function is bound to `thisArg` and invoked with three arguments:
	     * (value, key, object).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to iterate over.
	     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	     *  per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Object} Returns the new mapped object.
	     * @example
	     *
	     * _.mapValues({ 'a': 1, 'b': 2 }, function(n) {
	     *   return n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     *
	     * var users = {
	     *   'fred':    { 'user': 'fred',    'age': 40 },
	     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
	     * };
	     *
	     * // using the `_.property` callback shorthand
	     * _.mapValues(users, 'age');
	     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
	     */
	    var mapValues = createObjectMapper();

	    /**
	     * The opposite of `_.pick`; this method creates an object composed of the
	     * own and inherited enumerable properties of `object` that are not omitted.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to omit, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.omit(object, 'age');
	     * // => { 'user': 'fred' }
	     *
	     * _.omit(object, _.isNumber);
	     * // => { 'user': 'fred' }
	     */
	    var omit = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      if (typeof props[0] != 'function') {
	        var props = arrayMap(baseFlatten(props), String);
	        return pickByArray(object, baseDifference(keysIn(object), props));
	      }
	      var predicate = bindCallback(props[0], props[1], 3);
	      return pickByCallback(object, function(value, key, object) {
	        return !predicate(value, key, object);
	      });
	    });

	    /**
	     * Creates a two dimensional array of the key-value pairs for `object`,
	     * e.g. `[[key1, value1], [key2, value2]]`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the new array of key-value pairs.
	     * @example
	     *
	     * _.pairs({ 'barney': 36, 'fred': 40 });
	     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	     */
	    function pairs(object) {
	      object = toObject(object);

	      var index = -1,
	          props = keys(object),
	          length = props.length,
	          result = Array(length);

	      while (++index < length) {
	        var key = props[index];
	        result[index] = [key, object[key]];
	      }
	      return result;
	    }

	    /**
	     * Creates an object composed of the picked `object` properties. Property
	     * names may be specified as individual arguments or as arrays of property
	     * names. If `predicate` is provided it is invoked for each property of `object`
	     * picking the properties `predicate` returns truthy for. The predicate is
	     * bound to `thisArg` and invoked with three arguments: (value, key, object).
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The source object.
	     * @param {Function|...(string|string[])} [predicate] The function invoked per
	     *  iteration or property names to pick, specified as individual property
	     *  names or arrays of property names.
	     * @param {*} [thisArg] The `this` binding of `predicate`.
	     * @returns {Object} Returns the new object.
	     * @example
	     *
	     * var object = { 'user': 'fred', 'age': 40 };
	     *
	     * _.pick(object, 'user');
	     * // => { 'user': 'fred' }
	     *
	     * _.pick(object, _.isString);
	     * // => { 'user': 'fred' }
	     */
	    var pick = restParam(function(object, props) {
	      if (object == null) {
	        return {};
	      }
	      return typeof props[0] == 'function'
	        ? pickByCallback(object, bindCallback(props[0], props[1], 3))
	        : pickByArray(object, baseFlatten(props));
	    });

	    /**
	     * This method is like `_.get` except that if the resolved value is a function
	     * it is invoked with the `this` binding of its parent object and its result
	     * is returned.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @param {Array|string} path The path of the property to resolve.
	     * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
	     * @returns {*} Returns the resolved value.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
	     *
	     * _.result(object, 'a[0].b.c1');
	     * // => 3
	     *
	     * _.result(object, 'a[0].b.c2');
	     * // => 4
	     *
	     * _.result(object, 'a.b.c', 'default');
	     * // => 'default'
	     *
	     * _.result(object, 'a.b.c', _.constant('default'));
	     * // => 'default'
	     */
	    function result(object, path, defaultValue) {
	      var result = object == null ? undefined : object[path];
	      if (result === undefined) {
	        if (object != null && !isKey(path, object)) {
	          path = toPath(path);
	          object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	          result = object == null ? undefined : object[last(path)];
	        }
	        result = result === undefined ? defaultValue : result;
	      }
	      return isFunction(result) ? result.call(object) : result;
	    }

	    /**
	     * Sets the property value of `path` on `object`. If a portion of `path`
	     * does not exist it is created.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to augment.
	     * @param {Array|string} path The path of the property to set.
	     * @param {*} value The value to set.
	     * @returns {Object} Returns `object`.
	     * @example
	     *
	     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	     *
	     * _.set(object, 'a[0].b.c', 4);
	     * console.log(object.a[0].b.c);
	     * // => 4
	     *
	     * _.set(object, 'x[0].y.z', 5);
	     * console.log(object.x[0].y.z);
	     * // => 5
	     */
	    function set(object, path, value) {
	      if (object == null) {
	        return object;
	      }
	      var pathKey = (path + '');
	      path = (object[pathKey] != null || isKey(path, object)) ? [pathKey] : toPath(path);

	      var index = -1,
	          length = path.length,
	          lastIndex = length - 1,
	          nested = object;

	      while (nested != null && ++index < length) {
	        var key = path[index];
	        if (isObject(nested)) {
	          if (index == lastIndex) {
	            nested[key] = value;
	          } else if (nested[key] == null) {
	            nested[key] = isIndex(path[index + 1]) ? [] : {};
	          }
	        }
	        nested = nested[key];
	      }
	      return object;
	    }

	    /**
	     * An alternative to `_.reduce`; this method transforms `object` to a new
	     * `accumulator` object which is the result of running each of its own enumerable
	     * properties through `iteratee`, with each invocation potentially mutating
	     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
	     * with four arguments: (accumulator, value, key, object). Iteratee functions
	     * may exit iteration early by explicitly returning `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Array|Object} object The object to iterate over.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [accumulator] The custom accumulator value.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the accumulated value.
	     * @example
	     *
	     * _.transform([2, 3, 4], function(result, n) {
	     *   result.push(n *= n);
	     *   return n % 2 == 0;
	     * });
	     * // => [4, 9]
	     *
	     * _.transform({ 'a': 1, 'b': 2 }, function(result, n, key) {
	     *   result[key] = n * 3;
	     * });
	     * // => { 'a': 3, 'b': 6 }
	     */
	    function transform(object, iteratee, accumulator, thisArg) {
	      var isArr = isArray(object) || isTypedArray(object);
	      iteratee = getCallback(iteratee, thisArg, 4);

	      if (accumulator == null) {
	        if (isArr || isObject(object)) {
	          var Ctor = object.constructor;
	          if (isArr) {
	            accumulator = isArray(object) ? new Ctor : [];
	          } else {
	            accumulator = baseCreate(isFunction(Ctor) ? Ctor.prototype : undefined);
	          }
	        } else {
	          accumulator = {};
	        }
	      }
	      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
	        return iteratee(accumulator, value, index, object);
	      });
	      return accumulator;
	    }

	    /**
	     * Creates an array of the own enumerable property values of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.values(new Foo);
	     * // => [1, 2] (iteration order is not guaranteed)
	     *
	     * _.values('hi');
	     * // => ['h', 'i']
	     */
	    function values(object) {
	      return baseValues(object, keys(object));
	    }

	    /**
	     * Creates an array of the own and inherited enumerable property values
	     * of `object`.
	     *
	     * **Note:** Non-object values are coerced to objects.
	     *
	     * @static
	     * @memberOf _
	     * @category Object
	     * @param {Object} object The object to query.
	     * @returns {Array} Returns the array of property values.
	     * @example
	     *
	     * function Foo() {
	     *   this.a = 1;
	     *   this.b = 2;
	     * }
	     *
	     * Foo.prototype.c = 3;
	     *
	     * _.valuesIn(new Foo);
	     * // => [1, 2, 3] (iteration order is not guaranteed)
	     */
	    function valuesIn(object) {
	      return baseValues(object, keysIn(object));
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Checks if `n` is between `start` and up to but not including, `end`. If
	     * `end` is not specified it is set to `start` with `start` then set to `0`.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} n The number to check.
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @returns {boolean} Returns `true` if `n` is in the range, else `false`.
	     * @example
	     *
	     * _.inRange(3, 2, 4);
	     * // => true
	     *
	     * _.inRange(4, 8);
	     * // => true
	     *
	     * _.inRange(4, 2);
	     * // => false
	     *
	     * _.inRange(2, 2);
	     * // => false
	     *
	     * _.inRange(1.2, 2);
	     * // => true
	     *
	     * _.inRange(5.2, 4);
	     * // => false
	     */
	    function inRange(value, start, end) {
	      start = +start || 0;
	      if (end === undefined) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      return value >= nativeMin(start, end) && value < nativeMax(start, end);
	    }

	    /**
	     * Produces a random number between `min` and `max` (inclusive). If only one
	     * argument is provided a number between `0` and the given number is returned.
	     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
	     * number is returned instead of an integer.
	     *
	     * @static
	     * @memberOf _
	     * @category Number
	     * @param {number} [min=0] The minimum possible value.
	     * @param {number} [max=1] The maximum possible value.
	     * @param {boolean} [floating] Specify returning a floating-point number.
	     * @returns {number} Returns the random number.
	     * @example
	     *
	     * _.random(0, 5);
	     * // => an integer between 0 and 5
	     *
	     * _.random(5);
	     * // => also an integer between 0 and 5
	     *
	     * _.random(5, true);
	     * // => a floating-point number between 0 and 5
	     *
	     * _.random(1.2, 5.2);
	     * // => a floating-point number between 1.2 and 5.2
	     */
	    function random(min, max, floating) {
	      if (floating && isIterateeCall(min, max, floating)) {
	        max = floating = undefined;
	      }
	      var noMin = min == null,
	          noMax = max == null;

	      if (floating == null) {
	        if (noMax && typeof min == 'boolean') {
	          floating = min;
	          min = 1;
	        }
	        else if (typeof max == 'boolean') {
	          floating = max;
	          noMax = true;
	        }
	      }
	      if (noMin && noMax) {
	        max = 1;
	        noMax = false;
	      }
	      min = +min || 0;
	      if (noMax) {
	        max = min;
	        min = 0;
	      } else {
	        max = +max || 0;
	      }
	      if (floating || min % 1 || max % 1) {
	        var rand = nativeRandom();
	        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
	      }
	      return baseRandom(min, max);
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the camel cased string.
	     * @example
	     *
	     * _.camelCase('Foo Bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('--foo-bar');
	     * // => 'fooBar'
	     *
	     * _.camelCase('__foo_bar__');
	     * // => 'fooBar'
	     */
	    var camelCase = createCompounder(function(result, word, index) {
	      word = word.toLowerCase();
	      return result + (index ? (word.charAt(0).toUpperCase() + word.slice(1)) : word);
	    });

	    /**
	     * Capitalizes the first character of `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to capitalize.
	     * @returns {string} Returns the capitalized string.
	     * @example
	     *
	     * _.capitalize('fred');
	     * // => 'Fred'
	     */
	    function capitalize(string) {
	      string = baseToString(string);
	      return string && (string.charAt(0).toUpperCase() + string.slice(1));
	    }

	    /**
	     * Deburrs `string` by converting [latin-1 supplementary letters](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	     * to basic latin letters and removing [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to deburr.
	     * @returns {string} Returns the deburred string.
	     * @example
	     *
	     * _.deburr('déjà vu');
	     * // => 'deja vu'
	     */
	    function deburr(string) {
	      string = baseToString(string);
	      return string && string.replace(reLatin1, deburrLetter).replace(reComboMark, '');
	    }

	    /**
	     * Checks if `string` ends with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=string.length] The position to search from.
	     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
	     * @example
	     *
	     * _.endsWith('abc', 'c');
	     * // => true
	     *
	     * _.endsWith('abc', 'b');
	     * // => false
	     *
	     * _.endsWith('abc', 'b', 2);
	     * // => true
	     */
	    function endsWith(string, target, position) {
	      string = baseToString(string);
	      target = (target + '');

	      var length = string.length;
	      position = position === undefined
	        ? length
	        : nativeMin(position < 0 ? 0 : (+position || 0), length);

	      position -= target.length;
	      return position >= 0 && string.indexOf(target, position) == position;
	    }

	    /**
	     * Converts the characters "&", "<", ">", '"', "'", and "\`", in `string` to
	     * their corresponding HTML entities.
	     *
	     * **Note:** No other characters are escaped. To escape additional characters
	     * use a third-party library like [_he_](https://mths.be/he).
	     *
	     * Though the ">" character is escaped for symmetry, characters like
	     * ">" and "/" don't need escaping in HTML and have no special meaning
	     * unless they're part of a tag or unquoted attribute value.
	     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
	     * (under "semi-related fun fact") for more details.
	     *
	     * Backticks are escaped because in Internet Explorer < 9, they can break out
	     * of attribute values or HTML comments. See [#59](https://html5sec.org/#59),
	     * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
	     * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
	     * for more details.
	     *
	     * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
	     * to reduce XSS vectors.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escape('fred, barney, & pebbles');
	     * // => 'fred, barney, &amp; pebbles'
	     */
	    function escape(string) {
	      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
	      string = baseToString(string);
	      return (string && reHasUnescapedHtml.test(string))
	        ? string.replace(reUnescapedHtml, escapeHtmlChar)
	        : string;
	    }

	    /**
	     * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	     * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to escape.
	     * @returns {string} Returns the escaped string.
	     * @example
	     *
	     * _.escapeRegExp('[lodash](https://lodash.com/)');
	     * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	     */
	    function escapeRegExp(string) {
	      string = baseToString(string);
	      return (string && reHasRegExpChars.test(string))
	        ? string.replace(reRegExpChars, escapeRegExpChar)
	        : (string || '(?:)');
	    }

	    /**
	     * Converts `string` to [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the kebab cased string.
	     * @example
	     *
	     * _.kebabCase('Foo Bar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('fooBar');
	     * // => 'foo-bar'
	     *
	     * _.kebabCase('__foo_bar__');
	     * // => 'foo-bar'
	     */
	    var kebabCase = createCompounder(function(result, word, index) {
	      return result + (index ? '-' : '') + word.toLowerCase();
	    });

	    /**
	     * Pads `string` on the left and right sides if it's shorter than `length`.
	     * Padding characters are truncated if they can't be evenly divided by `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.pad('abc', 8);
	     * // => '  abc   '
	     *
	     * _.pad('abc', 8, '_-');
	     * // => '_-abc_-_'
	     *
	     * _.pad('abc', 3);
	     * // => 'abc'
	     */
	    function pad(string, length, chars) {
	      string = baseToString(string);
	      length = +length;

	      var strLength = string.length;
	      if (strLength >= length || !nativeIsFinite(length)) {
	        return string;
	      }
	      var mid = (length - strLength) / 2,
	          leftLength = nativeFloor(mid),
	          rightLength = nativeCeil(mid);

	      chars = createPadding('', rightLength, chars);
	      return chars.slice(0, leftLength) + string + chars;
	    }

	    /**
	     * Pads `string` on the left side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padLeft('abc', 6);
	     * // => '   abc'
	     *
	     * _.padLeft('abc', 6, '_-');
	     * // => '_-_abc'
	     *
	     * _.padLeft('abc', 3);
	     * // => 'abc'
	     */
	    var padLeft = createPadDir();

	    /**
	     * Pads `string` on the right side if it's shorter than `length`. Padding
	     * characters are truncated if they exceed `length`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to pad.
	     * @param {number} [length=0] The padding length.
	     * @param {string} [chars=' '] The string used as padding.
	     * @returns {string} Returns the padded string.
	     * @example
	     *
	     * _.padRight('abc', 6);
	     * // => 'abc   '
	     *
	     * _.padRight('abc', 6, '_-');
	     * // => 'abc_-_'
	     *
	     * _.padRight('abc', 3);
	     * // => 'abc'
	     */
	    var padRight = createPadDir(true);

	    /**
	     * Converts `string` to an integer of the specified radix. If `radix` is
	     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
	     * in which case a `radix` of `16` is used.
	     *
	     * **Note:** This method aligns with the [ES5 implementation](https://es5.github.io/#E)
	     * of `parseInt`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} string The string to convert.
	     * @param {number} [radix] The radix to interpret `value` by.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {number} Returns the converted integer.
	     * @example
	     *
	     * _.parseInt('08');
	     * // => 8
	     *
	     * _.map(['6', '08', '10'], _.parseInt);
	     * // => [6, 8, 10]
	     */
	    function parseInt(string, radix, guard) {
	      // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
	      // Chrome fails to trim leading <BOM> whitespace characters.
	      // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
	      if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
	        radix = 0;
	      } else if (radix) {
	        radix = +radix;
	      }
	      string = trim(string);
	      return nativeParseInt(string, radix || (reHasHexPrefix.test(string) ? 16 : 10));
	    }

	    /**
	     * Repeats the given string `n` times.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to repeat.
	     * @param {number} [n=0] The number of times to repeat the string.
	     * @returns {string} Returns the repeated string.
	     * @example
	     *
	     * _.repeat('*', 3);
	     * // => '***'
	     *
	     * _.repeat('abc', 2);
	     * // => 'abcabc'
	     *
	     * _.repeat('abc', 0);
	     * // => ''
	     */
	    function repeat(string, n) {
	      var result = '';
	      string = baseToString(string);
	      n = +n;
	      if (n < 1 || !string || !nativeIsFinite(n)) {
	        return result;
	      }
	      // Leverage the exponentiation by squaring algorithm for a faster repeat.
	      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
	      do {
	        if (n % 2) {
	          result += string;
	        }
	        n = nativeFloor(n / 2);
	        string += string;
	      } while (n);

	      return result;
	    }

	    /**
	     * Converts `string` to [snake case](https://en.wikipedia.org/wiki/Snake_case).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the snake cased string.
	     * @example
	     *
	     * _.snakeCase('Foo Bar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('fooBar');
	     * // => 'foo_bar'
	     *
	     * _.snakeCase('--foo-bar');
	     * // => 'foo_bar'
	     */
	    var snakeCase = createCompounder(function(result, word, index) {
	      return result + (index ? '_' : '') + word.toLowerCase();
	    });

	    /**
	     * Converts `string` to [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to convert.
	     * @returns {string} Returns the start cased string.
	     * @example
	     *
	     * _.startCase('--foo-bar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('fooBar');
	     * // => 'Foo Bar'
	     *
	     * _.startCase('__foo_bar__');
	     * // => 'Foo Bar'
	     */
	    var startCase = createCompounder(function(result, word, index) {
	      return result + (index ? ' ' : '') + (word.charAt(0).toUpperCase() + word.slice(1));
	    });

	    /**
	     * Checks if `string` starts with the given target string.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to search.
	     * @param {string} [target] The string to search for.
	     * @param {number} [position=0] The position to search from.
	     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	     * @example
	     *
	     * _.startsWith('abc', 'a');
	     * // => true
	     *
	     * _.startsWith('abc', 'b');
	     * // => false
	     *
	     * _.startsWith('abc', 'b', 1);
	     * // => true
	     */
	    function startsWith(string, target, position) {
	      string = baseToString(string);
	      position = position == null
	        ? 0
	        : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	      return string.lastIndexOf(target, position) == position;
	    }

	    /**
	     * Creates a compiled template function that can interpolate data properties
	     * in "interpolate" delimiters, HTML-escape interpolated data properties in
	     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
	     * properties may be accessed as free variables in the template. If a setting
	     * object is provided it takes precedence over `_.templateSettings` values.
	     *
	     * **Note:** In the development build `_.template` utilizes
	     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
	     * for easier debugging.
	     *
	     * For more information on precompiling templates see
	     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
	     *
	     * For more information on Chrome extension sandboxes see
	     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The template string.
	     * @param {Object} [options] The options object.
	     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
	     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
	     * @param {Object} [options.imports] An object to import into the template as free variables.
	     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
	     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
	     * @param {string} [options.variable] The data object variable name.
	     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
	     * @returns {Function} Returns the compiled template function.
	     * @example
	     *
	     * // using the "interpolate" delimiter to create a compiled template
	     * var compiled = _.template('hello <%= user %>!');
	     * compiled({ 'user': 'fred' });
	     * // => 'hello fred!'
	     *
	     * // using the HTML "escape" delimiter to escape data property values
	     * var compiled = _.template('<b><%- value %></b>');
	     * compiled({ 'value': '<script>' });
	     * // => '<b>&lt;script&gt;</b>'
	     *
	     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
	     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the internal `print` function in "evaluate" delimiters
	     * var compiled = _.template('<% print("hello " + user); %>!');
	     * compiled({ 'user': 'barney' });
	     * // => 'hello barney!'
	     *
	     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
	     * var compiled = _.template('hello ${ user }!');
	     * compiled({ 'user': 'pebbles' });
	     * // => 'hello pebbles!'
	     *
	     * // using custom template delimiters
	     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
	     * var compiled = _.template('hello {{ user }}!');
	     * compiled({ 'user': 'mustache' });
	     * // => 'hello mustache!'
	     *
	     * // using backslashes to treat delimiters as plain text
	     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
	     * compiled({ 'value': 'ignored' });
	     * // => '<%- value %>'
	     *
	     * // using the `imports` option to import `jQuery` as `jq`
	     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
	     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
	     * compiled({ 'users': ['fred', 'barney'] });
	     * // => '<li>fred</li><li>barney</li>'
	     *
	     * // using the `sourceURL` option to specify a custom sourceURL for the template
	     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
	     * compiled(data);
	     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
	     *
	     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
	     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
	     * compiled.source;
	     * // => function(data) {
	     * //   var __t, __p = '';
	     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
	     * //   return __p;
	     * // }
	     *
	     * // using the `source` property to inline compiled templates for meaningful
	     * // line numbers in error messages and a stack trace
	     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
	     *   var JST = {\
	     *     "main": ' + _.template(mainText).source + '\
	     *   };\
	     * ');
	     */
	    function template(string, options, otherOptions) {
	      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
	      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
	      var settings = lodash.templateSettings;

	      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
	        options = otherOptions = undefined;
	      }
	      string = baseToString(string);
	      options = assignWith(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

	      var imports = assignWith(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
	          importsKeys = keys(imports),
	          importsValues = baseValues(imports, importsKeys);

	      var isEscaping,
	          isEvaluating,
	          index = 0,
	          interpolate = options.interpolate || reNoMatch,
	          source = "__p += '";

	      // Compile the regexp to match each delimiter.
	      var reDelimiters = RegExp(
	        (options.escape || reNoMatch).source + '|' +
	        interpolate.source + '|' +
	        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
	        (options.evaluate || reNoMatch).source + '|$'
	      , 'g');

	      // Use a sourceURL for easier debugging.
	      var sourceURL = '//# sourceURL=' +
	        ('sourceURL' in options
	          ? options.sourceURL
	          : ('lodash.templateSources[' + (++templateCounter) + ']')
	        ) + '\n';

	      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
	        interpolateValue || (interpolateValue = esTemplateValue);

	        // Escape characters that can't be included in string literals.
	        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

	        // Replace delimiters with snippets.
	        if (escapeValue) {
	          isEscaping = true;
	          source += "' +\n__e(" + escapeValue + ") +\n'";
	        }
	        if (evaluateValue) {
	          isEvaluating = true;
	          source += "';\n" + evaluateValue + ";\n__p += '";
	        }
	        if (interpolateValue) {
	          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
	        }
	        index = offset + match.length;

	        // The JS engine embedded in Adobe products requires returning the `match`
	        // string in order to produce the correct `offset` value.
	        return match;
	      });

	      source += "';\n";

	      // If `variable` is not specified wrap a with-statement around the generated
	      // code to add the data object to the top of the scope chain.
	      var variable = options.variable;
	      if (!variable) {
	        source = 'with (obj) {\n' + source + '\n}\n';
	      }
	      // Cleanup code by stripping empty strings.
	      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
	        .replace(reEmptyStringMiddle, '$1')
	        .replace(reEmptyStringTrailing, '$1;');

	      // Frame code as the function body.
	      source = 'function(' + (variable || 'obj') + ') {\n' +
	        (variable
	          ? ''
	          : 'obj || (obj = {});\n'
	        ) +
	        "var __t, __p = ''" +
	        (isEscaping
	           ? ', __e = _.escape'
	           : ''
	        ) +
	        (isEvaluating
	          ? ', __j = Array.prototype.join;\n' +
	            "function print() { __p += __j.call(arguments, '') }\n"
	          : ';\n'
	        ) +
	        source +
	        'return __p\n}';

	      var result = attempt(function() {
	        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
	      });

	      // Provide the compiled function's source by its `toString` method or
	      // the `source` property as a convenience for inlining compiled templates.
	      result.source = source;
	      if (isError(result)) {
	        throw result;
	      }
	      return result;
	    }

	    /**
	     * Removes leading and trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trim('  abc  ');
	     * // => 'abc'
	     *
	     * _.trim('-_-abc-_-', '_-');
	     * // => 'abc'
	     *
	     * _.map(['  foo  ', '  bar  '], _.trim);
	     * // => ['foo', 'bar']
	     */
	    function trim(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
	      }
	      chars = (chars + '');
	      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
	    }

	    /**
	     * Removes leading whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimLeft('  abc  ');
	     * // => 'abc  '
	     *
	     * _.trimLeft('-_-abc-_-', '_-');
	     * // => 'abc-_-'
	     */
	    function trimLeft(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(trimmedLeftIndex(string));
	      }
	      return string.slice(charsLeftIndex(string, (chars + '')));
	    }

	    /**
	     * Removes trailing whitespace or specified characters from `string`.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to trim.
	     * @param {string} [chars=whitespace] The characters to trim.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the trimmed string.
	     * @example
	     *
	     * _.trimRight('  abc  ');
	     * // => '  abc'
	     *
	     * _.trimRight('-_-abc-_-', '_-');
	     * // => '-_-abc'
	     */
	    function trimRight(string, chars, guard) {
	      var value = string;
	      string = baseToString(string);
	      if (!string) {
	        return string;
	      }
	      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
	        return string.slice(0, trimmedRightIndex(string) + 1);
	      }
	      return string.slice(0, charsRightIndex(string, (chars + '')) + 1);
	    }

	    /**
	     * Truncates `string` if it's longer than the given maximum string length.
	     * The last characters of the truncated string are replaced with the omission
	     * string which defaults to "...".
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to truncate.
	     * @param {Object|number} [options] The options object or maximum string length.
	     * @param {number} [options.length=30] The maximum string length.
	     * @param {string} [options.omission='...'] The string to indicate text is omitted.
	     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {string} Returns the truncated string.
	     * @example
	     *
	     * _.trunc('hi-diddly-ho there, neighborino');
	     * // => 'hi-diddly-ho there, neighbo...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', 24);
	     * // => 'hi-diddly-ho there, n...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': ' '
	     * });
	     * // => 'hi-diddly-ho there,...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'length': 24,
	     *   'separator': /,? +/
	     * });
	     * // => 'hi-diddly-ho there...'
	     *
	     * _.trunc('hi-diddly-ho there, neighborino', {
	     *   'omission': ' [...]'
	     * });
	     * // => 'hi-diddly-ho there, neig [...]'
	     */
	    function trunc(string, options, guard) {
	      if (guard && isIterateeCall(string, options, guard)) {
	        options = undefined;
	      }
	      var length = DEFAULT_TRUNC_LENGTH,
	          omission = DEFAULT_TRUNC_OMISSION;

	      if (options != null) {
	        if (isObject(options)) {
	          var separator = 'separator' in options ? options.separator : separator;
	          length = 'length' in options ? (+options.length || 0) : length;
	          omission = 'omission' in options ? baseToString(options.omission) : omission;
	        } else {
	          length = +options || 0;
	        }
	      }
	      string = baseToString(string);
	      if (length >= string.length) {
	        return string;
	      }
	      var end = length - omission.length;
	      if (end < 1) {
	        return omission;
	      }
	      var result = string.slice(0, end);
	      if (separator == null) {
	        return result + omission;
	      }
	      if (isRegExp(separator)) {
	        if (string.slice(end).search(separator)) {
	          var match,
	              newEnd,
	              substring = string.slice(0, end);

	          if (!separator.global) {
	            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
	          }
	          separator.lastIndex = 0;
	          while ((match = separator.exec(substring))) {
	            newEnd = match.index;
	          }
	          result = result.slice(0, newEnd == null ? end : newEnd);
	        }
	      } else if (string.indexOf(separator, end) != end) {
	        var index = result.lastIndexOf(separator);
	        if (index > -1) {
	          result = result.slice(0, index);
	        }
	      }
	      return result + omission;
	    }

	    /**
	     * The inverse of `_.escape`; this method converts the HTML entities
	     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
	     * corresponding characters.
	     *
	     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
	     * entities use a third-party library like [_he_](https://mths.be/he).
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to unescape.
	     * @returns {string} Returns the unescaped string.
	     * @example
	     *
	     * _.unescape('fred, barney, &amp; pebbles');
	     * // => 'fred, barney, & pebbles'
	     */
	    function unescape(string) {
	      string = baseToString(string);
	      return (string && reHasEscapedHtml.test(string))
	        ? string.replace(reEscapedHtml, unescapeHtmlChar)
	        : string;
	    }

	    /**
	     * Splits `string` into an array of its words.
	     *
	     * @static
	     * @memberOf _
	     * @category String
	     * @param {string} [string=''] The string to inspect.
	     * @param {RegExp|string} [pattern] The pattern to match words.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Array} Returns the words of `string`.
	     * @example
	     *
	     * _.words('fred, barney, & pebbles');
	     * // => ['fred', 'barney', 'pebbles']
	     *
	     * _.words('fred, barney, & pebbles', /[^, ]+/g);
	     * // => ['fred', 'barney', '&', 'pebbles']
	     */
	    function words(string, pattern, guard) {
	      if (guard && isIterateeCall(string, pattern, guard)) {
	        pattern = undefined;
	      }
	      string = baseToString(string);
	      return string.match(pattern || reWords) || [];
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Attempts to invoke `func`, returning either the result or the caught error
	     * object. Any additional arguments are provided to `func` when it is invoked.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function} func The function to attempt.
	     * @returns {*} Returns the `func` result or error object.
	     * @example
	     *
	     * // avoid throwing errors for invalid selectors
	     * var elements = _.attempt(function(selector) {
	     *   return document.querySelectorAll(selector);
	     * }, '>_>');
	     *
	     * if (_.isError(elements)) {
	     *   elements = [];
	     * }
	     */
	    var attempt = restParam(function(func, args) {
	      try {
	        return func.apply(undefined, args);
	      } catch(e) {
	        return isError(e) ? e : new Error(e);
	      }
	    });

	    /**
	     * Creates a function that invokes `func` with the `this` binding of `thisArg`
	     * and arguments of the created function. If `func` is a property name the
	     * created callback returns the property value for a given element. If `func`
	     * is an object the created callback returns `true` for elements that contain
	     * the equivalent object properties, otherwise it returns `false`.
	     *
	     * @static
	     * @memberOf _
	     * @alias iteratee
	     * @category Utility
	     * @param {*} [func=_.identity] The value to convert to a callback.
	     * @param {*} [thisArg] The `this` binding of `func`.
	     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
	     * @returns {Function} Returns the callback.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * // wrap to create custom callback shorthands
	     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
	     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
	     *   if (!match) {
	     *     return callback(func, thisArg);
	     *   }
	     *   return function(object) {
	     *     return match[2] == 'gt'
	     *       ? object[match[1]] > match[3]
	     *       : object[match[1]] < match[3];
	     *   };
	     * });
	     *
	     * _.filter(users, 'age__gt36');
	     * // => [{ 'user': 'fred', 'age': 40 }]
	     */
	    function callback(func, thisArg, guard) {
	      if (guard && isIterateeCall(func, thisArg, guard)) {
	        thisArg = undefined;
	      }
	      return isObjectLike(func)
	        ? matches(func)
	        : baseCallback(func, thisArg);
	    }

	    /**
	     * Creates a function that returns `value`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value The value to return from the new function.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     * var getter = _.constant(object);
	     *
	     * getter() === object;
	     * // => true
	     */
	    function constant(value) {
	      return function() {
	        return value;
	      };
	    }

	    /**
	     * This method returns the first argument provided to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {*} value Any value.
	     * @returns {*} Returns `value`.
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.identity(object) === object;
	     * // => true
	     */
	    function identity(value) {
	      return value;
	    }

	    /**
	     * Creates a function that performs a deep comparison between a given object
	     * and `source`, returning `true` if the given object has equivalent property
	     * values, else `false`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties. For comparing a single
	     * own or inherited property value see `_.matchesProperty`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} source The object of property values to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36, 'active': true },
	     *   { 'user': 'fred',   'age': 40, 'active': false }
	     * ];
	     *
	     * _.filter(users, _.matches({ 'age': 40, 'active': false }));
	     * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
	     */
	    function matches(source) {
	      return baseMatches(baseClone(source, true));
	    }

	    /**
	     * Creates a function that compares the property value of `path` on a given
	     * object to `value`.
	     *
	     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
	     * numbers, `Object` objects, regexes, and strings. Objects are compared by
	     * their own, not inherited, enumerable properties.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @param {*} srcValue The value to match.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var users = [
	     *   { 'user': 'barney' },
	     *   { 'user': 'fred' }
	     * ];
	     *
	     * _.find(users, _.matchesProperty('user', 'fred'));
	     * // => { 'user': 'fred' }
	     */
	    function matchesProperty(path, srcValue) {
	      return baseMatchesProperty(path, baseClone(srcValue, true));
	    }

	    /**
	     * Creates a function that invokes the method at `path` on a given object.
	     * Any additional arguments are provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the method to invoke.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': _.constant(2) } } },
	     *   { 'a': { 'b': { 'c': _.constant(1) } } }
	     * ];
	     *
	     * _.map(objects, _.method('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.invoke(_.sortBy(objects, _.method(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    var method = restParam(function(path, args) {
	      return function(object) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * The opposite of `_.method`; this method creates a function that invokes
	     * the method at a given path on `object`. Any additional arguments are
	     * provided to the invoked method.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @param {...*} [args] The arguments to invoke the method with.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = _.times(3, _.constant),
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
	     * // => [2, 0]
	     */
	    var methodOf = restParam(function(object, args) {
	      return function(path) {
	        return invokePath(object, path, args);
	      };
	    });

	    /**
	     * Adds all own enumerable function properties of a source object to the
	     * destination object. If `object` is a function then methods are added to
	     * its prototype as well.
	     *
	     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
	     * avoid conflicts caused by modifying the original.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Function|Object} [object=lodash] The destination object.
	     * @param {Object} source The object of functions to add.
	     * @param {Object} [options] The options object.
	     * @param {boolean} [options.chain=true] Specify whether the functions added
	     *  are chainable.
	     * @returns {Function|Object} Returns `object`.
	     * @example
	     *
	     * function vowels(string) {
	     *   return _.filter(string, function(v) {
	     *     return /[aeiou]/i.test(v);
	     *   });
	     * }
	     *
	     * _.mixin({ 'vowels': vowels });
	     * _.vowels('fred');
	     * // => ['e']
	     *
	     * _('fred').vowels().value();
	     * // => ['e']
	     *
	     * _.mixin({ 'vowels': vowels }, { 'chain': false });
	     * _('fred').vowels();
	     * // => ['e']
	     */
	    function mixin(object, source, options) {
	      if (options == null) {
	        var isObj = isObject(source),
	            props = isObj ? keys(source) : undefined,
	            methodNames = (props && props.length) ? baseFunctions(source, props) : undefined;

	        if (!(methodNames ? methodNames.length : isObj)) {
	          methodNames = false;
	          options = source;
	          source = object;
	          object = this;
	        }
	      }
	      if (!methodNames) {
	        methodNames = baseFunctions(source, keys(source));
	      }
	      var chain = true,
	          index = -1,
	          isFunc = isFunction(object),
	          length = methodNames.length;

	      if (options === false) {
	        chain = false;
	      } else if (isObject(options) && 'chain' in options) {
	        chain = options.chain;
	      }
	      while (++index < length) {
	        var methodName = methodNames[index],
	            func = source[methodName];

	        object[methodName] = func;
	        if (isFunc) {
	          object.prototype[methodName] = (function(func) {
	            return function() {
	              var chainAll = this.__chain__;
	              if (chain || chainAll) {
	                var result = object(this.__wrapped__),
	                    actions = result.__actions__ = arrayCopy(this.__actions__);

	                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
	                result.__chain__ = chainAll;
	                return result;
	              }
	              return func.apply(object, arrayPush([this.value()], arguments));
	            };
	          }(func));
	        }
	      }
	      return object;
	    }

	    /**
	     * Reverts the `_` variable to its previous value and returns a reference to
	     * the `lodash` function.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @returns {Function} Returns the `lodash` function.
	     * @example
	     *
	     * var lodash = _.noConflict();
	     */
	    function noConflict() {
	      root._ = oldDash;
	      return this;
	    }

	    /**
	     * A no-operation function that returns `undefined` regardless of the
	     * arguments it receives.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @example
	     *
	     * var object = { 'user': 'fred' };
	     *
	     * _.noop(object) === undefined;
	     * // => true
	     */
	    function noop() {
	      // No operation performed.
	    }

	    /**
	     * Creates a function that returns the property value at `path` on a
	     * given object.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Array|string} path The path of the property to get.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var objects = [
	     *   { 'a': { 'b': { 'c': 2 } } },
	     *   { 'a': { 'b': { 'c': 1 } } }
	     * ];
	     *
	     * _.map(objects, _.property('a.b.c'));
	     * // => [2, 1]
	     *
	     * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	     * // => [1, 2]
	     */
	    function property(path) {
	      return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	    }

	    /**
	     * The opposite of `_.property`; this method creates a function that returns
	     * the property value at a given path on `object`.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {Object} object The object to query.
	     * @returns {Function} Returns the new function.
	     * @example
	     *
	     * var array = [0, 1, 2],
	     *     object = { 'a': array, 'b': array, 'c': array };
	     *
	     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
	     * // => [2, 0]
	     *
	     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
	     * // => [2, 0]
	     */
	    function propertyOf(object) {
	      return function(path) {
	        return baseGet(object, toPath(path), path + '');
	      };
	    }

	    /**
	     * Creates an array of numbers (positive and/or negative) progressing from
	     * `start` up to, but not including, `end`. If `end` is not specified it is
	     * set to `start` with `start` then set to `0`. If `end` is less than `start`
	     * a zero-length range is created unless a negative `step` is specified.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} [start=0] The start of the range.
	     * @param {number} end The end of the range.
	     * @param {number} [step=1] The value to increment or decrement by.
	     * @returns {Array} Returns the new array of numbers.
	     * @example
	     *
	     * _.range(4);
	     * // => [0, 1, 2, 3]
	     *
	     * _.range(1, 5);
	     * // => [1, 2, 3, 4]
	     *
	     * _.range(0, 20, 5);
	     * // => [0, 5, 10, 15]
	     *
	     * _.range(0, -4, -1);
	     * // => [0, -1, -2, -3]
	     *
	     * _.range(1, 4, 0);
	     * // => [1, 1, 1]
	     *
	     * _.range(0);
	     * // => []
	     */
	    function range(start, end, step) {
	      if (step && isIterateeCall(start, end, step)) {
	        end = step = undefined;
	      }
	      start = +start || 0;
	      step = step == null ? 1 : (+step || 0);

	      if (end == null) {
	        end = start;
	        start = 0;
	      } else {
	        end = +end || 0;
	      }
	      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
	      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
	      var index = -1,
	          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
	          result = Array(length);

	      while (++index < length) {
	        result[index] = start;
	        start += step;
	      }
	      return result;
	    }

	    /**
	     * Invokes the iteratee function `n` times, returning an array of the results
	     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
	     * one argument; (index).
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {number} n The number of times to invoke `iteratee`.
	     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {Array} Returns the array of results.
	     * @example
	     *
	     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
	     * // => [3, 6, 4]
	     *
	     * _.times(3, function(n) {
	     *   mage.castSpell(n);
	     * });
	     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2`
	     *
	     * _.times(3, function(n) {
	     *   this.cast(n);
	     * }, mage);
	     * // => also invokes `mage.castSpell(n)` three times
	     */
	    function times(n, iteratee, thisArg) {
	      n = nativeFloor(n);

	      // Exit early to avoid a JSC JIT bug in Safari 8
	      // where `Array(0)` is treated as `Array(1)`.
	      if (n < 1 || !nativeIsFinite(n)) {
	        return [];
	      }
	      var index = -1,
	          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

	      iteratee = bindCallback(iteratee, thisArg, 1);
	      while (++index < n) {
	        if (index < MAX_ARRAY_LENGTH) {
	          result[index] = iteratee(index);
	        } else {
	          iteratee(index);
	        }
	      }
	      return result;
	    }

	    /**
	     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
	     *
	     * @static
	     * @memberOf _
	     * @category Utility
	     * @param {string} [prefix] The value to prefix the ID with.
	     * @returns {string} Returns the unique ID.
	     * @example
	     *
	     * _.uniqueId('contact_');
	     * // => 'contact_104'
	     *
	     * _.uniqueId();
	     * // => '105'
	     */
	    function uniqueId(prefix) {
	      var id = ++idCounter;
	      return baseToString(prefix) + id;
	    }

	    /*------------------------------------------------------------------------*/

	    /**
	     * Adds two numbers.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} augend The first number to add.
	     * @param {number} addend The second number to add.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.add(6, 4);
	     * // => 10
	     */
	    function add(augend, addend) {
	      return (+augend || 0) + (+addend || 0);
	    }

	    /**
	     * Calculates `n` rounded up to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round up.
	     * @param {number} [precision=0] The precision to round up to.
	     * @returns {number} Returns the rounded up number.
	     * @example
	     *
	     * _.ceil(4.006);
	     * // => 5
	     *
	     * _.ceil(6.004, 2);
	     * // => 6.01
	     *
	     * _.ceil(6040, -2);
	     * // => 6100
	     */
	    var ceil = createRound('ceil');

	    /**
	     * Calculates `n` rounded down to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round down.
	     * @param {number} [precision=0] The precision to round down to.
	     * @returns {number} Returns the rounded down number.
	     * @example
	     *
	     * _.floor(4.006);
	     * // => 4
	     *
	     * _.floor(0.046, 2);
	     * // => 0.04
	     *
	     * _.floor(4060, -2);
	     * // => 4000
	     */
	    var floor = createRound('floor');

	    /**
	     * Gets the maximum value of `collection`. If `collection` is empty or falsey
	     * `-Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the maximum value.
	     * @example
	     *
	     * _.max([4, 2, 8, 6]);
	     * // => 8
	     *
	     * _.max([]);
	     * // => -Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.max(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'fred', 'age': 40 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.max(users, 'age');
	     * // => { 'user': 'fred', 'age': 40 }
	     */
	    var max = createExtremum(gt, NEGATIVE_INFINITY);

	    /**
	     * Gets the minimum value of `collection`. If `collection` is empty or falsey
	     * `Infinity` is returned. If an iteratee function is provided it is invoked
	     * for each value in `collection` to generate the criterion by which the value
	     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
	     * arguments: (value, index, collection).
	     *
	     * If a property name is provided for `iteratee` the created `_.property`
	     * style callback returns the property value of the given element.
	     *
	     * If a value is also provided for `thisArg` the created `_.matchesProperty`
	     * style callback returns `true` for elements that have a matching property
	     * value, else `false`.
	     *
	     * If an object is provided for `iteratee` the created `_.matches` style
	     * callback returns `true` for elements that have the properties of the given
	     * object, else `false`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {*} Returns the minimum value.
	     * @example
	     *
	     * _.min([4, 2, 8, 6]);
	     * // => 2
	     *
	     * _.min([]);
	     * // => Infinity
	     *
	     * var users = [
	     *   { 'user': 'barney', 'age': 36 },
	     *   { 'user': 'fred',   'age': 40 }
	     * ];
	     *
	     * _.min(users, function(chr) {
	     *   return chr.age;
	     * });
	     * // => { 'user': 'barney', 'age': 36 }
	     *
	     * // using the `_.property` callback shorthand
	     * _.min(users, 'age');
	     * // => { 'user': 'barney', 'age': 36 }
	     */
	    var min = createExtremum(lt, POSITIVE_INFINITY);

	    /**
	     * Calculates `n` rounded to `precision`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {number} n The number to round.
	     * @param {number} [precision=0] The precision to round to.
	     * @returns {number} Returns the rounded number.
	     * @example
	     *
	     * _.round(4.006);
	     * // => 4
	     *
	     * _.round(4.006, 2);
	     * // => 4.01
	     *
	     * _.round(4060, -2);
	     * // => 4100
	     */
	    var round = createRound('round');

	    /**
	     * Gets the sum of the values in `collection`.
	     *
	     * @static
	     * @memberOf _
	     * @category Math
	     * @param {Array|Object|string} collection The collection to iterate over.
	     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	     * @param {*} [thisArg] The `this` binding of `iteratee`.
	     * @returns {number} Returns the sum.
	     * @example
	     *
	     * _.sum([4, 6]);
	     * // => 10
	     *
	     * _.sum({ 'a': 4, 'b': 6 });
	     * // => 10
	     *
	     * var objects = [
	     *   { 'n': 4 },
	     *   { 'n': 6 }
	     * ];
	     *
	     * _.sum(objects, function(object) {
	     *   return object.n;
	     * });
	     * // => 10
	     *
	     * // using the `_.property` callback shorthand
	     * _.sum(objects, 'n');
	     * // => 10
	     */
	    function sum(collection, iteratee, thisArg) {
	      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	        iteratee = undefined;
	      }
	      iteratee = getCallback(iteratee, thisArg, 3);
	      return iteratee.length == 1
	        ? arraySum(isArray(collection) ? collection : toIterable(collection), iteratee)
	        : baseSum(collection, iteratee);
	    }

	    /*------------------------------------------------------------------------*/

	    // Ensure wrappers are instances of `baseLodash`.
	    lodash.prototype = baseLodash.prototype;

	    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
	    LodashWrapper.prototype.constructor = LodashWrapper;

	    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
	    LazyWrapper.prototype.constructor = LazyWrapper;

	    // Add functions to the `Map` cache.
	    MapCache.prototype['delete'] = mapDelete;
	    MapCache.prototype.get = mapGet;
	    MapCache.prototype.has = mapHas;
	    MapCache.prototype.set = mapSet;

	    // Add functions to the `Set` cache.
	    SetCache.prototype.push = cachePush;

	    // Assign cache to `_.memoize`.
	    memoize.Cache = MapCache;

	    // Add functions that return wrapped values when chaining.
	    lodash.after = after;
	    lodash.ary = ary;
	    lodash.assign = assign;
	    lodash.at = at;
	    lodash.before = before;
	    lodash.bind = bind;
	    lodash.bindAll = bindAll;
	    lodash.bindKey = bindKey;
	    lodash.callback = callback;
	    lodash.chain = chain;
	    lodash.chunk = chunk;
	    lodash.compact = compact;
	    lodash.constant = constant;
	    lodash.countBy = countBy;
	    lodash.create = create;
	    lodash.curry = curry;
	    lodash.curryRight = curryRight;
	    lodash.debounce = debounce;
	    lodash.defaults = defaults;
	    lodash.defaultsDeep = defaultsDeep;
	    lodash.defer = defer;
	    lodash.delay = delay;
	    lodash.difference = difference;
	    lodash.drop = drop;
	    lodash.dropRight = dropRight;
	    lodash.dropRightWhile = dropRightWhile;
	    lodash.dropWhile = dropWhile;
	    lodash.fill = fill;
	    lodash.filter = filter;
	    lodash.flatten = flatten;
	    lodash.flattenDeep = flattenDeep;
	    lodash.flow = flow;
	    lodash.flowRight = flowRight;
	    lodash.forEach = forEach;
	    lodash.forEachRight = forEachRight;
	    lodash.forIn = forIn;
	    lodash.forInRight = forInRight;
	    lodash.forOwn = forOwn;
	    lodash.forOwnRight = forOwnRight;
	    lodash.functions = functions;
	    lodash.groupBy = groupBy;
	    lodash.indexBy = indexBy;
	    lodash.initial = initial;
	    lodash.intersection = intersection;
	    lodash.invert = invert;
	    lodash.invoke = invoke;
	    lodash.keys = keys;
	    lodash.keysIn = keysIn;
	    lodash.map = map;
	    lodash.mapKeys = mapKeys;
	    lodash.mapValues = mapValues;
	    lodash.matches = matches;
	    lodash.matchesProperty = matchesProperty;
	    lodash.memoize = memoize;
	    lodash.merge = merge;
	    lodash.method = method;
	    lodash.methodOf = methodOf;
	    lodash.mixin = mixin;
	    lodash.modArgs = modArgs;
	    lodash.negate = negate;
	    lodash.omit = omit;
	    lodash.once = once;
	    lodash.pairs = pairs;
	    lodash.partial = partial;
	    lodash.partialRight = partialRight;
	    lodash.partition = partition;
	    lodash.pick = pick;
	    lodash.pluck = pluck;
	    lodash.property = property;
	    lodash.propertyOf = propertyOf;
	    lodash.pull = pull;
	    lodash.pullAt = pullAt;
	    lodash.range = range;
	    lodash.rearg = rearg;
	    lodash.reject = reject;
	    lodash.remove = remove;
	    lodash.rest = rest;
	    lodash.restParam = restParam;
	    lodash.set = set;
	    lodash.shuffle = shuffle;
	    lodash.slice = slice;
	    lodash.sortBy = sortBy;
	    lodash.sortByAll = sortByAll;
	    lodash.sortByOrder = sortByOrder;
	    lodash.spread = spread;
	    lodash.take = take;
	    lodash.takeRight = takeRight;
	    lodash.takeRightWhile = takeRightWhile;
	    lodash.takeWhile = takeWhile;
	    lodash.tap = tap;
	    lodash.throttle = throttle;
	    lodash.thru = thru;
	    lodash.times = times;
	    lodash.toArray = toArray;
	    lodash.toPlainObject = toPlainObject;
	    lodash.transform = transform;
	    lodash.union = union;
	    lodash.uniq = uniq;
	    lodash.unzip = unzip;
	    lodash.unzipWith = unzipWith;
	    lodash.values = values;
	    lodash.valuesIn = valuesIn;
	    lodash.where = where;
	    lodash.without = without;
	    lodash.wrap = wrap;
	    lodash.xor = xor;
	    lodash.zip = zip;
	    lodash.zipObject = zipObject;
	    lodash.zipWith = zipWith;

	    // Add aliases.
	    lodash.backflow = flowRight;
	    lodash.collect = map;
	    lodash.compose = flowRight;
	    lodash.each = forEach;
	    lodash.eachRight = forEachRight;
	    lodash.extend = assign;
	    lodash.iteratee = callback;
	    lodash.methods = functions;
	    lodash.object = zipObject;
	    lodash.select = filter;
	    lodash.tail = rest;
	    lodash.unique = uniq;

	    // Add functions to `lodash.prototype`.
	    mixin(lodash, lodash);

	    /*------------------------------------------------------------------------*/

	    // Add functions that return unwrapped values when chaining.
	    lodash.add = add;
	    lodash.attempt = attempt;
	    lodash.camelCase = camelCase;
	    lodash.capitalize = capitalize;
	    lodash.ceil = ceil;
	    lodash.clone = clone;
	    lodash.cloneDeep = cloneDeep;
	    lodash.deburr = deburr;
	    lodash.endsWith = endsWith;
	    lodash.escape = escape;
	    lodash.escapeRegExp = escapeRegExp;
	    lodash.every = every;
	    lodash.find = find;
	    lodash.findIndex = findIndex;
	    lodash.findKey = findKey;
	    lodash.findLast = findLast;
	    lodash.findLastIndex = findLastIndex;
	    lodash.findLastKey = findLastKey;
	    lodash.findWhere = findWhere;
	    lodash.first = first;
	    lodash.floor = floor;
	    lodash.get = get;
	    lodash.gt = gt;
	    lodash.gte = gte;
	    lodash.has = has;
	    lodash.identity = identity;
	    lodash.includes = includes;
	    lodash.indexOf = indexOf;
	    lodash.inRange = inRange;
	    lodash.isArguments = isArguments;
	    lodash.isArray = isArray;
	    lodash.isBoolean = isBoolean;
	    lodash.isDate = isDate;
	    lodash.isElement = isElement;
	    lodash.isEmpty = isEmpty;
	    lodash.isEqual = isEqual;
	    lodash.isError = isError;
	    lodash.isFinite = isFinite;
	    lodash.isFunction = isFunction;
	    lodash.isMatch = isMatch;
	    lodash.isNaN = isNaN;
	    lodash.isNative = isNative;
	    lodash.isNull = isNull;
	    lodash.isNumber = isNumber;
	    lodash.isObject = isObject;
	    lodash.isPlainObject = isPlainObject;
	    lodash.isRegExp = isRegExp;
	    lodash.isString = isString;
	    lodash.isTypedArray = isTypedArray;
	    lodash.isUndefined = isUndefined;
	    lodash.kebabCase = kebabCase;
	    lodash.last = last;
	    lodash.lastIndexOf = lastIndexOf;
	    lodash.lt = lt;
	    lodash.lte = lte;
	    lodash.max = max;
	    lodash.min = min;
	    lodash.noConflict = noConflict;
	    lodash.noop = noop;
	    lodash.now = now;
	    lodash.pad = pad;
	    lodash.padLeft = padLeft;
	    lodash.padRight = padRight;
	    lodash.parseInt = parseInt;
	    lodash.random = random;
	    lodash.reduce = reduce;
	    lodash.reduceRight = reduceRight;
	    lodash.repeat = repeat;
	    lodash.result = result;
	    lodash.round = round;
	    lodash.runInContext = runInContext;
	    lodash.size = size;
	    lodash.snakeCase = snakeCase;
	    lodash.some = some;
	    lodash.sortedIndex = sortedIndex;
	    lodash.sortedLastIndex = sortedLastIndex;
	    lodash.startCase = startCase;
	    lodash.startsWith = startsWith;
	    lodash.sum = sum;
	    lodash.template = template;
	    lodash.trim = trim;
	    lodash.trimLeft = trimLeft;
	    lodash.trimRight = trimRight;
	    lodash.trunc = trunc;
	    lodash.unescape = unescape;
	    lodash.uniqueId = uniqueId;
	    lodash.words = words;

	    // Add aliases.
	    lodash.all = every;
	    lodash.any = some;
	    lodash.contains = includes;
	    lodash.eq = isEqual;
	    lodash.detect = find;
	    lodash.foldl = reduce;
	    lodash.foldr = reduceRight;
	    lodash.head = first;
	    lodash.include = includes;
	    lodash.inject = reduce;

	    mixin(lodash, (function() {
	      var source = {};
	      baseForOwn(lodash, function(func, methodName) {
	        if (!lodash.prototype[methodName]) {
	          source[methodName] = func;
	        }
	      });
	      return source;
	    }()), false);

	    /*------------------------------------------------------------------------*/

	    // Add functions capable of returning wrapped and unwrapped values when chaining.
	    lodash.sample = sample;

	    lodash.prototype.sample = function(n) {
	      if (!this.__chain__ && n == null) {
	        return sample(this.value());
	      }
	      return this.thru(function(value) {
	        return sample(value, n);
	      });
	    };

	    /*------------------------------------------------------------------------*/

	    /**
	     * The semantic version number.
	     *
	     * @static
	     * @memberOf _
	     * @type string
	     */
	    lodash.VERSION = VERSION;

	    // Assign default placeholders.
	    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
	      lodash[methodName].placeholder = lodash;
	    });

	    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
	    arrayEach(['drop', 'take'], function(methodName, index) {
	      LazyWrapper.prototype[methodName] = function(n) {
	        var filtered = this.__filtered__;
	        if (filtered && !index) {
	          return new LazyWrapper(this);
	        }
	        n = n == null ? 1 : nativeMax(nativeFloor(n) || 0, 0);

	        var result = this.clone();
	        if (filtered) {
	          result.__takeCount__ = nativeMin(result.__takeCount__, n);
	        } else {
	          result.__views__.push({ 'size': n, 'type': methodName + (result.__dir__ < 0 ? 'Right' : '') });
	        }
	        return result;
	      };

	      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
	        return this.reverse()[methodName](n).reverse();
	      };
	    });

	    // Add `LazyWrapper` methods that accept an `iteratee` value.
	    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
	      var type = index + 1,
	          isFilter = type != LAZY_MAP_FLAG;

	      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
	        var result = this.clone();
	        result.__iteratees__.push({ 'iteratee': getCallback(iteratee, thisArg, 1), 'type': type });
	        result.__filtered__ = result.__filtered__ || isFilter;
	        return result;
	      };
	    });

	    // Add `LazyWrapper` methods for `_.first` and `_.last`.
	    arrayEach(['first', 'last'], function(methodName, index) {
	      var takeName = 'take' + (index ? 'Right' : '');

	      LazyWrapper.prototype[methodName] = function() {
	        return this[takeName](1).value()[0];
	      };
	    });

	    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
	    arrayEach(['initial', 'rest'], function(methodName, index) {
	      var dropName = 'drop' + (index ? '' : 'Right');

	      LazyWrapper.prototype[methodName] = function() {
	        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
	      };
	    });

	    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
	    arrayEach(['pluck', 'where'], function(methodName, index) {
	      var operationName = index ? 'filter' : 'map',
	          createCallback = index ? baseMatches : property;

	      LazyWrapper.prototype[methodName] = function(value) {
	        return this[operationName](createCallback(value));
	      };
	    });

	    LazyWrapper.prototype.compact = function() {
	      return this.filter(identity);
	    };

	    LazyWrapper.prototype.reject = function(predicate, thisArg) {
	      predicate = getCallback(predicate, thisArg, 1);
	      return this.filter(function(value) {
	        return !predicate(value);
	      });
	    };

	    LazyWrapper.prototype.slice = function(start, end) {
	      start = start == null ? 0 : (+start || 0);

	      var result = this;
	      if (result.__filtered__ && (start > 0 || end < 0)) {
	        return new LazyWrapper(result);
	      }
	      if (start < 0) {
	        result = result.takeRight(-start);
	      } else if (start) {
	        result = result.drop(start);
	      }
	      if (end !== undefined) {
	        end = (+end || 0);
	        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
	      }
	      return result;
	    };

	    LazyWrapper.prototype.takeRightWhile = function(predicate, thisArg) {
	      return this.reverse().takeWhile(predicate, thisArg).reverse();
	    };

	    LazyWrapper.prototype.toArray = function() {
	      return this.take(POSITIVE_INFINITY);
	    };

	    // Add `LazyWrapper` methods to `lodash.prototype`.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var checkIteratee = /^(?:filter|map|reject)|While$/.test(methodName),
	          retUnwrapped = /^(?:first|last)$/.test(methodName),
	          lodashFunc = lodash[retUnwrapped ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName];

	      if (!lodashFunc) {
	        return;
	      }
	      lodash.prototype[methodName] = function() {
	        var args = retUnwrapped ? [1] : arguments,
	            chainAll = this.__chain__,
	            value = this.__wrapped__,
	            isHybrid = !!this.__actions__.length,
	            isLazy = value instanceof LazyWrapper,
	            iteratee = args[0],
	            useLazy = isLazy || isArray(value);

	        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
	          // Avoid lazy use if the iteratee has a "length" value other than `1`.
	          isLazy = useLazy = false;
	        }
	        var interceptor = function(value) {
	          return (retUnwrapped && chainAll)
	            ? lodashFunc(value, 1)[0]
	            : lodashFunc.apply(undefined, arrayPush([value], args));
	        };

	        var action = { 'func': thru, 'args': [interceptor], 'thisArg': undefined },
	            onlyLazy = isLazy && !isHybrid;

	        if (retUnwrapped && !chainAll) {
	          if (onlyLazy) {
	            value = value.clone();
	            value.__actions__.push(action);
	            return func.call(value);
	          }
	          return lodashFunc.call(undefined, this.value())[0];
	        }
	        if (!retUnwrapped && useLazy) {
	          value = onlyLazy ? value : new LazyWrapper(this);
	          var result = func.apply(value, args);
	          result.__actions__.push(action);
	          return new LodashWrapper(result, chainAll);
	        }
	        return this.thru(interceptor);
	      };
	    });

	    // Add `Array` and `String` methods to `lodash.prototype`.
	    arrayEach(['join', 'pop', 'push', 'replace', 'shift', 'sort', 'splice', 'split', 'unshift'], function(methodName) {
	      var func = (/^(?:replace|split)$/.test(methodName) ? stringProto : arrayProto)[methodName],
	          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
	          retUnwrapped = /^(?:join|pop|replace|shift)$/.test(methodName);

	      lodash.prototype[methodName] = function() {
	        var args = arguments;
	        if (retUnwrapped && !this.__chain__) {
	          return func.apply(this.value(), args);
	        }
	        return this[chainName](function(value) {
	          return func.apply(value, args);
	        });
	      };
	    });

	    // Map minified function names to their real names.
	    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
	      var lodashFunc = lodash[methodName];
	      if (lodashFunc) {
	        var key = lodashFunc.name,
	            names = realNames[key] || (realNames[key] = []);

	        names.push({ 'name': methodName, 'func': lodashFunc });
	      }
	    });

	    realNames[createHybridWrapper(undefined, BIND_KEY_FLAG).name] = [{ 'name': 'wrapper', 'func': undefined }];

	    // Add functions to the lazy wrapper.
	    LazyWrapper.prototype.clone = lazyClone;
	    LazyWrapper.prototype.reverse = lazyReverse;
	    LazyWrapper.prototype.value = lazyValue;

	    // Add chaining functions to the `lodash` wrapper.
	    lodash.prototype.chain = wrapperChain;
	    lodash.prototype.commit = wrapperCommit;
	    lodash.prototype.concat = wrapperConcat;
	    lodash.prototype.plant = wrapperPlant;
	    lodash.prototype.reverse = wrapperReverse;
	    lodash.prototype.toString = wrapperToString;
	    lodash.prototype.run = lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

	    // Add function aliases to the `lodash` wrapper.
	    lodash.prototype.collect = lodash.prototype.map;
	    lodash.prototype.head = lodash.prototype.first;
	    lodash.prototype.select = lodash.prototype.filter;
	    lodash.prototype.tail = lodash.prototype.rest;

	    return lodash;
	  }

	  /*--------------------------------------------------------------------------*/

	  // Export lodash.
	  var _ = runInContext();

	  // Some AMD build optimizers like r.js check for condition patterns like the following:
	  if (true) {
	    // Expose lodash to the global object when an AMD loader is present to avoid
	    // errors in cases where lodash is loaded by a script tag and not intended
	    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
	    // more details.
	    root._ = _;

	    // Define as an anonymous module so, through path mapping, it can be
	    // referenced as the "underscore" module.
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
	  else if (freeExports && freeModule) {
	    // Export for Node.js or RingoJS.
	    if (moduleExports) {
	      (freeModule.exports = _)._ = _;
	    }
	    // Export for Rhino with CommonJS support.
	    else {
	      freeExports._ = _;
	    }
	  }
	  else {
	    // Export for a browser or Rhino.
	    root._ = _;
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)(module), (function() { return this; }())))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	var base64 = __webpack_require__(662)
	var ieee754 = __webpack_require__(663)
	var isArray = __webpack_require__(664)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer, (function() { return this; }())))

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
	  value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _config = __webpack_require__(26);

	var _config2 = _interopRequireDefault(_config);

	var _kyperMatter = __webpack_require__(124);

	var _kyperMatter2 = _interopRequireDefault(_kyperMatter);

	var matter = new _kyperMatter2['default'](_config2['default'].appName, _config2['default'].matterOptions);
	exports['default'] = matter;
	module.exports = exports['default'];

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(682);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(695);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(697);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(696);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(4)))

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  ServerJS Javascript DOM Level 1
	*/
	var inheritFrom = __webpack_require__(3).inheritFrom;
	var domToHtml = __webpack_require__(44).domToHtml;
	var defineGetter = __webpack_require__(3).defineGetter;
	var memoizeQuery = __webpack_require__(3).memoizeQuery;
	var validateName = __webpack_require__(27).name;
	var Location = __webpack_require__(174);

	// utility functions
	var attachId = function(id,elm,doc) {
	  if (id && elm && doc) {
	    if (!doc._ids[id]) {
	      doc._ids[id] = [];
	    }
	    doc._ids[id].push(elm);
	  }
	};
	var detachId = function(id,elm,doc) {
	  var elms, i;
	  if (id && elm && doc) {
	    if (doc._ids && doc._ids[id]) {
	      elms = doc._ids[id];
	      for (i=0;i<elms.length;i++) {
	        if (elms[i] === elm) {
	          elms.splice(i,1);
	          i--;
	        }
	      }
	      if (elms.length === 0) {
	        delete doc._ids[id];
	      }
	    }
	  }
	};

	function setInnerHTML(dom, node, html) {
	  //Clear the children first:
	  var child;
	  while ((child = node._childNodes[0])) {
	    node.removeChild(child);
	  }

	  var isDoc = node.nodeName === '#document';
	  if (html !== "" && html != null) {
	    if (isDoc) {
	      dom._htmlToDom.appendHtmlToDocument(html, node);
	    } else {
	      dom._htmlToDom.appendHtmlToElement(html, node);
	    }
	  }
	}

	// TODO: move all of these to utils.js. Right now they are exposed on window, which is bizarre.
	var core = module.exports = {
	  mapper: function(parent, filter, recursive) {
	    return function() {
	      return core.mapDOMNodes(parent, recursive !== false, filter);
	    };
	  },

	  // Returns Array
	  mapDOMNodes : function(parent, recursive, callback) {
	    function visit(parent, result) {
	      return parent._childNodes.reduce(reducer, result);
	    }

	    function reducer(array, child) {
	      if (callback(child)) {
	        array.push(child);
	      }
	      if (recursive && child._childNodes) {
	        visit(child, array);
	      }
	      return array;
	    }

	    return visit(parent, []);
	  },

	  visitTree: function(root, callback) {
	    var cur = root; // TODO: Unroll this.

	    function visit(el) {
	      if (el) {
	        callback(el);
	        if (el._childNodes) {
	          var i        = 0,
	              children = el._childNodes,
	              l        = children.length;

	          for (i; i<l; i++) {
	            visit(children[i]);
	          }
	        }
	      }
	    }
	    visit(root);
	  },

	  markTreeReadonly: function(node) {
	    function markLevel(el) {
	      el._readonly = true;
	      // also mark attributes and their children read-only
	      if (el.attributes) {
	        var attributes = el.attributes, l = attributes.length, i=0;
	        attributes._readonly = true;

	        for (i; i<l; i++) {
	          core.visitTree(attributes[i], markLevel);
	        }
	      }
	    }

	    core.visitTree(node, markLevel);
	  }
	};

	// ExceptionCode
	var INDEX_SIZE_ERR              = core.INDEX_SIZE_ERR              = 1,
	    DOMSTRING_SIZE_ERR          = core.DOMSTRING_SIZE_ERR          = 2,
	    HIERARCHY_REQUEST_ERR       = core.HIERARCHY_REQUEST_ERR       = 3,
	    WRONG_DOCUMENT_ERR          = core.WRONG_DOCUMENT_ERR          = 4,
	    INVALID_CHARACTER_ERR       = core.INVALID_CHARACTER_ERR       = 5,
	    NO_DATA_ALLOWED_ERR         = core.NO_DATA_ALLOWED_ERR         = 6,
	    NO_MODIFICATION_ALLOWED_ERR = core.NO_MODIFICATION_ALLOWED_ERR = 7,
	    NOT_FOUND_ERR               = core.NOT_FOUND_ERR               = 8,
	    NOT_SUPPORTED_ERR           = core.NOT_SUPPORTED_ERR           = 9,
	    INUSE_ATTRIBUTE_ERR         = core.INUSE_ATTRIBUTE_ERR         = 10,
	    INVALID_STATE_ERR           = core.INVALID_STATE_ERR           = 11,
	    SYNTAX_ERR                  = core.SYNTAX_ERR                  = 12,
	    INVALID_MODIFICATION_ERR    = core.INVALID_MODIFICATION_ERR    = 13,
	    NAMESPACE_ERR               = core.NAMESPACE_ERR               = 14,
	    INVALID_ACCESS_ERR          = core.INVALID_ACCESS_ERR          = 15,
	// Node Types
	    ELEMENT_NODE                = 1,
	    ATTRIBUTE_NODE              = 2,
	    TEXT_NODE                   = 3,
	    CDATA_SECTION_NODE          = 4,
	    ENTITY_REFERENCE_NODE       = 5,
	    ENTITY_NODE                 = 6,
	    PROCESSING_INSTRUCTION_NODE = 7,
	    COMMENT_NODE                = 8,
	    DOCUMENT_NODE               = 9,
	    DOCUMENT_TYPE_NODE          = 10,
	    DOCUMENT_FRAGMENT_NODE      = 11,
	    NOTATION_NODE               = 12;

	var messages = core.exceptionMessages = { };
	messages[INDEX_SIZE_ERR]              = "Index size error";
	messages[DOMSTRING_SIZE_ERR]          = "DOMString size error";
	messages[HIERARCHY_REQUEST_ERR]       = "Hierarchy request error";
	messages[WRONG_DOCUMENT_ERR]          = "Wrong document";
	messages[INVALID_CHARACTER_ERR]       = "Invalid character";
	messages[NO_DATA_ALLOWED_ERR]         = "No data allowed";
	messages[NO_MODIFICATION_ALLOWED_ERR] = "No modification allowed";
	messages[NOT_FOUND_ERR]               = "Not found";
	messages[NOT_SUPPORTED_ERR]           = "Not supported";
	messages[INUSE_ATTRIBUTE_ERR]         = "Attribute in use";
	messages[NAMESPACE_ERR]               = "Invalid namespace";

	core.DOMException = function DOMException(code, message) {
	  Error.call(this, core.exceptionMessages[code]);
	  this.message = core.exceptionMessages[code];
	  this.code = code;

	  if (message) {
	    this.message = this.message + ": " + message;
	  }

	  if (Error.captureStackTrace) {

	    Error.captureStackTrace(this, DOMException);
	  }
	};

	core.DOMException.INDEX_SIZE_ERR              = INDEX_SIZE_ERR;
	core.DOMException.DOMSTRING_SIZE_ERR          = DOMSTRING_SIZE_ERR;
	core.DOMException.HIERARCHY_REQUEST_ERR       = HIERARCHY_REQUEST_ERR;
	core.DOMException.WRONG_DOCUMENT_ERR          = WRONG_DOCUMENT_ERR;
	core.DOMException.INVALID_CHARACTER_ERR       = INVALID_CHARACTER_ERR;
	core.DOMException.NO_DATA_ALLOWED_ERR         = NO_DATA_ALLOWED_ERR;
	core.DOMException.NO_MODIFICATION_ALLOWED_ERR = NO_MODIFICATION_ALLOWED_ERR;
	core.DOMException.NOT_FOUND_ERR               = NOT_FOUND_ERR;
	core.DOMException.NOT_SUPPORTED_ERR           = NOT_SUPPORTED_ERR;
	core.DOMException.INUSE_ATTRIBUTE_ERR         = INUSE_ATTRIBUTE_ERR;
	core.DOMException.INVALID_STATE_ERR           = INVALID_STATE_ERR;
	core.DOMException.SYNTAX_ERR                  = SYNTAX_ERR;
	core.DOMException.INVALID_MODIFICATION_ERR    = INVALID_MODIFICATION_ERR;
	core.DOMException.NAMESPACE_ERR               = NAMESPACE_ERR;
	core.DOMException.INVALID_ACCESS_ERR          = INVALID_ACCESS_ERR;

	inheritFrom(Error, core.DOMException, {
	  name: "DOMException",
	  INDEX_SIZE_ERR              : INDEX_SIZE_ERR,
	  DOMSTRING_SIZE_ERR          : DOMSTRING_SIZE_ERR,
	  HIERARCHY_REQUEST_ERR       : HIERARCHY_REQUEST_ERR,
	  WRONG_DOCUMENT_ERR          : WRONG_DOCUMENT_ERR,
	  INVALID_CHARACTER_ERR       : INVALID_CHARACTER_ERR,
	  NO_DATA_ALLOWED_ERR         : NO_DATA_ALLOWED_ERR,
	  NO_MODIFICATION_ALLOWED_ERR : NO_MODIFICATION_ALLOWED_ERR,
	  NOT_FOUND_ERR               : NOT_FOUND_ERR,
	  NOT_SUPPORTED_ERR           : NOT_SUPPORTED_ERR,
	  INUSE_ATTRIBUTE_ERR         : INUSE_ATTRIBUTE_ERR,
	  INVALID_STATE_ERR           : INVALID_STATE_ERR,
	  SYNTAX_ERR                  : SYNTAX_ERR,
	  INVALID_MODIFICATION_ERR    : INVALID_MODIFICATION_ERR,
	  NAMESPACE_ERR               : NAMESPACE_ERR,
	  INVALID_ACCESS_ERR          : INVALID_ACCESS_ERR
	});

	core.NodeList = function NodeList(element, query) {
	  if (!query) {
	    // Non-live NodeList
	    if (Array.isArray(element)) {
	      Array.prototype.push.apply(this, element);
	    }
	    Object.defineProperties(this, {
	      _length: {value: element ? element.length : 0, writable:true}
	    });
	  } else {
	    Object.defineProperties(this, {
	      _element: {value: element},
	      _query: {value: query},
	      _snapshot: {writable: true},
	      _length: {value: 0, writable: true},
	      _version: {value: -1, writable: true}
	    });
	    this._update();
	  }
	};

	function lengthFromProperties(arrayLike) {
	  var max = -1;
	  var keys = Object.keys(arrayLike);
	  var highestKeyIndex = keys.length - 1;

	  // abuses a v8 implementation detail for a very fast case
	  // (if this implementation detail changes, this method will still
	  //  return correct results)
	  if (highestKeyIndex == keys[highestKeyIndex]) { // not ===
	    return keys.length;
	  }

	  for (var i = highestKeyIndex; i >= 0 ; --i) {
	    var asNumber = + keys[i];

	    if (!isNaN(asNumber) && asNumber > max) {
	      max = asNumber;
	    }
	  }
	  return max + 1;
	}
	core.NodeList.prototype = {
	  _update: function() {
	    var i;

	    if (!this._element) {
	      this._length = lengthFromProperties(this);
	    } else {
	      if (this._version < this._element._version) {
	        var nodes = this._snapshot = this._query();
	        this._resetTo(nodes);
	        this._version = this._element._version;
	      }
	    }
	  },
	  _resetTo: function(array) {
	    var startingLength = lengthFromProperties(this);
	    for (var i = 0; i < startingLength; ++i) {
	      delete this[i];
	    }

	    for (var j = 0; j < array.length; ++j) {
	      this[j] = array[j];
	    }
	    this._length = array.length;
	  },
	  _toArray: function() {
	    if (this._element) {
	      this._update();
	      return this._snapshot;
	    }

	    return Array.prototype.slice.call(this);
	  },
	  get length() {
	    this._update();
	    return this._length || 0;
	  },
	  set length(length) {
	    return this._length;
	  },
	  item: function(index) {
	    this._update();
	    return this[index] || null;
	  },
	  toString: function() {
	    return '[ jsdom NodeList ]: contains ' + this.length + ' items';
	  }
	};
	Object.defineProperty(core.NodeList.prototype, 'constructor', {
	  value: core.NodeList,
	  writable: true,
	  configurable: true
	});

	core.DOMImplementation = function DOMImplementation(document, /* Object */ features) {
	  this._ownerDocument = document;
	  this._features = {};

	  if (features) {
	    for (var feature in features) {
	      if (features.hasOwnProperty(feature)) {
	        this._addFeature(feature.toLowerCase(), features[feature]);
	      }
	    }
	  }
	};

	core.DOMImplementation.prototype = {
	  // All of these are legacy, left because jsdom uses them internally :(. jsdom confused the idea of browser features
	  // and jsdom features
	  _removeFeature : function(feature, version) {
	    feature = feature.toLowerCase();
	    if (this._features[feature]) {
	      if (version) {
	        var j        = 0,
	            versions = this._features[feature],
	            l        = versions.length;

	        for (j; j<l; j++) {
	          if (versions[j] === version) {
	            versions.splice(j,1);
	            return;
	          }
	        }
	      } else {
	        delete this._features[feature];
	      }
	    }
	  },

	  _addFeature: function(feature, version) {
	    feature = feature.toLowerCase();

	    if (version) {

	      if (!this._features[feature]) {
	        this._features[feature] = [];
	      }

	      if (version instanceof Array) {
	        Array.prototype.push.apply(this._features[feature], version);
	      } else {
	        this._features[feature].push(version);
	      }
	    }
	  },

	  // The real hasFeature is in living/dom-implementation.js, and returns true always.
	  // This one is used internally
	  _hasFeature: function(/* string */ feature, /* string */ version) {
	    feature = (feature) ? feature.toLowerCase() : '';
	    var versions = (this._features[feature]) ?
	                    this._features[feature]  :
	                    false;

	    if (!version && versions.length && versions.length > 0) {
	      return true;
	    } else if (typeof versions === 'string') {
	      return versions === version;
	    } else if (versions.indexOf && versions.length > 0) {
	      for (var i = 0; i < versions.length; i++) {
	        var found = versions[i] instanceof RegExp ?
	          versions[i].test(version) :
	          versions[i] === version;
	        if (found) { return true; }
	      }
	      return false;
	    } else {
	      return false;
	    }
	  }
	};


	var attrCopy = function(src, dest, fn) {
	  if (src.attributes) {
	    var attrs = src.attributes, i, l = attrs.length, attr, copied;
	    for (i=0;i<l;i++) {
	      attr = attrs[i];
	      // skip over default attributes
	      if (!attr.specified) {
	        continue;
	      }
	      // TODO: consider duplicating this code and moving it into level2/core
	      if (attr.namespaceURI) {
	        dest.setAttributeNS(attr.namespaceURI,
	                                     attr.name,
	                                     attr.value);
	        var localName = attr.name.split(':').pop();
	        copied = dest.getAttributeNodeNS(attr.namespaceURI, localName);
	      } else {
	        dest.setAttribute(attr.name, attr.value);
	        copied = dest.getAttributeNode(attr.name);
	      }
	      if (typeof fn == "function") {
	        fn(attr, copied);
	      }

	    }
	  }
	  return dest;
	};

	core.Node = function Node(ownerDocument) {
	  this._childNodes = [];
	  this._childNodesList = null;
	  this._ownerDocument = ownerDocument;
	  this._attributes = new AttributeList(ownerDocument, this);
	  this._childrenList = null;
	  this._version = 0;
	  this._parentNode = null;
	  this._memoizedQueries = {};
	  this._readonly = false;
	};

	core.Node.ELEMENT_NODE                = ELEMENT_NODE;
	core.Node.ATTRIBUTE_NODE              = ATTRIBUTE_NODE;
	core.Node.TEXT_NODE                   = TEXT_NODE;
	core.Node.CDATA_SECTION_NODE          = CDATA_SECTION_NODE;
	core.Node.ENTITY_REFERENCE_NODE       = ENTITY_REFERENCE_NODE;
	core.Node.ENTITY_NODE                 = ENTITY_NODE;
	core.Node.PROCESSING_INSTRUCTION_NODE = PROCESSING_INSTRUCTION_NODE;
	core.Node.COMMENT_NODE                = COMMENT_NODE;
	core.Node.DOCUMENT_NODE               = DOCUMENT_NODE;
	core.Node.DOCUMENT_TYPE_NODE          = DOCUMENT_TYPE_NODE;
	core.Node.DOCUMENT_FRAGMENT_NODE      = DOCUMENT_FRAGMENT_NODE;
	core.Node.NOTATION_NODE               = NOTATION_NODE;

	core.Node.prototype = {
	  ELEMENT_NODE                : ELEMENT_NODE,
	  ATTRIBUTE_NODE              : ATTRIBUTE_NODE,
	  TEXT_NODE                   : TEXT_NODE,
	  CDATA_SECTION_NODE          : CDATA_SECTION_NODE,
	  ENTITY_REFERENCE_NODE       : ENTITY_REFERENCE_NODE,
	  ENTITY_NODE                 : ENTITY_NODE,
	  PROCESSING_INSTRUCTION_NODE : PROCESSING_INSTRUCTION_NODE,
	  COMMENT_NODE                : COMMENT_NODE,
	  DOCUMENT_NODE               : DOCUMENT_NODE,
	  DOCUMENT_TYPE_NODE          : DOCUMENT_TYPE_NODE,
	  DOCUMENT_FRAGMENT_NODE      : DOCUMENT_FRAGMENT_NODE,
	  NOTATION_NODE               : NOTATION_NODE,

	  get children() {
	    if (!this._childrenList) {
	      var self = this;
	      this._childrenList = new core.NodeList(this, function() {
	        return self._childNodes.filter(function(node) {
	          return node.tagName;
	        });
	      });
	    }
	    this._childrenList._update();
	    return this._childrenList;
	  },
	  get nodeValue() {
	    if (this.nodeType === core.Node.TEXT_NODE ||
	        this.nodeType === core.Node.COMMENT_NODE ||
	        this.nodeType === core.Node.PROCESSING_INSTRUCTION_NODE) {
	      return this._data;
	    }

	    return null;
	  },
	  set nodeValue(value) {
	    if (this.nodeType === core.Node.TEXT_NODE ||
	        this.nodeType === core.Node.COMMENT_NODE ||
	        this.nodeType === core.Node.PROCESSING_INSTRUCTION_NODE) {
	      this.replaceData(0, this.length, value);
	    }
	  },
	  get parentNode() { return this._parentNode;},

	  get nodeName() {
	    switch (this.nodeType) {
	      case ELEMENT_NODE:
	        return this.tagName;
	      case TEXT_NODE:
	        return "#text";
	      case PROCESSING_INSTRUCTION_NODE:
	        return this.target;
	      case COMMENT_NODE:
	        return "#comment";
	      case DOCUMENT_NODE:
	        return "#document";
	      case DOCUMENT_TYPE_NODE:
	        return this.name;
	      case DOCUMENT_FRAGMENT_NODE:
	        return "#document-fragment";
	      case ATTRIBUTE_NODE:
	        // TODO: remove this; attributes should not be nodes and should not have a nodeName property
	        // Removing it breaks some legit-seeming xpath tests :-/
	        return this.name;
	    }
	  },
	  set nodeName(unused) { throw new core.DOMException();},
	  get firstChild() {
	    return this._childNodes.length > 0 ? this._childNodes[0] : null;
	  },
	  get ownerDocument() { return this._ownerDocument;},
	  get readonly() { return this._readonly;},

	  get lastChild() {
	    var len = this._childNodes.length;
	    return len > 0 ? this._childNodes[len -1] : null;
	  },

	  get childNodes() {
	    if (!this._childNodesList) {
	      var self = this;
	      this._childNodesList = new core.NodeList(this, function() {
	        return self._childNodes.slice();
	      });
	    }
	    this._childNodesList._update();
	    return this._childNodesList;
	  },
	  set childNodes(unused) { throw new core.DOMException();},

	  _indexOf: function(/*Node*/ child) {
	    return this._childNodes.indexOf(child);
	  },

	  get nextSibling() {
	    // find this node's index in the parentNode, add one and call it a day
	    if (!this._parentNode || !this._parentNode._indexOf) {
	      return null;
	    }

	    var index = this._parentNode._indexOf(this);

	    if (index == -1 || index+1 >= this._parentNode._childNodes.length) {
	      return null;
	    }

	    return this._parentNode._childNodes[index+1] || null;
	  },
	  set nextSibling(unused) { throw new core.DOMException();},

	  get previousSibling() {
	    if (!this._parentNode || !this._parentNode._indexOf) {
	      return null;
	    }

	    var index = this._parentNode._indexOf(this);

	    if (index == -1 || index-1 < 0) {
	      return null;
	    }

	    return this._parentNode._childNodes[index-1] || null;
	  },
	  set previousSibling(unused) { throw new core.DOMException();},

	  /* returns Node */
	  insertBefore :  function(/* Node */ newChild, /* Node*/ refChild) {
	    if (this._readonly === true) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR, 'Attempting to modify a read-only node');
	    }

	    // Adopt unowned children, for weird nodes like DocumentType
	    if (!newChild._ownerDocument) newChild._ownerDocument = this._ownerDocument;

	    // TODO - if (!newChild) then?
	    if (!(this instanceof core.Document) && newChild._ownerDocument !== this._ownerDocument) {
	      throw new core.DOMException(WRONG_DOCUMENT_ERR);
	    }

	    if (newChild.nodeType && newChild.nodeType === ATTRIBUTE_NODE) {
	      throw new core.DOMException(HIERARCHY_REQUEST_ERR);
	    }

	    // search for parents matching the newChild
	    var current = this;
	    do {
	      if (current === newChild) {
	        throw new core.DOMException(HIERARCHY_REQUEST_ERR);
	      }
	    } while((current = current._parentNode));

	    // fragments are merged into the element (except parser-created fragments in <template>)
	    if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE && !newChild._templateContent) {
	      var tmpNode, i = newChild._childNodes.length;
	      while (i-- > 0) {
	        tmpNode = newChild.removeChild(newChild.firstChild);
	        this.insertBefore(tmpNode, refChild);
	      }
	    } else if (newChild === refChild) {
	      return newChild;
	    } else {
	      // if the newChild is already in the tree elsewhere, remove it first
	      if (newChild._parentNode) {
	        newChild._parentNode.removeChild(newChild);
	      }

	      if (refChild == null) {
	        this._childNodes.push(newChild);
	      } else {
	        var refChildIndex = this._indexOf(refChild);
	        if (refChildIndex == -1) {
	          throw new core.DOMException(NOT_FOUND_ERR);
	        }
	        this._childNodes.splice(refChildIndex, 0, newChild);
	      }

	      newChild._parentNode = this;
	      if (this._attached && newChild._attach) {
	        newChild._attach();
	      }

	      this._modified();
	      this._descendantAdded(this, newChild);
	    }

	    return newChild;
	  }, // raises(DOMException);

	  _modified: function() {
	    this._version++;
	    if (this._ownerDocument) {
	      this._ownerDocument._version++;
	    }

	    if (this._childrenList) {
	      this._childrenList._update();
	    }
	    this._clearMemoizedQueries()
	  },

	  _clearMemoizedQueries: function() {
	    this._memoizedQueries = {};
	    if (this._parentNode && this._parentNode !== this) {
	      this._parentNode._clearMemoizedQueries();
	    }
	  },

	  _descendantRemoved: function(parent, child) {
	    if (this._parentNode && this._parentNode !== this) {
	      this._parentNode._descendantRemoved(parent, child);
	    }
	  },

	  _descendantAdded: function(parent, child) {
	    if (this._parentNode && this._parentNode !== this) {
	      this._parentNode._descendantAdded(parent, child);
	    }
	  },

	  _attrModified: function(name, value, oldValue) {
	    if (name == 'id' && this._attached) {
	      var doc = this._ownerDocument;
	      detachId(oldValue,this,doc);
	      attachId(value,this,doc);
	    }

	    // Check for inline event handlers.
	    // We can't set these like other attributes then look it up in
	    // dispatchEvent() because that would create 2 'traditional' event handlers
	    // in the case where there's an inline event handler attribute, plus one
	    // set using element.on* in a script.
	    //
	    // @see http://www.w3.org/TR/2011/WD-html5-20110405/webappapis.html#event-handler-content-attributes
	    if ((name.length > 2) && (name[0] == 'o') && (name[1] == 'n')) {
	        if (value) {
	          var self = this;
	          // Check whether we're the window. This can happen because inline
	          // handlers on the body are proxied to the window.
	          var w = (typeof self.run !== 'undefined') ? self : self._ownerDocument.parentWindow;
	          self[name] = function (event) {
	              // The handler code probably refers to functions declared in the
	              // window context, so we need to call run().

	              // Use awesome hacks to get the correct `this` context for the
	              // inline event handler. This would only be necessary if we're an
	              // element, but for the sake of simplicity we also do it on window.

	              // Also set event variable and support `return false`.
	              w.__tempContextForInlineEventHandler = self;
	              w.__tempEvent = event;
	              w.run("if ((function (event) {" + value + "}).call(" +
	                "window.__tempContextForInlineEventHandler, window.__tempEvent) === false) {" +
	                "window.__tempEvent.preventDefault()}");
	              delete w.__tempContextForInlineEventHandler;
	              delete w.__tempEvent;
	          };
	        } else {
	          this[name] = null;
	        }
	    }
	  },

	  /* returns Node */
	  replaceChild : function(/* Node */ newChild, /* Node */ oldChild){
	    this.insertBefore(newChild, oldChild);
	    return this.removeChild(oldChild);
	  }, //raises(DOMException);

	  /* returns void */
	  _attach : function() {
	    this._attached = true;
	    if (this.id) {
	      attachId(this.id,this,this._ownerDocument);
	    }
	    for (var i = 0, len = this._childNodes.length; i < len; i++) {
	      if (this._childNodes[i]._attach) {
	        this._childNodes[i]._attach();
	      }
	    }
	  },
	  /* returns void */
	  _detach : function() {
	    var i, elms;
	    this._attached = false;
	    if (this.id) {
	      detachId(this.id,this,this._ownerDocument);
	    }
	    for (var i = 0, len = this._childNodes.length; i < len; i++) {
	      this._childNodes[i]._detach();
	    }
	  },

	  /* returns Node */
	  removeChild : function(/* Node */ oldChild){
	    if (this._readonly === true) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	    }

	    // TODO - if (!oldChild) then?

	    // Use lastIndexOf so that removing all the children by
	    // going backwards through childNodes is fast
	    // (because of splice)
	    var oldChildIndex = this._childNodes.lastIndexOf(oldChild);
	    if (oldChildIndex == -1) {
	      throw new core.DOMException(NOT_FOUND_ERR);
	    }

	    this._childNodes.splice(oldChildIndex, 1);
	    oldChild._parentNode = null;
	    this._modified();
	    oldChild._detach();
	    this._descendantRemoved(this, oldChild);
	    return oldChild;
	  }, // raises(DOMException);

	  /* returns Node */
	  appendChild : function(/* Node */ newChild) {
	    return this.insertBefore(newChild, null);
	  }, // raises(DOMException);

	  /* returns boolean */
	  hasChildNodes : function() {
	    return this._childNodes.length > 0;
	  },

	  /* returns Node */
	  cloneNode : function(/* bool */ deep, fn) {

	    var object = null;
	    switch (this.nodeType) {

	      case this.ELEMENT_NODE:
	        object = attrCopy(this,this._ownerDocument.createElementNS(this.namespaceURI, this.nodeName), fn);
	        // Using this.nodeName isn't always exact because of uppercasing-related stuff
	        object._prefix = this._prefix;
	        object._localName = this._localName;
	      break;

	      case this.TEXT_NODE:
	        object = attrCopy(this,this._ownerDocument.createTextNode(this.tagName));
	        object.nodeValue = this.nodeValue;
	      break;
	      case this.ATTRIBUTE_NODE:
	        object = this._ownerDocument.createAttribute(this.name);
	      break;
	      break;
	      case this.PROCESSING_INSTRUCTION_NODE:
	        var pi = this._ownerDocument.createProcessingInstruction(this._target,
	                                                                this._data);
	        object = attrCopy(this, pi);
	      break;
	      case this.COMMENT_NODE:
	        object = this._ownerDocument.createComment(this.tagName);
	        object.nodeValue = this.nodeValue;
	      break;
	      case this.DOCUMENT_NODE:
	        object = attrCopy(this, new this.constructor({ parsingMode: this._parsingMode }));
	        // TODO: clone the doctype?
	      break;
	      case this.DOCUMENT_TYPE_NODE:
	        object = new core.DocumentType(this._ownerDocument, this._name, this._publicId, this._systemId);
	      break;
	      case this.DOCUMENT_FRAGMENT_NODE:
	        object = this._ownerDocument.createDocumentFragment();
	      break;
	      default:
	        throw new core.DOMException(NOT_FOUND_ERR);
	      break;
	    }

	    if (typeof fn === "function") {
	      fn(this, object);
	    }

	    if (deep || this.nodeType === ATTRIBUTE_NODE) {
	      var clone = null;
	      for (var i=0,len=this._childNodes.length;i<len;i++)
	      {
	        clone = this._childNodes[i].cloneNode(true);
	        if (clone.nodeType === ATTRIBUTE_NODE) {
	          object.setAttributeNode(clone);
	        } else {
	          var readonly = object._readonly;
	          object._readonly = false;
	          object.appendChild(clone);
	          object._readonly = readonly;
	        }
	      }
	    }

	    return object;
	  },

	  /* returns void */
	  normalize: function() {
	    var prevChild, child, attr,i;

	    if (this._attributes && this._attributes.length) {
	      for (i=0;i<this._attributes.length;i++)
	      {
	        if (this._attributes[i]) {
	          attr = this._attributes[i].normalize();
	        }
	      }
	    }

	    for (i=0;i<this._childNodes.length;i++)
	    {
	      child = this._childNodes[i];

	      if (child.normalize) {
	        child.normalize();
	      }

	      // Level2/core clean off empty nodes
	      if (child.nodeValue === "") {
	        this.removeChild(child);
	        i--;
	        continue;
	      }

	      if (i>0) {
	        prevChild = this._childNodes[i-1];

	        if (child.nodeType === TEXT_NODE &&
	            prevChild.nodeType === TEXT_NODE)
	        {

	          // remove the child and decrement i
	          prevChild.appendData(child.nodeValue);

	          this.removeChild(child);
	          i--;
	        }
	      }
	    }
	  },
	  toString: function() {
	    var id = '';
	    if (this.id) {
	        id = '#' + this.id;
	    }
	    if (this.className) {
	        var classes = this.className.split(/\s+/);
		for (var i = 0, len = classes.length; i < len; i++) {
		    id += '.' + classes[i];
		}
	    }
	    return '[ ' + this.tagName + id + ' ]';
	  },
	  raise: function(type, message, data) {
	    var text = type + ": " + message;

	    if (data) {
	      if (data.exception) {
	        text = data.exception.stack;
	      } else {
	        text += ' - More:\n' + data;
	      }
	    }

	    if (type === "error") {
	      if (!this.errors) {
	        this.errors = [];
	      }
	      // TODO: consider using actual `Error` objects or `DOMException`s even..
	      var err = {
	        type    : type,
	        message : message || "No message",
	        data    : data || null
	      };

	      this.errors.push(err);

	      if (this._ownerDocument        &&
	          this._ownerDocument.raise &&
	          this !== this._ownerDocument)
	      {
	        this._ownerDocument.raise(type, message, data);
	      }
	    }
	  }
	};


	core.NamedNodeMap = function NamedNodeMap(document) {
	  this._nodes = Object.create(null);
	  this._nsStore = {};
	  this.length = 0;
	  this._ownerDocument = document;
	  this._readonly = false;
	};
	core.NamedNodeMap.prototype = {
	  get readonly() { return this._readonly;},
	  get ownerDocument() { this._ownerDocument;},

	  exists : function(name) {
	    return (this._nodes[name] || this._nodes[name] === null) ? true : false;
	  },

	  /* returns Node */
	  getNamedItem: function(/* string */ name) {
	    return this._nodes[name] || null;
	  },

	  /* returns Node */
	  setNamedItem: function(/* Node */ arg) {

	    // readonly
	    if (this._readonly === true) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	    }

	    // arg is from a different document
	    if (arg && arg._ownerDocument !== this._ownerDocument) {
	      throw new core.DOMException(WRONG_DOCUMENT_ERR);
	    }

	    // if this argument is already in use..
	    if (arg && arg._ownerElement) {
	      throw new core.DOMException(INUSE_ATTRIBUTE_ERR);
	    }

	    var name = arg.name || arg.tagName;
	    var ret = this._nodes[name];
	    if (!ret) {
	      this.length++;
	      ret = null;
	    }
	    this._nodes[name] = arg;

	    // Avoid overwriting prototype methods etc.:
	    if (this.hasOwnProperty(name) || !(name in this)) {
	      this[name] = arg;
	    }
	    return ret;
	  }, // raises: function(DOMException) {},

	  /* returns Node */
	  removeNamedItem: function(/* string */ name) {

	    // readonly
	    if (this._readonly === true) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	    }

	    if (!this._nodes[name]) {
	      throw new core.DOMException(NOT_FOUND_ERR);
	    }

	    var prev = this._nodes[name] || null;
	    delete this._nodes[name];
	    delete this[name];

	    this.length--;
	    return prev;
	  }, // raises: function(DOMException) {},

	  /* returns Node */
	  item: function(/* int */ index) {
	    var current = 0;
	    for (var member in this._nodes) {
	      if (current === index && this._nodes[member]) {
	        return this._nodes[member];
	      }
	      current++;
	    }
	    return null;
	  }
	};

	//
	// For historical reasons, AttributeList objects must allow accessing
	// attributes as if the object were an associative array. For
	// instance, if `attributes` is an AttributeList object then
	// `attributes.x` should evaluate to the attribute named `x` (which is
	// not in any namespace). The AttributeList class uses the dollar
	// symbol ($) to reduce the possibility of a clash between its field
	// names and possible attribute names. For instance, if the method
	// currently named `$set` were instead named `set` then it would not
	// be possible to access an attribute named `set` through
	// `attributes.set`. The dollar symbol is not valid in attribute names
	// so `$set` cannot clash.
	//
	// Some fields do not get the $ because:
	//
	// * They are part of the API (e.g. `setNamedItem`, `length`), so they
	//   must be visible under a specific name.
	//
	// * Jsdom's code which traverses the DOM tree expects regularly named
	//   fields (e.g. `_parentNode`).
	//
	function AttributeList(document, parentNode) {
	  this._ownerDocument = document;
	  this._parentNode = parentNode;
	  this._readonly = false;
	  this._$ns_to_attrs = Object.create(null);
	  this._$name_to_attrs = Object.create(null);
	  this.length = 0;
	}

	AttributeList.prototype = {
	  _$reserved: [], // Initialized later


	  //
	  // Code internal to jsdom and which manipulates an AttributeList
	  // object should use the following methods rather than the methods
	  // that provide the NamedNodeMap interface.
	  //

	  // This method *ignores* namespaces. This is *not* the same thing as
	  // requesting an attribute with a null namespace.
	  $getNoNS: function (name) {
	    var attrs = this._$name_to_attrs[name];
	    if (!attrs) {
	      return null;
	    }

	    return attrs[0] || null;
	  },

	  $getNode: function (namespace, localName) {
	    var attrs = this._$ns_to_attrs[namespace];
	    if (!attrs) {
	      return null;
	    }

	    var ret = attrs[localName];
	    if (!ret) {
	      return null;
	    }

	    return ret;
	  },

	  // This method *ignores* namespaces. This is *not* the same thing as
	  // requesting an attribute with a null namespace.
	  $setNoNS: function (name, value, dontValidate) {
	    var attr = this.$getNoNS(name);
	    if (!attr) {
	      this.$set(name, value, undefined, undefined, undefined, dontValidate);
	      return;
	    }

	    var prev_val = attr.value;
	    attr.value = value;

	    this._parentNode._attrModified(attr.name, attr.value, prev_val);
	    this._parentNode._modified();
	  },

	  $set: function (localName, value, name, prefix, namespace, dontValidate) {
	    if (this._readonly) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	    }

	    if (name === undefined) {
	      name = localName;
	    }

	    if (prefix === undefined) {
	      prefix = null;
	    }

	    if (namespace === undefined) {
	      namespace = null;
	    }

	    var prev_attr = this.$getNode(namespace, localName);
	    var attr;

	    var prev_val = null;
	    if (prev_attr) {
	      prev_val = prev_attr.value;
	      prev_attr._prefix = prefix;
	      prev_attr.value = value;
	      attr = prev_attr;

	      this._parentNode._attrModified(attr.name, attr.value, prev_val);
	      this._parentNode._modified();
	    }
	    else {
	      var method = dontValidate ? '_createAttributeNoNameValidation' : 'createAttribute';
	      attr = this._ownerDocument[method](name);
	      attr._ownerElement = this._parentNode;
	      attr.value = value;
	      attr._namespaceURI = namespace;
	      attr._prefix = prefix;
	      attr._localName = localName;
	      attr._parentNode = this._parentNode;
	      this.$setNode(attr);
	      // $setNode calls the parent node methods.
	    }
	  },

	  $setNode: function (attr) {
	    if (this._readonly) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	    }

	    if (attr.nodeType !== ATTRIBUTE_NODE) {
	      throw new core.DOMException(HIERARCHY_REQUEST_ERR);
	    }

	    if (attr._ownerDocument !== this._ownerDocument) {
	      throw new core.DOMException(WRONG_DOCUMENT_ERR);
	    }

	    if (attr._parentNode && attr._parentNode !== this._parentNode) {
	      throw new core.DOMException(INUSE_ATTRIBUTE_ERR);
	    }

	    var localName = attr._localName;
	    var name = attr.name;
	    var prefix = attr._prefix;
	    var namespace = attr._namespaceURI;

	    if (name === undefined) {
	      name = localName;
	    }

	    if (prefix === undefined) {
	      prefix = null;
	    }

	    if (namespace === undefined) {
	      namespace = null;
	    }

	    var prev_attr = this.$getNode(namespace, localName);

	    var prev_val = null;
	    if (prev_attr) {
	      prev_val = prev_attr.value;
	      // Remove the old attribute
	      this._$onlyRemoveNode(prev_attr);
	    }

	    attr._parentNode = this._parentNode;
	    attr._ownerElement = this._parentNode;

	    var attrs = this._$ns_to_attrs[namespace];
	    if (!attrs) {
	      attrs = this._$ns_to_attrs[namespace] = Object.create(null);
	    }
	    attrs[localName] = attr;

	    attrs = this._$name_to_attrs[name];
	    if (!attrs) {
	      attrs = this._$name_to_attrs[name] = [attr];
	    }
	    else {
	      attrs.push(attr);
	    }

	    // Only attributes in the null namespace can be set this way.
	    if (namespace === null) {
	      // Make the node a field on this object but ONLY if it does not
	      // clash with the reserved names.
	      if (this._$reserved.indexOf(name) === -1) {
	        this[name] = attr;
	      }
	    }

	    this[this.length] = attr;
	    this.length++;

	    this._parentNode._attrModified(attr.name, attr.value, prev_val);
	    this._parentNode._modified();

	    return prev_attr;
	  },

	  // This method *ignores* namespaces. This is *not* the same thing as
	  // requesting an attribute with a null namespace.
	  $removeNoNS: function (name) {
	    var attr = this.$getNoNS(name);
	    return attr ? this.$removeNode(attr) : null;
	  },

	  $remove: function (namespace, localName) {
	    var attr = this.$getNode(namespace, localName);
	    return attr ? this.$removeNode(attr) : null;
	  },

	  /* Only removes the node, and does not add a default value. */
	  _$onlyRemoveNode: function (attr) {
	    var namespace = attr._namespaceURI;
	    var localName = attr._localName;

	    var attrs = this._$ns_to_attrs[namespace];
	    if (!attrs) {
	      return null;
	    }

	    var found_attr = attrs[localName];
	    if (found_attr !== attr) {
	      return null;
	    }

	    if (this._readonly) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	    }

	    attr._ownerElement = null;
	    attr._parentNode = null;
	    delete attrs[localName];

	    attrs = this._$name_to_attrs[attr.name];
	    attrs.splice(attrs.indexOf(attr), 1);

	    var ix = Array.prototype.indexOf.call(this, attr);
	    // Splice also modifies length.
	    Array.prototype.splice.call(this, ix, 1);

	    if (this[attr.name] === attr) {
	      delete this[attr.name];
	    }

	    this._parentNode._attrModified(attr.name);
	    this._parentNode._modified();

	    return attr;
	  },

	  $removeNode: function (attr) {
	    if (!this._$onlyRemoveNode(attr)) {
	      return null;
	    }
	    return attr;
	  },

	  // Although http://dom.spec.whatwg.org/#concept-element-attribute
	  // does not specify that the attributes field on an Element should
	  // support NamedNodeMap, in practice browsers still support this
	  // interface so we should support it for compatibility.

	  getNamedItem: function (name) {
	    return this.getNamedItemNS(null, name);
	  },
	  removeNamedItem: function (name) {
	    return this.removeNamedItemNS(null, name);
	  },
	  item: function (i) {
	      return this[i];
	  },
	  getNamedItemNS: function (namespaceURI, localName) {
	    if (namespaceURI === "") {
	      namespaceURI = null;
	    }

	    return this.$getNode(namespaceURI, localName);
	  },
	  removeNamedItemNS: function (namespaceURI, localName) {
	    var ret = this.$remove(namespaceURI, localName);

	    if (ret === null) {
	      throw new core.DOMException(NOT_FOUND_ERR);
	    }

	    return ret;
	  }
	};

	// Alias these methods.
	AttributeList.prototype.setNamedItem = AttributeList.prototype.$setNode;
	AttributeList.prototype.setNamedItemNS = AttributeList.prototype.$setNode;

	(function () {
	  // Construct the list of reserved attribute names from a temporarily
	  // created AttributeList and from the chain of prototypes. We need
	  // this because JavaScript code running an a browser expects to be
	  // able to do el.attributes.x to get the value of the attribute "x"
	  // on an element. Unfortunately, JavaScript *currently* does not
	  // allow us to elegantly provide such functionality without risking
	  // a clash with the fields and methods set on the AttributeList
	  // object. Hence we need a list of reserved field names.

	  var reserved = Object.keys(new AttributeList());
	  var prototype = AttributeList.prototype;
	  while (prototype) {
	    reserved = reserved.concat(Object.getOwnPropertyNames(prototype));
	    prototype = Object.getPrototypeOf(prototype);
	  }
	  AttributeList.prototype._$reserved = reserved;
	})();

	core.AttributeList = AttributeList;

	core.Element = function Element(document, localName) {
	  core.Node.call(this, document);
	  this._namespaceURI = null;
	  this._prefix = null;
	  this._localName = localName;
	};

	inheritFrom(core.Node, core.Element, {
	  get namespaceURI() {
	    return this._namespaceURI;
	  },
	  get prefix() {
	    return this._prefix;
	  },
	  get localName() {
	    return this._localName;
	  },
	  get tagName() {
	    var qualifiedName = this._prefix !== null ? this._prefix + ":" + this._localName : this._localName;
	    if (this.namespaceURI === "http://www.w3.org/1999/xhtml" && this._ownerDocument._parsingMode === "html") {
	      qualifiedName = qualifiedName.toUpperCase();
	    }
	    return qualifiedName;
	  },

	  get id() {
	    var idAttr = this.getAttribute("id");
	    if (idAttr === null) {
	      return "";
	    }
	    return idAttr;
	  },

	  nodeType : ELEMENT_NODE,
	  get attributes() {
	    return this._attributes;
	  },

	  get sourceIndex() {
	    /*
	    * According to QuirksMode:
	    * Get the sourceIndex of element x. This is also the index number for
	    * the element in the document.getElementsByTagName('*') array.
	    * http://www.quirksmode.org/dom/w3c_core.html#t77
	    */
	    var items = this.ownerDocument.getElementsByTagName('*'),
	        len = items.length;

	    for (var i = 0; i < len; i++) {
	      if (items[i] === this) {
	        return i;
	      }
	    }
	  },

	  get outerHTML() {
	    return domToHtml(this, true);
	  },

	  get innerHTML() {
	    var tagName = this.tagName;
	    if (tagName === 'SCRIPT' || tagName === 'STYLE') {
	      var type = this.getAttribute('type');
	      if (!type || /^text\//i.test(type) || /\/javascript$/i.test(type)) {
	        return domToHtml(this._childNodes, true, true);
	      }
	    }

	    // In case of <template> we should pass it's content fragment as a serialization root if we have one
	    if(tagName === 'TEMPLATE' &&
	       this._namespaceURI === 'http://www.w3.org/1999/xhtml' &&
	       this._childNodes[0] && this._childNodes[0]._templateContent) {
	      return domToHtml(this._childNodes[0]._childNodes, true);
	    }

	    return domToHtml(this._childNodes, true);
	  },

	  set innerHTML(html) {
	    setInnerHTML(this.ownerDocument, this, html);
	  },

	  scrollTop: 0,
	  scrollLeft: 0,

	  hasAttributes: function () {
	    return this._attributes.length > 0;
	  },

	  /* returns Attr */
	  setAttributeNode: function(/* Attr */ newAttr) {
	    var prevNode = this._attributes.$getNode(null, newAttr.name);
	    if (prevNode) {
	      prevNode._ownerElement = null;
	    }

	    newAttr._ownerElement = this;
	    this._attributes.$setNode(newAttr);

	    return (prevNode && prevNode.specified) ? prevNode : null;
	  }, //  raises: function(DOMException) {},

	  /* returns Attr */
	  removeAttributeNode: function(/* Attr */ oldAttr) {
	    var ret = this._attributes.$removeNode(oldAttr);

	    if (ret !== null) {
	      return ret;
	    }

	    throw new core.DOMException(NOT_FOUND_ERR);
	  }, //raises: function(DOMException) {},

	  /* returns NodeList */
	  getElementsByTagName: memoizeQuery(function(/* string */ name) {
	    name = name.toLowerCase();

	    function filterByTagName(child) {
	      if (child.nodeName && child.nodeType === ELEMENT_NODE) {
	        return name === "*" || (child.nodeName.toLowerCase() === name);
	      }

	      return false;
	    }
	    return new core.NodeList(this._ownerDocument || this, core.mapper(this, filterByTagName, true));
	  }),

	  getElementsByClassName: function (className) {

	    function filterByClassName(child) {
	      if (!child) {
	        return false;
	      }

	      var classString = child.className;
	      if (classString) {
	        var s = classString.split(" ");
	        for (var i = 0; i < s.length; i++) {
	          if (s[i] === className) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    return new core.NodeList(this.ownerDocument || this, core.mapper(this, filterByClassName));
	  }
	});

	core.DocumentFragment = function DocumentFragment(document) {
	  core.Node.call(this, document);
	};
	inheritFrom(core.Node, core.DocumentFragment, {
	  nodeType : DOCUMENT_FRAGMENT_NODE
	});

	core.Document = function Document(options) {
	  if (!options || !options.parsingMode || (options.parsingMode !== "html" && options.parsingMode !== "xml")) {
	    throw new Error("options must exist and contain a parsingMode of html or xml");
	  }

	  core.Node.call(this, "#document");
	  this._parsingMode = options.parsingMode;
	  this._implementation = new core.DOMImplementation(this);
	  this._documentElement = null;
	  this._ids = Object.create(null);
	  this._attached = true;
	  this._ownerDocument = this;
	  this._readonly = false;

	  this._contentType = options.contentType;
	  if (this._contentType === undefined) {
	    this._contentType = this._parsingMode === "xml" ? "application/xml" : "text/html";
	  }

	  this._URL = options.url;
	  if (this._URL === undefined) {
	    this._URL = "about:blank";
	  }
	  this._location = new Location(this._URL, this);
	};


	var tagRegEx = /[^\w:\d_\.-]+/i;
	var entRegEx = /[^\w\d_\-&;]+/;
	var invalidAttrRegEx = /[\s"'>/=\u0000-\u001A]/;

	inheritFrom(core.Node, core.Document, {
	  nodeType : DOCUMENT_NODE,
	  _elementBuilders : { },
	  _defaultElementBuilder: function(document, tagName) {
	    return new core.Element(document, tagName);
	  },
	  get contentType() { return this._contentType;},
	  get compatMode() { return (this._parsingMode === "xml" || this.doctype) ? "CSS1Compat" : "BackCompat"; },
	  get characterSet() { return "UTF-8"; },
	  get inputEncoding() { return "UTF-8"; },
	  get doctype() {
	    for (var i = 0; i < this._childNodes.length; ++i) {
	      if (this._childNodes[i].nodeType === DOCUMENT_TYPE_NODE) {
	        return this._childNodes[i];
	      }
	    }
	    return null;
	  },
	  get URL() {
	    return this._URL;
	  },
	  get documentURI() {
	    return this._URL;
	  },
	  get location() {
	    return this._location;
	  },
	  get documentElement() {
	    if (this._documentElement) {
	      return this._documentElement;
	    } else {
	      for (var i = 0; i < this._childNodes.length; ++i) {
	        if (this._childNodes[i].nodeType === ELEMENT_NODE) {
	          this._documentElement = this._childNodes[i];
	          return this._documentElement;
	        }
	      }
	      return null;
	    }
	  },

	  get implementation() { return this._implementation;},
	  set implementation(implementation) { this._implementation = implementation;},
	  get ownerDocument() { return null;},
	  get readonly() { return this._readonly;},

	  set parentWindow(window) {
	    // Contextify does not support getters and setters, so we have to set them
	    // on the original object instead.
	    window._frame = function (name, frame) {
	      if (typeof frame === 'undefined') {
	        delete window[name];
	      } else {
	        defineGetter(window, name, function () { return frame.contentWindow; });
	      }
	    };
	    this._parentWindow = window.getGlobal();
	  },

	  get defaultView() {
	    return this.parentWindow;
	  },

	  toString: function () {
	    return '[object HTMLDocument]';
	  },

	  _createElementNoTagNameValidation: function (tagName) {
	    var element = (this._elementBuilders[tagName.toLowerCase()] || this._defaultElementBuilder)(this, tagName);
	    element._namespaceURI = "http://www.w3.org/1999/xhtml";
	    return element;
	  },

	  createElement: function (localName) {
	    localName = String(localName);
	    validateName(localName, core);
	    if (this._parsingMode === "html") {
	      localName = localName.toLowerCase();
	    }

	    return this._createElementNoTagNameValidation(localName);
	  },

	  /* returns DocumentFragment */
	  createDocumentFragment: function() {
	    return new core.DocumentFragment(this);
	  },

	  /* returns Attr */
	  createAttribute: function (localName) {
	    localName = String(localName);
	    validateName(localName, core);

	    return this._createAttributeNoNameValidation(localName);
	  }, // raises: function(DOMException) {},

	  _createAttributeNoNameValidation: function (localName) {
	    return new core.Attr(this, localName, "");
	  },

	  appendChild : function(/* Node */ arg) {
	    if (this.documentElement && arg.nodeType == ELEMENT_NODE) {
	      throw new core.DOMException(HIERARCHY_REQUEST_ERR);
	    }
	    return core.Node.prototype.appendChild.call(this, arg);
	  },

	  removeChild : function(/* Node */ arg) {
	    var ret = core.Node.prototype.removeChild.call(this, arg);
	    if (arg == this._documentElement) {
	      this._documentElement = null;// force a recalculation
	    }
	    return ret;
	  },

	  /* returns NodeList */
	  getElementsByTagName: memoizeQuery(function(/* string */ name) {
	    function filterByTagName(child) {
	      if (child.nodeName && child.nodeType === ELEMENT_NODE)
	      {
	        if (name === "*") {
	          return true;

	        // case insensitivity for html
	        } else if (child._ownerDocument && child._ownerDocument._doctype &&
	                   //child._ownerDocument._doctype.name === "html" &&
	                   child.nodeName.toLowerCase() === name.toLowerCase())
	        {
	          return true;
	        } else if (child.nodeName.toLowerCase() === name.toLowerCase()) {
	          return true;
	        }
	      }
	      return false;
	    }
	    return new core.NodeList(this.documentElement || this, core.mapper(this, filterByTagName, true));
	  }),

	  getElementsByClassName: function (className) {

	    function filterByClassName(child) {
	      if (!child) {
	        return false;
	      }

	      var classString = child.className;
	      if (classString) {
	        var s = classString.split(" ");
	        for (var i = 0; i < s.length; i++) {
	          if (s[i] === className) {
	            return true;
	          }
	        }
	      }
	      return false;
	    }

	    return new core.NodeList(this.ownerDocument || this, core.mapper(this, filterByClassName));
	  },

	  write: function (text) {
	    if (this._writeAfterElement) {
	      // If called from an script element directly (during the first tick),
	      // the new elements are inserted right after that element.
	      var tempDiv = this.createElement('div');
	      setInnerHTML(this, tempDiv, text);

	      var child = tempDiv.firstChild;
	      var previous = this._writeAfterElement;
	      var parent = this._writeAfterElement.parentNode;

	      while (child) {
	        var node = child;
	        child = child.nextSibling;
	        parent.insertBefore(node, previous.nextSibling);
	        previous = node;
	      }
	    } else if (this.readyState === "loading") {
	      // During page loading, document.write appends to the current element
	      // Find the last child that has been added to the document.
	      var node = this;
	      while (node.lastChild && node.lastChild.nodeType === this.ELEMENT_NODE) {
	        node = node.lastChild;
	      }
	      setInnerHTML(this, node, text || "<html><head></head><body></body></html>");
	    } else if (text) {
	      setInnerHTML(this, this, text);
	    }
	  }
	});

	core.Attr = function Attr(document, name, value) {
	  core.Node.call(this, document);
	  this._valueForAttrModified = value;
	  this._name = name;
	  this._ownerElement = null;
	  this._namespaceURI = null;
	  this._localName = name;
	  this._prefix = null;
	};
	inheritFrom(core.Node, core.Attr, {
	  nodeType : ATTRIBUTE_NODE,
	  get namespaceURI() {
	    return this._namespaceURI;
	  },
	  get prefix() {
	    return this._prefix;
	  },
	  get localName() {
	    return this._localName;
	  },
	  get name() {
	    return this._name;
	  },
	  get ownerElement() {
	    return this._ownerElement;
	  },
	  get nodeValue() {
	    var val = '';
	    for (var i=0,len=this._childNodes.length;i<len;i++) {
	      var child = this._childNodes[i];
	      val += child.nodeValue;
	    }
	    return val;
	  },
	  set nodeValue(value) {
	    // readonly
	    if (this._readonly) {
	      throw new core.DOMException(NO_MODIFICATION_ALLOWED_ERR);
	    }

	    this._childNodes.length = 1;
	    this._childNodes[0] = this._ownerDocument.createTextNode(value);
	    this._modified();
	    var prev = this._valueForAttrModified;
	    this._nodeValue = value;
	    if (this._ownerElement) {
	      this._ownerElement._attrModified(this._name, value, prev);
	    }
	  },
	  get specified() {
	    return true;
	  },
	  get value() {
	    return this.nodeValue;
	  },
	  set value(value) {
	    this.nodeValue = value;
	  },
	  get parentNode() { return null;},

	  insertBefore : function(/* Node */ newChild, /* Node*/ refChild){
	    if (newChild.nodeType === CDATA_SECTION_NODE ||
	        newChild.nodeType === ELEMENT_NODE)
	    {
	      throw new core.DOMException(HIERARCHY_REQUEST_ERR);
	    }

	    return core.Node.prototype.insertBefore.call(this, newChild, refChild);
	  },

	  appendChild : function(/* Node */ arg) {

	    if (arg.nodeType === CDATA_SECTION_NODE ||
	        arg.nodeType === ELEMENT_NODE)
	    {
	      throw new core.DOMException(HIERARCHY_REQUEST_ERR);
	    }

	    return core.Node.prototype.appendChild.call(this, arg);
	  }

	});


/***/ },
/* 12 */
/***/ function(module, exports) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-cssrule-interface
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSRule
	 */
	CSSOM.CSSRule = function CSSRule() {
		this.parentRule = null;
		this.parentStyleSheet = null;
	};

	CSSOM.CSSRule.STYLE_RULE = 1;
	CSSOM.CSSRule.IMPORT_RULE = 3;
	CSSOM.CSSRule.MEDIA_RULE = 4;
	CSSOM.CSSRule.FONT_FACE_RULE = 5;
	CSSOM.CSSRule.PAGE_RULE = 6;
	CSSOM.CSSRule.WEBKIT_KEYFRAMES_RULE = 8;
	CSSOM.CSSRule.WEBKIT_KEYFRAME_RULE = 9;

	// Obsolete in CSSOM http://dev.w3.org/csswg/cssom/
	//CSSOM.CSSRule.UNKNOWN_RULE = 0;
	//CSSOM.CSSRule.CHARSET_RULE = 2;

	// Never implemented
	//CSSOM.CSSRule.VARIABLES_RULE = 7;

	CSSOM.CSSRule.prototype = {
		constructor: CSSOM.CSSRule
		//FIXME
	};


	//.CommonJS
	exports.CSSRule = CSSOM.CSSRule;
	///CommonJS


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;

	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;

	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;

	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;

	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = (path.charAt(0) === '/');

	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');

	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }

	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;

	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }

	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }

	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }

	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }

	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;

	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }

	    aRoot = aRoot.replace(/\/$/, '');

	    // XXX: It is possible to remove this block, and the tests still pass!
	    var url = urlParse(aRoot);
	    if (aPath.charAt(0) == "/" && url && url.path == "/") {
	      return aPath.slice(1);
	    }

	    return aPath.indexOf(aRoot + '/') === 0
	      ? aPath.substr(aRoot.length + 1)
	      : aPath;
	  }
	  exports.relative = relative;

	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;

	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;

	  function strcmp(aStr1, aStr2) {
	    var s1 = aStr1 || "";
	    var s2 = aStr2 || "";
	    return (s1 > s2) - (s1 < s2);
	  }

	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp;

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp || onlyCompareOriginal) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.name, mappingB.name);
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp) {
	      return cmp;
	    }

	    return mappingA.generatedColumn - mappingB.generatedColumn;
	  };
	  exports.compareByOriginalPositions = compareByOriginalPositions;

	  /**
	   * Comparator between two mappings where the generated positions are
	   * compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositions(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp;

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp || onlyCompareGenerated) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp) {
	      return cmp;
	    }

	    return strcmp(mappingA.name, mappingB.name);
	  };
	  exports.compareByGeneratedPositions = compareByGeneratedPositions;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	module.exports = Duplex;

	/*<replacement>*/
	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) keys.push(key);
	  return keys;
	}
	/*</replacement>*/


	/*<replacement>*/
	var util = __webpack_require__(32);
	util.inherits = __webpack_require__(33);
	/*</replacement>*/

	var Readable = __webpack_require__(161);
	var Writable = __webpack_require__(64);

	util.inherits(Duplex, Readable);

	forEach(objectKeys(Writable.prototype), function(method) {
	  if (!Duplex.prototype[method])
	    Duplex.prototype[method] = Writable.prototype[method];
	});

	function Duplex(options) {
	  if (!(this instanceof Duplex))
	    return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false)
	    this.readable = false;

	  if (options && options.writable === false)
	    this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false)
	    this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended)
	    return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  process.nextTick(this.end.bind(this));
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(25).EventEmitter;
	var inherits = __webpack_require__(692);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(689);
	Stream.Writable = __webpack_require__(691);
	Stream.Duplex = __webpack_require__(686);
	Stream.Transform = __webpack_require__(690);
	Stream.PassThrough = __webpack_require__(688);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ },
/* 17 */
/***/ function(module, exports) {

	function webpackContext(req) {
		throw new Error("Cannot find module '" + req + "'.");
	}
	webpackContext.keys = function() { return []; };
	webpackContext.resolve = webpackContext;
	module.exports = webpackContext;
	webpackContext.id = 17;


/***/ },
/* 18 */
/***/ function(module, exports) {

	/*! @license Firebase v2.3.2
	    License: https://www.firebase.com/terms/terms-of-service.html */
	(function() {var g,aa=this;function n(a){return void 0!==a}function ba(){}function ca(a){a.ub=function(){return a.uf?a.uf:a.uf=new a}}
	function da(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function ea(a){return"array"==da(a)}function fa(a){var b=da(a);return"array"==b||"object"==b&&"number"==typeof a.length}function p(a){return"string"==typeof a}function ga(a){return"number"==typeof a}function ha(a){return"function"==da(a)}function ia(a){var b=typeof a;return"object"==b&&null!=a||"function"==b}function ja(a,b,c){return a.call.apply(a.bind,arguments)}
	function ka(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function q(a,b,c){q=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ja:ka;return q.apply(null,arguments)}var la=Date.now||function(){return+new Date};
	function ma(a,b){function c(){}c.prototype=b.prototype;a.bh=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.Yg=function(a,c,f){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return b.prototype[c].apply(a,h)}};function r(a,b){for(var c in a)b.call(void 0,a[c],c,a)}function na(a,b){var c={},d;for(d in a)c[d]=b.call(void 0,a[d],d,a);return c}function oa(a,b){for(var c in a)if(!b.call(void 0,a[c],c,a))return!1;return!0}function pa(a){var b=0,c;for(c in a)b++;return b}function qa(a){for(var b in a)return b}function ra(a){var b=[],c=0,d;for(d in a)b[c++]=a[d];return b}function sa(a){var b=[],c=0,d;for(d in a)b[c++]=d;return b}function ta(a,b){for(var c in a)if(a[c]==b)return!0;return!1}
	function ua(a,b,c){for(var d in a)if(b.call(c,a[d],d,a))return d}function va(a,b){var c=ua(a,b,void 0);return c&&a[c]}function wa(a){for(var b in a)return!1;return!0}function xa(a){var b={},c;for(c in a)b[c]=a[c];return b}var ya="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");
	function za(a,b){for(var c,d,e=1;e<arguments.length;e++){d=arguments[e];for(c in d)a[c]=d[c];for(var f=0;f<ya.length;f++)c=ya[f],Object.prototype.hasOwnProperty.call(d,c)&&(a[c]=d[c])}};function Aa(a){a=String(a);if(/^\s*$/.test(a)?0:/^[\],:{}\s\u2028\u2029]*$/.test(a.replace(/\\["\\\/bfnrtu]/g,"@").replace(/"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g,"")))try{return eval("("+a+")")}catch(b){}throw Error("Invalid JSON string: "+a);}function Ba(){this.Sd=void 0}
	function Ca(a,b,c){switch(typeof b){case "string":Da(b,c);break;case "number":c.push(isFinite(b)&&!isNaN(b)?b:"null");break;case "boolean":c.push(b);break;case "undefined":c.push("null");break;case "object":if(null==b){c.push("null");break}if(ea(b)){var d=b.length;c.push("[");for(var e="",f=0;f<d;f++)c.push(e),e=b[f],Ca(a,a.Sd?a.Sd.call(b,String(f),e):e,c),e=",";c.push("]");break}c.push("{");d="";for(f in b)Object.prototype.hasOwnProperty.call(b,f)&&(e=b[f],"function"!=typeof e&&(c.push(d),Da(f,c),
	c.push(":"),Ca(a,a.Sd?a.Sd.call(b,f,e):e,c),d=","));c.push("}");break;case "function":break;default:throw Error("Unknown type: "+typeof b);}}var Ea={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\x0B":"\\u000b"},Fa=/\uffff/.test("\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g;
	function Da(a,b){b.push('"',a.replace(Fa,function(a){if(a in Ea)return Ea[a];var b=a.charCodeAt(0),e="\\u";16>b?e+="000":256>b?e+="00":4096>b&&(e+="0");return Ea[a]=e+b.toString(16)}),'"')};function Ga(){return Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^la()).toString(36)};var Ha;a:{var Ia=aa.navigator;if(Ia){var Ja=Ia.userAgent;if(Ja){Ha=Ja;break a}}Ha=""};function Ka(){this.Va=-1};function La(){this.Va=-1;this.Va=64;this.N=[];this.me=[];this.Wf=[];this.Ld=[];this.Ld[0]=128;for(var a=1;a<this.Va;++a)this.Ld[a]=0;this.de=this.ac=0;this.reset()}ma(La,Ka);La.prototype.reset=function(){this.N[0]=1732584193;this.N[1]=4023233417;this.N[2]=2562383102;this.N[3]=271733878;this.N[4]=3285377520;this.de=this.ac=0};
	function Ma(a,b,c){c||(c=0);var d=a.Wf;if(p(b))for(var e=0;16>e;e++)d[e]=b.charCodeAt(c)<<24|b.charCodeAt(c+1)<<16|b.charCodeAt(c+2)<<8|b.charCodeAt(c+3),c+=4;else for(e=0;16>e;e++)d[e]=b[c]<<24|b[c+1]<<16|b[c+2]<<8|b[c+3],c+=4;for(e=16;80>e;e++){var f=d[e-3]^d[e-8]^d[e-14]^d[e-16];d[e]=(f<<1|f>>>31)&4294967295}b=a.N[0];c=a.N[1];for(var h=a.N[2],k=a.N[3],l=a.N[4],m,e=0;80>e;e++)40>e?20>e?(f=k^c&(h^k),m=1518500249):(f=c^h^k,m=1859775393):60>e?(f=c&h|k&(c|h),m=2400959708):(f=c^h^k,m=3395469782),f=(b<<
	5|b>>>27)+f+l+m+d[e]&4294967295,l=k,k=h,h=(c<<30|c>>>2)&4294967295,c=b,b=f;a.N[0]=a.N[0]+b&4294967295;a.N[1]=a.N[1]+c&4294967295;a.N[2]=a.N[2]+h&4294967295;a.N[3]=a.N[3]+k&4294967295;a.N[4]=a.N[4]+l&4294967295}
	La.prototype.update=function(a,b){if(null!=a){n(b)||(b=a.length);for(var c=b-this.Va,d=0,e=this.me,f=this.ac;d<b;){if(0==f)for(;d<=c;)Ma(this,a,d),d+=this.Va;if(p(a))for(;d<b;){if(e[f]=a.charCodeAt(d),++f,++d,f==this.Va){Ma(this,e);f=0;break}}else for(;d<b;)if(e[f]=a[d],++f,++d,f==this.Va){Ma(this,e);f=0;break}}this.ac=f;this.de+=b}};var u=Array.prototype,Na=u.indexOf?function(a,b,c){return u.indexOf.call(a,b,c)}:function(a,b,c){c=null==c?0:0>c?Math.max(0,a.length+c):c;if(p(a))return p(b)&&1==b.length?a.indexOf(b,c):-1;for(;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1},Oa=u.forEach?function(a,b,c){u.forEach.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)f in e&&b.call(c,e[f],f,a)},Pa=u.filter?function(a,b,c){return u.filter.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=[],f=0,h=p(a)?
	a.split(""):a,k=0;k<d;k++)if(k in h){var l=h[k];b.call(c,l,k,a)&&(e[f++]=l)}return e},Qa=u.map?function(a,b,c){return u.map.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=Array(d),f=p(a)?a.split(""):a,h=0;h<d;h++)h in f&&(e[h]=b.call(c,f[h],h,a));return e},Ra=u.reduce?function(a,b,c,d){for(var e=[],f=1,h=arguments.length;f<h;f++)e.push(arguments[f]);d&&(e[0]=q(b,d));return u.reduce.apply(a,e)}:function(a,b,c,d){var e=c;Oa(a,function(c,h){e=b.call(d,e,c,h,a)});return e},Sa=u.every?function(a,b,
	c){return u.every.call(a,b,c)}:function(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&!b.call(c,e[f],f,a))return!1;return!0};function Ta(a,b){var c=Ua(a,b,void 0);return 0>c?null:p(a)?a.charAt(c):a[c]}function Ua(a,b,c){for(var d=a.length,e=p(a)?a.split(""):a,f=0;f<d;f++)if(f in e&&b.call(c,e[f],f,a))return f;return-1}function Va(a,b){var c=Na(a,b);0<=c&&u.splice.call(a,c,1)}function Wa(a,b,c){return 2>=arguments.length?u.slice.call(a,b):u.slice.call(a,b,c)}
	function Xa(a,b){a.sort(b||Ya)}function Ya(a,b){return a>b?1:a<b?-1:0};var Za=-1!=Ha.indexOf("Opera")||-1!=Ha.indexOf("OPR"),$a=-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE"),ab=-1!=Ha.indexOf("Gecko")&&-1==Ha.toLowerCase().indexOf("webkit")&&!(-1!=Ha.indexOf("Trident")||-1!=Ha.indexOf("MSIE")),bb=-1!=Ha.toLowerCase().indexOf("webkit");
	(function(){var a="",b;if(Za&&aa.opera)return a=aa.opera.version,ha(a)?a():a;ab?b=/rv\:([^\);]+)(\)|;)/:$a?b=/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/:bb&&(b=/WebKit\/(\S+)/);b&&(a=(a=b.exec(Ha))?a[1]:"");return $a&&(b=(b=aa.document)?b.documentMode:void 0,b>parseFloat(a))?String(b):a})();var cb=null,db=null,eb=null;function fb(a,b){if(!fa(a))throw Error("encodeByteArray takes an array as a parameter");gb();for(var c=b?db:cb,d=[],e=0;e<a.length;e+=3){var f=a[e],h=e+1<a.length,k=h?a[e+1]:0,l=e+2<a.length,m=l?a[e+2]:0,t=f>>2,f=(f&3)<<4|k>>4,k=(k&15)<<2|m>>6,m=m&63;l||(m=64,h||(k=64));d.push(c[t],c[f],c[k],c[m])}return d.join("")}
	function gb(){if(!cb){cb={};db={};eb={};for(var a=0;65>a;a++)cb[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a),db[a]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a),eb[db[a]]=a,62<=a&&(eb["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a)]=a)}};var hb=hb||"2.3.2";function v(a,b){return Object.prototype.hasOwnProperty.call(a,b)}function w(a,b){if(Object.prototype.hasOwnProperty.call(a,b))return a[b]}function ib(a,b){for(var c in a)Object.prototype.hasOwnProperty.call(a,c)&&b(c,a[c])}function jb(a){var b={};ib(a,function(a,d){b[a]=d});return b};function kb(a){var b=[];ib(a,function(a,d){ea(d)?Oa(d,function(d){b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))}):b.push(encodeURIComponent(a)+"="+encodeURIComponent(d))});return b.length?"&"+b.join("&"):""}function lb(a){var b={};a=a.replace(/^\?/,"").split("&");Oa(a,function(a){a&&(a=a.split("="),b[a[0]]=a[1])});return b};function x(a,b,c,d){var e;d<b?e="at least "+b:d>c&&(e=0===c?"none":"no more than "+c);if(e)throw Error(a+" failed: Was called with "+d+(1===d?" argument.":" arguments.")+" Expects "+e+".");}function y(a,b,c){var d="";switch(b){case 1:d=c?"first":"First";break;case 2:d=c?"second":"Second";break;case 3:d=c?"third":"Third";break;case 4:d=c?"fourth":"Fourth";break;default:throw Error("errorPrefix called with argumentNumber > 4.  Need to update it?");}return a=a+" failed: "+(d+" argument ")}
	function A(a,b,c,d){if((!d||n(c))&&!ha(c))throw Error(y(a,b,d)+"must be a valid function.");}function mb(a,b,c){if(n(c)&&(!ia(c)||null===c))throw Error(y(a,b,!0)+"must be a valid context object.");};function nb(a){return"undefined"!==typeof JSON&&n(JSON.parse)?JSON.parse(a):Aa(a)}function B(a){if("undefined"!==typeof JSON&&n(JSON.stringify))a=JSON.stringify(a);else{var b=[];Ca(new Ba,a,b);a=b.join("")}return a};function ob(){this.Wd=C}ob.prototype.j=function(a){return this.Wd.Q(a)};ob.prototype.toString=function(){return this.Wd.toString()};function pb(){}pb.prototype.qf=function(){return null};pb.prototype.ye=function(){return null};var qb=new pb;function rb(a,b,c){this.Tf=a;this.Ka=b;this.Kd=c}rb.prototype.qf=function(a){var b=this.Ka.O;if(sb(b,a))return b.j().R(a);b=null!=this.Kd?new tb(this.Kd,!0,!1):this.Ka.w();return this.Tf.xc(a,b)};rb.prototype.ye=function(a,b,c){var d=null!=this.Kd?this.Kd:ub(this.Ka);a=this.Tf.ne(d,b,1,c,a);return 0===a.length?null:a[0]};function vb(){this.tb=[]}function wb(a,b){for(var c=null,d=0;d<b.length;d++){var e=b[d],f=e.Zb();null===c||f.ca(c.Zb())||(a.tb.push(c),c=null);null===c&&(c=new xb(f));c.add(e)}c&&a.tb.push(c)}function yb(a,b,c){wb(a,c);zb(a,function(a){return a.ca(b)})}function Ab(a,b,c){wb(a,c);zb(a,function(a){return a.contains(b)||b.contains(a)})}
	function zb(a,b){for(var c=!0,d=0;d<a.tb.length;d++){var e=a.tb[d];if(e)if(e=e.Zb(),b(e)){for(var e=a.tb[d],f=0;f<e.vd.length;f++){var h=e.vd[f];if(null!==h){e.vd[f]=null;var k=h.Vb();Bb&&Cb("event: "+h.toString());Db(k)}}a.tb[d]=null}else c=!1}c&&(a.tb=[])}function xb(a){this.ra=a;this.vd=[]}xb.prototype.add=function(a){this.vd.push(a)};xb.prototype.Zb=function(){return this.ra};function D(a,b,c,d){this.type=a;this.Ja=b;this.Wa=c;this.Ke=d;this.Qd=void 0}function Eb(a){return new D(Fb,a)}var Fb="value";function Gb(a,b,c,d){this.ue=b;this.Zd=c;this.Qd=d;this.ud=a}Gb.prototype.Zb=function(){var a=this.Zd.Ib();return"value"===this.ud?a.path:a.parent().path};Gb.prototype.ze=function(){return this.ud};Gb.prototype.Vb=function(){return this.ue.Vb(this)};Gb.prototype.toString=function(){return this.Zb().toString()+":"+this.ud+":"+B(this.Zd.mf())};function Hb(a,b,c){this.ue=a;this.error=b;this.path=c}Hb.prototype.Zb=function(){return this.path};Hb.prototype.ze=function(){return"cancel"};
	Hb.prototype.Vb=function(){return this.ue.Vb(this)};Hb.prototype.toString=function(){return this.path.toString()+":cancel"};function tb(a,b,c){this.A=a;this.ea=b;this.Ub=c}function Ib(a){return a.ea}function Jb(a){return a.Ub}function Kb(a,b){return b.e()?a.ea&&!a.Ub:sb(a,E(b))}function sb(a,b){return a.ea&&!a.Ub||a.A.Da(b)}tb.prototype.j=function(){return this.A};function Lb(a){this.gg=a;this.Dd=null}Lb.prototype.get=function(){var a=this.gg.get(),b=xa(a);if(this.Dd)for(var c in this.Dd)b[c]-=this.Dd[c];this.Dd=a;return b};function Mb(a,b){this.Of={};this.fd=new Lb(a);this.ba=b;var c=1E4+2E4*Math.random();setTimeout(q(this.If,this),Math.floor(c))}Mb.prototype.If=function(){var a=this.fd.get(),b={},c=!1,d;for(d in a)0<a[d]&&v(this.Of,d)&&(b[d]=a[d],c=!0);c&&this.ba.Ue(b);setTimeout(q(this.If,this),Math.floor(6E5*Math.random()))};function Nb(){this.Ec={}}function Ob(a,b,c){n(c)||(c=1);v(a.Ec,b)||(a.Ec[b]=0);a.Ec[b]+=c}Nb.prototype.get=function(){return xa(this.Ec)};var Pb={},Qb={};function Rb(a){a=a.toString();Pb[a]||(Pb[a]=new Nb);return Pb[a]}function Sb(a,b){var c=a.toString();Qb[c]||(Qb[c]=b());return Qb[c]};function F(a,b){this.name=a;this.S=b}function Tb(a,b){return new F(a,b)};function Ub(a,b){return Vb(a.name,b.name)}function Wb(a,b){return Vb(a,b)};function Xb(a,b,c){this.type=Yb;this.source=a;this.path=b;this.Ga=c}Xb.prototype.Xc=function(a){return this.path.e()?new Xb(this.source,G,this.Ga.R(a)):new Xb(this.source,H(this.path),this.Ga)};Xb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" overwrite: "+this.Ga.toString()+")"};function Zb(a,b){this.type=$b;this.source=a;this.path=b}Zb.prototype.Xc=function(){return this.path.e()?new Zb(this.source,G):new Zb(this.source,H(this.path))};Zb.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" listen_complete)"};function ac(a,b){this.La=a;this.wa=b?b:bc}g=ac.prototype;g.Oa=function(a,b){return new ac(this.La,this.wa.Oa(a,b,this.La).Y(null,null,!1,null,null))};g.remove=function(a){return new ac(this.La,this.wa.remove(a,this.La).Y(null,null,!1,null,null))};g.get=function(a){for(var b,c=this.wa;!c.e();){b=this.La(a,c.key);if(0===b)return c.value;0>b?c=c.left:0<b&&(c=c.right)}return null};
	function cc(a,b){for(var c,d=a.wa,e=null;!d.e();){c=a.La(b,d.key);if(0===c){if(d.left.e())return e?e.key:null;for(d=d.left;!d.right.e();)d=d.right;return d.key}0>c?d=d.left:0<c&&(e=d,d=d.right)}throw Error("Attempted to find predecessor key for a nonexistent key.  What gives?");}g.e=function(){return this.wa.e()};g.count=function(){return this.wa.count()};g.Sc=function(){return this.wa.Sc()};g.fc=function(){return this.wa.fc()};g.ia=function(a){return this.wa.ia(a)};
	g.Xb=function(a){return new dc(this.wa,null,this.La,!1,a)};g.Yb=function(a,b){return new dc(this.wa,a,this.La,!1,b)};g.$b=function(a,b){return new dc(this.wa,a,this.La,!0,b)};g.sf=function(a){return new dc(this.wa,null,this.La,!0,a)};function dc(a,b,c,d,e){this.Ud=e||null;this.Fe=d;this.Pa=[];for(e=1;!a.e();)if(e=b?c(a.key,b):1,d&&(e*=-1),0>e)a=this.Fe?a.left:a.right;else if(0===e){this.Pa.push(a);break}else this.Pa.push(a),a=this.Fe?a.right:a.left}
	function J(a){if(0===a.Pa.length)return null;var b=a.Pa.pop(),c;c=a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value};if(a.Fe)for(b=b.left;!b.e();)a.Pa.push(b),b=b.right;else for(b=b.right;!b.e();)a.Pa.push(b),b=b.left;return c}function ec(a){if(0===a.Pa.length)return null;var b;b=a.Pa;b=b[b.length-1];return a.Ud?a.Ud(b.key,b.value):{key:b.key,value:b.value}}function fc(a,b,c,d,e){this.key=a;this.value=b;this.color=null!=c?c:!0;this.left=null!=d?d:bc;this.right=null!=e?e:bc}g=fc.prototype;
	g.Y=function(a,b,c,d,e){return new fc(null!=a?a:this.key,null!=b?b:this.value,null!=c?c:this.color,null!=d?d:this.left,null!=e?e:this.right)};g.count=function(){return this.left.count()+1+this.right.count()};g.e=function(){return!1};g.ia=function(a){return this.left.ia(a)||a(this.key,this.value)||this.right.ia(a)};function gc(a){return a.left.e()?a:gc(a.left)}g.Sc=function(){return gc(this).key};g.fc=function(){return this.right.e()?this.key:this.right.fc()};
	g.Oa=function(a,b,c){var d,e;e=this;d=c(a,e.key);e=0>d?e.Y(null,null,null,e.left.Oa(a,b,c),null):0===d?e.Y(null,b,null,null,null):e.Y(null,null,null,null,e.right.Oa(a,b,c));return hc(e)};function ic(a){if(a.left.e())return bc;a.left.fa()||a.left.left.fa()||(a=jc(a));a=a.Y(null,null,null,ic(a.left),null);return hc(a)}
	g.remove=function(a,b){var c,d;c=this;if(0>b(a,c.key))c.left.e()||c.left.fa()||c.left.left.fa()||(c=jc(c)),c=c.Y(null,null,null,c.left.remove(a,b),null);else{c.left.fa()&&(c=kc(c));c.right.e()||c.right.fa()||c.right.left.fa()||(c=lc(c),c.left.left.fa()&&(c=kc(c),c=lc(c)));if(0===b(a,c.key)){if(c.right.e())return bc;d=gc(c.right);c=c.Y(d.key,d.value,null,null,ic(c.right))}c=c.Y(null,null,null,null,c.right.remove(a,b))}return hc(c)};g.fa=function(){return this.color};
	function hc(a){a.right.fa()&&!a.left.fa()&&(a=mc(a));a.left.fa()&&a.left.left.fa()&&(a=kc(a));a.left.fa()&&a.right.fa()&&(a=lc(a));return a}function jc(a){a=lc(a);a.right.left.fa()&&(a=a.Y(null,null,null,null,kc(a.right)),a=mc(a),a=lc(a));return a}function mc(a){return a.right.Y(null,null,a.color,a.Y(null,null,!0,null,a.right.left),null)}function kc(a){return a.left.Y(null,null,a.color,null,a.Y(null,null,!0,a.left.right,null))}
	function lc(a){return a.Y(null,null,!a.color,a.left.Y(null,null,!a.left.color,null,null),a.right.Y(null,null,!a.right.color,null,null))}function nc(){}g=nc.prototype;g.Y=function(){return this};g.Oa=function(a,b){return new fc(a,b,null)};g.remove=function(){return this};g.count=function(){return 0};g.e=function(){return!0};g.ia=function(){return!1};g.Sc=function(){return null};g.fc=function(){return null};g.fa=function(){return!1};var bc=new nc;function oc(a,b){return a&&"object"===typeof a?(K(".sv"in a,"Unexpected leaf node or priority contents"),b[a[".sv"]]):a}function pc(a,b){var c=new qc;rc(a,new L(""),function(a,e){c.nc(a,sc(e,b))});return c}function sc(a,b){var c=a.C().I(),c=oc(c,b),d;if(a.K()){var e=oc(a.Ca(),b);return e!==a.Ca()||c!==a.C().I()?new tc(e,M(c)):a}d=a;c!==a.C().I()&&(d=d.ga(new tc(c)));a.P(N,function(a,c){var e=sc(c,b);e!==c&&(d=d.U(a,e))});return d};function uc(){this.wc={}}uc.prototype.set=function(a,b){null==b?delete this.wc[a]:this.wc[a]=b};uc.prototype.get=function(a){return v(this.wc,a)?this.wc[a]:null};uc.prototype.remove=function(a){delete this.wc[a]};uc.prototype.wf=!0;function vc(a){this.Fc=a;this.Pd="firebase:"}g=vc.prototype;g.set=function(a,b){null==b?this.Fc.removeItem(this.Pd+a):this.Fc.setItem(this.Pd+a,B(b))};g.get=function(a){a=this.Fc.getItem(this.Pd+a);return null==a?null:nb(a)};g.remove=function(a){this.Fc.removeItem(this.Pd+a)};g.wf=!1;g.toString=function(){return this.Fc.toString()};function wc(a){try{if("undefined"!==typeof window&&"undefined"!==typeof window[a]){var b=window[a];b.setItem("firebase:sentinel","cache");b.removeItem("firebase:sentinel");return new vc(b)}}catch(c){}return new uc}var xc=wc("localStorage"),yc=wc("sessionStorage");function zc(a,b,c,d,e){this.host=a.toLowerCase();this.domain=this.host.substr(this.host.indexOf(".")+1);this.kb=b;this.hc=c;this.Wg=d;this.Od=e||"";this.Ya=xc.get("host:"+a)||this.host}function Ac(a,b){b!==a.Ya&&(a.Ya=b,"s-"===a.Ya.substr(0,2)&&xc.set("host:"+a.host,a.Ya))}
	function Bc(a,b,c){K("string"===typeof b,"typeof type must == string");K("object"===typeof c,"typeof params must == object");if(b===Cc)b=(a.kb?"wss://":"ws://")+a.Ya+"/.ws?";else if(b===Dc)b=(a.kb?"https://":"http://")+a.Ya+"/.lp?";else throw Error("Unknown connection type: "+b);a.host!==a.Ya&&(c.ns=a.hc);var d=[];r(c,function(a,b){d.push(b+"="+a)});return b+d.join("&")}zc.prototype.toString=function(){var a=(this.kb?"https://":"http://")+this.host;this.Od&&(a+="<"+this.Od+">");return a};var Ec=function(){var a=1;return function(){return a++}}();function K(a,b){if(!a)throw Fc(b);}function Fc(a){return Error("Firebase ("+hb+") INTERNAL ASSERT FAILED: "+a)}
	function Gc(a){try{var b;if("undefined"!==typeof atob)b=atob(a);else{gb();for(var c=eb,d=[],e=0;e<a.length;){var f=c[a.charAt(e++)],h=e<a.length?c[a.charAt(e)]:0;++e;var k=e<a.length?c[a.charAt(e)]:64;++e;var l=e<a.length?c[a.charAt(e)]:64;++e;if(null==f||null==h||null==k||null==l)throw Error();d.push(f<<2|h>>4);64!=k&&(d.push(h<<4&240|k>>2),64!=l&&d.push(k<<6&192|l))}if(8192>d.length)b=String.fromCharCode.apply(null,d);else{a="";for(c=0;c<d.length;c+=8192)a+=String.fromCharCode.apply(null,Wa(d,c,
	c+8192));b=a}}return b}catch(m){Cb("base64Decode failed: ",m)}return null}function Hc(a){var b=Ic(a);a=new La;a.update(b);var b=[],c=8*a.de;56>a.ac?a.update(a.Ld,56-a.ac):a.update(a.Ld,a.Va-(a.ac-56));for(var d=a.Va-1;56<=d;d--)a.me[d]=c&255,c/=256;Ma(a,a.me);for(d=c=0;5>d;d++)for(var e=24;0<=e;e-=8)b[c]=a.N[d]>>e&255,++c;return fb(b)}
	function Jc(a){for(var b="",c=0;c<arguments.length;c++)b=fa(arguments[c])?b+Jc.apply(null,arguments[c]):"object"===typeof arguments[c]?b+B(arguments[c]):b+arguments[c],b+=" ";return b}var Bb=null,Kc=!0;function Cb(a){!0===Kc&&(Kc=!1,null===Bb&&!0===yc.get("logging_enabled")&&Lc(!0));if(Bb){var b=Jc.apply(null,arguments);Bb(b)}}function Mc(a){return function(){Cb(a,arguments)}}
	function Nc(a){if("undefined"!==typeof console){var b="FIREBASE INTERNAL ERROR: "+Jc.apply(null,arguments);"undefined"!==typeof console.error?console.error(b):console.log(b)}}function Oc(a){var b=Jc.apply(null,arguments);throw Error("FIREBASE FATAL ERROR: "+b);}function O(a){if("undefined"!==typeof console){var b="FIREBASE WARNING: "+Jc.apply(null,arguments);"undefined"!==typeof console.warn?console.warn(b):console.log(b)}}
	function Pc(a){var b="",c="",d="",e="",f=!0,h="https",k=443;if(p(a)){var l=a.indexOf("//");0<=l&&(h=a.substring(0,l-1),a=a.substring(l+2));l=a.indexOf("/");-1===l&&(l=a.length);b=a.substring(0,l);e="";a=a.substring(l).split("/");for(l=0;l<a.length;l++)if(0<a[l].length){var m=a[l];try{m=decodeURIComponent(m.replace(/\+/g," "))}catch(t){}e+="/"+m}a=b.split(".");3===a.length?(c=a[1],d=a[0].toLowerCase()):2===a.length&&(c=a[0]);l=b.indexOf(":");0<=l&&(f="https"===h||"wss"===h,k=b.substring(l+1),isFinite(k)&&
	(k=String(k)),k=p(k)?/^\s*-?0x/i.test(k)?parseInt(k,16):parseInt(k,10):NaN)}return{host:b,port:k,domain:c,Tg:d,kb:f,scheme:h,$c:e}}function Qc(a){return ga(a)&&(a!=a||a==Number.POSITIVE_INFINITY||a==Number.NEGATIVE_INFINITY)}
	function Rc(a){if("complete"===document.readyState)a();else{var b=!1,c=function(){document.body?b||(b=!0,a()):setTimeout(c,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",c,!1),window.addEventListener("load",c,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",function(){"complete"===document.readyState&&c()}),window.attachEvent("onload",c))}}
	function Vb(a,b){if(a===b)return 0;if("[MIN_NAME]"===a||"[MAX_NAME]"===b)return-1;if("[MIN_NAME]"===b||"[MAX_NAME]"===a)return 1;var c=Sc(a),d=Sc(b);return null!==c?null!==d?0==c-d?a.length-b.length:c-d:-1:null!==d?1:a<b?-1:1}function Tc(a,b){if(b&&a in b)return b[a];throw Error("Missing required key ("+a+") in object: "+B(b));}
	function Uc(a){if("object"!==typeof a||null===a)return B(a);var b=[],c;for(c in a)b.push(c);b.sort();c="{";for(var d=0;d<b.length;d++)0!==d&&(c+=","),c+=B(b[d]),c+=":",c+=Uc(a[b[d]]);return c+"}"}function Vc(a,b){if(a.length<=b)return[a];for(var c=[],d=0;d<a.length;d+=b)d+b>a?c.push(a.substring(d,a.length)):c.push(a.substring(d,d+b));return c}function Wc(a,b){if(ea(a))for(var c=0;c<a.length;++c)b(c,a[c]);else r(a,b)}
	function Xc(a){K(!Qc(a),"Invalid JSON number");var b,c,d,e;0===a?(d=c=0,b=-Infinity===1/a?1:0):(b=0>a,a=Math.abs(a),a>=Math.pow(2,-1022)?(d=Math.min(Math.floor(Math.log(a)/Math.LN2),1023),c=d+1023,d=Math.round(a*Math.pow(2,52-d)-Math.pow(2,52))):(c=0,d=Math.round(a/Math.pow(2,-1074))));e=[];for(a=52;a;--a)e.push(d%2?1:0),d=Math.floor(d/2);for(a=11;a;--a)e.push(c%2?1:0),c=Math.floor(c/2);e.push(b?1:0);e.reverse();b=e.join("");c="";for(a=0;64>a;a+=8)d=parseInt(b.substr(a,8),2).toString(16),1===d.length&&
	(d="0"+d),c+=d;return c.toLowerCase()}var Yc=/^-?\d{1,10}$/;function Sc(a){return Yc.test(a)&&(a=Number(a),-2147483648<=a&&2147483647>=a)?a:null}function Db(a){try{a()}catch(b){setTimeout(function(){O("Exception was thrown by user callback.",b.stack||"");throw b;},Math.floor(0))}}function P(a,b){if(ha(a)){var c=Array.prototype.slice.call(arguments,1).slice();Db(function(){a.apply(null,c)})}};function Ic(a){for(var b=[],c=0,d=0;d<a.length;d++){var e=a.charCodeAt(d);55296<=e&&56319>=e&&(e-=55296,d++,K(d<a.length,"Surrogate pair missing trail surrogate."),e=65536+(e<<10)+(a.charCodeAt(d)-56320));128>e?b[c++]=e:(2048>e?b[c++]=e>>6|192:(65536>e?b[c++]=e>>12|224:(b[c++]=e>>18|240,b[c++]=e>>12&63|128),b[c++]=e>>6&63|128),b[c++]=e&63|128)}return b}function Zc(a){for(var b=0,c=0;c<a.length;c++){var d=a.charCodeAt(c);128>d?b++:2048>d?b+=2:55296<=d&&56319>=d?(b+=4,c++):b+=3}return b};function $c(a){var b={},c={},d={},e="";try{var f=a.split("."),b=nb(Gc(f[0])||""),c=nb(Gc(f[1])||""),e=f[2],d=c.d||{};delete c.d}catch(h){}return{Zg:b,Bc:c,data:d,Qg:e}}function ad(a){a=$c(a).Bc;return"object"===typeof a&&a.hasOwnProperty("iat")?w(a,"iat"):null}function bd(a){a=$c(a);var b=a.Bc;return!!a.Qg&&!!b&&"object"===typeof b&&b.hasOwnProperty("iat")};function cd(a){this.W=a;this.g=a.n.g}function dd(a,b,c,d){var e=[],f=[];Oa(b,function(b){"child_changed"===b.type&&a.g.Ad(b.Ke,b.Ja)&&f.push(new D("child_moved",b.Ja,b.Wa))});ed(a,e,"child_removed",b,d,c);ed(a,e,"child_added",b,d,c);ed(a,e,"child_moved",f,d,c);ed(a,e,"child_changed",b,d,c);ed(a,e,Fb,b,d,c);return e}function ed(a,b,c,d,e,f){d=Pa(d,function(a){return a.type===c});Xa(d,q(a.hg,a));Oa(d,function(c){var d=fd(a,c,f);Oa(e,function(e){e.Kf(c.type)&&b.push(e.createEvent(d,a.W))})})}
	function fd(a,b,c){"value"!==b.type&&"child_removed"!==b.type&&(b.Qd=c.rf(b.Wa,b.Ja,a.g));return b}cd.prototype.hg=function(a,b){if(null==a.Wa||null==b.Wa)throw Fc("Should only compare child_ events.");return this.g.compare(new F(a.Wa,a.Ja),new F(b.Wa,b.Ja))};function gd(){this.bb={}}
	function hd(a,b){var c=b.type,d=b.Wa;K("child_added"==c||"child_changed"==c||"child_removed"==c,"Only child changes supported for tracking");K(".priority"!==d,"Only non-priority child changes can be tracked.");var e=w(a.bb,d);if(e){var f=e.type;if("child_added"==c&&"child_removed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Ja);else if("child_removed"==c&&"child_added"==f)delete a.bb[d];else if("child_removed"==c&&"child_changed"==f)a.bb[d]=new D("child_removed",e.Ke,d);else if("child_changed"==c&&
	"child_added"==f)a.bb[d]=new D("child_added",b.Ja,d);else if("child_changed"==c&&"child_changed"==f)a.bb[d]=new D("child_changed",b.Ja,d,e.Ke);else throw Fc("Illegal combination of changes: "+b+" occurred after "+e);}else a.bb[d]=b};function id(a,b,c){this.Rb=a;this.pb=b;this.rb=c||null}g=id.prototype;g.Kf=function(a){return"value"===a};g.createEvent=function(a,b){var c=b.n.g;return new Gb("value",this,new Q(a.Ja,b.Ib(),c))};g.Vb=function(a){var b=this.rb;if("cancel"===a.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var c=this.pb;return function(){c.call(b,a.error)}}var d=this.Rb;return function(){d.call(b,a.Zd)}};g.gf=function(a,b){return this.pb?new Hb(this,a,b):null};
	g.matches=function(a){return a instanceof id?a.Rb&&this.Rb?a.Rb===this.Rb&&a.rb===this.rb:!0:!1};g.tf=function(){return null!==this.Rb};function jd(a,b,c){this.ha=a;this.pb=b;this.rb=c}g=jd.prototype;g.Kf=function(a){a="children_added"===a?"child_added":a;return("children_removed"===a?"child_removed":a)in this.ha};g.gf=function(a,b){return this.pb?new Hb(this,a,b):null};
	g.createEvent=function(a,b){K(null!=a.Wa,"Child events should have a childName.");var c=b.Ib().u(a.Wa);return new Gb(a.type,this,new Q(a.Ja,c,b.n.g),a.Qd)};g.Vb=function(a){var b=this.rb;if("cancel"===a.ze()){K(this.pb,"Raising a cancel event on a listener with no cancel callback");var c=this.pb;return function(){c.call(b,a.error)}}var d=this.ha[a.ud];return function(){d.call(b,a.Zd,a.Qd)}};
	g.matches=function(a){if(a instanceof jd){if(!this.ha||!a.ha)return!0;if(this.rb===a.rb){var b=pa(a.ha);if(b===pa(this.ha)){if(1===b){var b=qa(a.ha),c=qa(this.ha);return c===b&&(!a.ha[b]||!this.ha[c]||a.ha[b]===this.ha[c])}return oa(this.ha,function(b,c){return a.ha[c]===b})}}}return!1};g.tf=function(){return null!==this.ha};function kd(a){this.g=a}g=kd.prototype;g.G=function(a,b,c,d,e,f){K(a.Jc(this.g),"A node must be indexed if only a child is updated");e=a.R(b);if(e.Q(d).ca(c.Q(d))&&e.e()==c.e())return a;null!=f&&(c.e()?a.Da(b)?hd(f,new D("child_removed",e,b)):K(a.K(),"A child remove without an old child only makes sense on a leaf node"):e.e()?hd(f,new D("child_added",c,b)):hd(f,new D("child_changed",c,b,e)));return a.K()&&c.e()?a:a.U(b,c).lb(this.g)};
	g.xa=function(a,b,c){null!=c&&(a.K()||a.P(N,function(a,e){b.Da(a)||hd(c,new D("child_removed",e,a))}),b.K()||b.P(N,function(b,e){if(a.Da(b)){var f=a.R(b);f.ca(e)||hd(c,new D("child_changed",e,b,f))}else hd(c,new D("child_added",e,b))}));return b.lb(this.g)};g.ga=function(a,b){return a.e()?C:a.ga(b)};g.Na=function(){return!1};g.Wb=function(){return this};function ld(a){this.Be=new kd(a.g);this.g=a.g;var b;a.ma?(b=md(a),b=a.g.Pc(nd(a),b)):b=a.g.Tc();this.ed=b;a.pa?(b=od(a),a=a.g.Pc(pd(a),b)):a=a.g.Qc();this.Gc=a}g=ld.prototype;g.matches=function(a){return 0>=this.g.compare(this.ed,a)&&0>=this.g.compare(a,this.Gc)};g.G=function(a,b,c,d,e,f){this.matches(new F(b,c))||(c=C);return this.Be.G(a,b,c,d,e,f)};
	g.xa=function(a,b,c){b.K()&&(b=C);var d=b.lb(this.g),d=d.ga(C),e=this;b.P(N,function(a,b){e.matches(new F(a,b))||(d=d.U(a,C))});return this.Be.xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.Be};function qd(a){this.sa=new ld(a);this.g=a.g;K(a.ja,"Only valid if limit has been set");this.ka=a.ka;this.Jb=!rd(a)}g=qd.prototype;g.G=function(a,b,c,d,e,f){this.sa.matches(new F(b,c))||(c=C);return a.R(b).ca(c)?a:a.Db()<this.ka?this.sa.Wb().G(a,b,c,d,e,f):sd(this,a,b,c,e,f)};
	g.xa=function(a,b,c){var d;if(b.K()||b.e())d=C.lb(this.g);else if(2*this.ka<b.Db()&&b.Jc(this.g)){d=C.lb(this.g);b=this.Jb?b.$b(this.sa.Gc,this.g):b.Yb(this.sa.ed,this.g);for(var e=0;0<b.Pa.length&&e<this.ka;){var f=J(b),h;if(h=this.Jb?0>=this.g.compare(this.sa.ed,f):0>=this.g.compare(f,this.sa.Gc))d=d.U(f.name,f.S),e++;else break}}else{d=b.lb(this.g);d=d.ga(C);var k,l,m;if(this.Jb){b=d.sf(this.g);k=this.sa.Gc;l=this.sa.ed;var t=td(this.g);m=function(a,b){return t(b,a)}}else b=d.Xb(this.g),k=this.sa.ed,
	l=this.sa.Gc,m=td(this.g);for(var e=0,z=!1;0<b.Pa.length;)f=J(b),!z&&0>=m(k,f)&&(z=!0),(h=z&&e<this.ka&&0>=m(f,l))?e++:d=d.U(f.name,C)}return this.sa.Wb().xa(a,d,c)};g.ga=function(a){return a};g.Na=function(){return!0};g.Wb=function(){return this.sa.Wb()};
	function sd(a,b,c,d,e,f){var h;if(a.Jb){var k=td(a.g);h=function(a,b){return k(b,a)}}else h=td(a.g);K(b.Db()==a.ka,"");var l=new F(c,d),m=a.Jb?ud(b,a.g):vd(b,a.g),t=a.sa.matches(l);if(b.Da(c)){for(var z=b.R(c),m=e.ye(a.g,m,a.Jb);null!=m&&(m.name==c||b.Da(m.name));)m=e.ye(a.g,m,a.Jb);e=null==m?1:h(m,l);if(t&&!d.e()&&0<=e)return null!=f&&hd(f,new D("child_changed",d,c,z)),b.U(c,d);null!=f&&hd(f,new D("child_removed",z,c));b=b.U(c,C);return null!=m&&a.sa.matches(m)?(null!=f&&hd(f,new D("child_added",
	m.S,m.name)),b.U(m.name,m.S)):b}return d.e()?b:t&&0<=h(m,l)?(null!=f&&(hd(f,new D("child_removed",m.S,m.name)),hd(f,new D("child_added",d,c))),b.U(c,d).U(m.name,C)):b};function wd(a,b){this.je=a;this.fg=b}function xd(a){this.V=a}
	xd.prototype.ab=function(a,b,c,d){var e=new gd,f;if(b.type===Yb)b.source.we?c=yd(this,a,b.path,b.Ga,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.af||Jb(a.w())&&!b.path.e(),c=Ad(this,a,b.path,b.Ga,c,d,f,e));else if(b.type===Bd)b.source.we?c=Cd(this,a,b.path,b.children,c,d,e):(K(b.source.pf,"Unknown source."),f=b.source.af||Jb(a.w()),c=Dd(this,a,b.path,b.children,c,d,f,e));else if(b.type===Ed)if(b.Vd)if(b=b.path,null!=c.tc(b))c=a;else{f=new rb(c,a,d);d=a.O.j();if(b.e()||".priority"===E(b))Ib(a.w())?
	b=c.za(ub(a)):(b=a.w().j(),K(b instanceof R,"serverChildren would be complete if leaf node"),b=c.yc(b)),b=this.V.xa(d,b,e);else{var h=E(b),k=c.xc(h,a.w());null==k&&sb(a.w(),h)&&(k=d.R(h));b=null!=k?this.V.G(d,h,k,H(b),f,e):a.O.j().Da(h)?this.V.G(d,h,C,H(b),f,e):d;b.e()&&Ib(a.w())&&(d=c.za(ub(a)),d.K()&&(b=this.V.xa(b,d,e)))}d=Ib(a.w())||null!=c.tc(G);c=Fd(a,b,d,this.V.Na())}else c=Gd(this,a,b.path,b.Qb,c,d,e);else if(b.type===$b)d=b.path,b=a.w(),f=b.j(),h=b.ea||d.e(),c=Hd(this,new Id(a.O,new tb(f,
	h,b.Ub)),d,c,qb,e);else throw Fc("Unknown operation type: "+b.type);e=ra(e.bb);d=c;b=d.O;b.ea&&(f=b.j().K()||b.j().e(),h=Jd(a),(0<e.length||!a.O.ea||f&&!b.j().ca(h)||!b.j().C().ca(h.C()))&&e.push(Eb(Jd(d))));return new wd(c,e)};
	function Hd(a,b,c,d,e,f){var h=b.O;if(null!=d.tc(c))return b;var k;if(c.e())K(Ib(b.w()),"If change path is empty, we must have complete server data"),Jb(b.w())?(e=ub(b),d=d.yc(e instanceof R?e:C)):d=d.za(ub(b)),f=a.V.xa(b.O.j(),d,f);else{var l=E(c);if(".priority"==l)K(1==Kd(c),"Can't have a priority with additional path components"),f=h.j(),k=b.w().j(),d=d.ld(c,f,k),f=null!=d?a.V.ga(f,d):h.j();else{var m=H(c);sb(h,l)?(k=b.w().j(),d=d.ld(c,h.j(),k),d=null!=d?h.j().R(l).G(m,d):h.j().R(l)):d=d.xc(l,
	b.w());f=null!=d?a.V.G(h.j(),l,d,m,e,f):h.j()}}return Fd(b,f,h.ea||c.e(),a.V.Na())}function Ad(a,b,c,d,e,f,h,k){var l=b.w();h=h?a.V:a.V.Wb();if(c.e())d=h.xa(l.j(),d,null);else if(h.Na()&&!l.Ub)d=l.j().G(c,d),d=h.xa(l.j(),d,null);else{var m=E(c);if(!Kb(l,c)&&1<Kd(c))return b;var t=H(c);d=l.j().R(m).G(t,d);d=".priority"==m?h.ga(l.j(),d):h.G(l.j(),m,d,t,qb,null)}l=l.ea||c.e();b=new Id(b.O,new tb(d,l,h.Na()));return Hd(a,b,c,e,new rb(e,b,f),k)}
	function yd(a,b,c,d,e,f,h){var k=b.O;e=new rb(e,b,f);if(c.e())h=a.V.xa(b.O.j(),d,h),a=Fd(b,h,!0,a.V.Na());else if(f=E(c),".priority"===f)h=a.V.ga(b.O.j(),d),a=Fd(b,h,k.ea,k.Ub);else{c=H(c);var l=k.j().R(f);if(!c.e()){var m=e.qf(f);d=null!=m?".priority"===Ld(c)&&m.Q(c.parent()).e()?m:m.G(c,d):C}l.ca(d)?a=b:(h=a.V.G(k.j(),f,d,c,e,h),a=Fd(b,h,k.ea,a.V.Na()))}return a}
	function Cd(a,b,c,d,e,f,h){var k=b;Md(d,function(d,m){var t=c.u(d);sb(b.O,E(t))&&(k=yd(a,k,t,m,e,f,h))});Md(d,function(d,m){var t=c.u(d);sb(b.O,E(t))||(k=yd(a,k,t,m,e,f,h))});return k}function Nd(a,b){Md(b,function(b,d){a=a.G(b,d)});return a}
	function Dd(a,b,c,d,e,f,h,k){if(b.w().j().e()&&!Ib(b.w()))return b;var l=b;c=c.e()?d:Od(Pd,c,d);var m=b.w().j();c.children.ia(function(c,d){if(m.Da(c)){var I=b.w().j().R(c),I=Nd(I,d);l=Ad(a,l,new L(c),I,e,f,h,k)}});c.children.ia(function(c,d){var I=!sb(b.w(),c)&&null==d.value;m.Da(c)||I||(I=b.w().j().R(c),I=Nd(I,d),l=Ad(a,l,new L(c),I,e,f,h,k))});return l}
	function Gd(a,b,c,d,e,f,h){if(null!=e.tc(c))return b;var k=Jb(b.w()),l=b.w();if(null!=d.value){if(c.e()&&l.ea||Kb(l,c))return Ad(a,b,c,l.j().Q(c),e,f,k,h);if(c.e()){var m=Pd;l.j().P(Qd,function(a,b){m=m.set(new L(a),b)});return Dd(a,b,c,m,e,f,k,h)}return b}m=Pd;Md(d,function(a){var b=c.u(a);Kb(l,b)&&(m=m.set(a,l.j().Q(b)))});return Dd(a,b,c,m,e,f,k,h)};function Rd(){}var Sd={};function td(a){return q(a.compare,a)}Rd.prototype.Ad=function(a,b){return 0!==this.compare(new F("[MIN_NAME]",a),new F("[MIN_NAME]",b))};Rd.prototype.Tc=function(){return Td};function Ud(a){K(!a.e()&&".priority"!==E(a),"Can't create PathIndex with empty path or .priority key");this.cc=a}ma(Ud,Rd);g=Ud.prototype;g.Ic=function(a){return!a.Q(this.cc).e()};g.compare=function(a,b){var c=a.S.Q(this.cc),d=b.S.Q(this.cc),c=c.Dc(d);return 0===c?Vb(a.name,b.name):c};
	g.Pc=function(a,b){var c=M(a),c=C.G(this.cc,c);return new F(b,c)};g.Qc=function(){var a=C.G(this.cc,Vd);return new F("[MAX_NAME]",a)};g.toString=function(){return this.cc.slice().join("/")};function Wd(){}ma(Wd,Rd);g=Wd.prototype;g.compare=function(a,b){var c=a.S.C(),d=b.S.C(),c=c.Dc(d);return 0===c?Vb(a.name,b.name):c};g.Ic=function(a){return!a.C().e()};g.Ad=function(a,b){return!a.C().ca(b.C())};g.Tc=function(){return Td};g.Qc=function(){return new F("[MAX_NAME]",new tc("[PRIORITY-POST]",Vd))};
	g.Pc=function(a,b){var c=M(a);return new F(b,new tc("[PRIORITY-POST]",c))};g.toString=function(){return".priority"};var N=new Wd;function Xd(){}ma(Xd,Rd);g=Xd.prototype;g.compare=function(a,b){return Vb(a.name,b.name)};g.Ic=function(){throw Fc("KeyIndex.isDefinedOn not expected to be called.");};g.Ad=function(){return!1};g.Tc=function(){return Td};g.Qc=function(){return new F("[MAX_NAME]",C)};g.Pc=function(a){K(p(a),"KeyIndex indexValue must always be a string.");return new F(a,C)};g.toString=function(){return".key"};
	var Qd=new Xd;function Yd(){}ma(Yd,Rd);g=Yd.prototype;g.compare=function(a,b){var c=a.S.Dc(b.S);return 0===c?Vb(a.name,b.name):c};g.Ic=function(){return!0};g.Ad=function(a,b){return!a.ca(b)};g.Tc=function(){return Td};g.Qc=function(){return Zd};g.Pc=function(a,b){var c=M(a);return new F(b,c)};g.toString=function(){return".value"};var $d=new Yd;function ae(){this.Tb=this.pa=this.Lb=this.ma=this.ja=!1;this.ka=0;this.Nb="";this.ec=null;this.xb="";this.bc=null;this.vb="";this.g=N}var be=new ae;function rd(a){return""===a.Nb?a.ma:"l"===a.Nb}function nd(a){K(a.ma,"Only valid if start has been set");return a.ec}function md(a){K(a.ma,"Only valid if start has been set");return a.Lb?a.xb:"[MIN_NAME]"}function pd(a){K(a.pa,"Only valid if end has been set");return a.bc}
	function od(a){K(a.pa,"Only valid if end has been set");return a.Tb?a.vb:"[MAX_NAME]"}function ce(a){var b=new ae;b.ja=a.ja;b.ka=a.ka;b.ma=a.ma;b.ec=a.ec;b.Lb=a.Lb;b.xb=a.xb;b.pa=a.pa;b.bc=a.bc;b.Tb=a.Tb;b.vb=a.vb;b.g=a.g;return b}g=ae.prototype;g.He=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="";return b};g.Ie=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="l";return b};g.Je=function(a){var b=ce(this);b.ja=!0;b.ka=a;b.Nb="r";return b};
	g.$d=function(a,b){var c=ce(this);c.ma=!0;n(a)||(a=null);c.ec=a;null!=b?(c.Lb=!0,c.xb=b):(c.Lb=!1,c.xb="");return c};g.td=function(a,b){var c=ce(this);c.pa=!0;n(a)||(a=null);c.bc=a;n(b)?(c.Tb=!0,c.vb=b):(c.ah=!1,c.vb="");return c};function de(a,b){var c=ce(a);c.g=b;return c}function ee(a){var b={};a.ma&&(b.sp=a.ec,a.Lb&&(b.sn=a.xb));a.pa&&(b.ep=a.bc,a.Tb&&(b.en=a.vb));if(a.ja){b.l=a.ka;var c=a.Nb;""===c&&(c=rd(a)?"l":"r");b.vf=c}a.g!==N&&(b.i=a.g.toString());return b}
	function S(a){return!(a.ma||a.pa||a.ja)}function fe(a){return S(a)&&a.g==N}function ge(a){var b={};if(fe(a))return b;var c;a.g===N?c="$priority":a.g===$d?c="$value":a.g===Qd?c="$key":(K(a.g instanceof Ud,"Unrecognized index type!"),c=a.g.toString());b.orderBy=B(c);a.ma&&(b.startAt=B(a.ec),a.Lb&&(b.startAt+=","+B(a.xb)));a.pa&&(b.endAt=B(a.bc),a.Tb&&(b.endAt+=","+B(a.vb)));a.ja&&(rd(a)?b.limitToFirst=a.ka:b.limitToLast=a.ka);return b}g.toString=function(){return B(ee(this))};function he(a,b){this.Bd=a;this.dc=b}he.prototype.get=function(a){var b=w(this.Bd,a);if(!b)throw Error("No index defined for "+a);return b===Sd?null:b};function ie(a,b,c){var d=na(a.Bd,function(d,f){var h=w(a.dc,f);K(h,"Missing index implementation for "+f);if(d===Sd){if(h.Ic(b.S)){for(var k=[],l=c.Xb(Tb),m=J(l);m;)m.name!=b.name&&k.push(m),m=J(l);k.push(b);return je(k,td(h))}return Sd}h=c.get(b.name);k=d;h&&(k=k.remove(new F(b.name,h)));return k.Oa(b,b.S)});return new he(d,a.dc)}
	function ke(a,b,c){var d=na(a.Bd,function(a){if(a===Sd)return a;var d=c.get(b.name);return d?a.remove(new F(b.name,d)):a});return new he(d,a.dc)}var le=new he({".priority":Sd},{".priority":N});function tc(a,b){this.B=a;K(n(this.B)&&null!==this.B,"LeafNode shouldn't be created with null/undefined value.");this.aa=b||C;me(this.aa);this.Cb=null}var ne=["object","boolean","number","string"];g=tc.prototype;g.K=function(){return!0};g.C=function(){return this.aa};g.ga=function(a){return new tc(this.B,a)};g.R=function(a){return".priority"===a?this.aa:C};g.Q=function(a){return a.e()?this:".priority"===E(a)?this.aa:C};g.Da=function(){return!1};g.rf=function(){return null};
	g.U=function(a,b){return".priority"===a?this.ga(b):b.e()&&".priority"!==a?this:C.U(a,b).ga(this.aa)};g.G=function(a,b){var c=E(a);if(null===c)return b;if(b.e()&&".priority"!==c)return this;K(".priority"!==c||1===Kd(a),".priority must be the last token in a path");return this.U(c,C.G(H(a),b))};g.e=function(){return!1};g.Db=function(){return 0};g.P=function(){return!1};g.I=function(a){return a&&!this.C().e()?{".value":this.Ca(),".priority":this.C().I()}:this.Ca()};
	g.hash=function(){if(null===this.Cb){var a="";this.aa.e()||(a+="priority:"+oe(this.aa.I())+":");var b=typeof this.B,a=a+(b+":"),a="number"===b?a+Xc(this.B):a+this.B;this.Cb=Hc(a)}return this.Cb};g.Ca=function(){return this.B};g.Dc=function(a){if(a===C)return 1;if(a instanceof R)return-1;K(a.K(),"Unknown node type");var b=typeof a.B,c=typeof this.B,d=Na(ne,b),e=Na(ne,c);K(0<=d,"Unknown leaf type: "+b);K(0<=e,"Unknown leaf type: "+c);return d===e?"object"===c?0:this.B<a.B?-1:this.B===a.B?0:1:e-d};
	g.lb=function(){return this};g.Jc=function(){return!0};g.ca=function(a){return a===this?!0:a.K()?this.B===a.B&&this.aa.ca(a.aa):!1};g.toString=function(){return B(this.I(!0))};function R(a,b,c){this.m=a;(this.aa=b)&&me(this.aa);a.e()&&K(!this.aa||this.aa.e(),"An empty node cannot have a priority");this.wb=c;this.Cb=null}g=R.prototype;g.K=function(){return!1};g.C=function(){return this.aa||C};g.ga=function(a){return this.m.e()?this:new R(this.m,a,this.wb)};g.R=function(a){if(".priority"===a)return this.C();a=this.m.get(a);return null===a?C:a};g.Q=function(a){var b=E(a);return null===b?this:this.R(b).Q(H(a))};g.Da=function(a){return null!==this.m.get(a)};
	g.U=function(a,b){K(b,"We should always be passing snapshot nodes");if(".priority"===a)return this.ga(b);var c=new F(a,b),d,e;b.e()?(d=this.m.remove(a),c=ke(this.wb,c,this.m)):(d=this.m.Oa(a,b),c=ie(this.wb,c,this.m));e=d.e()?C:this.aa;return new R(d,e,c)};g.G=function(a,b){var c=E(a);if(null===c)return b;K(".priority"!==E(a)||1===Kd(a),".priority must be the last token in a path");var d=this.R(c).G(H(a),b);return this.U(c,d)};g.e=function(){return this.m.e()};g.Db=function(){return this.m.count()};
	var pe=/^(0|[1-9]\d*)$/;g=R.prototype;g.I=function(a){if(this.e())return null;var b={},c=0,d=0,e=!0;this.P(N,function(f,h){b[f]=h.I(a);c++;e&&pe.test(f)?d=Math.max(d,Number(f)):e=!1});if(!a&&e&&d<2*c){var f=[],h;for(h in b)f[h]=b[h];return f}a&&!this.C().e()&&(b[".priority"]=this.C().I());return b};g.hash=function(){if(null===this.Cb){var a="";this.C().e()||(a+="priority:"+oe(this.C().I())+":");this.P(N,function(b,c){var d=c.hash();""!==d&&(a+=":"+b+":"+d)});this.Cb=""===a?"":Hc(a)}return this.Cb};
	g.rf=function(a,b,c){return(c=qe(this,c))?(a=cc(c,new F(a,b)))?a.name:null:cc(this.m,a)};function ud(a,b){var c;c=(c=qe(a,b))?(c=c.Sc())&&c.name:a.m.Sc();return c?new F(c,a.m.get(c)):null}function vd(a,b){var c;c=(c=qe(a,b))?(c=c.fc())&&c.name:a.m.fc();return c?new F(c,a.m.get(c)):null}g.P=function(a,b){var c=qe(this,a);return c?c.ia(function(a){return b(a.name,a.S)}):this.m.ia(b)};g.Xb=function(a){return this.Yb(a.Tc(),a)};
	g.Yb=function(a,b){var c=qe(this,b);if(c)return c.Yb(a,function(a){return a});for(var c=this.m.Yb(a.name,Tb),d=ec(c);null!=d&&0>b.compare(d,a);)J(c),d=ec(c);return c};g.sf=function(a){return this.$b(a.Qc(),a)};g.$b=function(a,b){var c=qe(this,b);if(c)return c.$b(a,function(a){return a});for(var c=this.m.$b(a.name,Tb),d=ec(c);null!=d&&0<b.compare(d,a);)J(c),d=ec(c);return c};g.Dc=function(a){return this.e()?a.e()?0:-1:a.K()||a.e()?1:a===Vd?-1:0};
	g.lb=function(a){if(a===Qd||ta(this.wb.dc,a.toString()))return this;var b=this.wb,c=this.m;K(a!==Qd,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var d=[],e=!1,c=c.Xb(Tb),f=J(c);f;)e=e||a.Ic(f.S),d.push(f),f=J(c);d=e?je(d,td(a)):Sd;e=a.toString();c=xa(b.dc);c[e]=a;a=xa(b.Bd);a[e]=d;return new R(this.m,this.aa,new he(a,c))};g.Jc=function(a){return a===Qd||ta(this.wb.dc,a.toString())};
	g.ca=function(a){if(a===this)return!0;if(a.K())return!1;if(this.C().ca(a.C())&&this.m.count()===a.m.count()){var b=this.Xb(N);a=a.Xb(N);for(var c=J(b),d=J(a);c&&d;){if(c.name!==d.name||!c.S.ca(d.S))return!1;c=J(b);d=J(a)}return null===c&&null===d}return!1};function qe(a,b){return b===Qd?null:a.wb.get(b.toString())}g.toString=function(){return B(this.I(!0))};function M(a,b){if(null===a)return C;var c=null;"object"===typeof a&&".priority"in a?c=a[".priority"]:"undefined"!==typeof b&&(c=b);K(null===c||"string"===typeof c||"number"===typeof c||"object"===typeof c&&".sv"in c,"Invalid priority type found: "+typeof c);"object"===typeof a&&".value"in a&&null!==a[".value"]&&(a=a[".value"]);if("object"!==typeof a||".sv"in a)return new tc(a,M(c));if(a instanceof Array){var d=C,e=a;r(e,function(a,b){if(v(e,b)&&"."!==b.substring(0,1)){var c=M(a);if(c.K()||!c.e())d=
	d.U(b,c)}});return d.ga(M(c))}var f=[],h=!1,k=a;ib(k,function(a){if("string"!==typeof a||"."!==a.substring(0,1)){var b=M(k[a]);b.e()||(h=h||!b.C().e(),f.push(new F(a,b)))}});if(0==f.length)return C;var l=je(f,Ub,function(a){return a.name},Wb);if(h){var m=je(f,td(N));return new R(l,M(c),new he({".priority":m},{".priority":N}))}return new R(l,M(c),le)}var re=Math.log(2);
	function se(a){this.count=parseInt(Math.log(a+1)/re,10);this.jf=this.count-1;this.eg=a+1&parseInt(Array(this.count+1).join("1"),2)}function te(a){var b=!(a.eg&1<<a.jf);a.jf--;return b}
	function je(a,b,c,d){function e(b,d){var f=d-b;if(0==f)return null;if(1==f){var m=a[b],t=c?c(m):m;return new fc(t,m.S,!1,null,null)}var m=parseInt(f/2,10)+b,f=e(b,m),z=e(m+1,d),m=a[m],t=c?c(m):m;return new fc(t,m.S,!1,f,z)}a.sort(b);var f=function(b){function d(b,h){var k=t-b,z=t;t-=b;var z=e(k+1,z),k=a[k],I=c?c(k):k,z=new fc(I,k.S,h,null,z);f?f.left=z:m=z;f=z}for(var f=null,m=null,t=a.length,z=0;z<b.count;++z){var I=te(b),zd=Math.pow(2,b.count-(z+1));I?d(zd,!1):(d(zd,!1),d(zd,!0))}return m}(new se(a.length));
	return null!==f?new ac(d||b,f):new ac(d||b)}function oe(a){return"number"===typeof a?"number:"+Xc(a):"string:"+a}function me(a){if(a.K()){var b=a.I();K("string"===typeof b||"number"===typeof b||"object"===typeof b&&v(b,".sv"),"Priority must be a string or number.")}else K(a===Vd||a.e(),"priority of unexpected type.");K(a===Vd||a.C().e(),"Priority nodes can't have a priority of their own.")}var C=new R(new ac(Wb),null,le);function ue(){R.call(this,new ac(Wb),C,le)}ma(ue,R);g=ue.prototype;
	g.Dc=function(a){return a===this?0:1};g.ca=function(a){return a===this};g.C=function(){return this};g.R=function(){return C};g.e=function(){return!1};var Vd=new ue,Td=new F("[MIN_NAME]",C),Zd=new F("[MAX_NAME]",Vd);function Id(a,b){this.O=a;this.Yd=b}function Fd(a,b,c,d){return new Id(new tb(b,c,d),a.Yd)}function Jd(a){return a.O.ea?a.O.j():null}Id.prototype.w=function(){return this.Yd};function ub(a){return a.Yd.ea?a.Yd.j():null};function ve(a,b){this.W=a;var c=a.n,d=new kd(c.g),c=S(c)?new kd(c.g):c.ja?new qd(c):new ld(c);this.Hf=new xd(c);var e=b.w(),f=b.O,h=d.xa(C,e.j(),null),k=c.xa(C,f.j(),null);this.Ka=new Id(new tb(k,f.ea,c.Na()),new tb(h,e.ea,d.Na()));this.Xa=[];this.lg=new cd(a)}function we(a){return a.W}g=ve.prototype;g.w=function(){return this.Ka.w().j()};g.fb=function(a){var b=ub(this.Ka);return b&&(S(this.W.n)||!a.e()&&!b.R(E(a)).e())?b.Q(a):null};g.e=function(){return 0===this.Xa.length};g.Pb=function(a){this.Xa.push(a)};
	g.jb=function(a,b){var c=[];if(b){K(null==a,"A cancel should cancel all event registrations.");var d=this.W.path;Oa(this.Xa,function(a){(a=a.gf(b,d))&&c.push(a)})}if(a){for(var e=[],f=0;f<this.Xa.length;++f){var h=this.Xa[f];if(!h.matches(a))e.push(h);else if(a.tf()){e=e.concat(this.Xa.slice(f+1));break}}this.Xa=e}else this.Xa=[];return c};
	g.ab=function(a,b,c){a.type===Bd&&null!==a.source.Hb&&(K(ub(this.Ka),"We should always have a full cache before handling merges"),K(Jd(this.Ka),"Missing event cache, even though we have a server cache"));var d=this.Ka;a=this.Hf.ab(d,a,b,c);b=this.Hf;c=a.je;K(c.O.j().Jc(b.V.g),"Event snap not indexed");K(c.w().j().Jc(b.V.g),"Server snap not indexed");K(Ib(a.je.w())||!Ib(d.w()),"Once a server snap is complete, it should never go back");this.Ka=a.je;return xe(this,a.fg,a.je.O.j(),null)};
	function ye(a,b){var c=a.Ka.O,d=[];c.j().K()||c.j().P(N,function(a,b){d.push(new D("child_added",b,a))});c.ea&&d.push(Eb(c.j()));return xe(a,d,c.j(),b)}function xe(a,b,c,d){return dd(a.lg,b,c,d?[d]:a.Xa)};function ze(a,b,c){this.type=Bd;this.source=a;this.path=b;this.children=c}ze.prototype.Xc=function(a){if(this.path.e())return a=this.children.subtree(new L(a)),a.e()?null:a.value?new Xb(this.source,G,a.value):new ze(this.source,G,a);K(E(this.path)===a,"Can't get a merge for a child not on the path of the operation");return new ze(this.source,H(this.path),this.children)};ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"};function Ae(a,b){this.f=Mc("p:rest:");this.F=a;this.Gb=b;this.Aa=null;this.$={}}function Be(a,b){if(n(b))return"tag$"+b;K(fe(a.n),"should have a tag if it's not a default query.");return a.path.toString()}g=Ae.prototype;
	g.yf=function(a,b,c,d){var e=a.path.toString();this.f("Listen called for "+e+" "+a.va());var f=Be(a,c),h={};this.$[f]=h;a=ge(a.n);var k=this;Ce(this,e+".json",a,function(a,b){var t=b;404===a&&(a=t=null);null===a&&k.Gb(e,t,!1,c);w(k.$,f)===h&&d(a?401==a?"permission_denied":"rest_error:"+a:"ok",null)})};g.Rf=function(a,b){var c=Be(a,b);delete this.$[c]};g.M=function(a,b){this.Aa=a;var c=$c(a),d=c.data,c=c.Bc&&c.Bc.exp;b&&b("ok",{auth:d,expires:c})};g.ge=function(a){this.Aa=null;a("ok",null)};g.Me=function(){};
	g.Cf=function(){};g.Jd=function(){};g.put=function(){};g.zf=function(){};g.Ue=function(){};
	function Ce(a,b,c,d){c=c||{};c.format="export";a.Aa&&(c.auth=a.Aa);var e=(a.F.kb?"https://":"http://")+a.F.host+b+"?"+kb(c);a.f("Sending REST request for "+e);var f=new XMLHttpRequest;f.onreadystatechange=function(){if(d&&4===f.readyState){a.f("REST Response for "+e+" received. status:",f.status,"response:",f.responseText);var b=null;if(200<=f.status&&300>f.status){try{b=nb(f.responseText)}catch(c){O("Failed to parse JSON response for "+e+": "+f.responseText)}d(null,b)}else 401!==f.status&&404!==
	f.status&&O("Got unsuccessful REST response for "+e+" Status: "+f.status),d(f.status);d=null}};f.open("GET",e,!0);f.send()};function De(a){K(ea(a)&&0<a.length,"Requires a non-empty array");this.Xf=a;this.Oc={}}De.prototype.fe=function(a,b){var c;c=this.Oc[a]||[];var d=c.length;if(0<d){for(var e=Array(d),f=0;f<d;f++)e[f]=c[f];c=e}else c=[];for(d=0;d<c.length;d++)c[d].zc.apply(c[d].Ma,Array.prototype.slice.call(arguments,1))};De.prototype.Eb=function(a,b,c){Ee(this,a);this.Oc[a]=this.Oc[a]||[];this.Oc[a].push({zc:b,Ma:c});(a=this.Ae(a))&&b.apply(c,a)};
	De.prototype.ic=function(a,b,c){Ee(this,a);a=this.Oc[a]||[];for(var d=0;d<a.length;d++)if(a[d].zc===b&&(!c||c===a[d].Ma)){a.splice(d,1);break}};function Ee(a,b){K(Ta(a.Xf,function(a){return a===b}),"Unknown event: "+b)};var Fe=function(){var a=0,b=[];return function(c){var d=c===a;a=c;for(var e=Array(8),f=7;0<=f;f--)e[f]="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(c%64),c=Math.floor(c/64);K(0===c,"Cannot push at time == 0");c=e.join("");if(d){for(f=11;0<=f&&63===b[f];f--)b[f]=0;b[f]++}else for(f=0;12>f;f++)b[f]=Math.floor(64*Math.random());for(f=0;12>f;f++)c+="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz".charAt(b[f]);K(20===c.length,"nextPushId: Length should be 20.");
	return c}}();function Ge(){De.call(this,["online"]);this.kc=!0;if("undefined"!==typeof window&&"undefined"!==typeof window.addEventListener){var a=this;window.addEventListener("online",function(){a.kc||(a.kc=!0,a.fe("online",!0))},!1);window.addEventListener("offline",function(){a.kc&&(a.kc=!1,a.fe("online",!1))},!1)}}ma(Ge,De);Ge.prototype.Ae=function(a){K("online"===a,"Unknown event type: "+a);return[this.kc]};ca(Ge);function He(){De.call(this,["visible"]);var a,b;"undefined"!==typeof document&&"undefined"!==typeof document.addEventListener&&("undefined"!==typeof document.hidden?(b="visibilitychange",a="hidden"):"undefined"!==typeof document.mozHidden?(b="mozvisibilitychange",a="mozHidden"):"undefined"!==typeof document.msHidden?(b="msvisibilitychange",a="msHidden"):"undefined"!==typeof document.webkitHidden&&(b="webkitvisibilitychange",a="webkitHidden"));this.Ob=!0;if(b){var c=this;document.addEventListener(b,
	function(){var b=!document[a];b!==c.Ob&&(c.Ob=b,c.fe("visible",b))},!1)}}ma(He,De);He.prototype.Ae=function(a){K("visible"===a,"Unknown event type: "+a);return[this.Ob]};ca(He);function L(a,b){if(1==arguments.length){this.o=a.split("/");for(var c=0,d=0;d<this.o.length;d++)0<this.o[d].length&&(this.o[c]=this.o[d],c++);this.o.length=c;this.Z=0}else this.o=a,this.Z=b}function T(a,b){var c=E(a);if(null===c)return b;if(c===E(b))return T(H(a),H(b));throw Error("INTERNAL ERROR: innerPath ("+b+") is not within outerPath ("+a+")");}
	function Ie(a,b){for(var c=a.slice(),d=b.slice(),e=0;e<c.length&&e<d.length;e++){var f=Vb(c[e],d[e]);if(0!==f)return f}return c.length===d.length?0:c.length<d.length?-1:1}function E(a){return a.Z>=a.o.length?null:a.o[a.Z]}function Kd(a){return a.o.length-a.Z}function H(a){var b=a.Z;b<a.o.length&&b++;return new L(a.o,b)}function Ld(a){return a.Z<a.o.length?a.o[a.o.length-1]:null}g=L.prototype;
	g.toString=function(){for(var a="",b=this.Z;b<this.o.length;b++)""!==this.o[b]&&(a+="/"+this.o[b]);return a||"/"};g.slice=function(a){return this.o.slice(this.Z+(a||0))};g.parent=function(){if(this.Z>=this.o.length)return null;for(var a=[],b=this.Z;b<this.o.length-1;b++)a.push(this.o[b]);return new L(a,0)};
	g.u=function(a){for(var b=[],c=this.Z;c<this.o.length;c++)b.push(this.o[c]);if(a instanceof L)for(c=a.Z;c<a.o.length;c++)b.push(a.o[c]);else for(a=a.split("/"),c=0;c<a.length;c++)0<a[c].length&&b.push(a[c]);return new L(b,0)};g.e=function(){return this.Z>=this.o.length};g.ca=function(a){if(Kd(this)!==Kd(a))return!1;for(var b=this.Z,c=a.Z;b<=this.o.length;b++,c++)if(this.o[b]!==a.o[c])return!1;return!0};
	g.contains=function(a){var b=this.Z,c=a.Z;if(Kd(this)>Kd(a))return!1;for(;b<this.o.length;){if(this.o[b]!==a.o[c])return!1;++b;++c}return!0};var G=new L("");function Je(a,b){this.Qa=a.slice();this.Ha=Math.max(1,this.Qa.length);this.lf=b;for(var c=0;c<this.Qa.length;c++)this.Ha+=Zc(this.Qa[c]);Ke(this)}Je.prototype.push=function(a){0<this.Qa.length&&(this.Ha+=1);this.Qa.push(a);this.Ha+=Zc(a);Ke(this)};Je.prototype.pop=function(){var a=this.Qa.pop();this.Ha-=Zc(a);0<this.Qa.length&&--this.Ha};
	function Ke(a){if(768<a.Ha)throw Error(a.lf+"has a key path longer than 768 bytes ("+a.Ha+").");if(32<a.Qa.length)throw Error(a.lf+"path specified exceeds the maximum depth that can be written (32) or object contains a cycle "+Le(a));}function Le(a){return 0==a.Qa.length?"":"in property '"+a.Qa.join(".")+"'"};function Me(a,b){this.value=a;this.children=b||Ne}var Ne=new ac(function(a,b){return a===b?0:a<b?-1:1});function Oe(a){var b=Pd;r(a,function(a,d){b=b.set(new L(d),a)});return b}g=Me.prototype;g.e=function(){return null===this.value&&this.children.e()};function Pe(a,b,c){if(null!=a.value&&c(a.value))return{path:G,value:a.value};if(b.e())return null;var d=E(b);a=a.children.get(d);return null!==a?(b=Pe(a,H(b),c),null!=b?{path:(new L(d)).u(b.path),value:b.value}:null):null}
	function Qe(a,b){return Pe(a,b,function(){return!0})}g.subtree=function(a){if(a.e())return this;var b=this.children.get(E(a));return null!==b?b.subtree(H(a)):Pd};g.set=function(a,b){if(a.e())return new Me(b,this.children);var c=E(a),d=(this.children.get(c)||Pd).set(H(a),b),c=this.children.Oa(c,d);return new Me(this.value,c)};
	g.remove=function(a){if(a.e())return this.children.e()?Pd:new Me(null,this.children);var b=E(a),c=this.children.get(b);return c?(a=c.remove(H(a)),b=a.e()?this.children.remove(b):this.children.Oa(b,a),null===this.value&&b.e()?Pd:new Me(this.value,b)):this};g.get=function(a){if(a.e())return this.value;var b=this.children.get(E(a));return b?b.get(H(a)):null};
	function Od(a,b,c){if(b.e())return c;var d=E(b);b=Od(a.children.get(d)||Pd,H(b),c);d=b.e()?a.children.remove(d):a.children.Oa(d,b);return new Me(a.value,d)}function Re(a,b){return Se(a,G,b)}function Se(a,b,c){var d={};a.children.ia(function(a,f){d[a]=Se(f,b.u(a),c)});return c(b,a.value,d)}function Te(a,b,c){return Ue(a,b,G,c)}function Ue(a,b,c,d){var e=a.value?d(c,a.value):!1;if(e)return e;if(b.e())return null;e=E(b);return(a=a.children.get(e))?Ue(a,H(b),c.u(e),d):null}
	function Ve(a,b,c){We(a,b,G,c)}function We(a,b,c,d){if(b.e())return a;a.value&&d(c,a.value);var e=E(b);return(a=a.children.get(e))?We(a,H(b),c.u(e),d):Pd}function Md(a,b){Xe(a,G,b)}function Xe(a,b,c){a.children.ia(function(a,e){Xe(e,b.u(a),c)});a.value&&c(b,a.value)}function Ye(a,b){a.children.ia(function(a,d){d.value&&b(a,d.value)})}var Pd=new Me(null);Me.prototype.toString=function(){var a={};Md(this,function(b,c){a[b.toString()]=c.toString()});return B(a)};function Ze(a,b,c){this.type=Ed;this.source=$e;this.path=a;this.Qb=b;this.Vd=c}Ze.prototype.Xc=function(a){if(this.path.e()){if(null!=this.Qb.value)return K(this.Qb.children.e(),"affectedTree should not have overlapping affected paths."),this;a=this.Qb.subtree(new L(a));return new Ze(G,a,this.Vd)}K(E(this.path)===a,"operationForChild called for unrelated child.");return new Ze(H(this.path),this.Qb,this.Vd)};
	Ze.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" ack write revert="+this.Vd+" affectedTree="+this.Qb+")"};var Yb=0,Bd=1,Ed=2,$b=3;function af(a,b,c,d){this.we=a;this.pf=b;this.Hb=c;this.af=d;K(!d||b,"Tagged queries must be from server.")}var $e=new af(!0,!1,null,!1),bf=new af(!1,!0,null,!1);af.prototype.toString=function(){return this.we?"user":this.af?"server(queryID="+this.Hb+")":"server"};function cf(a){this.X=a}var df=new cf(new Me(null));function ef(a,b,c){if(b.e())return new cf(new Me(c));var d=Qe(a.X,b);if(null!=d){var e=d.path,d=d.value;b=T(e,b);d=d.G(b,c);return new cf(a.X.set(e,d))}a=Od(a.X,b,new Me(c));return new cf(a)}function ff(a,b,c){var d=a;ib(c,function(a,c){d=ef(d,b.u(a),c)});return d}cf.prototype.Rd=function(a){if(a.e())return df;a=Od(this.X,a,Pd);return new cf(a)};function gf(a,b){var c=Qe(a.X,b);return null!=c?a.X.get(c.path).Q(T(c.path,b)):null}
	function hf(a){var b=[],c=a.X.value;null!=c?c.K()||c.P(N,function(a,c){b.push(new F(a,c))}):a.X.children.ia(function(a,c){null!=c.value&&b.push(new F(a,c.value))});return b}function jf(a,b){if(b.e())return a;var c=gf(a,b);return null!=c?new cf(new Me(c)):new cf(a.X.subtree(b))}cf.prototype.e=function(){return this.X.e()};cf.prototype.apply=function(a){return kf(G,this.X,a)};
	function kf(a,b,c){if(null!=b.value)return c.G(a,b.value);var d=null;b.children.ia(function(b,f){".priority"===b?(K(null!==f.value,"Priority writes must always be leaf nodes"),d=f.value):c=kf(a.u(b),f,c)});c.Q(a).e()||null===d||(c=c.G(a.u(".priority"),d));return c};function lf(){this.T=df;this.na=[];this.Mc=-1}function mf(a,b){for(var c=0;c<a.na.length;c++){var d=a.na[c];if(d.kd===b)return d}return null}g=lf.prototype;
	g.Rd=function(a){var b=Ua(this.na,function(b){return b.kd===a});K(0<=b,"removeWrite called with nonexistent writeId.");var c=this.na[b];this.na.splice(b,1);for(var d=c.visible,e=!1,f=this.na.length-1;d&&0<=f;){var h=this.na[f];h.visible&&(f>=b&&nf(h,c.path)?d=!1:c.path.contains(h.path)&&(e=!0));f--}if(d){if(e)this.T=of(this.na,pf,G),this.Mc=0<this.na.length?this.na[this.na.length-1].kd:-1;else if(c.Ga)this.T=this.T.Rd(c.path);else{var k=this;r(c.children,function(a,b){k.T=k.T.Rd(c.path.u(b))})}return!0}return!1};
	g.za=function(a,b,c,d){if(c||d){var e=jf(this.T,a);return!d&&e.e()?b:d||null!=b||null!=gf(e,G)?(e=of(this.na,function(b){return(b.visible||d)&&(!c||!(0<=Na(c,b.kd)))&&(b.path.contains(a)||a.contains(b.path))},a),b=b||C,e.apply(b)):null}e=gf(this.T,a);if(null!=e)return e;e=jf(this.T,a);return e.e()?b:null!=b||null!=gf(e,G)?(b=b||C,e.apply(b)):null};
	g.yc=function(a,b){var c=C,d=gf(this.T,a);if(d)d.K()||d.P(N,function(a,b){c=c.U(a,b)});else if(b){var e=jf(this.T,a);b.P(N,function(a,b){var d=jf(e,new L(a)).apply(b);c=c.U(a,d)});Oa(hf(e),function(a){c=c.U(a.name,a.S)})}else e=jf(this.T,a),Oa(hf(e),function(a){c=c.U(a.name,a.S)});return c};g.ld=function(a,b,c,d){K(c||d,"Either existingEventSnap or existingServerSnap must exist");a=a.u(b);if(null!=gf(this.T,a))return null;a=jf(this.T,a);return a.e()?d.Q(b):a.apply(d.Q(b))};
	g.xc=function(a,b,c){a=a.u(b);var d=gf(this.T,a);return null!=d?d:sb(c,b)?jf(this.T,a).apply(c.j().R(b)):null};g.tc=function(a){return gf(this.T,a)};g.ne=function(a,b,c,d,e,f){var h;a=jf(this.T,a);h=gf(a,G);if(null==h)if(null!=b)h=a.apply(b);else return[];h=h.lb(f);if(h.e()||h.K())return[];b=[];a=td(f);e=e?h.$b(c,f):h.Yb(c,f);for(f=J(e);f&&b.length<d;)0!==a(f,c)&&b.push(f),f=J(e);return b};
	function nf(a,b){return a.Ga?a.path.contains(b):!!ua(a.children,function(c,d){return a.path.u(d).contains(b)})}function pf(a){return a.visible}
	function of(a,b,c){for(var d=df,e=0;e<a.length;++e){var f=a[e];if(b(f)){var h=f.path;if(f.Ga)c.contains(h)?(h=T(c,h),d=ef(d,h,f.Ga)):h.contains(c)&&(h=T(h,c),d=ef(d,G,f.Ga.Q(h)));else if(f.children)if(c.contains(h))h=T(c,h),d=ff(d,h,f.children);else{if(h.contains(c))if(h=T(h,c),h.e())d=ff(d,G,f.children);else if(f=w(f.children,E(h)))f=f.Q(H(h)),d=ef(d,G,f)}else throw Fc("WriteRecord should have .snap or .children");}}return d}function qf(a,b){this.Mb=a;this.X=b}g=qf.prototype;
	g.za=function(a,b,c){return this.X.za(this.Mb,a,b,c)};g.yc=function(a){return this.X.yc(this.Mb,a)};g.ld=function(a,b,c){return this.X.ld(this.Mb,a,b,c)};g.tc=function(a){return this.X.tc(this.Mb.u(a))};g.ne=function(a,b,c,d,e){return this.X.ne(this.Mb,a,b,c,d,e)};g.xc=function(a,b){return this.X.xc(this.Mb,a,b)};g.u=function(a){return new qf(this.Mb.u(a),this.X)};function rf(){this.ya={}}g=rf.prototype;g.e=function(){return wa(this.ya)};g.ab=function(a,b,c){var d=a.source.Hb;if(null!==d)return d=w(this.ya,d),K(null!=d,"SyncTree gave us an op for an invalid query."),d.ab(a,b,c);var e=[];r(this.ya,function(d){e=e.concat(d.ab(a,b,c))});return e};g.Pb=function(a,b,c,d,e){var f=a.va(),h=w(this.ya,f);if(!h){var h=c.za(e?d:null),k=!1;h?k=!0:(h=d instanceof R?c.yc(d):C,k=!1);h=new ve(a,new Id(new tb(h,k,!1),new tb(d,e,!1)));this.ya[f]=h}h.Pb(b);return ye(h,b)};
	g.jb=function(a,b,c){var d=a.va(),e=[],f=[],h=null!=sf(this);if("default"===d){var k=this;r(this.ya,function(a,d){f=f.concat(a.jb(b,c));a.e()&&(delete k.ya[d],S(a.W.n)||e.push(a.W))})}else{var l=w(this.ya,d);l&&(f=f.concat(l.jb(b,c)),l.e()&&(delete this.ya[d],S(l.W.n)||e.push(l.W)))}h&&null==sf(this)&&e.push(new U(a.k,a.path));return{Kg:e,mg:f}};function tf(a){return Pa(ra(a.ya),function(a){return!S(a.W.n)})}g.fb=function(a){var b=null;r(this.ya,function(c){b=b||c.fb(a)});return b};
	function uf(a,b){if(S(b.n))return sf(a);var c=b.va();return w(a.ya,c)}function sf(a){return va(a.ya,function(a){return S(a.W.n)})||null};function vf(a){this.ta=Pd;this.ib=new lf;this.$e={};this.mc={};this.Nc=a}function wf(a,b,c,d,e){var f=a.ib,h=e;K(d>f.Mc,"Stacking an older write on top of newer ones");n(h)||(h=!0);f.na.push({path:b,Ga:c,kd:d,visible:h});h&&(f.T=ef(f.T,b,c));f.Mc=d;return e?xf(a,new Xb($e,b,c)):[]}function yf(a,b,c,d){var e=a.ib;K(d>e.Mc,"Stacking an older merge on top of newer ones");e.na.push({path:b,children:c,kd:d,visible:!0});e.T=ff(e.T,b,c);e.Mc=d;c=Oe(c);return xf(a,new ze($e,b,c))}
	function zf(a,b,c){c=c||!1;var d=mf(a.ib,b);if(a.ib.Rd(b)){var e=Pd;null!=d.Ga?e=e.set(G,!0):ib(d.children,function(a,b){e=e.set(new L(a),b)});return xf(a,new Ze(d.path,e,c))}return[]}function Af(a,b,c){c=Oe(c);return xf(a,new ze(bf,b,c))}function Bf(a,b,c,d){d=Cf(a,d);if(null!=d){var e=Df(d);d=e.path;e=e.Hb;b=T(d,b);c=new Xb(new af(!1,!0,e,!0),b,c);return Ef(a,d,c)}return[]}
	function Ff(a,b,c,d){if(d=Cf(a,d)){var e=Df(d);d=e.path;e=e.Hb;b=T(d,b);c=Oe(c);c=new ze(new af(!1,!0,e,!0),b,c);return Ef(a,d,c)}return[]}
	vf.prototype.Pb=function(a,b){var c=a.path,d=null,e=!1;Ve(this.ta,c,function(a,b){var f=T(a,c);d=d||b.fb(f);e=e||null!=sf(b)});var f=this.ta.get(c);f?(e=e||null!=sf(f),d=d||f.fb(G)):(f=new rf,this.ta=this.ta.set(c,f));var h;null!=d?h=!0:(h=!1,d=C,Ye(this.ta.subtree(c),function(a,b){var c=b.fb(G);c&&(d=d.U(a,c))}));var k=null!=uf(f,a);if(!k&&!S(a.n)){var l=Gf(a);K(!(l in this.mc),"View does not exist, but we have a tag");var m=Hf++;this.mc[l]=m;this.$e["_"+m]=l}h=f.Pb(a,b,new qf(c,this.ib),d,h);k||
	e||(f=uf(f,a),h=h.concat(If(this,a,f)));return h};
	vf.prototype.jb=function(a,b,c){var d=a.path,e=this.ta.get(d),f=[];if(e&&("default"===a.va()||null!=uf(e,a))){f=e.jb(a,b,c);e.e()&&(this.ta=this.ta.remove(d));e=f.Kg;f=f.mg;b=-1!==Ua(e,function(a){return S(a.n)});var h=Te(this.ta,d,function(a,b){return null!=sf(b)});if(b&&!h&&(d=this.ta.subtree(d),!d.e()))for(var d=Jf(d),k=0;k<d.length;++k){var l=d[k],m=l.W,l=Kf(this,l);this.Nc.Xe(Lf(m),Mf(this,m),l.xd,l.H)}if(!h&&0<e.length&&!c)if(b)this.Nc.ae(Lf(a),null);else{var t=this;Oa(e,function(a){a.va();
	var b=t.mc[Gf(a)];t.Nc.ae(Lf(a),b)})}Nf(this,e)}return f};vf.prototype.za=function(a,b){var c=this.ib,d=Te(this.ta,a,function(b,c){var d=T(b,a);if(d=c.fb(d))return d});return c.za(a,d,b,!0)};function Jf(a){return Re(a,function(a,c,d){if(c&&null!=sf(c))return[sf(c)];var e=[];c&&(e=tf(c));r(d,function(a){e=e.concat(a)});return e})}function Nf(a,b){for(var c=0;c<b.length;++c){var d=b[c];if(!S(d.n)){var d=Gf(d),e=a.mc[d];delete a.mc[d];delete a.$e["_"+e]}}}
	function Lf(a){return S(a.n)&&!fe(a.n)?a.Ib():a}function If(a,b,c){var d=b.path,e=Mf(a,b);c=Kf(a,c);b=a.Nc.Xe(Lf(b),e,c.xd,c.H);d=a.ta.subtree(d);if(e)K(null==sf(d.value),"If we're adding a query, it shouldn't be shadowed");else for(e=Re(d,function(a,b,c){if(!a.e()&&b&&null!=sf(b))return[we(sf(b))];var d=[];b&&(d=d.concat(Qa(tf(b),function(a){return a.W})));r(c,function(a){d=d.concat(a)});return d}),d=0;d<e.length;++d)c=e[d],a.Nc.ae(Lf(c),Mf(a,c));return b}
	function Kf(a,b){var c=b.W,d=Mf(a,c);return{xd:function(){return(b.w()||C).hash()},H:function(b){if("ok"===b){if(d){var f=c.path;if(b=Cf(a,d)){var h=Df(b);b=h.path;h=h.Hb;f=T(b,f);f=new Zb(new af(!1,!0,h,!0),f);b=Ef(a,b,f)}else b=[]}else b=xf(a,new Zb(bf,c.path));return b}f="Unknown Error";"too_big"===b?f="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"==b?f="Client doesn't have permission to access the desired data.":"unavailable"==b&&
	(f="The service is unavailable");f=Error(b+": "+f);f.code=b.toUpperCase();return a.jb(c,null,f)}}}function Gf(a){return a.path.toString()+"$"+a.va()}function Df(a){var b=a.indexOf("$");K(-1!==b&&b<a.length-1,"Bad queryKey.");return{Hb:a.substr(b+1),path:new L(a.substr(0,b))}}function Cf(a,b){var c=a.$e,d="_"+b;return d in c?c[d]:void 0}function Mf(a,b){var c=Gf(b);return w(a.mc,c)}var Hf=1;
	function Ef(a,b,c){var d=a.ta.get(b);K(d,"Missing sync point for query tag that we're tracking");return d.ab(c,new qf(b,a.ib),null)}function xf(a,b){return Of(a,b,a.ta,null,new qf(G,a.ib))}function Of(a,b,c,d,e){if(b.path.e())return Pf(a,b,c,d,e);var f=c.get(G);null==d&&null!=f&&(d=f.fb(G));var h=[],k=E(b.path),l=b.Xc(k);if((c=c.children.get(k))&&l)var m=d?d.R(k):null,k=e.u(k),h=h.concat(Of(a,l,c,m,k));f&&(h=h.concat(f.ab(b,e,d)));return h}
	function Pf(a,b,c,d,e){var f=c.get(G);null==d&&null!=f&&(d=f.fb(G));var h=[];c.children.ia(function(c,f){var m=d?d.R(c):null,t=e.u(c),z=b.Xc(c);z&&(h=h.concat(Pf(a,z,f,m,t)))});f&&(h=h.concat(f.ab(b,e,d)));return h};function Qf(){this.children={};this.nd=0;this.value=null}function Rf(a,b,c){this.Gd=a?a:"";this.Zc=b?b:null;this.A=c?c:new Qf}function Sf(a,b){for(var c=b instanceof L?b:new L(b),d=a,e;null!==(e=E(c));)d=new Rf(e,d,w(d.A.children,e)||new Qf),c=H(c);return d}g=Rf.prototype;g.Ca=function(){return this.A.value};function Tf(a,b){K("undefined"!==typeof b,"Cannot set value to undefined");a.A.value=b;Uf(a)}g.clear=function(){this.A.value=null;this.A.children={};this.A.nd=0;Uf(this)};
	g.wd=function(){return 0<this.A.nd};g.e=function(){return null===this.Ca()&&!this.wd()};g.P=function(a){var b=this;r(this.A.children,function(c,d){a(new Rf(d,b,c))})};function Vf(a,b,c,d){c&&!d&&b(a);a.P(function(a){Vf(a,b,!0,d)});c&&d&&b(a)}function Wf(a,b){for(var c=a.parent();null!==c&&!b(c);)c=c.parent()}g.path=function(){return new L(null===this.Zc?this.Gd:this.Zc.path()+"/"+this.Gd)};g.name=function(){return this.Gd};g.parent=function(){return this.Zc};
	function Uf(a){if(null!==a.Zc){var b=a.Zc,c=a.Gd,d=a.e(),e=v(b.A.children,c);d&&e?(delete b.A.children[c],b.A.nd--,Uf(b)):d||e||(b.A.children[c]=a.A,b.A.nd++,Uf(b))}};var Xf=/[\[\].#$\/\u0000-\u001F\u007F]/,Yf=/[\[\].#$\u0000-\u001F\u007F]/,Zf=/^[a-zA-Z][a-zA-Z._\-+]+$/;function $f(a){return p(a)&&0!==a.length&&!Xf.test(a)}function ag(a){return null===a||p(a)||ga(a)&&!Qc(a)||ia(a)&&v(a,".sv")}function bg(a,b,c,d){d&&!n(b)||cg(y(a,1,d),b,c)}
	function cg(a,b,c){c instanceof L&&(c=new Je(c,a));if(!n(b))throw Error(a+"contains undefined "+Le(c));if(ha(b))throw Error(a+"contains a function "+Le(c)+" with contents: "+b.toString());if(Qc(b))throw Error(a+"contains "+b.toString()+" "+Le(c));if(p(b)&&b.length>10485760/3&&10485760<Zc(b))throw Error(a+"contains a string greater than 10485760 utf8 bytes "+Le(c)+" ('"+b.substring(0,50)+"...')");if(ia(b)){var d=!1,e=!1;ib(b,function(b,h){if(".value"===b)d=!0;else if(".priority"!==b&&".sv"!==b&&(e=
	!0,!$f(b)))throw Error(a+" contains an invalid key ("+b+") "+Le(c)+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');c.push(b);cg(a,h,c);c.pop()});if(d&&e)throw Error(a+' contains ".value" child '+Le(c)+" in addition to actual children.");}}
	function dg(a,b){var c,d;for(c=0;c<b.length;c++){d=b[c];for(var e=d.slice(),f=0;f<e.length;f++)if((".priority"!==e[f]||f!==e.length-1)&&!$f(e[f]))throw Error(a+"contains an invalid key ("+e[f]+") in path "+d.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');}b.sort(Ie);e=null;for(c=0;c<b.length;c++){d=b[c];if(null!==e&&e.contains(d))throw Error(a+"contains a path "+e.toString()+" that is ancestor of another path "+d.toString());e=d}}
	function eg(a,b,c){var d=y(a,1,!1);if(!ia(b)||ea(b))throw Error(d+" must be an object containing the children to replace.");var e=[];ib(b,function(a,b){var k=new L(a);cg(d,b,c.u(k));if(".priority"===Ld(k)&&!ag(b))throw Error(d+"contains an invalid value for '"+k.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");e.push(k)});dg(d,e)}
	function fg(a,b,c){if(Qc(c))throw Error(y(a,b,!1)+"is "+c.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ag(c))throw Error(y(a,b,!1)+"must be a valid Firebase priority (a string, finite number, server value, or null).");}
	function gg(a,b,c){if(!c||n(b))switch(b){case "value":case "child_added":case "child_removed":case "child_changed":case "child_moved":break;default:throw Error(y(a,1,c)+'must be a valid event type: "value", "child_added", "child_removed", "child_changed", or "child_moved".');}}function hg(a,b){if(n(b)&&!$f(b))throw Error(y(a,2,!0)+'was an invalid key: "'+b+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").');}
	function ig(a,b){if(!p(b)||0===b.length||Yf.test(b))throw Error(y(a,1,!1)+'was an invalid path: "'+b+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"');}function jg(a,b){if(".info"===E(b))throw Error(a+" failed: Can't modify data under /.info/");}function kg(a,b){if(!p(b))throw Error(y(a,1,!1)+"must be a valid credential (a string).");}function lg(a,b,c){if(!p(c))throw Error(y(a,b,!1)+"must be a valid string.");}
	function mg(a,b){lg(a,1,b);if(!Zf.test(b))throw Error(y(a,1,!1)+"'"+b+"' is not a valid authentication provider.");}function ng(a,b,c,d){if(!d||n(c))if(!ia(c)||null===c)throw Error(y(a,b,d)+"must be a valid object.");}function og(a,b,c){if(!ia(b)||!v(b,c))throw Error(y(a,1,!1)+'must contain the key "'+c+'"');if(!p(w(b,c)))throw Error(y(a,1,!1)+'must contain the key "'+c+'" with type "string"');};function pg(){this.set={}}g=pg.prototype;g.add=function(a,b){this.set[a]=null!==b?b:!0};g.contains=function(a){return v(this.set,a)};g.get=function(a){return this.contains(a)?this.set[a]:void 0};g.remove=function(a){delete this.set[a]};g.clear=function(){this.set={}};g.e=function(){return wa(this.set)};g.count=function(){return pa(this.set)};function qg(a,b){r(a.set,function(a,d){b(d,a)})}g.keys=function(){var a=[];r(this.set,function(b,c){a.push(c)});return a};function qc(){this.m=this.B=null}qc.prototype.find=function(a){if(null!=this.B)return this.B.Q(a);if(a.e()||null==this.m)return null;var b=E(a);a=H(a);return this.m.contains(b)?this.m.get(b).find(a):null};qc.prototype.nc=function(a,b){if(a.e())this.B=b,this.m=null;else if(null!==this.B)this.B=this.B.G(a,b);else{null==this.m&&(this.m=new pg);var c=E(a);this.m.contains(c)||this.m.add(c,new qc);c=this.m.get(c);a=H(a);c.nc(a,b)}};
	function rg(a,b){if(b.e())return a.B=null,a.m=null,!0;if(null!==a.B){if(a.B.K())return!1;var c=a.B;a.B=null;c.P(N,function(b,c){a.nc(new L(b),c)});return rg(a,b)}return null!==a.m?(c=E(b),b=H(b),a.m.contains(c)&&rg(a.m.get(c),b)&&a.m.remove(c),a.m.e()?(a.m=null,!0):!1):!0}function rc(a,b,c){null!==a.B?c(b,a.B):a.P(function(a,e){var f=new L(b.toString()+"/"+a);rc(e,f,c)})}qc.prototype.P=function(a){null!==this.m&&qg(this.m,function(b,c){a(b,c)})};var sg="auth.firebase.com";function tg(a,b,c){this.od=a||{};this.ee=b||{};this.$a=c||{};this.od.remember||(this.od.remember="default")}var ug=["remember","redirectTo"];function vg(a){var b={},c={};ib(a||{},function(a,e){0<=Na(ug,a)?b[a]=e:c[a]=e});return new tg(b,{},c)};function wg(a,b){this.Qe=["session",a.Od,a.hc].join(":");this.be=b}wg.prototype.set=function(a,b){if(!b)if(this.be.length)b=this.be[0];else throw Error("fb.login.SessionManager : No storage options available!");b.set(this.Qe,a)};wg.prototype.get=function(){var a=Qa(this.be,q(this.qg,this)),a=Pa(a,function(a){return null!==a});Xa(a,function(a,c){return ad(c.token)-ad(a.token)});return 0<a.length?a.shift():null};wg.prototype.qg=function(a){try{var b=a.get(this.Qe);if(b&&b.token)return b}catch(c){}return null};
	wg.prototype.clear=function(){var a=this;Oa(this.be,function(b){b.remove(a.Qe)})};function xg(){return"undefined"!==typeof navigator&&"string"===typeof navigator.userAgent?navigator.userAgent:""}function yg(){return"undefined"!==typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(xg())}function zg(){return"undefined"!==typeof location&&/^file:\//.test(location.href)}
	function Ag(a){var b=xg();if(""===b)return!1;if("Microsoft Internet Explorer"===navigator.appName){if((b=b.match(/MSIE ([0-9]{1,}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a}else if(-1<b.indexOf("Trident")&&(b=b.match(/rv:([0-9]{2,2}[\.0-9]{0,})/))&&1<b.length)return parseFloat(b[1])>=a;return!1};function Bg(){var a=window.opener.frames,b;for(b=a.length-1;0<=b;b--)try{if(a[b].location.protocol===window.location.protocol&&a[b].location.host===window.location.host&&"__winchan_relay_frame"===a[b].name)return a[b]}catch(c){}return null}function Cg(a,b,c){a.attachEvent?a.attachEvent("on"+b,c):a.addEventListener&&a.addEventListener(b,c,!1)}function Dg(a,b,c){a.detachEvent?a.detachEvent("on"+b,c):a.removeEventListener&&a.removeEventListener(b,c,!1)}
	function Eg(a){/^https?:\/\//.test(a)||(a=window.location.href);var b=/^(https?:\/\/[\-_a-zA-Z\.0-9:]+)/.exec(a);return b?b[1]:a}function Fg(a){var b="";try{a=a.replace("#","");var c=lb(a);c&&v(c,"__firebase_request_key")&&(b=w(c,"__firebase_request_key"))}catch(d){}return b}function Gg(){var a=Pc(sg);return a.scheme+"://"+a.host+"/v2"}function Hg(a){return Gg()+"/"+a+"/auth/channel"};function Ig(a){var b=this;this.Ac=a;this.ce="*";Ag(8)?this.Rc=this.zd=Bg():(this.Rc=window.opener,this.zd=window);if(!b.Rc)throw"Unable to find relay frame";Cg(this.zd,"message",q(this.jc,this));Cg(this.zd,"message",q(this.Bf,this));try{Jg(this,{a:"ready"})}catch(c){Cg(this.Rc,"load",function(){Jg(b,{a:"ready"})})}Cg(window,"unload",q(this.Bg,this))}function Jg(a,b){b=B(b);Ag(8)?a.Rc.doPost(b,a.ce):a.Rc.postMessage(b,a.ce)}
	Ig.prototype.jc=function(a){var b=this,c;try{c=nb(a.data)}catch(d){}c&&"request"===c.a&&(Dg(window,"message",this.jc),this.ce=a.origin,this.Ac&&setTimeout(function(){b.Ac(b.ce,c.d,function(a,c){b.dg=!c;b.Ac=void 0;Jg(b,{a:"response",d:a,forceKeepWindowOpen:c})})},0))};Ig.prototype.Bg=function(){try{Dg(this.zd,"message",this.Bf)}catch(a){}this.Ac&&(Jg(this,{a:"error",d:"unknown closed window"}),this.Ac=void 0);try{window.close()}catch(b){}};Ig.prototype.Bf=function(a){if(this.dg&&"die"===a.data)try{window.close()}catch(b){}};function Kg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}Kg.prototype.open=function(a,b){yc.set("redirect_request_id",this.pc);yc.set("redirect_request_id",this.pc);b.requestId=this.pc;b.redirectTo=b.redirectTo||window.location.href;a+=(/\?/.test(a)?"":"?")+kb(b);window.location=a};Kg.isAvailable=function(){return!zg()&&!yg()};Kg.prototype.Cc=function(){return"redirect"};var Lg={NETWORK_ERROR:"Unable to contact the Firebase server.",SERVER_ERROR:"An unknown server error occurred.",TRANSPORT_UNAVAILABLE:"There are no login transports available for the requested method.",REQUEST_INTERRUPTED:"The browser redirected the page before the login request could complete.",USER_CANCELLED:"The user cancelled authentication."};function Mg(a){var b=Error(w(Lg,a),a);b.code=a;return b};function Ng(a){var b;(b=!a.window_features)||(b=xg(),b=-1!==b.indexOf("Fennec/")||-1!==b.indexOf("Firefox/")&&-1!==b.indexOf("Android"));b&&(a.window_features=void 0);a.window_name||(a.window_name="_blank");this.options=a}
	Ng.prototype.open=function(a,b,c){function d(a){h&&(document.body.removeChild(h),h=void 0);t&&(t=clearInterval(t));Dg(window,"message",e);Dg(window,"unload",d);if(m&&!a)try{m.close()}catch(b){k.postMessage("die",l)}m=k=void 0}function e(a){if(a.origin===l)try{var b=nb(a.data);"ready"===b.a?k.postMessage(z,l):"error"===b.a?(d(!1),c&&(c(b.d),c=null)):"response"===b.a&&(d(b.forceKeepWindowOpen),c&&(c(null,b.d),c=null))}catch(e){}}var f=Ag(8),h,k;if(!this.options.relay_url)return c(Error("invalid arguments: origin of url and relay_url must match"));
	var l=Eg(a);if(l!==Eg(this.options.relay_url))c&&setTimeout(function(){c(Error("invalid arguments: origin of url and relay_url must match"))},0);else{f&&(h=document.createElement("iframe"),h.setAttribute("src",this.options.relay_url),h.style.display="none",h.setAttribute("name","__winchan_relay_frame"),document.body.appendChild(h),k=h.contentWindow);a+=(/\?/.test(a)?"":"?")+kb(b);var m=window.open(a,this.options.window_name,this.options.window_features);k||(k=m);var t=setInterval(function(){m&&m.closed&&
	(d(!1),c&&(c(Mg("USER_CANCELLED")),c=null))},500),z=B({a:"request",d:b});Cg(window,"unload",d);Cg(window,"message",e)}};
	Ng.isAvailable=function(){var a;if(a="postMessage"in window&&!zg())(a=yg()||"undefined"!==typeof navigator&&(!!xg().match(/Windows Phone/)||!!window.Windows&&/^ms-appx:/.test(location.href)))||(a=xg(),a="undefined"!==typeof navigator&&"undefined"!==typeof window&&!!(a.match(/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i)||a.match(/CriOS/)||a.match(/Twitter for iPhone/)||a.match(/FBAN\/FBIOS/)||window.navigator.standalone)),a=!a;return a&&!xg().match(/PhantomJS/)};Ng.prototype.Cc=function(){return"popup"};function Og(a){a.method||(a.method="GET");a.headers||(a.headers={});a.headers.content_type||(a.headers.content_type="application/json");a.headers.content_type=a.headers.content_type.toLowerCase();this.options=a}
	Og.prototype.open=function(a,b,c){function d(){c&&(c(Mg("REQUEST_INTERRUPTED")),c=null)}var e=new XMLHttpRequest,f=this.options.method.toUpperCase(),h;Cg(window,"beforeunload",d);e.onreadystatechange=function(){if(c&&4===e.readyState){var a;if(200<=e.status&&300>e.status){try{a=nb(e.responseText)}catch(b){}c(null,a)}else 500<=e.status&&600>e.status?c(Mg("SERVER_ERROR")):c(Mg("NETWORK_ERROR"));c=null;Dg(window,"beforeunload",d)}};if("GET"===f)a+=(/\?/.test(a)?"":"?")+kb(b),h=null;else{var k=this.options.headers.content_type;
	"application/json"===k&&(h=B(b));"application/x-www-form-urlencoded"===k&&(h=kb(b))}e.open(f,a,!0);a={"X-Requested-With":"XMLHttpRequest",Accept:"application/json;text/plain"};za(a,this.options.headers);for(var l in a)e.setRequestHeader(l,a[l]);e.send(h)};Og.isAvailable=function(){var a;if(a=!!window.XMLHttpRequest)a=xg(),a=!(a.match(/MSIE/)||a.match(/Trident/))||Ag(10);return a};Og.prototype.Cc=function(){return"json"};function Pg(a){this.pc=Ga()+Ga()+Ga();this.Ef=a}
	Pg.prototype.open=function(a,b,c){function d(){c&&(c(Mg("USER_CANCELLED")),c=null)}var e=this,f=Pc(sg),h;b.requestId=this.pc;b.redirectTo=f.scheme+"://"+f.host+"/blank/page.html";a+=/\?/.test(a)?"":"?";a+=kb(b);(h=window.open(a,"_blank","location=no"))&&ha(h.addEventListener)?(h.addEventListener("loadstart",function(a){var b;if(b=a&&a.url)a:{try{var m=document.createElement("a");m.href=a.url;b=m.host===f.host&&"/blank/page.html"===m.pathname;break a}catch(t){}b=!1}b&&(a=Fg(a.url),h.removeEventListener("exit",
	d),h.close(),a=new tg(null,null,{requestId:e.pc,requestKey:a}),e.Ef.requestWithCredential("/auth/session",a,c),c=null)}),h.addEventListener("exit",d)):c(Mg("TRANSPORT_UNAVAILABLE"))};Pg.isAvailable=function(){return yg()};Pg.prototype.Cc=function(){return"redirect"};function Qg(a){a.callback_parameter||(a.callback_parameter="callback");this.options=a;window.__firebase_auth_jsonp=window.__firebase_auth_jsonp||{}}
	Qg.prototype.open=function(a,b,c){function d(){c&&(c(Mg("REQUEST_INTERRUPTED")),c=null)}function e(){setTimeout(function(){window.__firebase_auth_jsonp[f]=void 0;wa(window.__firebase_auth_jsonp)&&(window.__firebase_auth_jsonp=void 0);try{var a=document.getElementById(f);a&&a.parentNode.removeChild(a)}catch(b){}},1);Dg(window,"beforeunload",d)}var f="fn"+(new Date).getTime()+Math.floor(99999*Math.random());b[this.options.callback_parameter]="__firebase_auth_jsonp."+f;a+=(/\?/.test(a)?"":"?")+kb(b);
	Cg(window,"beforeunload",d);window.__firebase_auth_jsonp[f]=function(a){c&&(c(null,a),c=null);e()};Rg(f,a,c)};
	function Rg(a,b,c){setTimeout(function(){try{var d=document.createElement("script");d.type="text/javascript";d.id=a;d.async=!0;d.src=b;d.onerror=function(){var b=document.getElementById(a);null!==b&&b.parentNode.removeChild(b);c&&c(Mg("NETWORK_ERROR"))};var e=document.getElementsByTagName("head");(e&&0!=e.length?e[0]:document.documentElement).appendChild(d)}catch(f){c&&c(Mg("NETWORK_ERROR"))}},0)}Qg.isAvailable=function(){return"undefined"!==typeof document&&null!=document.createElement};
	Qg.prototype.Cc=function(){return"json"};function Sg(a,b,c,d){De.call(this,["auth_status"]);this.F=a;this.df=b;this.Vg=c;this.Le=d;this.sc=new wg(a,[xc,yc]);this.mb=null;this.Se=!1;Tg(this)}ma(Sg,De);g=Sg.prototype;g.xe=function(){return this.mb||null};function Tg(a){yc.get("redirect_request_id")&&Ug(a);var b=a.sc.get();b&&b.token?(Vg(a,b),a.df(b.token,function(c,d){Wg(a,c,d,!1,b.token,b)},function(b,d){Xg(a,"resumeSession()",b,d)})):Vg(a,null)}
	function Yg(a,b,c,d,e,f){"firebaseio-demo.com"===a.F.domain&&O("Firebase authentication is not supported on demo Firebases (*.firebaseio-demo.com). To secure your Firebase, create a production Firebase at https://www.firebase.com.");a.df(b,function(f,k){Wg(a,f,k,!0,b,c,d||{},e)},function(b,c){Xg(a,"auth()",b,c,f)})}function Zg(a,b){a.sc.clear();Vg(a,null);a.Vg(function(a,d){if("ok"===a)P(b,null);else{var e=(a||"error").toUpperCase(),f=e;d&&(f+=": "+d);f=Error(f);f.code=e;P(b,f)}})}
	function Wg(a,b,c,d,e,f,h,k){"ok"===b?(d&&(b=c.auth,f.auth=b,f.expires=c.expires,f.token=bd(e)?e:"",c=null,b&&v(b,"uid")?c=w(b,"uid"):v(f,"uid")&&(c=w(f,"uid")),f.uid=c,c="custom",b&&v(b,"provider")?c=w(b,"provider"):v(f,"provider")&&(c=w(f,"provider")),f.provider=c,a.sc.clear(),bd(e)&&(h=h||{},c=xc,"sessionOnly"===h.remember&&(c=yc),"none"!==h.remember&&a.sc.set(f,c)),Vg(a,f)),P(k,null,f)):(a.sc.clear(),Vg(a,null),f=a=(b||"error").toUpperCase(),c&&(f+=": "+c),f=Error(f),f.code=a,P(k,f))}
	function Xg(a,b,c,d,e){O(b+" was canceled: "+d);a.sc.clear();Vg(a,null);a=Error(d);a.code=c.toUpperCase();P(e,a)}function $g(a,b,c,d,e){ah(a);c=new tg(d||{},{},c||{});bh(a,[Og,Qg],"/auth/"+b,c,e)}
	function ch(a,b,c,d){ah(a);var e=[Ng,Pg];c=vg(c);"anonymous"===b||"password"===b?setTimeout(function(){P(d,Mg("TRANSPORT_UNAVAILABLE"))},0):(c.ee.window_features="menubar=yes,modal=yes,alwaysRaised=yeslocation=yes,resizable=yes,scrollbars=yes,status=yes,height=625,width=625,top="+("object"===typeof screen?.5*(screen.height-625):0)+",left="+("object"===typeof screen?.5*(screen.width-625):0),c.ee.relay_url=Hg(a.F.hc),c.ee.requestWithCredential=q(a.qc,a),bh(a,e,"/auth/"+b,c,d))}
	function Ug(a){var b=yc.get("redirect_request_id");if(b){var c=yc.get("redirect_client_options");yc.remove("redirect_request_id");yc.remove("redirect_client_options");var d=[Og,Qg],b={requestId:b,requestKey:Fg(document.location.hash)},c=new tg(c,{},b);a.Se=!0;try{document.location.hash=document.location.hash.replace(/&__firebase_request_key=([a-zA-z0-9]*)/,"")}catch(e){}bh(a,d,"/auth/session",c,function(){this.Se=!1}.bind(a))}}
	g.se=function(a,b){ah(this);var c=vg(a);c.$a._method="POST";this.qc("/users",c,function(a,c){a?P(b,a):P(b,a,c)})};g.Te=function(a,b){var c=this;ah(this);var d="/users/"+encodeURIComponent(a.email),e=vg(a);e.$a._method="DELETE";this.qc(d,e,function(a,d){!a&&d&&d.uid&&c.mb&&c.mb.uid&&c.mb.uid===d.uid&&Zg(c);P(b,a)})};g.pe=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=vg(a);d.$a._method="PUT";d.$a.password=a.newPassword;this.qc(c,d,function(a){P(b,a)})};
	g.oe=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.oldEmail)+"/email",d=vg(a);d.$a._method="PUT";d.$a.email=a.newEmail;d.$a.password=a.password;this.qc(c,d,function(a){P(b,a)})};g.Ve=function(a,b){ah(this);var c="/users/"+encodeURIComponent(a.email)+"/password",d=vg(a);d.$a._method="POST";this.qc(c,d,function(a){P(b,a)})};g.qc=function(a,b,c){dh(this,[Og,Qg],a,b,c)};
	function bh(a,b,c,d,e){dh(a,b,c,d,function(b,c){!b&&c&&c.token&&c.uid?Yg(a,c.token,c,d.od,function(a,b){a?P(e,a):P(e,null,b)}):P(e,b||Mg("UNKNOWN_ERROR"))})}
	function dh(a,b,c,d,e){b=Pa(b,function(a){return"function"===typeof a.isAvailable&&a.isAvailable()});0===b.length?setTimeout(function(){P(e,Mg("TRANSPORT_UNAVAILABLE"))},0):(b=new (b.shift())(d.ee),d=jb(d.$a),d.v="js-"+hb,d.transport=b.Cc(),d.suppress_status_codes=!0,a=Gg()+"/"+a.F.hc+c,b.open(a,d,function(a,b){if(a)P(e,a);else if(b&&b.error){var c=Error(b.error.message);c.code=b.error.code;c.details=b.error.details;P(e,c)}else P(e,null,b)}))}
	function Vg(a,b){var c=null!==a.mb||null!==b;a.mb=b;c&&a.fe("auth_status",b);a.Le(null!==b)}g.Ae=function(a){K("auth_status"===a,'initial event must be of type "auth_status"');return this.Se?null:[this.mb]};function ah(a){var b=a.F;if("firebaseio.com"!==b.domain&&"firebaseio-demo.com"!==b.domain&&"auth.firebase.com"===sg)throw Error("This custom Firebase server ('"+a.F.domain+"') does not support delegated login.");};var Cc="websocket",Dc="long_polling";function eh(a){this.jc=a;this.Nd=[];this.Sb=0;this.qe=-1;this.Fb=null}function fh(a,b,c){a.qe=b;a.Fb=c;a.qe<a.Sb&&(a.Fb(),a.Fb=null)}function gh(a,b,c){for(a.Nd[b]=c;a.Nd[a.Sb];){var d=a.Nd[a.Sb];delete a.Nd[a.Sb];for(var e=0;e<d.length;++e)if(d[e]){var f=a;Db(function(){f.jc(d[e])})}if(a.Sb===a.qe){a.Fb&&(clearTimeout(a.Fb),a.Fb(),a.Fb=null);break}a.Sb++}};function hh(a,b,c,d){this.re=a;this.f=Mc(a);this.nb=this.ob=0;this.Ua=Rb(b);this.Qf=c;this.Hc=!1;this.Bb=d;this.jd=function(a){return Bc(b,Dc,a)}}var ih,jh;
	hh.prototype.open=function(a,b){this.hf=0;this.la=b;this.Af=new eh(a);this.zb=!1;var c=this;this.qb=setTimeout(function(){c.f("Timed out trying to connect.");c.gb();c.qb=null},Math.floor(3E4));Rc(function(){if(!c.zb){c.Sa=new kh(function(a,b,d,k,l){lh(c,arguments);if(c.Sa)if(c.qb&&(clearTimeout(c.qb),c.qb=null),c.Hc=!0,"start"==a)c.id=b,c.Gf=d;else if("close"===a)b?(c.Sa.Xd=!1,fh(c.Af,b,function(){c.gb()})):c.gb();else throw Error("Unrecognized command received: "+a);},function(a,b){lh(c,arguments);
	gh(c.Af,a,b)},function(){c.gb()},c.jd);var a={start:"t"};a.ser=Math.floor(1E8*Math.random());c.Sa.he&&(a.cb=c.Sa.he);a.v="5";c.Qf&&(a.s=c.Qf);c.Bb&&(a.ls=c.Bb);"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");a=c.jd(a);c.f("Connecting via long-poll to "+a);mh(c.Sa,a,function(){})}})};
	hh.prototype.start=function(){var a=this.Sa,b=this.Gf;a.ug=this.id;a.vg=b;for(a.le=!0;nh(a););a=this.id;b=this.Gf;this.gc=document.createElement("iframe");var c={dframe:"t"};c.id=a;c.pw=b;this.gc.src=this.jd(c);this.gc.style.display="none";document.body.appendChild(this.gc)};
	hh.isAvailable=function(){return ih||!jh&&"undefined"!==typeof document&&null!=document.createElement&&!("object"===typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href))&&!("object"===typeof Windows&&"object"===typeof Windows.Xg)&&!0};g=hh.prototype;g.Ed=function(){};g.dd=function(){this.zb=!0;this.Sa&&(this.Sa.close(),this.Sa=null);this.gc&&(document.body.removeChild(this.gc),this.gc=null);this.qb&&(clearTimeout(this.qb),this.qb=null)};
	g.gb=function(){this.zb||(this.f("Longpoll is closing itself"),this.dd(),this.la&&(this.la(this.Hc),this.la=null))};g.close=function(){this.zb||(this.f("Longpoll is being closed."),this.dd())};g.send=function(a){a=B(a);this.ob+=a.length;Ob(this.Ua,"bytes_sent",a.length);a=Ic(a);a=fb(a,!0);a=Vc(a,1840);for(var b=0;b<a.length;b++){var c=this.Sa;c.ad.push({Mg:this.hf,Ug:a.length,kf:a[b]});c.le&&nh(c);this.hf++}};function lh(a,b){var c=B(b).length;a.nb+=c;Ob(a.Ua,"bytes_received",c)}
	function kh(a,b,c,d){this.jd=d;this.hb=c;this.Pe=new pg;this.ad=[];this.te=Math.floor(1E8*Math.random());this.Xd=!0;this.he=Ec();window["pLPCommand"+this.he]=a;window["pRTLPCB"+this.he]=b;a=document.createElement("iframe");a.style.display="none";if(document.body){document.body.appendChild(a);try{a.contentWindow.document||Cb("No IE domain setting required")}catch(e){a.src="javascript:void((function(){document.open();document.domain='"+document.domain+"';document.close();})())"}}else throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";
	a.contentDocument?a.eb=a.contentDocument:a.contentWindow?a.eb=a.contentWindow.document:a.document&&(a.eb=a.document);this.Ea=a;a="";this.Ea.src&&"javascript:"===this.Ea.src.substr(0,11)&&(a='<script>document.domain="'+document.domain+'";\x3c/script>');a="<html><body>"+a+"</body></html>";try{this.Ea.eb.open(),this.Ea.eb.write(a),this.Ea.eb.close()}catch(f){Cb("frame writing exception"),f.stack&&Cb(f.stack),Cb(f)}}
	kh.prototype.close=function(){this.le=!1;if(this.Ea){this.Ea.eb.body.innerHTML="";var a=this;setTimeout(function(){null!==a.Ea&&(document.body.removeChild(a.Ea),a.Ea=null)},Math.floor(0))}var b=this.hb;b&&(this.hb=null,b())};
	function nh(a){if(a.le&&a.Xd&&a.Pe.count()<(0<a.ad.length?2:1)){a.te++;var b={};b.id=a.ug;b.pw=a.vg;b.ser=a.te;for(var b=a.jd(b),c="",d=0;0<a.ad.length;)if(1870>=a.ad[0].kf.length+30+c.length){var e=a.ad.shift(),c=c+"&seg"+d+"="+e.Mg+"&ts"+d+"="+e.Ug+"&d"+d+"="+e.kf;d++}else break;oh(a,b+c,a.te);return!0}return!1}function oh(a,b,c){function d(){a.Pe.remove(c);nh(a)}a.Pe.add(c,1);var e=setTimeout(d,Math.floor(25E3));mh(a,b,function(){clearTimeout(e);d()})}
	function mh(a,b,c){setTimeout(function(){try{if(a.Xd){var d=a.Ea.eb.createElement("script");d.type="text/javascript";d.async=!0;d.src=b;d.onload=d.onreadystatechange=function(){var a=d.readyState;a&&"loaded"!==a&&"complete"!==a||(d.onload=d.onreadystatechange=null,d.parentNode&&d.parentNode.removeChild(d),c())};d.onerror=function(){Cb("Long-poll script failed to load: "+b);a.Xd=!1;a.close()};a.Ea.eb.body.appendChild(d)}}catch(e){}},Math.floor(1))};var ph=null;"undefined"!==typeof MozWebSocket?ph=MozWebSocket:"undefined"!==typeof WebSocket&&(ph=WebSocket);function qh(a,b,c,d){this.re=a;this.f=Mc(this.re);this.frames=this.Kc=null;this.nb=this.ob=this.bf=0;this.Ua=Rb(b);a={v:"5"};"undefined"!==typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(a.r="f");c&&(a.s=c);d&&(a.ls=d);this.ef=Bc(b,Cc,a)}var rh;
	qh.prototype.open=function(a,b){this.hb=b;this.zg=a;this.f("Websocket connecting to "+this.ef);this.Hc=!1;xc.set("previous_websocket_failure",!0);try{this.ua=new ph(this.ef)}catch(c){this.f("Error instantiating WebSocket.");var d=c.message||c.data;d&&this.f(d);this.gb();return}var e=this;this.ua.onopen=function(){e.f("Websocket connected.");e.Hc=!0};this.ua.onclose=function(){e.f("Websocket connection was disconnected.");e.ua=null;e.gb()};this.ua.onmessage=function(a){if(null!==e.ua)if(a=a.data,e.nb+=
	a.length,Ob(e.Ua,"bytes_received",a.length),sh(e),null!==e.frames)th(e,a);else{a:{K(null===e.frames,"We already have a frame buffer");if(6>=a.length){var b=Number(a);if(!isNaN(b)){e.bf=b;e.frames=[];a=null;break a}}e.bf=1;e.frames=[]}null!==a&&th(e,a)}};this.ua.onerror=function(a){e.f("WebSocket error.  Closing connection.");(a=a.message||a.data)&&e.f(a);e.gb()}};qh.prototype.start=function(){};
	qh.isAvailable=function(){var a=!1;if("undefined"!==typeof navigator&&navigator.userAgent){var b=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);b&&1<b.length&&4.4>parseFloat(b[1])&&(a=!0)}return!a&&null!==ph&&!rh};qh.responsesRequiredToBeHealthy=2;qh.healthyTimeout=3E4;g=qh.prototype;g.Ed=function(){xc.remove("previous_websocket_failure")};function th(a,b){a.frames.push(b);if(a.frames.length==a.bf){var c=a.frames.join("");a.frames=null;c=nb(c);a.zg(c)}}
	g.send=function(a){sh(this);a=B(a);this.ob+=a.length;Ob(this.Ua,"bytes_sent",a.length);a=Vc(a,16384);1<a.length&&this.ua.send(String(a.length));for(var b=0;b<a.length;b++)this.ua.send(a[b])};g.dd=function(){this.zb=!0;this.Kc&&(clearInterval(this.Kc),this.Kc=null);this.ua&&(this.ua.close(),this.ua=null)};g.gb=function(){this.zb||(this.f("WebSocket is closing itself"),this.dd(),this.hb&&(this.hb(this.Hc),this.hb=null))};g.close=function(){this.zb||(this.f("WebSocket is being closed"),this.dd())};
	function sh(a){clearInterval(a.Kc);a.Kc=setInterval(function(){a.ua&&a.ua.send("0");sh(a)},Math.floor(45E3))};function uh(a){vh(this,a)}var wh=[hh,qh];function vh(a,b){var c=qh&&qh.isAvailable(),d=c&&!(xc.wf||!0===xc.get("previous_websocket_failure"));b.Wg&&(c||O("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),d=!0);if(d)a.gd=[qh];else{var e=a.gd=[];Wc(wh,function(a,b){b&&b.isAvailable()&&e.push(b)})}}function xh(a){if(0<a.gd.length)return a.gd[0];throw Error("No transports available");};function yh(a,b,c,d,e,f,h){this.id=a;this.f=Mc("c:"+this.id+":");this.jc=c;this.Wc=d;this.la=e;this.Ne=f;this.F=b;this.Md=[];this.ff=0;this.Pf=new uh(b);this.Ta=0;this.Bb=h;this.f("Connection created");zh(this)}
	function zh(a){var b=xh(a.Pf);a.J=new b("c:"+a.id+":"+a.ff++,a.F,void 0,a.Bb);a.Re=b.responsesRequiredToBeHealthy||0;var c=Ah(a,a.J),d=Bh(a,a.J);a.hd=a.J;a.cd=a.J;a.D=null;a.Ab=!1;setTimeout(function(){a.J&&a.J.open(c,d)},Math.floor(0));b=b.healthyTimeout||0;0<b&&(a.yd=setTimeout(function(){a.yd=null;a.Ab||(a.J&&102400<a.J.nb?(a.f("Connection exceeded healthy timeout but has received "+a.J.nb+" bytes.  Marking connection healthy."),a.Ab=!0,a.J.Ed()):a.J&&10240<a.J.ob?a.f("Connection exceeded healthy timeout but has sent "+
	a.J.ob+" bytes.  Leaving connection alive."):(a.f("Closing unhealthy connection after timeout."),a.close()))},Math.floor(b)))}function Bh(a,b){return function(c){b===a.J?(a.J=null,c||0!==a.Ta?1===a.Ta&&a.f("Realtime connection lost."):(a.f("Realtime connection failed."),"s-"===a.F.Ya.substr(0,2)&&(xc.remove("host:"+a.F.host),a.F.Ya=a.F.host)),a.close()):b===a.D?(a.f("Secondary connection lost."),c=a.D,a.D=null,a.hd!==c&&a.cd!==c||a.close()):a.f("closing an old connection")}}
	function Ah(a,b){return function(c){if(2!=a.Ta)if(b===a.cd){var d=Tc("t",c);c=Tc("d",c);if("c"==d){if(d=Tc("t",c),"d"in c)if(c=c.d,"h"===d){var d=c.ts,e=c.v,f=c.h;a.Nf=c.s;Ac(a.F,f);0==a.Ta&&(a.J.start(),Ch(a,a.J,d),"5"!==e&&O("Protocol version mismatch detected"),c=a.Pf,(c=1<c.gd.length?c.gd[1]:null)&&Dh(a,c))}else if("n"===d){a.f("recvd end transmission on primary");a.cd=a.D;for(c=0;c<a.Md.length;++c)a.Id(a.Md[c]);a.Md=[];Eh(a)}else"s"===d?(a.f("Connection shutdown command received. Shutting down..."),
	a.Ne&&(a.Ne(c),a.Ne=null),a.la=null,a.close()):"r"===d?(a.f("Reset packet received.  New host: "+c),Ac(a.F,c),1===a.Ta?a.close():(Fh(a),zh(a))):"e"===d?Nc("Server Error: "+c):"o"===d?(a.f("got pong on primary."),Gh(a),Hh(a)):Nc("Unknown control packet command: "+d)}else"d"==d&&a.Id(c)}else if(b===a.D)if(d=Tc("t",c),c=Tc("d",c),"c"==d)"t"in c&&(c=c.t,"a"===c?Ih(a):"r"===c?(a.f("Got a reset on secondary, closing it"),a.D.close(),a.hd!==a.D&&a.cd!==a.D||a.close()):"o"===c&&(a.f("got pong on secondary."),
	a.Mf--,Ih(a)));else if("d"==d)a.Md.push(c);else throw Error("Unknown protocol layer: "+d);else a.f("message on old connection")}}yh.prototype.Fa=function(a){Jh(this,{t:"d",d:a})};function Eh(a){a.hd===a.D&&a.cd===a.D&&(a.f("cleaning up and promoting a connection: "+a.D.re),a.J=a.D,a.D=null)}
	function Ih(a){0>=a.Mf?(a.f("Secondary connection is healthy."),a.Ab=!0,a.D.Ed(),a.D.start(),a.f("sending client ack on secondary"),a.D.send({t:"c",d:{t:"a",d:{}}}),a.f("Ending transmission on primary"),a.J.send({t:"c",d:{t:"n",d:{}}}),a.hd=a.D,Eh(a)):(a.f("sending ping on secondary."),a.D.send({t:"c",d:{t:"p",d:{}}}))}yh.prototype.Id=function(a){Gh(this);this.jc(a)};function Gh(a){a.Ab||(a.Re--,0>=a.Re&&(a.f("Primary connection is healthy."),a.Ab=!0,a.J.Ed()))}
	function Dh(a,b){a.D=new b("c:"+a.id+":"+a.ff++,a.F,a.Nf);a.Mf=b.responsesRequiredToBeHealthy||0;a.D.open(Ah(a,a.D),Bh(a,a.D));setTimeout(function(){a.D&&(a.f("Timed out trying to upgrade."),a.D.close())},Math.floor(6E4))}function Ch(a,b,c){a.f("Realtime connection established.");a.J=b;a.Ta=1;a.Wc&&(a.Wc(c,a.Nf),a.Wc=null);0===a.Re?(a.f("Primary connection is healthy."),a.Ab=!0):setTimeout(function(){Hh(a)},Math.floor(5E3))}
	function Hh(a){a.Ab||1!==a.Ta||(a.f("sending ping on primary."),Jh(a,{t:"c",d:{t:"p",d:{}}}))}function Jh(a,b){if(1!==a.Ta)throw"Connection is not connected";a.hd.send(b)}yh.prototype.close=function(){2!==this.Ta&&(this.f("Closing realtime connection."),this.Ta=2,Fh(this),this.la&&(this.la(),this.la=null))};function Fh(a){a.f("Shutting down all connections");a.J&&(a.J.close(),a.J=null);a.D&&(a.D.close(),a.D=null);a.yd&&(clearTimeout(a.yd),a.yd=null)};function Kh(a,b,c,d){this.id=Lh++;this.f=Mc("p:"+this.id+":");this.xf=this.Ee=!1;this.$={};this.qa=[];this.Yc=0;this.Vc=[];this.oa=!1;this.Za=1E3;this.Fd=3E5;this.Gb=b;this.Uc=c;this.Oe=d;this.F=a;this.sb=this.Aa=this.Ia=this.Bb=this.We=null;this.Ob=!1;this.Td={};this.Lg=0;this.nf=!0;this.Lc=this.Ge=null;Mh(this,0);He.ub().Eb("visible",this.Cg,this);-1===a.host.indexOf("fblocal")&&Ge.ub().Eb("online",this.Ag,this)}var Lh=0,Nh=0;g=Kh.prototype;
	g.Fa=function(a,b,c){var d=++this.Lg;a={r:d,a:a,b:b};this.f(B(a));K(this.oa,"sendRequest call when we're not connected not allowed.");this.Ia.Fa(a);c&&(this.Td[d]=c)};g.yf=function(a,b,c,d){var e=a.va(),f=a.path.toString();this.f("Listen called for "+f+" "+e);this.$[f]=this.$[f]||{};K(fe(a.n)||!S(a.n),"listen() called for non-default but complete query");K(!this.$[f][e],"listen() called twice for same path/queryId.");a={H:d,xd:b,Ig:a,tag:c};this.$[f][e]=a;this.oa&&Oh(this,a)};
	function Oh(a,b){var c=b.Ig,d=c.path.toString(),e=c.va();a.f("Listen on "+d+" for "+e);var f={p:d};b.tag&&(f.q=ee(c.n),f.t=b.tag);f.h=b.xd();a.Fa("q",f,function(f){var k=f.d,l=f.s;if(k&&"object"===typeof k&&v(k,"w")){var m=w(k,"w");ea(m)&&0<=Na(m,"no_index")&&O("Using an unspecified index. Consider adding "+('".indexOn": "'+c.n.g.toString()+'"')+" at "+c.path.toString()+" to your security rules for better performance")}(a.$[d]&&a.$[d][e])===b&&(a.f("listen response",f),"ok"!==l&&Ph(a,d,e),b.H&&b.H(l,
	k))})}g.M=function(a,b,c){this.Aa={ig:a,of:!1,zc:b,md:c};this.f("Authenticating using credential: "+a);Qh(this);(b=40==a.length)||(a=$c(a).Bc,b="object"===typeof a&&!0===w(a,"admin"));b&&(this.f("Admin auth credential detected.  Reducing max reconnect time."),this.Fd=3E4)};g.ge=function(a){delete this.Aa;this.oa&&this.Fa("unauth",{},function(b){a(b.s,b.d)})};
	function Qh(a){var b=a.Aa;a.oa&&b&&a.Fa("auth",{cred:b.ig},function(c){var d=c.s;c=c.d||"error";"ok"!==d&&a.Aa===b&&delete a.Aa;b.of?"ok"!==d&&b.md&&b.md(d,c):(b.of=!0,b.zc&&b.zc(d,c))})}g.Rf=function(a,b){var c=a.path.toString(),d=a.va();this.f("Unlisten called for "+c+" "+d);K(fe(a.n)||!S(a.n),"unlisten() called for non-default but complete query");if(Ph(this,c,d)&&this.oa){var e=ee(a.n);this.f("Unlisten on "+c+" for "+d);c={p:c};b&&(c.q=e,c.t=b);this.Fa("n",c)}};
	g.Me=function(a,b,c){this.oa?Rh(this,"o",a,b,c):this.Vc.push({$c:a,action:"o",data:b,H:c})};g.Cf=function(a,b,c){this.oa?Rh(this,"om",a,b,c):this.Vc.push({$c:a,action:"om",data:b,H:c})};g.Jd=function(a,b){this.oa?Rh(this,"oc",a,null,b):this.Vc.push({$c:a,action:"oc",data:null,H:b})};function Rh(a,b,c,d,e){c={p:c,d:d};a.f("onDisconnect "+b,c);a.Fa(b,c,function(a){e&&setTimeout(function(){e(a.s,a.d)},Math.floor(0))})}g.put=function(a,b,c,d){Sh(this,"p",a,b,c,d)};
	g.zf=function(a,b,c,d){Sh(this,"m",a,b,c,d)};function Sh(a,b,c,d,e,f){d={p:c,d:d};n(f)&&(d.h=f);a.qa.push({action:b,Jf:d,H:e});a.Yc++;b=a.qa.length-1;a.oa?Th(a,b):a.f("Buffering put: "+c)}function Th(a,b){var c=a.qa[b].action,d=a.qa[b].Jf,e=a.qa[b].H;a.qa[b].Jg=a.oa;a.Fa(c,d,function(d){a.f(c+" response",d);delete a.qa[b];a.Yc--;0===a.Yc&&(a.qa=[]);e&&e(d.s,d.d)})}
	g.Ue=function(a){this.oa&&(a={c:a},this.f("reportStats",a),this.Fa("s",a,function(a){"ok"!==a.s&&this.f("reportStats","Error sending stats: "+a.d)}))};
	g.Id=function(a){if("r"in a){this.f("from server: "+B(a));var b=a.r,c=this.Td[b];c&&(delete this.Td[b],c(a.b))}else{if("error"in a)throw"A server-side error has occurred: "+a.error;"a"in a&&(b=a.a,c=a.b,this.f("handleServerMessage",b,c),"d"===b?this.Gb(c.p,c.d,!1,c.t):"m"===b?this.Gb(c.p,c.d,!0,c.t):"c"===b?Uh(this,c.p,c.q):"ac"===b?(a=c.s,b=c.d,c=this.Aa,delete this.Aa,c&&c.md&&c.md(a,b)):"sd"===b?this.We?this.We(c):"msg"in c&&"undefined"!==typeof console&&console.log("FIREBASE: "+c.msg.replace("\n",
	"\nFIREBASE: ")):Nc("Unrecognized action received from server: "+B(b)+"\nAre you using the latest client?"))}};g.Wc=function(a,b){this.f("connection ready");this.oa=!0;this.Lc=(new Date).getTime();this.Oe({serverTimeOffset:a-(new Date).getTime()});this.Bb=b;if(this.nf){var c={};c["sdk.js."+hb.replace(/\./g,"-")]=1;yg()&&(c["framework.cordova"]=1);this.Ue(c)}Vh(this);this.nf=!1;this.Uc(!0)};
	function Mh(a,b){K(!a.Ia,"Scheduling a connect when we're already connected/ing?");a.sb&&clearTimeout(a.sb);a.sb=setTimeout(function(){a.sb=null;Wh(a)},Math.floor(b))}g.Cg=function(a){a&&!this.Ob&&this.Za===this.Fd&&(this.f("Window became visible.  Reducing delay."),this.Za=1E3,this.Ia||Mh(this,0));this.Ob=a};g.Ag=function(a){a?(this.f("Browser went online."),this.Za=1E3,this.Ia||Mh(this,0)):(this.f("Browser went offline.  Killing connection."),this.Ia&&this.Ia.close())};
	g.Df=function(){this.f("data client disconnected");this.oa=!1;this.Ia=null;for(var a=0;a<this.qa.length;a++){var b=this.qa[a];b&&"h"in b.Jf&&b.Jg&&(b.H&&b.H("disconnect"),delete this.qa[a],this.Yc--)}0===this.Yc&&(this.qa=[]);this.Td={};Xh(this)&&(this.Ob?this.Lc&&(3E4<(new Date).getTime()-this.Lc&&(this.Za=1E3),this.Lc=null):(this.f("Window isn't visible.  Delaying reconnect."),this.Za=this.Fd,this.Ge=(new Date).getTime()),a=Math.max(0,this.Za-((new Date).getTime()-this.Ge)),a*=Math.random(),this.f("Trying to reconnect in "+
	a+"ms"),Mh(this,a),this.Za=Math.min(this.Fd,1.3*this.Za));this.Uc(!1)};function Wh(a){if(Xh(a)){a.f("Making a connection attempt");a.Ge=(new Date).getTime();a.Lc=null;var b=q(a.Id,a),c=q(a.Wc,a),d=q(a.Df,a),e=a.id+":"+Nh++;a.Ia=new yh(e,a.F,b,c,d,function(b){O(b+" ("+a.F.toString()+")");a.xf=!0},a.Bb)}}g.yb=function(){this.Ee=!0;this.Ia?this.Ia.close():(this.sb&&(clearTimeout(this.sb),this.sb=null),this.oa&&this.Df())};g.rc=function(){this.Ee=!1;this.Za=1E3;this.Ia||Mh(this,0)};
	function Uh(a,b,c){c=c?Qa(c,function(a){return Uc(a)}).join("$"):"default";(a=Ph(a,b,c))&&a.H&&a.H("permission_denied")}function Ph(a,b,c){b=(new L(b)).toString();var d;n(a.$[b])?(d=a.$[b][c],delete a.$[b][c],0===pa(a.$[b])&&delete a.$[b]):d=void 0;return d}function Vh(a){Qh(a);r(a.$,function(b){r(b,function(b){Oh(a,b)})});for(var b=0;b<a.qa.length;b++)a.qa[b]&&Th(a,b);for(;a.Vc.length;)b=a.Vc.shift(),Rh(a,b.action,b.$c,b.data,b.H)}function Xh(a){var b;b=Ge.ub().kc;return!a.xf&&!a.Ee&&b};var V={og:function(){ih=rh=!0}};V.forceLongPolling=V.og;V.pg=function(){jh=!0};V.forceWebSockets=V.pg;V.Pg=function(a,b){a.k.Ra.We=b};V.setSecurityDebugCallback=V.Pg;V.Ye=function(a,b){a.k.Ye(b)};V.stats=V.Ye;V.Ze=function(a,b){a.k.Ze(b)};V.statsIncrementCounter=V.Ze;V.sd=function(a){return a.k.sd};V.dataUpdateCount=V.sd;V.sg=function(a,b){a.k.De=b};V.interceptServerData=V.sg;V.yg=function(a){new Ig(a)};V.onPopupOpen=V.yg;V.Ng=function(a){sg=a};V.setAuthenticationServer=V.Ng;function Q(a,b,c){this.A=a;this.W=b;this.g=c}Q.prototype.I=function(){x("Firebase.DataSnapshot.val",0,0,arguments.length);return this.A.I()};Q.prototype.val=Q.prototype.I;Q.prototype.mf=function(){x("Firebase.DataSnapshot.exportVal",0,0,arguments.length);return this.A.I(!0)};Q.prototype.exportVal=Q.prototype.mf;Q.prototype.ng=function(){x("Firebase.DataSnapshot.exists",0,0,arguments.length);return!this.A.e()};Q.prototype.exists=Q.prototype.ng;
	Q.prototype.u=function(a){x("Firebase.DataSnapshot.child",0,1,arguments.length);ga(a)&&(a=String(a));ig("Firebase.DataSnapshot.child",a);var b=new L(a),c=this.W.u(b);return new Q(this.A.Q(b),c,N)};Q.prototype.child=Q.prototype.u;Q.prototype.Da=function(a){x("Firebase.DataSnapshot.hasChild",1,1,arguments.length);ig("Firebase.DataSnapshot.hasChild",a);var b=new L(a);return!this.A.Q(b).e()};Q.prototype.hasChild=Q.prototype.Da;
	Q.prototype.C=function(){x("Firebase.DataSnapshot.getPriority",0,0,arguments.length);return this.A.C().I()};Q.prototype.getPriority=Q.prototype.C;Q.prototype.forEach=function(a){x("Firebase.DataSnapshot.forEach",1,1,arguments.length);A("Firebase.DataSnapshot.forEach",1,a,!1);if(this.A.K())return!1;var b=this;return!!this.A.P(this.g,function(c,d){return a(new Q(d,b.W.u(c),N))})};Q.prototype.forEach=Q.prototype.forEach;
	Q.prototype.wd=function(){x("Firebase.DataSnapshot.hasChildren",0,0,arguments.length);return this.A.K()?!1:!this.A.e()};Q.prototype.hasChildren=Q.prototype.wd;Q.prototype.name=function(){O("Firebase.DataSnapshot.name() being deprecated. Please use Firebase.DataSnapshot.key() instead.");x("Firebase.DataSnapshot.name",0,0,arguments.length);return this.key()};Q.prototype.name=Q.prototype.name;Q.prototype.key=function(){x("Firebase.DataSnapshot.key",0,0,arguments.length);return this.W.key()};
	Q.prototype.key=Q.prototype.key;Q.prototype.Db=function(){x("Firebase.DataSnapshot.numChildren",0,0,arguments.length);return this.A.Db()};Q.prototype.numChildren=Q.prototype.Db;Q.prototype.Ib=function(){x("Firebase.DataSnapshot.ref",0,0,arguments.length);return this.W};Q.prototype.ref=Q.prototype.Ib;function Yh(a,b){this.F=a;this.Ua=Rb(a);this.fd=null;this.da=new vb;this.Hd=1;this.Ra=null;b||0<=("object"===typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)?(this.ba=new Ae(this.F,q(this.Gb,this)),setTimeout(q(this.Uc,this,!0),0)):this.ba=this.Ra=new Kh(this.F,q(this.Gb,this),q(this.Uc,this),q(this.Oe,this));this.Sg=Sb(a,q(function(){return new Mb(this.Ua,this.ba)},this));this.uc=new Rf;
	this.Ce=new ob;var c=this;this.Cd=new vf({Xe:function(a,b,f,h){b=[];f=c.Ce.j(a.path);f.e()||(b=xf(c.Cd,new Xb(bf,a.path,f)),setTimeout(function(){h("ok")},0));return b},ae:ba});Zh(this,"connected",!1);this.la=new qc;this.M=new Sg(a,q(this.ba.M,this.ba),q(this.ba.ge,this.ba),q(this.Le,this));this.sd=0;this.De=null;this.L=new vf({Xe:function(a,b,f,h){c.ba.yf(a,f,b,function(b,e){var f=h(b,e);Ab(c.da,a.path,f)});return[]},ae:function(a,b){c.ba.Rf(a,b)}})}g=Yh.prototype;
	g.toString=function(){return(this.F.kb?"https://":"http://")+this.F.host};g.name=function(){return this.F.hc};function $h(a){a=a.Ce.j(new L(".info/serverTimeOffset")).I()||0;return(new Date).getTime()+a}function ai(a){a=a={timestamp:$h(a)};a.timestamp=a.timestamp||(new Date).getTime();return a}
	g.Gb=function(a,b,c,d){this.sd++;var e=new L(a);b=this.De?this.De(a,b):b;a=[];d?c?(b=na(b,function(a){return M(a)}),a=Ff(this.L,e,b,d)):(b=M(b),a=Bf(this.L,e,b,d)):c?(d=na(b,function(a){return M(a)}),a=Af(this.L,e,d)):(d=M(b),a=xf(this.L,new Xb(bf,e,d)));d=e;0<a.length&&(d=bi(this,e));Ab(this.da,d,a)};g.Uc=function(a){Zh(this,"connected",a);!1===a&&ci(this)};g.Oe=function(a){var b=this;Wc(a,function(a,d){Zh(b,d,a)})};g.Le=function(a){Zh(this,"authenticated",a)};
	function Zh(a,b,c){b=new L("/.info/"+b);c=M(c);var d=a.Ce;d.Wd=d.Wd.G(b,c);c=xf(a.Cd,new Xb(bf,b,c));Ab(a.da,b,c)}g.Kb=function(a,b,c,d){this.f("set",{path:a.toString(),value:b,$g:c});var e=ai(this);b=M(b,c);var e=sc(b,e),f=this.Hd++,e=wf(this.L,a,e,f,!0);wb(this.da,e);var h=this;this.ba.put(a.toString(),b.I(!0),function(b,c){var e="ok"===b;e||O("set at "+a+" failed: "+b);e=zf(h.L,f,!e);Ab(h.da,a,e);di(d,b,c)});e=ei(this,a);bi(this,e);Ab(this.da,e,[])};
	g.update=function(a,b,c){this.f("update",{path:a.toString(),value:b});var d=!0,e=ai(this),f={};r(b,function(a,b){d=!1;var c=M(a);f[b]=sc(c,e)});if(d)Cb("update() called with empty data.  Don't do anything."),di(c,"ok");else{var h=this.Hd++,k=yf(this.L,a,f,h);wb(this.da,k);var l=this;this.ba.zf(a.toString(),b,function(b,d){var e="ok"===b;e||O("update at "+a+" failed: "+b);var e=zf(l.L,h,!e),f=a;0<e.length&&(f=bi(l,a));Ab(l.da,f,e);di(c,b,d)});b=ei(this,a);bi(this,b);Ab(this.da,a,[])}};
	function ci(a){a.f("onDisconnectEvents");var b=ai(a),c=[];rc(pc(a.la,b),G,function(b,e){c=c.concat(xf(a.L,new Xb(bf,b,e)));var f=ei(a,b);bi(a,f)});a.la=new qc;Ab(a.da,G,c)}g.Jd=function(a,b){var c=this;this.ba.Jd(a.toString(),function(d,e){"ok"===d&&rg(c.la,a);di(b,d,e)})};function fi(a,b,c,d){var e=M(c);a.ba.Me(b.toString(),e.I(!0),function(c,h){"ok"===c&&a.la.nc(b,e);di(d,c,h)})}function gi(a,b,c,d,e){var f=M(c,d);a.ba.Me(b.toString(),f.I(!0),function(c,d){"ok"===c&&a.la.nc(b,f);di(e,c,d)})}
	function hi(a,b,c,d){var e=!0,f;for(f in c)e=!1;e?(Cb("onDisconnect().update() called with empty data.  Don't do anything."),di(d,"ok")):a.ba.Cf(b.toString(),c,function(e,f){if("ok"===e)for(var l in c){var m=M(c[l]);a.la.nc(b.u(l),m)}di(d,e,f)})}function ii(a,b,c){c=".info"===E(b.path)?a.Cd.Pb(b,c):a.L.Pb(b,c);yb(a.da,b.path,c)}g.yb=function(){this.Ra&&this.Ra.yb()};g.rc=function(){this.Ra&&this.Ra.rc()};
	g.Ye=function(a){if("undefined"!==typeof console){a?(this.fd||(this.fd=new Lb(this.Ua)),a=this.fd.get()):a=this.Ua.get();var b=Ra(sa(a),function(a,b){return Math.max(b.length,a)},0),c;for(c in a){for(var d=a[c],e=c.length;e<b+2;e++)c+=" ";console.log(c+d)}}};g.Ze=function(a){Ob(this.Ua,a);this.Sg.Of[a]=!0};g.f=function(a){var b="";this.Ra&&(b=this.Ra.id+":");Cb(b,arguments)};
	function di(a,b,c){a&&Db(function(){if("ok"==b)a(null);else{var d=(b||"error").toUpperCase(),e=d;c&&(e+=": "+c);e=Error(e);e.code=d;a(e)}})};function ji(a,b,c,d,e){function f(){}a.f("transaction on "+b);var h=new U(a,b);h.Eb("value",f);c={path:b,update:c,H:d,status:null,Ff:Ec(),cf:e,Lf:0,ie:function(){h.ic("value",f)},ke:null,Ba:null,pd:null,qd:null,rd:null};d=a.L.za(b,void 0)||C;c.pd=d;d=c.update(d.I());if(n(d)){cg("transaction failed: Data returned ",d,c.path);c.status=1;e=Sf(a.uc,b);var k=e.Ca()||[];k.push(c);Tf(e,k);"object"===typeof d&&null!==d&&v(d,".priority")?(k=w(d,".priority"),K(ag(k),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.")):
	k=(a.L.za(b)||C).C().I();e=ai(a);d=M(d,k);e=sc(d,e);c.qd=d;c.rd=e;c.Ba=a.Hd++;c=wf(a.L,b,e,c.Ba,c.cf);Ab(a.da,b,c);ki(a)}else c.ie(),c.qd=null,c.rd=null,c.H&&(a=new Q(c.pd,new U(a,c.path),N),c.H(null,!1,a))}function ki(a,b){var c=b||a.uc;b||li(a,c);if(null!==c.Ca()){var d=mi(a,c);K(0<d.length,"Sending zero length transaction queue");Sa(d,function(a){return 1===a.status})&&ni(a,c.path(),d)}else c.wd()&&c.P(function(b){ki(a,b)})}
	function ni(a,b,c){for(var d=Qa(c,function(a){return a.Ba}),e=a.L.za(b,d)||C,d=e,e=e.hash(),f=0;f<c.length;f++){var h=c[f];K(1===h.status,"tryToSendTransactionQueue_: items in queue should all be run.");h.status=2;h.Lf++;var k=T(b,h.path),d=d.G(k,h.qd)}d=d.I(!0);a.ba.put(b.toString(),d,function(d){a.f("transaction put response",{path:b.toString(),status:d});var e=[];if("ok"===d){d=[];for(f=0;f<c.length;f++){c[f].status=3;e=e.concat(zf(a.L,c[f].Ba));if(c[f].H){var h=c[f].rd,k=new U(a,c[f].path);d.push(q(c[f].H,
	null,null,!0,new Q(h,k,N)))}c[f].ie()}li(a,Sf(a.uc,b));ki(a);Ab(a.da,b,e);for(f=0;f<d.length;f++)Db(d[f])}else{if("datastale"===d)for(f=0;f<c.length;f++)c[f].status=4===c[f].status?5:1;else for(O("transaction at "+b.toString()+" failed: "+d),f=0;f<c.length;f++)c[f].status=5,c[f].ke=d;bi(a,b)}},e)}function bi(a,b){var c=oi(a,b),d=c.path(),c=mi(a,c);pi(a,c,d);return d}
	function pi(a,b,c){if(0!==b.length){for(var d=[],e=[],f=Qa(b,function(a){return a.Ba}),h=0;h<b.length;h++){var k=b[h],l=T(c,k.path),m=!1,t;K(null!==l,"rerunTransactionsUnderNode_: relativePath should not be null.");if(5===k.status)m=!0,t=k.ke,e=e.concat(zf(a.L,k.Ba,!0));else if(1===k.status)if(25<=k.Lf)m=!0,t="maxretry",e=e.concat(zf(a.L,k.Ba,!0));else{var z=a.L.za(k.path,f)||C;k.pd=z;var I=b[h].update(z.I());n(I)?(cg("transaction failed: Data returned ",I,k.path),l=M(I),"object"===typeof I&&null!=
	I&&v(I,".priority")||(l=l.ga(z.C())),z=k.Ba,I=ai(a),I=sc(l,I),k.qd=l,k.rd=I,k.Ba=a.Hd++,Va(f,z),e=e.concat(wf(a.L,k.path,I,k.Ba,k.cf)),e=e.concat(zf(a.L,z,!0))):(m=!0,t="nodata",e=e.concat(zf(a.L,k.Ba,!0)))}Ab(a.da,c,e);e=[];m&&(b[h].status=3,setTimeout(b[h].ie,Math.floor(0)),b[h].H&&("nodata"===t?(k=new U(a,b[h].path),d.push(q(b[h].H,null,null,!1,new Q(b[h].pd,k,N)))):d.push(q(b[h].H,null,Error(t),!1,null))))}li(a,a.uc);for(h=0;h<d.length;h++)Db(d[h]);ki(a)}}
	function oi(a,b){for(var c,d=a.uc;null!==(c=E(b))&&null===d.Ca();)d=Sf(d,c),b=H(b);return d}function mi(a,b){var c=[];qi(a,b,c);c.sort(function(a,b){return a.Ff-b.Ff});return c}function qi(a,b,c){var d=b.Ca();if(null!==d)for(var e=0;e<d.length;e++)c.push(d[e]);b.P(function(b){qi(a,b,c)})}function li(a,b){var c=b.Ca();if(c){for(var d=0,e=0;e<c.length;e++)3!==c[e].status&&(c[d]=c[e],d++);c.length=d;Tf(b,0<c.length?c:null)}b.P(function(b){li(a,b)})}
	function ei(a,b){var c=oi(a,b).path(),d=Sf(a.uc,b);Wf(d,function(b){ri(a,b)});ri(a,d);Vf(d,function(b){ri(a,b)});return c}
	function ri(a,b){var c=b.Ca();if(null!==c){for(var d=[],e=[],f=-1,h=0;h<c.length;h++)4!==c[h].status&&(2===c[h].status?(K(f===h-1,"All SENT items should be at beginning of queue."),f=h,c[h].status=4,c[h].ke="set"):(K(1===c[h].status,"Unexpected transaction status in abort"),c[h].ie(),e=e.concat(zf(a.L,c[h].Ba,!0)),c[h].H&&d.push(q(c[h].H,null,Error("set"),!1,null))));-1===f?Tf(b,null):c.length=f+1;Ab(a.da,b.path(),e);for(h=0;h<d.length;h++)Db(d[h])}};function W(){this.oc={};this.Sf=!1}W.prototype.yb=function(){for(var a in this.oc)this.oc[a].yb()};W.prototype.rc=function(){for(var a in this.oc)this.oc[a].rc()};W.prototype.ve=function(){this.Sf=!0};ca(W);W.prototype.interrupt=W.prototype.yb;W.prototype.resume=W.prototype.rc;function X(a,b){this.bd=a;this.ra=b}X.prototype.cancel=function(a){x("Firebase.onDisconnect().cancel",0,1,arguments.length);A("Firebase.onDisconnect().cancel",1,a,!0);this.bd.Jd(this.ra,a||null)};X.prototype.cancel=X.prototype.cancel;X.prototype.remove=function(a){x("Firebase.onDisconnect().remove",0,1,arguments.length);jg("Firebase.onDisconnect().remove",this.ra);A("Firebase.onDisconnect().remove",1,a,!0);fi(this.bd,this.ra,null,a)};X.prototype.remove=X.prototype.remove;
	X.prototype.set=function(a,b){x("Firebase.onDisconnect().set",1,2,arguments.length);jg("Firebase.onDisconnect().set",this.ra);bg("Firebase.onDisconnect().set",a,this.ra,!1);A("Firebase.onDisconnect().set",2,b,!0);fi(this.bd,this.ra,a,b)};X.prototype.set=X.prototype.set;
	X.prototype.Kb=function(a,b,c){x("Firebase.onDisconnect().setWithPriority",2,3,arguments.length);jg("Firebase.onDisconnect().setWithPriority",this.ra);bg("Firebase.onDisconnect().setWithPriority",a,this.ra,!1);fg("Firebase.onDisconnect().setWithPriority",2,b);A("Firebase.onDisconnect().setWithPriority",3,c,!0);gi(this.bd,this.ra,a,b,c)};X.prototype.setWithPriority=X.prototype.Kb;
	X.prototype.update=function(a,b){x("Firebase.onDisconnect().update",1,2,arguments.length);jg("Firebase.onDisconnect().update",this.ra);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.onDisconnect().update",a,this.ra);A("Firebase.onDisconnect().update",2,b,!0);
	hi(this.bd,this.ra,a,b)};X.prototype.update=X.prototype.update;function Y(a,b,c,d){this.k=a;this.path=b;this.n=c;this.lc=d}
	function si(a){var b=null,c=null;a.ma&&(b=nd(a));a.pa&&(c=pd(a));if(a.g===Qd){if(a.ma){if("[MIN_NAME]"!=md(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==typeof b)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}if(a.pa){if("[MAX_NAME]"!=od(a))throw Error("Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().");if("string"!==
	typeof c)throw Error("Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.");}}else if(a.g===N){if(null!=b&&!ag(b)||null!=c&&!ag(c))throw Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).");}else if(K(a.g instanceof Ud||a.g===$d,"unknown index type."),null!=b&&"object"===typeof b||null!=c&&"object"===typeof c)throw Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.");
	}function ti(a){if(a.ma&&a.pa&&a.ja&&(!a.ja||""===a.Nb))throw Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.");}function ui(a,b){if(!0===a.lc)throw Error(b+": You can't combine multiple orderBy calls.");}g=Y.prototype;g.Ib=function(){x("Query.ref",0,0,arguments.length);return new U(this.k,this.path)};
	g.Eb=function(a,b,c,d){x("Query.on",2,4,arguments.length);gg("Query.on",a,!1);A("Query.on",2,b,!1);var e=vi("Query.on",c,d);if("value"===a)ii(this.k,this,new id(b,e.cancel||null,e.Ma||null));else{var f={};f[a]=b;ii(this.k,this,new jd(f,e.cancel,e.Ma))}return b};
	g.ic=function(a,b,c){x("Query.off",0,3,arguments.length);gg("Query.off",a,!0);A("Query.off",2,b,!0);mb("Query.off",3,c);var d=null,e=null;"value"===a?d=new id(b||null,null,c||null):a&&(b&&(e={},e[a]=b),d=new jd(e,null,c||null));e=this.k;d=".info"===E(this.path)?e.Cd.jb(this,d):e.L.jb(this,d);yb(e.da,this.path,d)};
	g.Dg=function(a,b){function c(h){f&&(f=!1,e.ic(a,c),b.call(d.Ma,h))}x("Query.once",2,4,arguments.length);gg("Query.once",a,!1);A("Query.once",2,b,!1);var d=vi("Query.once",arguments[2],arguments[3]),e=this,f=!0;this.Eb(a,c,function(b){e.ic(a,c);d.cancel&&d.cancel.call(d.Ma,b)})};
	g.He=function(a){O("Query.limit() being deprecated. Please use Query.limitToFirst() or Query.limitToLast() instead.");x("Query.limit",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limit: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limit: Limit was already set (by another call to limit, limitToFirst, orlimitToLast.");var b=this.n.He(a);ti(b);return new Y(this.k,this.path,b,this.lc)};
	g.Ie=function(a){x("Query.limitToFirst",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToFirst: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Ie(a),this.lc)};
	g.Je=function(a){x("Query.limitToLast",1,1,arguments.length);if(!ga(a)||Math.floor(a)!==a||0>=a)throw Error("Query.limitToLast: First argument must be a positive integer.");if(this.n.ja)throw Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new Y(this.k,this.path,this.n.Je(a),this.lc)};
	g.Eg=function(a){x("Query.orderByChild",1,1,arguments.length);if("$key"===a)throw Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===a)throw Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===a)throw Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ig("Query.orderByChild",a);ui(this,"Query.orderByChild");var b=new L(a);if(b.e())throw Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");
	b=new Ud(b);b=de(this.n,b);si(b);return new Y(this.k,this.path,b,!0)};g.Fg=function(){x("Query.orderByKey",0,0,arguments.length);ui(this,"Query.orderByKey");var a=de(this.n,Qd);si(a);return new Y(this.k,this.path,a,!0)};g.Gg=function(){x("Query.orderByPriority",0,0,arguments.length);ui(this,"Query.orderByPriority");var a=de(this.n,N);si(a);return new Y(this.k,this.path,a,!0)};
	g.Hg=function(){x("Query.orderByValue",0,0,arguments.length);ui(this,"Query.orderByValue");var a=de(this.n,$d);si(a);return new Y(this.k,this.path,a,!0)};g.$d=function(a,b){x("Query.startAt",0,2,arguments.length);bg("Query.startAt",a,this.path,!0);hg("Query.startAt",b);var c=this.n.$d(a,b);ti(c);si(c);if(this.n.ma)throw Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");n(a)||(b=a=null);return new Y(this.k,this.path,c,this.lc)};
	g.td=function(a,b){x("Query.endAt",0,2,arguments.length);bg("Query.endAt",a,this.path,!0);hg("Query.endAt",b);var c=this.n.td(a,b);ti(c);si(c);if(this.n.pa)throw Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new Y(this.k,this.path,c,this.lc)};
	g.kg=function(a,b){x("Query.equalTo",1,2,arguments.length);bg("Query.equalTo",a,this.path,!1);hg("Query.equalTo",b);if(this.n.ma)throw Error("Query.equalTo: Starting point was already set (by another call to endAt or equalTo).");if(this.n.pa)throw Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.$d(a,b).td(a,b)};
	g.toString=function(){x("Query.toString",0,0,arguments.length);for(var a=this.path,b="",c=a.Z;c<a.o.length;c++)""!==a.o[c]&&(b+="/"+encodeURIComponent(String(a.o[c])));return this.k.toString()+(b||"/")};g.va=function(){var a=Uc(ee(this.n));return"{}"===a?"default":a};
	function vi(a,b,c){var d={cancel:null,Ma:null};if(b&&c)d.cancel=b,A(a,3,d.cancel,!0),d.Ma=c,mb(a,4,d.Ma);else if(b)if("object"===typeof b&&null!==b)d.Ma=b;else if("function"===typeof b)d.cancel=b;else throw Error(y(a,3,!0)+" must either be a cancel callback or a context object.");return d}Y.prototype.ref=Y.prototype.Ib;Y.prototype.on=Y.prototype.Eb;Y.prototype.off=Y.prototype.ic;Y.prototype.once=Y.prototype.Dg;Y.prototype.limit=Y.prototype.He;Y.prototype.limitToFirst=Y.prototype.Ie;
	Y.prototype.limitToLast=Y.prototype.Je;Y.prototype.orderByChild=Y.prototype.Eg;Y.prototype.orderByKey=Y.prototype.Fg;Y.prototype.orderByPriority=Y.prototype.Gg;Y.prototype.orderByValue=Y.prototype.Hg;Y.prototype.startAt=Y.prototype.$d;Y.prototype.endAt=Y.prototype.td;Y.prototype.equalTo=Y.prototype.kg;Y.prototype.toString=Y.prototype.toString;var Z={};Z.vc=Kh;Z.DataConnection=Z.vc;Kh.prototype.Rg=function(a,b){this.Fa("q",{p:a},b)};Z.vc.prototype.simpleListen=Z.vc.prototype.Rg;Kh.prototype.jg=function(a,b){this.Fa("echo",{d:a},b)};Z.vc.prototype.echo=Z.vc.prototype.jg;Kh.prototype.interrupt=Kh.prototype.yb;Z.Vf=yh;Z.RealTimeConnection=Z.Vf;yh.prototype.sendRequest=yh.prototype.Fa;yh.prototype.close=yh.prototype.close;
	Z.rg=function(a){var b=Kh.prototype.put;Kh.prototype.put=function(c,d,e,f){n(f)&&(f=a());b.call(this,c,d,e,f)};return function(){Kh.prototype.put=b}};Z.hijackHash=Z.rg;Z.Uf=zc;Z.ConnectionTarget=Z.Uf;Z.va=function(a){return a.va()};Z.queryIdentifier=Z.va;Z.tg=function(a){return a.k.Ra.$};Z.listens=Z.tg;Z.ve=function(a){a.ve()};Z.forceRestClient=Z.ve;function U(a,b){var c,d,e;if(a instanceof Yh)c=a,d=b;else{x("new Firebase",1,2,arguments.length);d=Pc(arguments[0]);c=d.Tg;"firebase"===d.domain&&Oc(d.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead");c&&"undefined"!=c||Oc("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com");d.kb||"undefined"!==typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&O("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");
	c=new zc(d.host,d.kb,c,"ws"===d.scheme||"wss"===d.scheme);d=new L(d.$c);e=d.toString();var f;!(f=!p(c.host)||0===c.host.length||!$f(c.hc))&&(f=0!==e.length)&&(e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),f=!(p(e)&&0!==e.length&&!Yf.test(e)));if(f)throw Error(y("new Firebase",1,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".');if(b)if(b instanceof W)e=b;else if(p(b))e=W.ub(),c.Od=b;else throw Error("Expected a valid Firebase.Context for second argument to new Firebase()");
	else e=W.ub();f=c.toString();var h=w(e.oc,f);h||(h=new Yh(c,e.Sf),e.oc[f]=h);c=h}Y.call(this,c,d,be,!1)}ma(U,Y);var wi=U,xi=["Firebase"],yi=aa;xi[0]in yi||!yi.execScript||yi.execScript("var "+xi[0]);for(var zi;xi.length&&(zi=xi.shift());)!xi.length&&n(wi)?yi[zi]=wi:yi=yi[zi]?yi[zi]:yi[zi]={};U.goOffline=function(){x("Firebase.goOffline",0,0,arguments.length);W.ub().yb()};U.goOnline=function(){x("Firebase.goOnline",0,0,arguments.length);W.ub().rc()};
	function Lc(a,b){K(!b||!0===a||!1===a,"Can't turn on custom loggers persistently.");!0===a?("undefined"!==typeof console&&("function"===typeof console.log?Bb=q(console.log,console):"object"===typeof console.log&&(Bb=function(a){console.log(a)})),b&&yc.set("logging_enabled",!0)):a?Bb=a:(Bb=null,yc.remove("logging_enabled"))}U.enableLogging=Lc;U.ServerValue={TIMESTAMP:{".sv":"timestamp"}};U.SDK_VERSION=hb;U.INTERNAL=V;U.Context=W;U.TEST_ACCESS=Z;
	U.prototype.name=function(){O("Firebase.name() being deprecated. Please use Firebase.key() instead.");x("Firebase.name",0,0,arguments.length);return this.key()};U.prototype.name=U.prototype.name;U.prototype.key=function(){x("Firebase.key",0,0,arguments.length);return this.path.e()?null:Ld(this.path)};U.prototype.key=U.prototype.key;
	U.prototype.u=function(a){x("Firebase.child",1,1,arguments.length);if(ga(a))a=String(a);else if(!(a instanceof L))if(null===E(this.path)){var b=a;b&&(b=b.replace(/^\/*\.info(\/|$)/,"/"));ig("Firebase.child",b)}else ig("Firebase.child",a);return new U(this.k,this.path.u(a))};U.prototype.child=U.prototype.u;U.prototype.parent=function(){x("Firebase.parent",0,0,arguments.length);var a=this.path.parent();return null===a?null:new U(this.k,a)};U.prototype.parent=U.prototype.parent;
	U.prototype.root=function(){x("Firebase.ref",0,0,arguments.length);for(var a=this;null!==a.parent();)a=a.parent();return a};U.prototype.root=U.prototype.root;U.prototype.set=function(a,b){x("Firebase.set",1,2,arguments.length);jg("Firebase.set",this.path);bg("Firebase.set",a,this.path,!1);A("Firebase.set",2,b,!0);this.k.Kb(this.path,a,null,b||null)};U.prototype.set=U.prototype.set;
	U.prototype.update=function(a,b){x("Firebase.update",1,2,arguments.length);jg("Firebase.update",this.path);if(ea(a)){for(var c={},d=0;d<a.length;++d)c[""+d]=a[d];a=c;O("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}eg("Firebase.update",a,this.path);A("Firebase.update",2,b,!0);this.k.update(this.path,a,b||null)};U.prototype.update=U.prototype.update;
	U.prototype.Kb=function(a,b,c){x("Firebase.setWithPriority",2,3,arguments.length);jg("Firebase.setWithPriority",this.path);bg("Firebase.setWithPriority",a,this.path,!1);fg("Firebase.setWithPriority",2,b);A("Firebase.setWithPriority",3,c,!0);if(".length"===this.key()||".keys"===this.key())throw"Firebase.setWithPriority failed: "+this.key()+" is a read-only object.";this.k.Kb(this.path,a,b,c||null)};U.prototype.setWithPriority=U.prototype.Kb;
	U.prototype.remove=function(a){x("Firebase.remove",0,1,arguments.length);jg("Firebase.remove",this.path);A("Firebase.remove",1,a,!0);this.set(null,a)};U.prototype.remove=U.prototype.remove;
	U.prototype.transaction=function(a,b,c){x("Firebase.transaction",1,3,arguments.length);jg("Firebase.transaction",this.path);A("Firebase.transaction",1,a,!1);A("Firebase.transaction",2,b,!0);if(n(c)&&"boolean"!=typeof c)throw Error(y("Firebase.transaction",3,!0)+"must be a boolean.");if(".length"===this.key()||".keys"===this.key())throw"Firebase.transaction failed: "+this.key()+" is a read-only object.";"undefined"===typeof c&&(c=!0);ji(this.k,this.path,a,b||null,c)};U.prototype.transaction=U.prototype.transaction;
	U.prototype.Og=function(a,b){x("Firebase.setPriority",1,2,arguments.length);jg("Firebase.setPriority",this.path);fg("Firebase.setPriority",1,a);A("Firebase.setPriority",2,b,!0);this.k.Kb(this.path.u(".priority"),a,null,b)};U.prototype.setPriority=U.prototype.Og;
	U.prototype.push=function(a,b){x("Firebase.push",0,2,arguments.length);jg("Firebase.push",this.path);bg("Firebase.push",a,this.path,!0);A("Firebase.push",2,b,!0);var c=$h(this.k),c=Fe(c),c=this.u(c);"undefined"!==typeof a&&null!==a&&c.set(a,b);return c};U.prototype.push=U.prototype.push;U.prototype.hb=function(){jg("Firebase.onDisconnect",this.path);return new X(this.k,this.path)};U.prototype.onDisconnect=U.prototype.hb;
	U.prototype.M=function(a,b,c){O("FirebaseRef.auth() being deprecated. Please use FirebaseRef.authWithCustomToken() instead.");x("Firebase.auth",1,3,arguments.length);kg("Firebase.auth",a);A("Firebase.auth",2,b,!0);A("Firebase.auth",3,b,!0);Yg(this.k.M,a,{},{remember:"none"},b,c)};U.prototype.auth=U.prototype.M;U.prototype.ge=function(a){x("Firebase.unauth",0,1,arguments.length);A("Firebase.unauth",1,a,!0);Zg(this.k.M,a)};U.prototype.unauth=U.prototype.ge;
	U.prototype.xe=function(){x("Firebase.getAuth",0,0,arguments.length);return this.k.M.xe()};U.prototype.getAuth=U.prototype.xe;U.prototype.xg=function(a,b){x("Firebase.onAuth",1,2,arguments.length);A("Firebase.onAuth",1,a,!1);mb("Firebase.onAuth",2,b);this.k.M.Eb("auth_status",a,b)};U.prototype.onAuth=U.prototype.xg;U.prototype.wg=function(a,b){x("Firebase.offAuth",1,2,arguments.length);A("Firebase.offAuth",1,a,!1);mb("Firebase.offAuth",2,b);this.k.M.ic("auth_status",a,b)};U.prototype.offAuth=U.prototype.wg;
	U.prototype.Zf=function(a,b,c){x("Firebase.authWithCustomToken",2,3,arguments.length);kg("Firebase.authWithCustomToken",a);A("Firebase.authWithCustomToken",2,b,!1);ng("Firebase.authWithCustomToken",3,c,!0);Yg(this.k.M,a,{},c||{},b)};U.prototype.authWithCustomToken=U.prototype.Zf;U.prototype.$f=function(a,b,c){x("Firebase.authWithOAuthPopup",2,3,arguments.length);mg("Firebase.authWithOAuthPopup",a);A("Firebase.authWithOAuthPopup",2,b,!1);ng("Firebase.authWithOAuthPopup",3,c,!0);ch(this.k.M,a,c,b)};
	U.prototype.authWithOAuthPopup=U.prototype.$f;U.prototype.ag=function(a,b,c){x("Firebase.authWithOAuthRedirect",2,3,arguments.length);mg("Firebase.authWithOAuthRedirect",a);A("Firebase.authWithOAuthRedirect",2,b,!1);ng("Firebase.authWithOAuthRedirect",3,c,!0);var d=this.k.M;ah(d);var e=[Kg],f=vg(c);"anonymous"===a||"firebase"===a?P(b,Mg("TRANSPORT_UNAVAILABLE")):(yc.set("redirect_client_options",f.od),bh(d,e,"/auth/"+a,f,b))};U.prototype.authWithOAuthRedirect=U.prototype.ag;
	U.prototype.bg=function(a,b,c,d){x("Firebase.authWithOAuthToken",3,4,arguments.length);mg("Firebase.authWithOAuthToken",a);A("Firebase.authWithOAuthToken",3,c,!1);ng("Firebase.authWithOAuthToken",4,d,!0);p(b)?(lg("Firebase.authWithOAuthToken",2,b),$g(this.k.M,a+"/token",{access_token:b},d,c)):(ng("Firebase.authWithOAuthToken",2,b,!1),$g(this.k.M,a+"/token",b,d,c))};U.prototype.authWithOAuthToken=U.prototype.bg;
	U.prototype.Yf=function(a,b){x("Firebase.authAnonymously",1,2,arguments.length);A("Firebase.authAnonymously",1,a,!1);ng("Firebase.authAnonymously",2,b,!0);$g(this.k.M,"anonymous",{},b,a)};U.prototype.authAnonymously=U.prototype.Yf;
	U.prototype.cg=function(a,b,c){x("Firebase.authWithPassword",2,3,arguments.length);ng("Firebase.authWithPassword",1,a,!1);og("Firebase.authWithPassword",a,"email");og("Firebase.authWithPassword",a,"password");A("Firebase.authWithPassword",2,b,!1);ng("Firebase.authWithPassword",3,c,!0);$g(this.k.M,"password",a,c,b)};U.prototype.authWithPassword=U.prototype.cg;
	U.prototype.se=function(a,b){x("Firebase.createUser",2,2,arguments.length);ng("Firebase.createUser",1,a,!1);og("Firebase.createUser",a,"email");og("Firebase.createUser",a,"password");A("Firebase.createUser",2,b,!1);this.k.M.se(a,b)};U.prototype.createUser=U.prototype.se;U.prototype.Te=function(a,b){x("Firebase.removeUser",2,2,arguments.length);ng("Firebase.removeUser",1,a,!1);og("Firebase.removeUser",a,"email");og("Firebase.removeUser",a,"password");A("Firebase.removeUser",2,b,!1);this.k.M.Te(a,b)};
	U.prototype.removeUser=U.prototype.Te;U.prototype.pe=function(a,b){x("Firebase.changePassword",2,2,arguments.length);ng("Firebase.changePassword",1,a,!1);og("Firebase.changePassword",a,"email");og("Firebase.changePassword",a,"oldPassword");og("Firebase.changePassword",a,"newPassword");A("Firebase.changePassword",2,b,!1);this.k.M.pe(a,b)};U.prototype.changePassword=U.prototype.pe;
	U.prototype.oe=function(a,b){x("Firebase.changeEmail",2,2,arguments.length);ng("Firebase.changeEmail",1,a,!1);og("Firebase.changeEmail",a,"oldEmail");og("Firebase.changeEmail",a,"newEmail");og("Firebase.changeEmail",a,"password");A("Firebase.changeEmail",2,b,!1);this.k.M.oe(a,b)};U.prototype.changeEmail=U.prototype.oe;
	U.prototype.Ve=function(a,b){x("Firebase.resetPassword",2,2,arguments.length);ng("Firebase.resetPassword",1,a,!1);og("Firebase.resetPassword",a,"email");A("Firebase.resetPassword",2,b,!1);this.k.M.Ve(a,b)};U.prototype.resetPassword=U.prototype.Ve;})();

	module.exports = Firebase;


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	CSSOM.CSSStyleDeclaration = function CSSStyleDeclaration(){
		this.length = 0;
		this.parentRule = null;

		// NON-STANDARD
		this._importants = {};
	};


	CSSOM.CSSStyleDeclaration.prototype = {

		constructor: CSSOM.CSSStyleDeclaration,

		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set.
		 */
		getPropertyValue: function(name) {
			return this[name] || "";
		},

		/**
		 *
		 * @param {string} name
		 * @param {string} value
		 * @param {string} [priority=null] "important" or null
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
		 */
		setProperty: function(name, value, priority) {
			if (this[name]) {
				// Property already exist. Overwrite it.
				var index = Array.prototype.indexOf.call(this, name);
				if (index < 0) {
					this[this.length] = name;
					this.length++;
				}
			} else {
				// New property.
				this[this.length] = name;
				this.length++;
			}
			this[name] = value;
			this._importants[name] = priority;
		},

		/**
		 *
		 * @param {string} name
		 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
		 * @return {string} the value of the property if it has been explicitly set for this declaration block.
		 * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
		 */
		removeProperty: function(name) {
			if (!(name in this)) {
				return "";
			}
			var index = Array.prototype.indexOf.call(this, name);
			if (index < 0) {
				return "";
			}
			var prevValue = this[name];
			this[name] = "";

			// That's what WebKit and Opera do
			Array.prototype.splice.call(this, index, 1);

			// That's what Firefox does
			//this[index] = ""

			return prevValue;
		},

		getPropertyCSSValue: function() {
			//FIXME
		},

		/**
		 *
		 * @param {String} name
		 */
		getPropertyPriority: function(name) {
			return this._importants[name] || "";
		},


		/**
		 *   element.style.overflow = "auto"
		 *   element.style.getPropertyShorthand("overflow-x")
		 *   -> "overflow"
		 */
		getPropertyShorthand: function() {
			//FIXME
		},

		isPropertyImplicit: function() {
			//FIXME
		},

		// Doesn't work in IE < 9
		get cssText(){
			var properties = [];
			for (var i=0, length=this.length; i < length; ++i) {
				var name = this[i];
				var value = this.getPropertyValue(name);
				var priority = this.getPropertyPriority(name);
				if (priority) {
					priority = " !" + priority;
				}
				properties[i] = name + ": " + value + priority + ";";
			}
			return properties.join(" ");
		},

		set cssText(cssText){
			var i, name;
			for (i = this.length; i--;) {
				name = this[i];
				this[name] = "";
			}
			Array.prototype.splice.call(this, 0, this.length);
			this._importants = {};

			var dummyRule = CSSOM.parse('#bogus{' + cssText + '}').cssRules[0].style;
			var length = dummyRule.length;
			for (i = 0; i < length; ++i) {
				name = dummyRule[i];
				this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
			}
		}
	};


	//.CommonJS
	exports.CSSStyleDeclaration = CSSOM.CSSStyleDeclaration;
	CSSOM.parse = __webpack_require__(49).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleDeclaration.js
	///CommonJS


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);
	var implicitSetter = __webpack_require__(1).implicitSetter;

	module.exports.isValid = function parse(v) {
	    if (typeof v !== 'string') {
	        return false;
	    }
	    return (v === '' || v.toLowerCase() === 'transparent' || parsers.valueType(v) === parsers.TYPES.COLOR);
	};
	var isValid = module.exports.isValid;

	var parser = function (v) {
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};

	module.exports.definition = {
	    set: implicitSetter('border', 'color', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var implicitSetter = __webpack_require__(1).implicitSetter;

	// the valid border-styles:
	var styles = ['none', 'hidden', 'dotted', 'dashed', 'solid', 'double', 'groove', 'ridge', 'inset', 'outset'];

	module.exports.isValid = function parse(v) {
	    return typeof v === 'string' && (v === '' || styles.indexOf(v) !== -1);
	};
	var isValid = module.exports.isValid;

	var parser = function (v) {
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};

	module.exports.definition = {
	    set: implicitSetter('border', 'style', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);
	var parsers = __webpack_require__(1);
	var implicitSetter = __webpack_require__(1).implicitSetter;

	// the valid border-widths:
	var widths = ['thin', 'medium', 'thick'];

	module.exports.isValid = function parse(v) {
	    var length = parsers.parseLength(v);
	    if (length !== undefined) {
	        return true;
	    }
	    if (typeof v !== 'string') {
	        return false;
	    }
	    if (v === '') {
	        return true;
	    }
	    v = v.toLowerCase();
	    if (widths.indexOf(v) === -1) {
	        return false;
	    }
	    return true;
	};
	var isValid = module.exports.isValid;

	var parser = function (v) {
	    var length = parsers.parseLength(v);
	    if (length !== undefined) {
	        return length;
	    }
	    if (isValid(v)) {
	        return v.toLowerCase();
	    }
	    return undefined;
	};

	module.exports.definition = {
	    set: implicitSetter('border', 'width', isValid, parser),
	    get: function () {
	        return this.getPropertyValue('border-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 23 */
/***/ function(module, exports) {

	'use strict';

	var NS = exports.NAMESPACES = {
	    HTML: 'http://www.w3.org/1999/xhtml',
	    MATHML: 'http://www.w3.org/1998/Math/MathML',
	    SVG: 'http://www.w3.org/2000/svg',
	    XLINK: 'http://www.w3.org/1999/xlink',
	    XML: 'http://www.w3.org/XML/1998/namespace',
	    XMLNS: 'http://www.w3.org/2000/xmlns/'
	};

	exports.ATTRS = {
	    TYPE: 'type',
	    ACTION: 'action',
	    ENCODING: 'encoding',
	    PROMPT: 'prompt',
	    NAME: 'name',
	    COLOR: 'color',
	    FACE: 'face',
	    SIZE: 'size'
	};

	var $ = exports.TAG_NAMES = {
	    A: 'a',
	    ADDRESS: 'address',
	    ANNOTATION_XML: 'annotation-xml',
	    APPLET: 'applet',
	    AREA: 'area',
	    ARTICLE: 'article',
	    ASIDE: 'aside',

	    B: 'b',
	    BASE: 'base',
	    BASEFONT: 'basefont',
	    BGSOUND: 'bgsound',
	    BIG: 'big',
	    BLOCKQUOTE: 'blockquote',
	    BODY: 'body',
	    BR: 'br',
	    BUTTON: 'button',

	    CAPTION: 'caption',
	    CENTER: 'center',
	    CODE: 'code',
	    COL: 'col',
	    COLGROUP: 'colgroup',
	    COMMAND: 'command',

	    DD: 'dd',
	    DESC: 'desc',
	    DETAILS: 'details',
	    DIALOG: 'dialog',
	    DIR: 'dir',
	    DIV: 'div',
	    DL: 'dl',
	    DT: 'dt',

	    EM: 'em',
	    EMBED: 'embed',

	    FIELDSET: 'fieldset',
	    FIGCAPTION: 'figcaption',
	    FIGURE: 'figure',
	    FONT: 'font',
	    FOOTER: 'footer',
	    FOREIGN_OBJECT: 'foreignObject',
	    FORM: 'form',
	    FRAME: 'frame',
	    FRAMESET: 'frameset',

	    H1: 'h1',
	    H2: 'h2',
	    H3: 'h3',
	    H4: 'h4',
	    H5: 'h5',
	    H6: 'h6',
	    HEAD: 'head',
	    HEADER: 'header',
	    HGROUP: 'hgroup',
	    HR: 'hr',
	    HTML: 'html',

	    I: 'i',
	    IMG: 'img',
	    IMAGE: 'image',
	    INPUT: 'input',
	    IFRAME: 'iframe',
	    ISINDEX: 'isindex',

	    KEYGEN: 'keygen',

	    LABEL: 'label',
	    LI: 'li',
	    LINK: 'link',
	    LISTING: 'listing',

	    MAIN: 'main',
	    MALIGNMARK: 'malignmark',
	    MARQUEE: 'marquee',
	    MATH: 'math',
	    MENU: 'menu',
	    MENUITEM: 'menuitem',
	    META: 'meta',
	    MGLYPH: 'mglyph',
	    MI: 'mi',
	    MO: 'mo',
	    MN: 'mn',
	    MS: 'ms',
	    MTEXT: 'mtext',

	    NAV: 'nav',
	    NOBR: 'nobr',
	    NOFRAMES: 'noframes',
	    NOEMBED: 'noembed',
	    NOSCRIPT: 'noscript',

	    OBJECT: 'object',
	    OL: 'ol',
	    OPTGROUP: 'optgroup',
	    OPTION: 'option',

	    P: 'p',
	    PARAM: 'param',
	    PLAINTEXT: 'plaintext',
	    PRE: 'pre',

	    RP: 'rp',
	    RT: 'rt',
	    RUBY: 'ruby',

	    S: 's',
	    SCRIPT: 'script',
	    SECTION: 'section',
	    SELECT: 'select',
	    SOURCE: 'source',
	    SMALL: 'small',
	    SPAN: 'span',
	    STRIKE: 'strike',
	    STRONG: 'strong',
	    STYLE: 'style',
	    SUB: 'sub',
	    SUMMARY: 'summary',
	    SUP: 'sup',

	    TABLE: 'table',
	    TBODY: 'tbody',
	    TEMPLATE: 'template',
	    TEXTAREA: 'textarea',
	    TFOOT: 'tfoot',
	    TD: 'td',
	    TH: 'th',
	    THEAD: 'thead',
	    TITLE: 'title',
	    TR: 'tr',
	    TRACK: 'track',
	    TT: 'tt',

	    U: 'u',
	    UL: 'ul',

	    SVG: 'svg',

	    VAR: 'var',

	    WBR: 'wbr',

	    XMP: 'xmp'
	};

	var SPECIAL_ELEMENTS = exports.SPECIAL_ELEMENTS = {};

	SPECIAL_ELEMENTS[NS.HTML] = {};
	SPECIAL_ELEMENTS[NS.HTML][$.ADDRESS] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.APPLET] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.AREA] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.ARTICLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.ASIDE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BASE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BASEFONT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BGSOUND] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BLOCKQUOTE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BODY] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.BUTTON] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.CAPTION] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.CENTER] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.COL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.COLGROUP] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DETAILS] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DIR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DIV] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.DT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.EMBED] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FIELDSET] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FIGCAPTION] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FIGURE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FOOTER] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FORM] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FRAME] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.FRAMESET] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H1] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H2] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H3] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H4] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H5] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.H6] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HEAD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HEADER] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HGROUP] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.HTML] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.IFRAME] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.IMG] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.INPUT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.ISINDEX] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.LI] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.LINK] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.LISTING] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.MAIN] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.MARQUEE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.MENU] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.MENUITEM] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.META] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NAV] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NOEMBED] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NOFRAMES] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.NOSCRIPT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.OBJECT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.OL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.P] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.PARAM] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.PLAINTEXT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.PRE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SCRIPT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SECTION] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SELECT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SOURCE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.STYLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.SUMMARY] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TABLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TBODY] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TEMPLATE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TEXTAREA] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TFOOT] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TH] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.THEAD] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TITLE] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.TRACK] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.UL] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.WBR] = true;
	SPECIAL_ELEMENTS[NS.HTML][$.XMP] = true;

	SPECIAL_ELEMENTS[NS.MATHML] = {};
	SPECIAL_ELEMENTS[NS.MATHML][$.MI] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MO] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MN] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MS] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.MTEXT] = true;
	SPECIAL_ELEMENTS[NS.MATHML][$.ANNOTATION_XML] = true;

	SPECIAL_ELEMENTS[NS.SVG] = {};
	SPECIAL_ELEMENTS[NS.SVG][$.TITLE] = true;
	SPECIAL_ELEMENTS[NS.SVG][$.FOREIGN_OBJECT] = true;
	SPECIAL_ELEMENTS[NS.SVG][$.DESC] = true;


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _config = __webpack_require__(57);

	var _config2 = _interopRequireDefault(_config);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	//Set default log level to debug
	var logLevel = 'debug';
	// if (config.envName == 'production') {
	// 	logLevel = 'warn';
	// }
	//Set log level from config
	if (_config2['default'].logLevel) {
		logLevel = _config2['default'].logLevel;
	}
	var logger = {
		log: function log(logData) {
			var msgArgs = buildMessageArgs(logData);
			if (logLevel === 'trace') {
				runConsoleMethod('log', msgArgs);
			}
		},
		debug: function debug(logData) {
			var msgArgs = buildMessageArgs(logData);
			if (logLevel === 'trace' || logLevel === 'debug') {
				runConsoleMethod('debug', msgArgs);
			}
		},
		info: function info(logData) {
			if (logLevel === 'trace' || logLevel === 'debug' || logLevel === 'info') {
				var msgArgs = buildMessageArgs(logData);
				runConsoleMethod('info', msgArgs);
			} else {
				console.info('Info called, but incorrect log level', logLevel);
			}
		},
		warn: function warn(logData) {
			var msgArgs = buildMessageArgs(logData);
			if (logLevel === 'trace' || logLevel === 'debug' || logLevel === 'info' || logLevel === 'warn') {
				runConsoleMethod('warn', msgArgs);
			}
		},
		error: function error(logData) {
			var msgArgs = buildMessageArgs(logData);
			if (logLevel === 'trace' || logLevel === 'debug' || logLevel === 'info' || logLevel === 'warn' || logLevel === 'error' || logLevel === 'fatal') {
				runConsoleMethod('error', msgArgs);
			}
		}
	};

	exports['default'] = logger;

	function runConsoleMethod(methodName, methodData) {
		//Safley run console methods or use console log
		if (methodName && console[methodName]) {
			return console[methodName].apply(console, methodData);
		} else {
			return console.log.apply(console, methodData);
		}
	}
	function buildMessageArgs(logData) {
		var msgStr = '';
		var msgObj = {};
		//TODO: Attach time stamp
		//Attach location information to the beginning of message
		if (_lodash2['default'].isObject(logData)) {
			if (logLevel == 'debug') {
				if (_lodash2['default'].has(logData, 'func')) {
					if (_lodash2['default'].has(logData, 'obj')) {
						//Object and function provided
						msgStr += '[' + logData.obj + '.' + logData.func + '()]\n ';
					} else if (_lodash2['default'].has(logData, 'file')) {
						msgStr += '[' + logData.file + ' > ' + logData.func + '()]\n ';
					} else {
						msgStr += '[' + logData.func + '()]\n ';
					}
				}
			}
			//Print each key and its value other than obj and func
			_lodash2['default'].each(_lodash2['default'].omit(_lodash2['default'].keys(logData)), function (key) {
				if (key != 'func' && key != 'obj') {
					if (key == 'description' || key == 'message') {
						msgStr += logData[key];
					} else if (_lodash2['default'].isString(logData[key])) {
						// msgStr += key + ': ' + logData[key] + ', ';
						msgObj[key] = logData[key];
					} else {
						//Print objects differently
						// msgStr += key + ': ' + logData[key] + ', ';
						msgObj[key] = logData[key];
					}
				}
			});
			msgStr += '\n';
		} else if (_lodash2['default'].isString(logData)) {
			msgStr = logData;
		}
		var msg = [msgStr, msgObj];

		return msg;
	}
	module.exports = exports['default'];

/***/ },
/* 25 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 26 */
/***/ function(module, exports) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});
	var config = {
		serverUrl: 'http://tessellate.elasticbeanstalk.com',
		tokenName: 'grout',
		fbUrl: 'https://kyper-tech.firebaseio.com/tessellate',
		appName: 'tessellate',
		matterOptions: {
			localServer: false
		},
		aws: {
			region: 'us-east-1',
			cognito: {
				poolId: 'us-east-1:72a20ffd-c638-48b0-b234-3312b3e64b2e',
				params: {
					AuthRoleArn: 'arn:aws:iam::823322155619:role/Cognito_TessellateUnauth_Role',
					UnauthRoleArn: 'arn:aws:iam::823322155619:role/Cognito_TessellateAuth_Role'
				}
			}
		}
	};
	//Set server to local server if developing
	// if (typeof window != 'undefined' && (window.location.hostname == '' || window.location.hostname == 'localhost')) {
	// 	config.serverUrl = 'http://localhost:4000';
	// }
	exports['default'] = config;
	module.exports = exports['default'];

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var xnv = __webpack_require__(609);

	// https://dom.spec.whatwg.org/#validate

	exports.name = function (name, core) {
	  try {
	    xnv.name(name);
	  } catch (e) {
	    throw new core.DOMException(core.DOMException.INVALID_CHARACTER_ERR,
	      "\"" + name + "\" did not match the Name production: " + e.message);
	  }
	};

	exports.qname = function (qname, core) {
	  exports.name(qname, core);

	  try {
	    xnv.qname(qname);
	  } catch (e) {
	    throw new core.DOMException(core.DOMException.NAMESPACE_ERR,
	      "\"" + qname + "\" did not match the QName production: " + e.message);
	  }
	};

	exports.validateAndExtract = function (namespace, qualifiedName, core) {
	  if (namespace === "") {
	    namespace = null;
	  }

	  exports.qname(qualifiedName, core);

	  var prefix = null;
	  var localName = qualifiedName;

	  var colonIndex = qualifiedName.indexOf(":");
	  if (colonIndex !== -1) {
	    prefix = qualifiedName.substring(0, colonIndex);
	    localName = qualifiedName.substring(colonIndex + 1);
	  }

	  if (prefix !== null && namespace === null) {
	    throw new core.DOMException(core.DOMException.NAMESPACE_ERR,
	      "A namespace was given but a prefix was also extracted from the qualifiedName");
	  }

	  if (prefix === "xml" && namespace !== "http://www.w3.org/XML/1998/namespace") {
	    throw new core.DOMException(core.DOMException.NAMESPACE_ERR,
	      "A prefix of \"xml\" was given but the namespace was not the XML namespace");
	  }

	  if ((qualifiedName === "xmlns" || prefix === "xmlns") && namespace !== "http://www.w3.org/2000/xmlns/") {
	    throw new core.DOMException(core.DOMException.NAMESPACE_ERR,
	      "A prefix or qualifiedName of \"xmlns\" was given but the namespace was not the XMLNS namespace");
	  }

	  if (namespace === "http://www.w3.org/2000/xmlns/" && qualifiedName !== "xmlns" && prefix !== "xmlns") {
	    throw new core.DOMException(core.DOMException.NAMESPACE_ERR,
	      "The XMLNS namespace was given but neither the prefix nor qualifiedName was \"xmlns\"");
	  }

	  return { namespace: namespace, prefix: prefix, localName: localName, qualifiedName: qualifiedName };
	};


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var Parser = __webpack_require__(114),
	    DomHandler = __webpack_require__(582);

	function defineProp(name, value){
		delete module.exports[name];
		module.exports[name] = value;
		return value;
	}

	module.exports = {
		Parser: Parser,
		Tokenizer: __webpack_require__(115),
		ElementType: __webpack_require__(29),
		DomHandler: DomHandler,
		get FeedHandler(){
			return defineProp("FeedHandler", __webpack_require__(579));
		},
		get Stream(){
			return defineProp("Stream", __webpack_require__(581));
		},
		get WritableStream(){
			return defineProp("WritableStream", __webpack_require__(116));
		},
		get ProxyHandler(){
			return defineProp("ProxyHandler", __webpack_require__(580));
		},
		get DomUtils(){
			return defineProp("DomUtils", __webpack_require__(584));
		},
		get CollectingHandler(){
			return defineProp("CollectingHandler", __webpack_require__(578));
		},
		// For legacy support
		DefaultHandler: DomHandler,
		get RssHandler(){
			return defineProp("RssHandler", this.FeedHandler);
		},
		//helper methods
		parseDOM: function(data, options){
			var handler = new DomHandler(options);
			new Parser(handler, options).end(data);
			return handler.dom;
		},
		parseFeed: function(feed, options){
			var handler = new module.exports.FeedHandler(options);
			new Parser(handler, options).end(feed);
			return handler.dom;
		},
		createDomStream: function(cb, options, elementCb){
			var handler = new DomHandler(cb, options, elementCb);
			return new Parser(handler, options);
		},
		// List of all events that the parser emits
		EVENTS: { /* Format: eventname: number of arguments */
			attribute: 2,
			cdatastart: 0,
			cdataend: 0,
			text: 1,
			processinginstruction: 2,
			comment: 1,
			commentend: 0,
			closetag: 1,
			opentag: 2,
			opentagname: 1,
			error: 1,
			end: 0
		}
	};


/***/ },
/* 29 */
/***/ function(module, exports) {

	//Types of elements found in the DOM
	module.exports = {
		Text: "text", //Text
		Directive: "directive", //<? ... ?>
		Comment: "comment", //<!-- ... -->
		Script: "script", //<script> tags
		Style: "style", //<style> tags
		Tag: "tag", //Any tag
		CDATA: "cdata", //<![CDATA[ ... ]]>
		Doctype: "doctype",

		isTag: function(elem){
			return elem.type === "tag" || elem.type === "script" || elem.type === "style";
		}
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Preprocessor = __webpack_require__(604),
	    LocationInfoMixin = __webpack_require__(602),
	    UNICODE = __webpack_require__(36),
	    NAMED_ENTITY_TRIE = __webpack_require__(603);

	//Aliases
	var $ = UNICODE.CODE_POINTS,
	    $$ = UNICODE.CODE_POINT_SEQUENCES;

	//Replacement code points for numeric entities
	var NUMERIC_ENTITY_REPLACEMENTS = {
	    0x00: 0xFFFD, 0x0D: 0x000D, 0x80: 0x20AC, 0x81: 0x0081, 0x82: 0x201A, 0x83: 0x0192, 0x84: 0x201E,
	    0x85: 0x2026, 0x86: 0x2020, 0x87: 0x2021, 0x88: 0x02C6, 0x89: 0x2030, 0x8A: 0x0160, 0x8B: 0x2039,
	    0x8C: 0x0152, 0x8D: 0x008D, 0x8E: 0x017D, 0x8F: 0x008F, 0x90: 0x0090, 0x91: 0x2018, 0x92: 0x2019,
	    0x93: 0x201C, 0x94: 0x201D, 0x95: 0x2022, 0x96: 0x2013, 0x97: 0x2014, 0x98: 0x02DC, 0x99: 0x2122,
	    0x9A: 0x0161, 0x9B: 0x203A, 0x9C: 0x0153, 0x9D: 0x009D, 0x9E: 0x017E, 0x9F: 0x0178
	};

	//States
	var DATA_STATE = 'DATA_STATE',
	    CHARACTER_REFERENCE_IN_DATA_STATE = 'CHARACTER_REFERENCE_IN_DATA_STATE',
	    RCDATA_STATE = 'RCDATA_STATE',
	    CHARACTER_REFERENCE_IN_RCDATA_STATE = 'CHARACTER_REFERENCE_IN_RCDATA_STATE',
	    RAWTEXT_STATE = 'RAWTEXT_STATE',
	    SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE',
	    PLAINTEXT_STATE = 'PLAINTEXT_STATE',
	    TAG_OPEN_STATE = 'TAG_OPEN_STATE',
	    END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE',
	    TAG_NAME_STATE = 'TAG_NAME_STATE',
	    RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE',
	    RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE',
	    RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE',
	    RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE',
	    RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE',
	    RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE',
	    SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE',
	    SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE',
	    SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE',
	    SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE',
	    SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE',
	    SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE',
	    SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE',
	    SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE',
	    SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE',
	    SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE',
	    SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE',
	    SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE',
	    BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE',
	    ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE',
	    AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE',
	    BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE',
	    ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE',
	    ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE',
	    ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE',
	    CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE = 'CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE',
	    AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE',
	    SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE',
	    BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE',
	    MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE',
	    COMMENT_START_STATE = 'COMMENT_START_STATE',
	    COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE',
	    COMMENT_STATE = 'COMMENT_STATE',
	    COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE',
	    COMMENT_END_STATE = 'COMMENT_END_STATE',
	    COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE',
	    DOCTYPE_STATE = 'DOCTYPE_STATE',
	    BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE',
	    DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE',
	    AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE',
	    AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE',
	    BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
	    DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE',
	    DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE',
	    AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE',
	    BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE',
	    AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE',
	    BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
	    DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE',
	    DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE',
	    AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE',
	    BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE',
	    CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';

	//Utils

	//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
	//this functions if they will be situated in another module due to context switch.
	//Always perform inlining check before modifying this functions ('node --trace-inlining').
	function isWhitespace(cp) {
	    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;
	}

	function isAsciiDigit(cp) {
	    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;
	}

	function isAsciiUpper(cp) {
	    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;
	}

	function isAsciiLower(cp) {
	    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;
	}

	function isAsciiAlphaNumeric(cp) {
	    return isAsciiDigit(cp) || isAsciiUpper(cp) || isAsciiLower(cp);
	}

	function isDigit(cp, isHex) {
	    return isAsciiDigit(cp) || (isHex && ((cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_F) ||
	                                          (cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_F)));
	}

	function isReservedCodePoint(cp) {
	    return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
	}

	function toAsciiLowerCodePoint(cp) {
	    return cp + 0x0020;
	}

	//NOTE: String.fromCharCode() function can handle only characters from BMP subset.
	//So, we need to workaround this manually.
	//(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)
	function toChar(cp) {
	    if (cp <= 0xFFFF)
	        return String.fromCharCode(cp);

	    cp -= 0x10000;
	    return String.fromCharCode(cp >>> 10 & 0x3FF | 0xD800) + String.fromCharCode(0xDC00 | cp & 0x3FF);
	}

	function toAsciiLowerChar(cp) {
	    return String.fromCharCode(toAsciiLowerCodePoint(cp));
	}

	//Tokenizer
	var Tokenizer = module.exports = function (html, options) {
	    this.disableEntitiesDecoding = false;

	    this.preprocessor = new Preprocessor(html);

	    this.tokenQueue = [];

	    this.allowCDATA = false;

	    this.state = DATA_STATE;
	    this.returnState = '';

	    this.consumptionPos = 0;

	    this.tempBuff = [];
	    this.additionalAllowedCp = void 0;
	    this.lastStartTagName = '';

	    this.currentCharacterToken = null;
	    this.currentToken = null;
	    this.currentAttr = null;

	    if (options) {
	        this.disableEntitiesDecoding = !options.decodeHtmlEntities;

	        if (options.locationInfo)
	            LocationInfoMixin.assign(this);
	    }
	};

	//Token types
	Tokenizer.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
	Tokenizer.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
	Tokenizer.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
	Tokenizer.START_TAG_TOKEN = 'START_TAG_TOKEN';
	Tokenizer.END_TAG_TOKEN = 'END_TAG_TOKEN';
	Tokenizer.COMMENT_TOKEN = 'COMMENT_TOKEN';
	Tokenizer.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
	Tokenizer.EOF_TOKEN = 'EOF_TOKEN';

	//Tokenizer initial states for different modes
	Tokenizer.MODE = Tokenizer.prototype.MODE = {
	    DATA: DATA_STATE,
	    RCDATA: RCDATA_STATE,
	    RAWTEXT: RAWTEXT_STATE,
	    SCRIPT_DATA: SCRIPT_DATA_STATE,
	    PLAINTEXT: PLAINTEXT_STATE
	};

	//Static
	Tokenizer.getTokenAttr = function (token, attrName) {
	    for (var i = token.attrs.length - 1; i >= 0; i--) {
	        if (token.attrs[i].name === attrName)
	            return token.attrs[i].value;
	    }

	    return null;
	};

	//Get token
	Tokenizer.prototype.getNextToken = function () {
	    while (!this.tokenQueue.length)
	        this[this.state](this._consume());

	    return this.tokenQueue.shift();
	};

	//Consumption
	Tokenizer.prototype._consume = function () {
	    this.consumptionPos++;
	    return this.preprocessor.advanceAndPeekCodePoint();
	};

	Tokenizer.prototype._unconsume = function () {
	    this.consumptionPos--;
	    this.preprocessor.retreat();
	};

	Tokenizer.prototype._unconsumeSeveral = function (count) {
	    while (count--)
	        this._unconsume();
	};

	Tokenizer.prototype._reconsumeInState = function (state) {
	    this.state = state;
	    this._unconsume();
	};

	Tokenizer.prototype._consumeSubsequentIfMatch = function (pattern, startCp, caseSensitive) {
	    var rollbackPos = this.consumptionPos,
	        isMatch = true,
	        patternLength = pattern.length,
	        patternPos = 0,
	        cp = startCp,
	        patternCp = void 0;

	    for (; patternPos < patternLength; patternPos++) {
	        if (patternPos > 0)
	            cp = this._consume();

	        if (cp === $.EOF) {
	            isMatch = false;
	            break;
	        }

	        patternCp = pattern[patternPos];

	        if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
	            isMatch = false;
	            break;
	        }
	    }

	    if (!isMatch)
	        this._unconsumeSeveral(this.consumptionPos - rollbackPos);

	    return isMatch;
	};

	//Lookahead
	Tokenizer.prototype._lookahead = function () {
	    var cp = this.preprocessor.advanceAndPeekCodePoint();
	    this.preprocessor.retreat();

	    return cp;
	};

	//Temp buffer
	Tokenizer.prototype.isTempBufferEqualToScriptString = function () {
	    if (this.tempBuff.length !== $$.SCRIPT_STRING.length)
	        return false;

	    for (var i = 0; i < this.tempBuff.length; i++) {
	        if (this.tempBuff[i] !== $$.SCRIPT_STRING[i])
	            return false;
	    }

	    return true;
	};

	//Token creation
	Tokenizer.prototype.buildStartTagToken = function (tagName) {
	    return {
	        type: Tokenizer.START_TAG_TOKEN,
	        tagName: tagName,
	        selfClosing: false,
	        attrs: []
	    };
	};

	Tokenizer.prototype.buildEndTagToken = function (tagName) {
	    return {
	        type: Tokenizer.END_TAG_TOKEN,
	        tagName: tagName,
	        ignored: false,
	        attrs: []
	    };
	};

	Tokenizer.prototype._createStartTagToken = function (tagNameFirstCh) {
	    this.currentToken = this.buildStartTagToken(tagNameFirstCh);
	};

	Tokenizer.prototype._createEndTagToken = function (tagNameFirstCh) {
	    this.currentToken = this.buildEndTagToken(tagNameFirstCh);
	};

	Tokenizer.prototype._createCommentToken = function () {
	    this.currentToken = {
	        type: Tokenizer.COMMENT_TOKEN,
	        data: ''
	    };
	};

	Tokenizer.prototype._createDoctypeToken = function (doctypeNameFirstCh) {
	    this.currentToken = {
	        type: Tokenizer.DOCTYPE_TOKEN,
	        name: doctypeNameFirstCh || '',
	        forceQuirks: false,
	        publicId: null,
	        systemId: null
	    };
	};

	Tokenizer.prototype._createCharacterToken = function (type, ch) {
	    this.currentCharacterToken = {
	        type: type,
	        chars: ch
	    };
	};

	//Tag attributes
	Tokenizer.prototype._createAttr = function (attrNameFirstCh) {
	    this.currentAttr = {
	        name: attrNameFirstCh,
	        value: ''
	    };
	};

	Tokenizer.prototype._isDuplicateAttr = function () {
	    return Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) !== null;
	};

	Tokenizer.prototype._leaveAttrName = function (toState) {
	    this.state = toState;

	    if (!this._isDuplicateAttr())
	        this.currentToken.attrs.push(this.currentAttr);
	};

	//Appropriate end tag token
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#appropriate-end-tag-token)
	Tokenizer.prototype._isAppropriateEndTagToken = function () {
	    return this.lastStartTagName === this.currentToken.tagName;
	};

	//Token emission
	Tokenizer.prototype._emitCurrentToken = function () {
	    this._emitCurrentCharacterToken();

	    //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.
	    if (this.currentToken.type === Tokenizer.START_TAG_TOKEN)
	        this.lastStartTagName = this.currentToken.tagName;

	    this.tokenQueue.push(this.currentToken);
	    this.currentToken = null;
	};

	Tokenizer.prototype._emitCurrentCharacterToken = function () {
	    if (this.currentCharacterToken) {
	        this.tokenQueue.push(this.currentCharacterToken);
	        this.currentCharacterToken = null;
	    }
	};

	Tokenizer.prototype._emitEOFToken = function () {
	    this._emitCurrentCharacterToken();
	    this.tokenQueue.push({type: Tokenizer.EOF_TOKEN});
	};

	//Characters emission

	//OPTIMIZATION: specification uses only one type of character tokens (one token per character).
	//This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
	//If we have a sequence of characters that belong to the same group, parser can process it
	//as a single solid character token.
	//So, there are 3 types of character tokens in parse5:
	//1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
	//2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
	//3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
	Tokenizer.prototype._appendCharToCurrentCharacterToken = function (type, ch) {
	    if (this.currentCharacterToken && this.currentCharacterToken.type !== type)
	        this._emitCurrentCharacterToken();

	    if (this.currentCharacterToken)
	        this.currentCharacterToken.chars += ch;

	    else
	        this._createCharacterToken(type, ch);
	};

	Tokenizer.prototype._emitCodePoint = function (cp) {
	    var type = Tokenizer.CHARACTER_TOKEN;

	    if (isWhitespace(cp))
	        type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;

	    else if (cp === $.NULL)
	        type = Tokenizer.NULL_CHARACTER_TOKEN;

	    this._appendCharToCurrentCharacterToken(type, toChar(cp));
	};

	Tokenizer.prototype._emitSeveralCodePoints = function (codePoints) {
	    for (var i = 0; i < codePoints.length; i++)
	        this._emitCodePoint(codePoints[i]);
	};

	//NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
	//So we can avoid additional checks here.
	Tokenizer.prototype._emitChar = function (ch) {
	    this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
	};

	//Character reference tokenization
	Tokenizer.prototype._consumeNumericEntity = function (isHex) {
	    var digits = '',
	        nextCp = void 0;

	    do {
	        digits += toChar(this._consume());
	        nextCp = this._lookahead();
	    } while (nextCp !== $.EOF && isDigit(nextCp, isHex));

	    if (this._lookahead() === $.SEMICOLON)
	        this._consume();

	    var referencedCp = parseInt(digits, isHex ? 16 : 10),
	        replacement = NUMERIC_ENTITY_REPLACEMENTS[referencedCp];

	    if (replacement)
	        return replacement;

	    if (isReservedCodePoint(referencedCp))
	        return $.REPLACEMENT_CHARACTER;

	    return referencedCp;
	};

	Tokenizer.prototype._consumeNamedEntity = function (startCp, inAttr) {
	    var referencedCodePoints = null,
	        entityCodePointsCount = 0,
	        cp = startCp,
	        leaf = NAMED_ENTITY_TRIE[cp],
	        consumedCount = 1,
	        semicolonTerminated = false;

	    for (; leaf && cp !== $.EOF; cp = this._consume(), consumedCount++, leaf = leaf.l && leaf.l[cp]) {
	        if (leaf.c) {
	            //NOTE: we have at least one named reference match. But we don't stop lookup at this point,
	            //because longer matches still can be found (e.g. '&not' and '&notin;') except the case
	            //then found match is terminated by semicolon.
	            referencedCodePoints = leaf.c;
	            entityCodePointsCount = consumedCount;

	            if (cp === $.SEMICOLON) {
	                semicolonTerminated = true;
	                break;
	            }
	        }
	    }

	    if (referencedCodePoints) {
	        if (!semicolonTerminated) {
	            //NOTE: unconsume excess (e.g. 'it' in '&notit')
	            this._unconsumeSeveral(consumedCount - entityCodePointsCount);

	            //NOTE: If the character reference is being consumed as part of an attribute and the next character
	            //is either a U+003D EQUALS SIGN character (=) or an alphanumeric ASCII character, then, for historical
	            //reasons, all the characters that were matched after the U+0026 AMPERSAND character (&) must be
	            //unconsumed, and nothing is returned.
	            //However, if this next character is in fact a U+003D EQUALS SIGN character (=), then this is a
	            //parse error, because some legacy user agents will misinterpret the markup in those cases.
	            //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references)
	            if (inAttr) {
	                var nextCp = this._lookahead();

	                if (nextCp === $.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp)) {
	                    this._unconsumeSeveral(entityCodePointsCount);
	                    return null;
	                }
	            }
	        }

	        return referencedCodePoints;
	    }

	    this._unconsumeSeveral(consumedCount);

	    return null;
	};

	Tokenizer.prototype._consumeCharacterReference = function (startCp, inAttr) {
	    if (this.disableEntitiesDecoding || isWhitespace(startCp) || startCp === $.GREATER_THAN_SIGN ||
	        startCp === $.AMPERSAND || startCp === this.additionalAllowedCp || startCp === $.EOF) {
	        //NOTE: not a character reference. No characters are consumed, and nothing is returned.
	        this._unconsume();
	        return null;
	    }

	    else if (startCp === $.NUMBER_SIGN) {
	        //NOTE: we have a numeric entity candidate, now we should determine if it's hex or decimal
	        var isHex = false,
	            nextCp = this._lookahead();

	        if (nextCp === $.LATIN_SMALL_X || nextCp === $.LATIN_CAPITAL_X) {
	            this._consume();
	            isHex = true;
	        }

	        nextCp = this._lookahead();

	        //NOTE: if we have at least one digit this is a numeric entity for sure, so we consume it
	        if (nextCp !== $.EOF && isDigit(nextCp, isHex))
	            return [this._consumeNumericEntity(isHex)];

	        else {
	            //NOTE: otherwise this is a bogus number entity and a parse error. Unconsume the number sign
	            //and the 'x'-character if appropriate.
	            this._unconsumeSeveral(isHex ? 2 : 1);
	            return null;
	        }
	    }

	    else
	        return this._consumeNamedEntity(startCp, inAttr);
	};

	//State machine
	var _ = Tokenizer.prototype;

	//12.2.4.1 Data state
	//------------------------------------------------------------------
	_[DATA_STATE] = function dataState(cp) {
	    if (cp === $.AMPERSAND)
	        this.state = CHARACTER_REFERENCE_IN_DATA_STATE;

	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = TAG_OPEN_STATE;

	    else if (cp === $.NULL)
	        this._emitCodePoint(cp);

	    else if (cp === $.EOF)
	        this._emitEOFToken();

	    else
	        this._emitCodePoint(cp);
	};


	//12.2.4.2 Character reference in data state
	//------------------------------------------------------------------
	_[CHARACTER_REFERENCE_IN_DATA_STATE] = function characterReferenceInDataState(cp) {
	    this.state = DATA_STATE;
	    this.additionalAllowedCp = void 0;

	    var referencedCodePoints = this._consumeCharacterReference(cp, false);

	    if (referencedCodePoints)
	        this._emitSeveralCodePoints(referencedCodePoints);
	    else
	        this._emitChar('&');
	};


	//12.2.4.3 RCDATA state
	//------------------------------------------------------------------
	_[RCDATA_STATE] = function rcdataState(cp) {
	    if (cp === $.AMPERSAND)
	        this.state = CHARACTER_REFERENCE_IN_RCDATA_STATE;

	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = RCDATA_LESS_THAN_SIGN_STATE;

	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

	    else if (cp === $.EOF)
	        this._emitEOFToken();

	    else
	        this._emitCodePoint(cp);
	};


	//12.2.4.4 Character reference in RCDATA state
	//------------------------------------------------------------------
	_[CHARACTER_REFERENCE_IN_RCDATA_STATE] = function characterReferenceInRcdataState(cp) {
	    this.state = RCDATA_STATE;
	    this.additionalAllowedCp = void 0;

	    var referencedCodePoints = this._consumeCharacterReference(cp, false);

	    if (referencedCodePoints)
	        this._emitSeveralCodePoints(referencedCodePoints);
	    else
	        this._emitChar('&');
	};


	//12.2.4.5 RAWTEXT state
	//------------------------------------------------------------------
	_[RAWTEXT_STATE] = function rawtextState(cp) {
	    if (cp === $.LESS_THAN_SIGN)
	        this.state = RAWTEXT_LESS_THAN_SIGN_STATE;

	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

	    else if (cp === $.EOF)
	        this._emitEOFToken();

	    else
	        this._emitCodePoint(cp);
	};


	//12.2.4.6 Script data state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_STATE] = function scriptDataState(cp) {
	    if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;

	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

	    else if (cp === $.EOF)
	        this._emitEOFToken();

	    else
	        this._emitCodePoint(cp);
	};


	//12.2.4.7 PLAINTEXT state
	//------------------------------------------------------------------
	_[PLAINTEXT_STATE] = function plaintextState(cp) {
	    if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

	    else if (cp === $.EOF)
	        this._emitEOFToken();

	    else
	        this._emitCodePoint(cp);
	};


	//12.2.4.8 Tag open state
	//------------------------------------------------------------------
	_[TAG_OPEN_STATE] = function tagOpenState(cp) {
	    if (cp === $.EXCLAMATION_MARK)
	        this.state = MARKUP_DECLARATION_OPEN_STATE;

	    else if (cp === $.SOLIDUS)
	        this.state = END_TAG_OPEN_STATE;

	    else if (isAsciiUpper(cp)) {
	        this._createStartTagToken(toAsciiLowerChar(cp));
	        this.state = TAG_NAME_STATE;
	    }

	    else if (isAsciiLower(cp)) {
	        this._createStartTagToken(toChar(cp));
	        this.state = TAG_NAME_STATE;
	    }

	    else if (cp === $.QUESTION_MARK) {
	        //NOTE: call bogus comment state directly with current consumed character to avoid unnecessary reconsumption.
	        this[BOGUS_COMMENT_STATE](cp);
	    }

	    else {
	        this._emitChar('<');
	        this._reconsumeInState(DATA_STATE);
	    }
	};


	//12.2.4.9 End tag open state
	//------------------------------------------------------------------
	_[END_TAG_OPEN_STATE] = function endTagOpenState(cp) {
	    if (isAsciiUpper(cp)) {
	        this._createEndTagToken(toAsciiLowerChar(cp));
	        this.state = TAG_NAME_STATE;
	    }

	    else if (isAsciiLower(cp)) {
	        this._createEndTagToken(toChar(cp));
	        this.state = TAG_NAME_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN)
	        this.state = DATA_STATE;

	    else if (cp === $.EOF) {
	        this._reconsumeInState(DATA_STATE);
	        this._emitChar('<');
	        this._emitChar('/');
	    }

	    else {
	        //NOTE: call bogus comment state directly with current consumed character to avoid unnecessary reconsumption.
	        this[BOGUS_COMMENT_STATE](cp);
	    }
	};


	//12.2.4.10 Tag name state
	//------------------------------------------------------------------
	_[TAG_NAME_STATE] = function tagNameState(cp) {
	    if (isWhitespace(cp))
	        this.state = BEFORE_ATTRIBUTE_NAME_STATE;

	    else if (cp === $.SOLIDUS)
	        this.state = SELF_CLOSING_START_TAG_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (isAsciiUpper(cp))
	        this.currentToken.tagName += toAsciiLowerChar(cp);

	    else if (cp === $.NULL)
	        this.currentToken.tagName += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this.currentToken.tagName += toChar(cp);
	};


	//12.2.4.11 RCDATA less-than sign state
	//------------------------------------------------------------------
	_[RCDATA_LESS_THAN_SIGN_STATE] = function rcdataLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = RCDATA_END_TAG_OPEN_STATE;
	    }

	    else {
	        this._emitChar('<');
	        this._reconsumeInState(RCDATA_STATE);
	    }
	};


	//12.2.4.12 RCDATA end tag open state
	//------------------------------------------------------------------
	_[RCDATA_END_TAG_OPEN_STATE] = function rcdataEndTagOpenState(cp) {
	    if (isAsciiUpper(cp)) {
	        this._createEndTagToken(toAsciiLowerChar(cp));
	        this.tempBuff.push(cp);
	        this.state = RCDATA_END_TAG_NAME_STATE;
	    }

	    else if (isAsciiLower(cp)) {
	        this._createEndTagToken(toChar(cp));
	        this.tempBuff.push(cp);
	        this.state = RCDATA_END_TAG_NAME_STATE;
	    }

	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(RCDATA_STATE);
	    }
	};


	//12.2.4.13 RCDATA end tag name state
	//------------------------------------------------------------------
	_[RCDATA_END_TAG_NAME_STATE] = function rcdataEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }

	            if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }

	            if (cp === $.GREATER_THAN_SIGN) {
	                this.state = DATA_STATE;
	                this._emitCurrentToken();
	                return;
	            }
	        }

	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(RCDATA_STATE);
	    }
	};


	//12.2.4.14 RAWTEXT less-than sign state
	//------------------------------------------------------------------
	_[RAWTEXT_LESS_THAN_SIGN_STATE] = function rawtextLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = RAWTEXT_END_TAG_OPEN_STATE;
	    }

	    else {
	        this._emitChar('<');
	        this._reconsumeInState(RAWTEXT_STATE);
	    }
	};


	//12.2.4.15 RAWTEXT end tag open state
	//------------------------------------------------------------------
	_[RAWTEXT_END_TAG_OPEN_STATE] = function rawtextEndTagOpenState(cp) {
	    if (isAsciiUpper(cp)) {
	        this._createEndTagToken(toAsciiLowerChar(cp));
	        this.tempBuff.push(cp);
	        this.state = RAWTEXT_END_TAG_NAME_STATE;
	    }

	    else if (isAsciiLower(cp)) {
	        this._createEndTagToken(toChar(cp));
	        this.tempBuff.push(cp);
	        this.state = RAWTEXT_END_TAG_NAME_STATE;
	    }

	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(RAWTEXT_STATE);
	    }
	};


	//12.2.4.16 RAWTEXT end tag name state
	//------------------------------------------------------------------
	_[RAWTEXT_END_TAG_NAME_STATE] = function rawtextEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }

	            if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }

	            if (cp === $.GREATER_THAN_SIGN) {
	                this._emitCurrentToken();
	                this.state = DATA_STATE;
	                return;
	            }
	        }

	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(RAWTEXT_STATE);
	    }
	};


	//12.2.4.17 Script data less-than sign state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_LESS_THAN_SIGN_STATE] = function scriptDataLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
	    }

	    else if (cp === $.EXCLAMATION_MARK) {
	        this.state = SCRIPT_DATA_ESCAPE_START_STATE;
	        this._emitChar('<');
	        this._emitChar('!');
	    }

	    else {
	        this._emitChar('<');
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	    }
	};


	//12.2.4.18 Script data end tag open state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_END_TAG_OPEN_STATE] = function scriptDataEndTagOpenState(cp) {
	    if (isAsciiUpper(cp)) {
	        this._createEndTagToken(toAsciiLowerChar(cp));
	        this.tempBuff.push(cp);
	        this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
	    }

	    else if (isAsciiLower(cp)) {
	        this._createEndTagToken(toChar(cp));
	        this.tempBuff.push(cp);
	        this.state = SCRIPT_DATA_END_TAG_NAME_STATE;
	    }

	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	    }
	};


	//12.2.4.19 Script data end tag name state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_END_TAG_NAME_STATE] = function scriptDataEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }

	            else if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }

	            else if (cp === $.GREATER_THAN_SIGN) {
	                this._emitCurrentToken();
	                this.state = DATA_STATE;
	                return;
	            }
	        }

	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	    }
	};


	//12.2.4.20 Script data escape start state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPE_START_STATE] = function scriptDataEscapeStartState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
	        this._emitChar('-');
	    }

	    else
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	};


	//12.2.4.21 Script data escape start dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPE_START_DASH_STATE] = function scriptDataEscapeStartDashState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
	        this._emitChar('-');
	    }

	    else
	        this._reconsumeInState(SCRIPT_DATA_STATE);
	};


	//12.2.4.22 Script data escaped state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_STATE] = function scriptDataEscapedState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
	        this._emitChar('-');
	    }

	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this._emitCodePoint(cp);
	};


	//12.2.4.23 Script data escaped dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_DASH_STATE] = function scriptDataEscapedDashState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
	        this._emitChar('-');
	    }

	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};


	//12.2.4.24 Script data escaped dash dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_DASH_DASH_STATE] = function scriptDataEscapedDashDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this._emitChar('-');

	    else if (cp === $.LESS_THAN_SIGN)
	        this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = SCRIPT_DATA_STATE;
	        this._emitChar('>');
	    }

	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else {
	        this.state = SCRIPT_DATA_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};


	//12.2.4.25 Script data escaped less-than sign state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataEscapedLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
	    }

	    else if (isAsciiUpper(cp)) {
	        this.tempBuff = [];
	        this.tempBuff.push(toAsciiLowerCodePoint(cp));
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
	        this._emitChar('<');
	        this._emitCodePoint(cp);
	    }

	    else if (isAsciiLower(cp)) {
	        this.tempBuff = [];
	        this.tempBuff.push(cp);
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE;
	        this._emitChar('<');
	        this._emitCodePoint(cp);
	    }

	    else {
	        this._emitChar('<');
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	    }
	};


	//12.2.4.26 Script data escaped end tag open state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE] = function scriptDataEscapedEndTagOpenState(cp) {
	    if (isAsciiUpper(cp)) {
	        this._createEndTagToken(toAsciiLowerChar(cp));
	        this.tempBuff.push(cp);
	        this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
	    }

	    else if (isAsciiLower(cp)) {
	        this._createEndTagToken(toChar(cp));
	        this.tempBuff.push(cp);
	        this.state = SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE;
	    }

	    else {
	        this._emitChar('<');
	        this._emitChar('/');
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	    }
	};


	//12.2.4.27 Script data escaped end tag name state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE] = function scriptDataEscapedEndTagNameState(cp) {
	    if (isAsciiUpper(cp)) {
	        this.currentToken.tagName += toAsciiLowerChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else if (isAsciiLower(cp)) {
	        this.currentToken.tagName += toChar(cp);
	        this.tempBuff.push(cp);
	    }

	    else {
	        if (this._isAppropriateEndTagToken()) {
	            if (isWhitespace(cp)) {
	                this.state = BEFORE_ATTRIBUTE_NAME_STATE;
	                return;
	            }

	            if (cp === $.SOLIDUS) {
	                this.state = SELF_CLOSING_START_TAG_STATE;
	                return;
	            }

	            if (cp === $.GREATER_THAN_SIGN) {
	                this._emitCurrentToken();
	                this.state = DATA_STATE;
	                return;
	            }
	        }

	        this._emitChar('<');
	        this._emitChar('/');
	        this._emitSeveralCodePoints(this.tempBuff);
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	    }
	};


	//12.2.4.28 Script data double escape start state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE] = function scriptDataDoubleEscapeStartState(cp) {
	    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
	        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }

	    else if (isAsciiUpper(cp)) {
	        this.tempBuff.push(toAsciiLowerCodePoint(cp));
	        this._emitCodePoint(cp);
	    }

	    else if (isAsciiLower(cp)) {
	        this.tempBuff.push(cp);
	        this._emitCodePoint(cp);
	    }

	    else
	        this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
	};


	//12.2.4.29 Script data double escaped state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_STATE] = function scriptDataDoubleEscapedState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
	        this._emitChar('-');
	    }

	    else if (cp === $.LESS_THAN_SIGN) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
	        this._emitChar('<');
	    }

	    else if (cp === $.NULL)
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this._emitCodePoint(cp);
	};


	//12.2.4.30 Script data double escaped dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE] = function scriptDataDoubleEscapedDashState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
	        this._emitChar('-');
	    }

	    else if (cp === $.LESS_THAN_SIGN) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
	        this._emitChar('<');
	    }

	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};


	//12.2.4.31 Script data double escaped dash dash state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE] = function scriptDataDoubleEscapedDashDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this._emitChar('-');

	    else if (cp === $.LESS_THAN_SIGN) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
	        this._emitChar('<');
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = SCRIPT_DATA_STATE;
	        this._emitChar('>');
	    }

	    else if (cp === $.NULL) {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitChar(UNICODE.REPLACEMENT_CHARACTER);
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else {
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
	        this._emitCodePoint(cp);
	    }
	};


	//12.2.4.32 Script data double escaped less-than sign state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE] = function scriptDataDoubleEscapedLessThanSignState(cp) {
	    if (cp === $.SOLIDUS) {
	        this.tempBuff = [];
	        this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
	        this._emitChar('/');
	    }

	    else
	        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
	};


	//12.2.4.33 Script data double escape end state
	//------------------------------------------------------------------
	_[SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE] = function scriptDataDoubleEscapeEndState(cp) {
	    if (isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN) {
	        this.state = this.isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

	        this._emitCodePoint(cp);
	    }

	    else if (isAsciiUpper(cp)) {
	        this.tempBuff.push(toAsciiLowerCodePoint(cp));
	        this._emitCodePoint(cp);
	    }

	    else if (isAsciiLower(cp)) {
	        this.tempBuff.push(cp);
	        this._emitCodePoint(cp);
	    }

	    else
	        this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
	};


	//12.2.4.34 Before attribute name state
	//------------------------------------------------------------------
	_[BEFORE_ATTRIBUTE_NAME_STATE] = function beforeAttributeNameState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.SOLIDUS)
	        this.state = SELF_CLOSING_START_TAG_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (isAsciiUpper(cp)) {
	        this._createAttr(toAsciiLowerChar(cp));
	        this.state = ATTRIBUTE_NAME_STATE;
	    }

	    else if (cp === $.NULL) {
	        this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
	        this.state = ATTRIBUTE_NAME_STATE;
	    }

	    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN) {
	        this._createAttr(toChar(cp));
	        this.state = ATTRIBUTE_NAME_STATE;
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else {
	        this._createAttr(toChar(cp));
	        this.state = ATTRIBUTE_NAME_STATE;
	    }
	};


	//12.2.4.35 Attribute name state
	//------------------------------------------------------------------
	_[ATTRIBUTE_NAME_STATE] = function attributeNameState(cp) {
	    if (isWhitespace(cp))
	        this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);

	    else if (cp === $.SOLIDUS)
	        this._leaveAttrName(SELF_CLOSING_START_TAG_STATE);

	    else if (cp === $.EQUALS_SIGN)
	        this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this._leaveAttrName(DATA_STATE);
	        this._emitCurrentToken();
	    }

	    else if (isAsciiUpper(cp))
	        this.currentAttr.name += toAsciiLowerChar(cp);

	    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN)
	        this.currentAttr.name += toChar(cp);

	    else if (cp === $.NULL)
	        this.currentAttr.name += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this.currentAttr.name += toChar(cp);
	};


	//12.2.4.36 After attribute name state
	//------------------------------------------------------------------
	_[AFTER_ATTRIBUTE_NAME_STATE] = function afterAttributeNameState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.SOLIDUS)
	        this.state = SELF_CLOSING_START_TAG_STATE;

	    else if (cp === $.EQUALS_SIGN)
	        this.state = BEFORE_ATTRIBUTE_VALUE_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (isAsciiUpper(cp)) {
	        this._createAttr(toAsciiLowerChar(cp));
	        this.state = ATTRIBUTE_NAME_STATE;
	    }

	    else if (cp === $.NULL) {
	        this._createAttr(UNICODE.REPLACEMENT_CHARACTER);
	        this.state = ATTRIBUTE_NAME_STATE;
	    }

	    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN) {
	        this._createAttr(toChar(cp));
	        this.state = ATTRIBUTE_NAME_STATE;
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else {
	        this._createAttr(toChar(cp));
	        this.state = ATTRIBUTE_NAME_STATE;
	    }
	};


	//12.2.4.37 Before attribute value state
	//------------------------------------------------------------------
	_[BEFORE_ATTRIBUTE_VALUE_STATE] = function beforeAttributeValueState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.QUOTATION_MARK)
	        this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;

	    else if (cp === $.AMPERSAND)
	        this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);

	    else if (cp === $.APOSTROPHE)
	        this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;

	    else if (cp === $.NULL) {
	        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.LESS_THAN_SIGN || cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
	        this.currentAttr.value += toChar(cp);
	        this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else {
	        this.currentAttr.value += toChar(cp);
	        this.state = ATTRIBUTE_VALUE_UNQUOTED_STATE;
	    }
	};


	//12.2.4.38 Attribute value (double-quoted) state
	//------------------------------------------------------------------
	_[ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE] = function attributeValueDoubleQuotedState(cp) {
	    if (cp === $.QUOTATION_MARK)
	        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;

	    else if (cp === $.AMPERSAND) {
	        this.additionalAllowedCp = $.QUOTATION_MARK;
	        this.returnState = this.state;
	        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
	    }

	    else if (cp === $.NULL)
	        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this.currentAttr.value += toChar(cp);
	};


	//12.2.4.39 Attribute value (single-quoted) state
	//------------------------------------------------------------------
	_[ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE] = function attributeValueSingleQuotedState(cp) {
	    if (cp === $.APOSTROPHE)
	        this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;

	    else if (cp === $.AMPERSAND) {
	        this.additionalAllowedCp = $.APOSTROPHE;
	        this.returnState = this.state;
	        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
	    }

	    else if (cp === $.NULL)
	        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this.currentAttr.value += toChar(cp);
	};


	//12.2.4.40 Attribute value (unquoted) state
	//------------------------------------------------------------------
	_[ATTRIBUTE_VALUE_UNQUOTED_STATE] = function attributeValueUnquotedState(cp) {
	    if (isWhitespace(cp))
	        this.state = BEFORE_ATTRIBUTE_NAME_STATE;

	    else if (cp === $.AMPERSAND) {
	        this.additionalAllowedCp = $.GREATER_THAN_SIGN;
	        this.returnState = this.state;
	        this.state = CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.NULL)
	        this.currentAttr.value += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.QUOTATION_MARK || cp === $.APOSTROPHE || cp === $.LESS_THAN_SIGN ||
	             cp === $.EQUALS_SIGN || cp === $.GRAVE_ACCENT) {
	        this.currentAttr.value += toChar(cp);
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this.currentAttr.value += toChar(cp);
	};


	//12.2.4.41 Character reference in attribute value state
	//------------------------------------------------------------------
	_[CHARACTER_REFERENCE_IN_ATTRIBUTE_VALUE_STATE] = function characterReferenceInAttributeValueState(cp) {
	    var referencedCodePoints = this._consumeCharacterReference(cp, true);

	    if (referencedCodePoints) {
	        for (var i = 0; i < referencedCodePoints.length; i++)
	            this.currentAttr.value += toChar(referencedCodePoints[i]);
	    } else
	        this.currentAttr.value += '&';

	    this.state = this.returnState;
	};


	//12.2.4.42 After attribute value (quoted) state
	//------------------------------------------------------------------
	_[AFTER_ATTRIBUTE_VALUE_QUOTED_STATE] = function afterAttributeValueQuotedState(cp) {
	    if (isWhitespace(cp))
	        this.state = BEFORE_ATTRIBUTE_NAME_STATE;

	    else if (cp === $.SOLIDUS)
	        this.state = SELF_CLOSING_START_TAG_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
	};


	//12.2.4.43 Self-closing start tag state
	//------------------------------------------------------------------
	_[SELF_CLOSING_START_TAG_STATE] = function selfClosingStartTagState(cp) {
	    if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.selfClosing = true;
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.EOF)
	        this._reconsumeInState(DATA_STATE);

	    else
	        this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
	};


	//12.2.4.44 Bogus comment state
	//------------------------------------------------------------------
	_[BOGUS_COMMENT_STATE] = function bogusCommentState(cp) {
	    this._createCommentToken();

	    while (true) {
	        if (cp === $.GREATER_THAN_SIGN) {
	            this.state = DATA_STATE;
	            break;
	        }

	        else if (cp === $.EOF) {
	            this._reconsumeInState(DATA_STATE);
	            break;
	        }

	        else {
	            this.currentToken.data += cp === $.NULL ? UNICODE.REPLACEMENT_CHARACTER : toChar(cp);
	            cp = this._consume();
	        }
	    }

	    this._emitCurrentToken();
	};


	//12.2.4.45 Markup declaration open state
	//------------------------------------------------------------------
	_[MARKUP_DECLARATION_OPEN_STATE] = function markupDeclarationOpenState(cp) {
	    if (this._consumeSubsequentIfMatch($$.DASH_DASH_STRING, cp, true)) {
	        this._createCommentToken();
	        this.state = COMMENT_START_STATE;
	    }

	    else if (this._consumeSubsequentIfMatch($$.DOCTYPE_STRING, cp, false))
	        this.state = DOCTYPE_STATE;

	    else if (this.allowCDATA && this._consumeSubsequentIfMatch($$.CDATA_START_STRING, cp, true))
	        this.state = CDATA_SECTION_STATE;

	    else {
	        //NOTE: call bogus comment state directly with current consumed character to avoid unnecessary reconsumption.
	        this[BOGUS_COMMENT_STATE](cp);
	    }
	};


	//12.2.4.46 Comment start state
	//------------------------------------------------------------------
	_[COMMENT_START_STATE] = function commentStartState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_START_DASH_STATE;

	    else if (cp === $.NULL) {
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};


	//12.2.4.47 Comment start dash state
	//------------------------------------------------------------------
	_[COMMENT_START_DASH_STATE] = function commentStartDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_END_STATE;

	    else if (cp === $.NULL) {
	        this.currentToken.data += '-';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.data += '-';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};


	//12.2.4.48 Comment state
	//------------------------------------------------------------------
	_[COMMENT_STATE] = function commentState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_END_DASH_STATE;

	    else if (cp === $.NULL)
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this.currentToken.data += toChar(cp);
	};


	//12.2.4.49 Comment end dash state
	//------------------------------------------------------------------
	_[COMMENT_END_DASH_STATE] = function commentEndDashState(cp) {
	    if (cp === $.HYPHEN_MINUS)
	        this.state = COMMENT_END_STATE;

	    else if (cp === $.NULL) {
	        this.currentToken.data += '-';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }

	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.data += '-';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};


	//12.2.4.50 Comment end state
	//------------------------------------------------------------------
	_[COMMENT_END_STATE] = function commentEndState(cp) {
	    if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.EXCLAMATION_MARK)
	        this.state = COMMENT_END_BANG_STATE;

	    else if (cp === $.HYPHEN_MINUS)
	        this.currentToken.data += '-';

	    else if (cp === $.NULL) {
	        this.currentToken.data += '--';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }

	    else if (cp === $.EOF) {
	        this._reconsumeInState(DATA_STATE);
	        this._emitCurrentToken();
	    }

	    else {
	        this.currentToken.data += '--';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};


	//12.2.4.51 Comment end bang state
	//------------------------------------------------------------------
	_[COMMENT_END_BANG_STATE] = function commentEndBangState(cp) {
	    if (cp === $.HYPHEN_MINUS) {
	        this.currentToken.data += '--!';
	        this.state = COMMENT_END_DASH_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.NULL) {
	        this.currentToken.data += '--!';
	        this.currentToken.data += UNICODE.REPLACEMENT_CHARACTER;
	        this.state = COMMENT_STATE;
	    }

	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.data += '--!';
	        this.currentToken.data += toChar(cp);
	        this.state = COMMENT_STATE;
	    }
	};


	//12.2.4.52 DOCTYPE state
	//------------------------------------------------------------------
	_[DOCTYPE_STATE] = function doctypeState(cp) {
	    if (isWhitespace(cp))
	        this.state = BEFORE_DOCTYPE_NAME_STATE;

	    else if (cp === $.EOF) {
	        this._createDoctypeToken();
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
	};


	//12.2.4.53 Before DOCTYPE name state
	//------------------------------------------------------------------
	_[BEFORE_DOCTYPE_NAME_STATE] = function beforeDoctypeNameState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (isAsciiUpper(cp)) {
	        this._createDoctypeToken(toAsciiLowerChar(cp));
	        this.state = DOCTYPE_NAME_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this._createDoctypeToken();
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this._createDoctypeToken();
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else if (cp === $.NULL) {
	        this._createDoctypeToken(UNICODE.REPLACEMENT_CHARACTER);
	        this.state = DOCTYPE_NAME_STATE;
	    }

	    else {
	        this._createDoctypeToken(toChar(cp));
	        this.state = DOCTYPE_NAME_STATE;
	    }
	};


	//12.2.4.54 DOCTYPE name state
	//------------------------------------------------------------------
	_[DOCTYPE_NAME_STATE] = function doctypeNameState(cp) {
	    if (isWhitespace(cp))
	        this.state = AFTER_DOCTYPE_NAME_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (isAsciiUpper(cp))
	        this.currentToken.name += toAsciiLowerChar(cp);

	    else if (cp === $.NULL)
	        this.currentToken.name += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this.currentToken.name += toChar(cp);
	};


	//12.2.4.55 After DOCTYPE name state
	//------------------------------------------------------------------
	_[AFTER_DOCTYPE_NAME_STATE] = function afterDoctypeNameState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.GREATER_THAN_SIGN) {
	        this.state = DATA_STATE;
	        this._emitCurrentToken();
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else if (this._consumeSubsequentIfMatch($$.PUBLIC_STRING, cp, false))
	        this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;

	    else if (this._consumeSubsequentIfMatch($$.SYSTEM_STRING, cp, false))
	        this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;

	    else {
	        this.currentToken.forceQuirks = true;
	        this.state = BOGUS_DOCTYPE_STATE;
	    }
	};


	//12.2.4.56 After DOCTYPE public keyword state
	//------------------------------------------------------------------
	_[AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE] = function afterDoctypePublicKeywordState(cp) {
	    if (isWhitespace(cp))
	        this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;

	    else if (cp === $.QUOTATION_MARK) {
	        this.currentToken.publicId = '';
	        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }

	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.publicId = '';
	        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.forceQuirks = true;
	        this.state = BOGUS_DOCTYPE_STATE;
	    }
	};


	//12.2.4.57 Before DOCTYPE public identifier state
	//------------------------------------------------------------------
	_[BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function beforeDoctypePublicIdentifierState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.QUOTATION_MARK) {
	        this.currentToken.publicId = '';
	        this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }

	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.publicId = '';
	        this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.forceQuirks = true;
	        this.state = BOGUS_DOCTYPE_STATE;
	    }
	};


	//12.2.4.58 DOCTYPE public identifier (double-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypePublicIdentifierDoubleQuotedState(cp) {
	    if (cp === $.QUOTATION_MARK)
	        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;

	    else if (cp === $.NULL)
	        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this.currentToken.publicId += toChar(cp);
	};


	//12.2.4.59 DOCTYPE public identifier (single-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypePublicIdentifierSingleQuotedState(cp) {
	    if (cp === $.APOSTROPHE)
	        this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;

	    else if (cp === $.NULL)
	        this.currentToken.publicId += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this.currentToken.publicId += toChar(cp);
	};


	//12.2.4.60 After DOCTYPE public identifier state
	//------------------------------------------------------------------
	_[AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE] = function afterDoctypePublicIdentifierState(cp) {
	    if (isWhitespace(cp))
	        this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.QUOTATION_MARK) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }

	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.forceQuirks = true;
	        this.state = BOGUS_DOCTYPE_STATE;
	    }
	};


	//12.2.4.61 Between DOCTYPE public and system identifiers state
	//------------------------------------------------------------------
	_[BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE] = function betweenDoctypePublicAndSystemIdentifiersState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.QUOTATION_MARK) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }


	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.forceQuirks = true;
	        this.state = BOGUS_DOCTYPE_STATE;
	    }
	};


	//12.2.4.62 After DOCTYPE system keyword state
	//------------------------------------------------------------------
	_[AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE] = function afterDoctypeSystemKeywordState(cp) {
	    if (isWhitespace(cp))
	        this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

	    else if (cp === $.QUOTATION_MARK) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }

	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.forceQuirks = true;
	        this.state = BOGUS_DOCTYPE_STATE;
	    }
	};


	//12.2.4.63 Before DOCTYPE system identifier state
	//------------------------------------------------------------------
	_[BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function beforeDoctypeSystemIdentifierState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.QUOTATION_MARK) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
	    }

	    else if (cp === $.APOSTROPHE) {
	        this.currentToken.systemId = '';
	        this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
	    }

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else {
	        this.currentToken.forceQuirks = true;
	        this.state = BOGUS_DOCTYPE_STATE;
	    }
	};


	//12.2.4.64 DOCTYPE system identifier (double-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE] = function doctypeSystemIdentifierDoubleQuotedState(cp) {
	    if (cp === $.QUOTATION_MARK)
	        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.NULL)
	        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this.currentToken.systemId += toChar(cp);
	};


	//12.2.4.65 DOCTYPE system identifier (single-quoted) state
	//------------------------------------------------------------------
	_[DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE] = function doctypeSystemIdentifierSingleQuotedState(cp) {
	    if (cp === $.APOSTROPHE)
	        this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;

	    else if (cp === $.GREATER_THAN_SIGN) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.NULL)
	        this.currentToken.systemId += UNICODE.REPLACEMENT_CHARACTER;

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this.currentToken.systemId += toChar(cp);
	};


	//12.2.4.66 After DOCTYPE system identifier state
	//------------------------------------------------------------------
	_[AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE] = function afterDoctypeSystemIdentifierState(cp) {
	    if (isWhitespace(cp))
	        return;

	    if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this.currentToken.forceQuirks = true;
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }

	    else
	        this.state = BOGUS_DOCTYPE_STATE;
	};


	//12.2.4.67 Bogus DOCTYPE state
	//------------------------------------------------------------------
	_[BOGUS_DOCTYPE_STATE] = function bogusDoctypeState(cp) {
	    if (cp === $.GREATER_THAN_SIGN) {
	        this._emitCurrentToken();
	        this.state = DATA_STATE;
	    }

	    else if (cp === $.EOF) {
	        this._emitCurrentToken();
	        this._reconsumeInState(DATA_STATE);
	    }
	};


	//12.2.4.68 CDATA section state
	//------------------------------------------------------------------
	_[CDATA_SECTION_STATE] = function cdataSectionState(cp) {
	    while (true) {
	        if (cp === $.EOF) {
	            this._reconsumeInState(DATA_STATE);
	            break;
	        }

	        else if (this._consumeSubsequentIfMatch($$.CDATA_END_STRING, cp, true)) {
	            this.state = DATA_STATE;
	            break;
	        }

	        else {
	            this._emitCodePoint(cp);
	            cp = this._consume();
	        }
	    }
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var Collection = __webpack_require__(136);

	var util = __webpack_require__(5);

	function property(obj, name, value) {
	  if (value !== null && value !== undefined) {
	    util.property.apply(this, arguments);
	  }
	}

	function memoizedProperty(obj, name) {
	  if (!obj.constructor.prototype[name]) {
	    util.memoizedProperty.apply(this, arguments);
	  }
	}

	function Shape(shape, options, memberName) {
	  options = options || {};

	  property(this, 'shape', shape.shape);
	  property(this, 'api', options.api, false);
	  property(this, 'type', shape.type);
	  property(this, 'location', shape.location || this.location || 'body');
	  property(this, 'name', this.name || shape.xmlName || shape.queryName ||
	    shape.locationName || memberName);
	  property(this, 'isStreaming', shape.streaming || this.isStreaming || false);
	  property(this, 'isComposite', shape.isComposite || false);
	  property(this, 'isShape', true, false);
	  property(this, 'isQueryName', shape.queryName ? true : false, false);
	  property(this, 'isLocationName', shape.locationName ? true : false, false);

	  if (options.documentation) {
	    property(this, 'documentation', shape.documentation);
	    property(this, 'documentationUrl', shape.documentationUrl);
	  }

	  if (shape.xmlAttribute) {
	    property(this, 'isXmlAttribute', shape.xmlAttribute || false);
	  }

	  // type conversion and parsing
	  property(this, 'defaultValue', null);
	  this.toWireFormat = function(value) {
	    if (value === null || value === undefined) return '';
	    return value;
	  };
	  this.toType = function(value) { return value; };
	}

	/**
	 * @api private
	 */
	Shape.normalizedTypes = {
	  character: 'string',
	  double: 'float',
	  long: 'integer',
	  short: 'integer',
	  biginteger: 'integer',
	  bigdecimal: 'float',
	  blob: 'binary'
	};

	/**
	 * @api private
	 */
	Shape.types = {
	  'structure': StructureShape,
	  'list': ListShape,
	  'map': MapShape,
	  'boolean': BooleanShape,
	  'timestamp': TimestampShape,
	  'float': FloatShape,
	  'integer': IntegerShape,
	  'string': StringShape,
	  'base64': Base64Shape,
	  'binary': BinaryShape
	};

	Shape.resolve = function resolve(shape, options) {
	  if (shape.shape) {
	    var refShape = options.api.shapes[shape.shape];
	    if (!refShape) {
	      throw new Error('Cannot find shape reference: ' + shape.shape);
	    }

	    return refShape;
	  } else {
	    return null;
	  }
	};

	Shape.create = function create(shape, options, memberName) {
	  if (shape.isShape) return shape;

	  var refShape = Shape.resolve(shape, options);
	  if (refShape) {
	    var filteredKeys = Object.keys(shape);
	    if (!options.documentation) {
	      filteredKeys = filteredKeys.filter(function(name) {
	        return !name.match(/documentation/);
	      });
	    }
	    if (filteredKeys === ['shape']) { // no inline customizations
	      return refShape;
	    }

	    // create an inline shape with extra members
	    var InlineShape = function() {
	      refShape.constructor.call(this, shape, options, memberName);
	    };
	    InlineShape.prototype = refShape;
	    return new InlineShape();
	  } else {
	    // set type if not set
	    if (!shape.type) {
	      if (shape.members) shape.type = 'structure';
	      else if (shape.member) shape.type = 'list';
	      else if (shape.key) shape.type = 'map';
	      else shape.type = 'string';
	    }

	    // normalize types
	    var origType = shape.type;
	    if (Shape.normalizedTypes[shape.type]) {
	      shape.type = Shape.normalizedTypes[shape.type];
	    }

	    if (Shape.types[shape.type]) {
	      return new Shape.types[shape.type](shape, options, memberName);
	    } else {
	      throw new Error('Unrecognized shape type: ' + origType);
	    }
	  }
	};

	function CompositeShape(shape) {
	  Shape.apply(this, arguments);
	  property(this, 'isComposite', true);

	  if (shape.flattened) {
	    property(this, 'flattened', shape.flattened || false);
	  }
	}

	function StructureShape(shape, options) {
	  var requiredMap = null, firstInit = !this.isShape;

	  CompositeShape.apply(this, arguments);

	  if (firstInit) {
	    property(this, 'defaultValue', function() { return {}; });
	    property(this, 'members', {});
	    property(this, 'memberNames', []);
	    property(this, 'required', []);
	    property(this, 'isRequired', function() { return false; });
	  }

	  if (shape.members) {
	    property(this, 'members', new Collection(shape.members, options, function(name, member) {
	      return Shape.create(member, options, name);
	    }));
	    memoizedProperty(this, 'memberNames', function() {
	      return shape.xmlOrder || Object.keys(shape.members);
	    });
	  }

	  if (shape.required) {
	    property(this, 'required', shape.required);
	    property(this, 'isRequired', function(name) {
	      if (!requiredMap) {
	        requiredMap = {};
	        for (var i = 0; i < shape.required.length; i++) {
	          requiredMap[shape.required[i]] = true;
	        }
	      }

	      return requiredMap[name];
	    }, false, true);
	  }

	  property(this, 'resultWrapper', shape.resultWrapper || null);

	  if (shape.payload) {
	    property(this, 'payload', shape.payload);
	  }

	  if (typeof shape.xmlNamespace === 'string') {
	    property(this, 'xmlNamespaceUri', shape.xmlNamespace);
	  } else if (typeof shape.xmlNamespace === 'object') {
	    property(this, 'xmlNamespacePrefix', shape.xmlNamespace.prefix);
	    property(this, 'xmlNamespaceUri', shape.xmlNamespace.uri);
	  }
	}

	function ListShape(shape, options) {
	  var self = this, firstInit = !this.isShape;
	  CompositeShape.apply(this, arguments);

	  if (firstInit) {
	    property(this, 'defaultValue', function() { return []; });
	  }

	  if (shape.member) {
	    memoizedProperty(this, 'member', function() {
	      return Shape.create(shape.member, options);
	    });
	  }

	  if (this.flattened) {
	    var oldName = this.name;
	    memoizedProperty(this, 'name', function() {
	      return self.member.name || oldName;
	    });
	  }
	}

	function MapShape(shape, options) {
	  var firstInit = !this.isShape;
	  CompositeShape.apply(this, arguments);

	  if (firstInit) {
	    property(this, 'defaultValue', function() { return {}; });
	    property(this, 'key', Shape.create({type: 'string'}, options));
	    property(this, 'value', Shape.create({type: 'string'}, options));
	  }

	  if (shape.key) {
	    memoizedProperty(this, 'key', function() {
	      return Shape.create(shape.key, options);
	    });
	  }
	  if (shape.value) {
	    memoizedProperty(this, 'value', function() {
	      return Shape.create(shape.value, options);
	    });
	  }
	}

	function TimestampShape(shape) {
	  var self = this;
	  Shape.apply(this, arguments);

	  if (this.location === 'header') {
	    property(this, 'timestampFormat', 'rfc822');
	  } else if (shape.timestampFormat) {
	    property(this, 'timestampFormat', shape.timestampFormat);
	  } else if (this.api) {
	    if (this.api.timestampFormat) {
	      property(this, 'timestampFormat', this.api.timestampFormat);
	    } else {
	      switch (this.api.protocol) {
	        case 'json':
	        case 'rest-json':
	          property(this, 'timestampFormat', 'unixTimestamp');
	          break;
	        case 'rest-xml':
	        case 'query':
	        case 'ec2':
	          property(this, 'timestampFormat', 'iso8601');
	          break;
	      }
	    }
	  }

	  this.toType = function(value) {
	    if (value === null || value === undefined) return null;
	    if (typeof value.toUTCString === 'function') return value;
	    return typeof value === 'string' || typeof value === 'number' ?
	           util.date.parseTimestamp(value) : null;
	  };

	  this.toWireFormat = function(value) {
	    return util.date.format(value, self.timestampFormat);
	  };
	}

	function StringShape() {
	  Shape.apply(this, arguments);

	  if (this.api) {
	    switch (this.api.protocol) {
	      case 'rest-xml':
	      case 'query':
	      case 'ec2':
	        this.toType = function(value) { return value || ''; };
	    }
	  }
	}

	function FloatShape() {
	  Shape.apply(this, arguments);

	  this.toType = function(value) {
	    if (value === null || value === undefined) return null;
	    return parseFloat(value);
	  };
	  this.toWireFormat = this.toType;
	}

	function IntegerShape() {
	  Shape.apply(this, arguments);

	  this.toType = function(value) {
	    if (value === null || value === undefined) return null;
	    return parseInt(value, 10);
	  };
	  this.toWireFormat = this.toType;
	}

	function BinaryShape() {
	  Shape.apply(this, arguments);
	  this.toType = util.base64.decode;
	  this.toWireFormat = util.base64.encode;
	}

	function Base64Shape() {
	  BinaryShape.apply(this, arguments);
	}

	function BooleanShape() {
	  Shape.apply(this, arguments);

	  this.toType = function(value) {
	    if (typeof value === 'boolean') return value;
	    if (value === null || value === undefined) return null;
	    return value === 'true';
	  };
	}

	/**
	 * @api private
	 */
	Shape.shapes = {
	  StructureShape: StructureShape,
	  ListShape: ListShape,
	  MapShape: MapShape,
	  StringShape: StringShape,
	  BooleanShape: BooleanShape,
	  Base64Shape: Base64Shape
	};

	module.exports = Shape;


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 33 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(19).CSSStyleDeclaration,
		CSSRule: __webpack_require__(12).CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssstylerule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleRule
	 */
	CSSOM.CSSStyleRule = function CSSStyleRule() {
		CSSOM.CSSRule.call(this);
		this.selectorText = "";
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};

	CSSOM.CSSStyleRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSStyleRule.prototype.constructor = CSSOM.CSSStyleRule;
	CSSOM.CSSStyleRule.prototype.type = 1;

	Object.defineProperty(CSSOM.CSSStyleRule.prototype, "cssText", {
		get: function() {
			var text;
			if (this.selectorText) {
				text = this.selectorText + " {" + this.style.cssText + "}";
			} else {
				text = "";
			}
			return text;
		},
		set: function(cssText) {
			var rule = CSSOM.CSSStyleRule.parse(cssText);
			this.style = rule.style;
			this.selectorText = rule.selectorText;
		}
	});


	/**
	 * NON-STANDARD
	 * lightweight version of parse.js.
	 * @param {string} ruleText
	 * @return CSSStyleRule
	 */
	CSSOM.CSSStyleRule.parse = function(ruleText) {
		var i = 0;
		var state = "selector";
		var index;
		var j = i;
		var buffer = "";

		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true
		};

		var styleRule = new CSSOM.CSSStyleRule;
		var selector, name, value, priority="";

		for (var character; character = ruleText.charAt(i); i++) {

			switch (character) {

			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					// Squash 2 or more white-spaces in the row into 1
					switch (ruleText.charAt(i - 1)) {
						case " ":
						case "\t":
						case "\r":
						case "\n":
						case "\f":
							break;
						default:
							buffer += " ";
							break;
					}
				}
				break;

			// String
			case '"':
				j = i + 1;
				index = ruleText.indexOf('"', j) + 1;
				if (!index) {
					throw '" is missing';
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;

			case "'":
				j = i + 1;
				index = ruleText.indexOf("'", j) + 1;
				if (!index) {
					throw "' is missing";
				}
				buffer += ruleText.slice(i, index);
				i = index - 1;
				break;

			// Comment
			case "/":
				if (ruleText.charAt(i + 1) === "*") {
					i += 2;
					index = ruleText.indexOf("*/", i);
					if (index === -1) {
						throw new SyntaxError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				break;

			case "{":
				if (state === "selector") {
					styleRule.selectorText = buffer.trim();
					buffer = "";
					state = "name";
				}
				break;

			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "value";
				} else {
					buffer += character;
				}
				break;

			case "!":
				if (state === "value" && ruleText.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;

			case ";":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
					state = "name";
				} else {
					buffer += character;
				}
				break;

			case "}":
				if (state === "value") {
					styleRule.style.setProperty(name, buffer.trim(), priority);
					priority = "";
					buffer = "";
				} else if (state === "name") {
					break;
				} else {
					buffer += character;
				}
				state = "selector";
				break;

			default:
				buffer += character;
				break;

			}
		}

		return styleRule;

	};


	//.CommonJS
	exports.CSSStyleRule = CSSOM.CSSStyleRule;
	///CommonJS


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		StyleSheet: __webpack_require__(83).StyleSheet,
		CSSStyleRule: __webpack_require__(34).CSSStyleRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet
	 */
	CSSOM.CSSStyleSheet = function CSSStyleSheet() {
		CSSOM.StyleSheet.call(this);
		this.cssRules = [];
	};


	CSSOM.CSSStyleSheet.prototype = new CSSOM.StyleSheet;
	CSSOM.CSSStyleSheet.prototype.constructor = CSSOM.CSSStyleSheet;


	/**
	 * Used to insert a new rule into the style sheet. The new rule now becomes part of the cascade.
	 *
	 *   sheet = new Sheet("body {margin: 0}")
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *   sheet.insertRule("img {border: none}", 0)
	 *   -> 0
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *
	 * @param {string} rule
	 * @param {number} index
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-insertRule
	 * @return {number} The index within the style sheet's rule collection of the newly inserted rule.
	 */
	CSSOM.CSSStyleSheet.prototype.insertRule = function(rule, index) {
		if (index < 0 || index > this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		var cssRule = CSSOM.parse(rule).cssRules[0];
		cssRule.parentStyleSheet = this;
		this.cssRules.splice(index, 0, cssRule);
		return index;
	};


	/**
	 * Used to delete a rule from the style sheet.
	 *
	 *   sheet = new Sheet("img{border:none} body{margin:0}")
	 *   sheet.toString()
	 *   -> "img{border:none;}body{margin:0;}"
	 *   sheet.deleteRule(0)
	 *   sheet.toString()
	 *   -> "body{margin:0;}"
	 *
	 * @param {number} index within the style sheet's rule list of the rule to remove.
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleSheet-deleteRule
	 */
	CSSOM.CSSStyleSheet.prototype.deleteRule = function(index) {
		if (index < 0 || index >= this.cssRules.length) {
			throw new RangeError("INDEX_SIZE_ERR");
		}
		this.cssRules.splice(index, 1);
	};


	/**
	 * NON-STANDARD
	 * @return {string} serialize stylesheet
	 */
	CSSOM.CSSStyleSheet.prototype.toString = function() {
		var result = "";
		var rules = this.cssRules;
		for (var i=0; i<rules.length; i++) {
			result += rules[i].cssText + "\n";
		}
		return result;
	};


	//.CommonJS
	exports.CSSStyleSheet = CSSOM.CSSStyleSheet;
	CSSOM.parse = __webpack_require__(49).parse; // Cannot be included sooner due to the mutual dependency between parse.js and CSSStyleSheet.js
	///CommonJS


/***/ },
/* 36 */
/***/ function(module, exports) {

	'use strict';

	exports.REPLACEMENT_CHARACTER = '\uFFFD';

	exports.CODE_POINTS = {
	    EOF: -1,
	    NULL: 0x00,
	    TABULATION: 0x09,
	    CARRIAGE_RETURN: 0x0D,
	    LINE_FEED: 0x0A,
	    FORM_FEED: 0x0C,
	    SPACE: 0x20,
	    EXCLAMATION_MARK: 0x21,
	    QUOTATION_MARK: 0x22,
	    NUMBER_SIGN: 0x23,
	    AMPERSAND: 0x26,
	    APOSTROPHE: 0x27,
	    HYPHEN_MINUS: 0x2D,
	    SOLIDUS: 0x2F,
	    DIGIT_0: 0x30,
	    DIGIT_9: 0x39,
	    SEMICOLON: 0x3B,
	    LESS_THAN_SIGN: 0x3C,
	    EQUALS_SIGN: 0x3D,
	    GREATER_THAN_SIGN: 0x3E,
	    QUESTION_MARK: 0x3F,
	    LATIN_CAPITAL_A: 0x41,
	    LATIN_CAPITAL_F: 0x46,
	    LATIN_CAPITAL_X: 0x58,
	    LATIN_CAPITAL_Z: 0x5A,
	    GRAVE_ACCENT: 0x60,
	    LATIN_SMALL_A: 0x61,
	    LATIN_SMALL_F: 0x66,
	    LATIN_SMALL_X: 0x78,
	    LATIN_SMALL_Z: 0x7A,
	    BOM: 0xFEFF,
	    REPLACEMENT_CHARACTER: 0xFFFD
	};

	exports.CODE_POINT_SEQUENCES = {
	    DASH_DASH_STRING: [0x2D, 0x2D], //--
	    DOCTYPE_STRING: [0x44, 0x4F, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE
	    CDATA_START_STRING: [0x5B, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5B], //[CDATA[
	    CDATA_END_STRING: [0x5D, 0x5D, 0x3E], //]]>
	    SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script
	    PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4C, 0x49, 0x43], //PUBLIC
	    SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4D] //SYSTEM
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);

	function populateMethod(req) {
	  req.httpRequest.method = req.service.api.operations[req.operation].httpMethod;
	}

	function populateURI(req) {
	  var operation = req.service.api.operations[req.operation];
	  var input = operation.input;
	  var uri = [req.httpRequest.endpoint.path, operation.httpPath].join('/');
	  uri = uri.replace(/\/+/g, '/');

	  var queryString = {}, queryStringSet = false;
	  util.each(input.members, function (name, member) {
	    var paramValue = req.params[name];
	    if (paramValue === null || paramValue === undefined) return;
	    if (member.location === 'uri') {
	      var regex = new RegExp('\\{' + member.name + '(\\+)?\\}');
	      uri = uri.replace(regex, function(_, plus) {
	        var fn = plus ? util.uriEscapePath : util.uriEscape;
	        return fn(String(paramValue));
	      });
	    } else if (member.location === 'querystring') {
	      queryStringSet = true;

	      if (member.type === 'list') {
	        queryString[member.name] = paramValue.map(function(val) {
	          return util.uriEscape(String(val));
	        });
	      } else if (member.type === 'map') {
	        util.each(paramValue, function(key, value) {
	          if (Array.isArray(value)) {
	            queryString[key] = value.map(function(val) {
	              return util.uriEscape(String(val));
	            });
	          } else {
	            queryString[key] = util.uriEscape(String(value));
	          }
	        });
	      } else {
	        queryString[member.name] = util.uriEscape(String(paramValue));
	      }
	    }
	  });

	  if (queryStringSet) {
	    uri += (uri.indexOf('?') >= 0 ? '&' : '?');
	    var parts = [];
	    util.arrayEach(Object.keys(queryString).sort(), function(key) {
	      if (!Array.isArray(queryString[key])) {
	        queryString[key] = [queryString[key]];
	      }
	      for (var i = 0; i < queryString[key].length; i++) {
	        parts.push(util.uriEscape(String(key)) + '=' + queryString[key][i]);
	      }
	    });
	    uri += parts.join('&');
	  }

	  req.httpRequest.path = uri;
	}

	function populateHeaders(req) {
	  var operation = req.service.api.operations[req.operation];
	  util.each(operation.input.members, function (name, member) {
	    var value = req.params[name];
	    if (value === null || value === undefined) return;

	    if (member.location === 'headers' && member.type === 'map') {
	      util.each(value, function(key, memberValue) {
	        req.httpRequest.headers[member.name + key] = memberValue;
	      });
	    } else if (member.location === 'header') {
	      value = member.toWireFormat(value).toString();
	      req.httpRequest.headers[member.name] = value;
	    }
	  });
	}

	function buildRequest(req) {
	  populateMethod(req);
	  populateURI(req);
	  populateHeaders(req);
	}

	function extractError() {
	}

	function extractData(resp) {
	  var req = resp.request;
	  var data = {};
	  var r = resp.httpResponse;
	  var operation = req.service.api.operations[req.operation];
	  var output = operation.output;

	  // normalize headers names to lower-cased keys for matching
	  var headers = {};
	  util.each(r.headers, function (k, v) {
	    headers[k.toLowerCase()] = v;
	  });

	  util.each(output.members, function(name, member) {
	    var header = (member.name || name).toLowerCase();
	    if (member.location === 'headers' && member.type === 'map') {
	      data[name] = {};
	      var location = member.isLocationName ? member.name : '';
	      var pattern = new RegExp('^' + location + '(.+)', 'i');
	      util.each(r.headers, function (k, v) {
	        var result = k.match(pattern);
	        if (result !== null) {
	          data[name][result[1]] = v;
	        }
	      });
	    } else if (member.location === 'header') {
	      if (headers[header] !== undefined) {
	        data[name] = headers[header];
	      }
	    } else if (member.location === 'statusCode') {
	      data[name] = parseInt(r.statusCode, 10);
	    }
	  });

	  resp.data = data;
	}

	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};


/***/ },
/* 38 */
/***/ function(module, exports) {

	

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var http = module.exports;
	var EventEmitter = __webpack_require__(25).EventEmitter;
	var Request = __webpack_require__(678);
	var url = __webpack_require__(9)

	http.request = function (params, cb) {
	    if (typeof params === 'string') {
	        params = url.parse(params)
	    }
	    if (!params) params = {};
	    if (!params.host && !params.port) {
	        params.port = parseInt(window.location.port, 10);
	    }
	    if (!params.host && params.hostname) {
	        params.host = params.hostname;
	    }

	    if (!params.protocol) {
	        if (params.scheme) {
	            params.protocol = params.scheme + ':';
	        } else {
	            params.protocol = window.location.protocol;
	        }
	    }

	    if (!params.host) {
	        params.host = window.location.hostname || window.location.host;
	    }
	    if (/:/.test(params.host)) {
	        if (!params.port) {
	            params.port = params.host.split(':')[1];
	        }
	        params.host = params.host.split(':')[0];
	    }
	    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
	    
	    var req = new Request(new xhrHttp, params);
	    if (cb) req.on('response', cb);
	    return req;
	};

	http.get = function (params, cb) {
	    params.method = 'GET';
	    var req = http.request(params, cb);
	    req.end();
	    return req;
	};

	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;

	var xhrHttp = (function () {
	    if (typeof window === 'undefined') {
	        throw new Error('no window object present');
	    }
	    else if (window.XMLHttpRequest) {
	        return window.XMLHttpRequest;
	    }
	    else if (window.ActiveXObject) {
	        var axs = [
	            'Msxml2.XMLHTTP.6.0',
	            'Msxml2.XMLHTTP.3.0',
	            'Microsoft.XMLHTTP'
	        ];
	        for (var i = 0; i < axs.length; i++) {
	            try {
	                var ax = new(window.ActiveXObject)(axs[i]);
	                return function () {
	                    if (ax) {
	                        var ax_ = ax;
	                        ax = null;
	                        return ax_;
	                    }
	                    else {
	                        return new(window.ActiveXObject)(axs[i]);
	                    }
	                };
	            }
	            catch (e) {}
	        }
	        throw new Error('ajax not supported in this browser')
	    }
	    else {
	        throw new Error('ajax not supported in this browser');
	    }
	})();

	http.STATUS_CODES = {
	    100 : 'Continue',
	    101 : 'Switching Protocols',
	    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
	    200 : 'OK',
	    201 : 'Created',
	    202 : 'Accepted',
	    203 : 'Non-Authoritative Information',
	    204 : 'No Content',
	    205 : 'Reset Content',
	    206 : 'Partial Content',
	    207 : 'Multi-Status',               // RFC 4918
	    300 : 'Multiple Choices',
	    301 : 'Moved Permanently',
	    302 : 'Moved Temporarily',
	    303 : 'See Other',
	    304 : 'Not Modified',
	    305 : 'Use Proxy',
	    307 : 'Temporary Redirect',
	    400 : 'Bad Request',
	    401 : 'Unauthorized',
	    402 : 'Payment Required',
	    403 : 'Forbidden',
	    404 : 'Not Found',
	    405 : 'Method Not Allowed',
	    406 : 'Not Acceptable',
	    407 : 'Proxy Authentication Required',
	    408 : 'Request Time-out',
	    409 : 'Conflict',
	    410 : 'Gone',
	    411 : 'Length Required',
	    412 : 'Precondition Failed',
	    413 : 'Request Entity Too Large',
	    414 : 'Request-URI Too Large',
	    415 : 'Unsupported Media Type',
	    416 : 'Requested Range Not Satisfiable',
	    417 : 'Expectation Failed',
	    418 : 'I\'m a teapot',              // RFC 2324
	    422 : 'Unprocessable Entity',       // RFC 4918
	    423 : 'Locked',                     // RFC 4918
	    424 : 'Failed Dependency',          // RFC 4918
	    425 : 'Unordered Collection',       // RFC 4918
	    426 : 'Upgrade Required',           // RFC 2817
	    428 : 'Precondition Required',      // RFC 6585
	    429 : 'Too Many Requests',          // RFC 6585
	    431 : 'Request Header Fields Too Large',// RFC 6585
	    500 : 'Internal Server Error',
	    501 : 'Not Implemented',
	    502 : 'Bad Gateway',
	    503 : 'Service Unavailable',
	    504 : 'Gateway Time-out',
	    505 : 'HTTP Version Not Supported',
	    506 : 'Variant Also Negotiates',    // RFC 2295
	    507 : 'Insufficient Storage',       // RFC 4918
	    509 : 'Bandwidth Limit Exceeded',
	    510 : 'Not Extended',               // RFC 2774
	    511 : 'Network Authentication Required' // RFC 6585
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	var http = __webpack_require__(39);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    return http.request.call(this, params, cb);
	}


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _classesMatter = __webpack_require__(8);

	var _classesMatter2 = _interopRequireDefault(_classesMatter);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var request = _classesMatter2['default'].utils.request;
	var logger = _classesMatter2['default'].utils.logger;

	//Actions for specific user

	var Account = (function () {
		function Account(accountData) {
			_classCallCheck(this, Account);

			//Call matter with name and settings
			if (accountData && _lodash2['default'].isObject(accountData) && _lodash2['default'].has(accountData, 'username')) {
				_lodash2['default'].extend(this, accountData);
			} else if (accountData && _lodash2['default'].isString(accountData)) {
				this.username = accountData;
			} else {
				logger.error({
					description: 'AccountData is required to start an AccountAction',
					func: 'constructor', obj: 'Account'
				});
				throw new Error('username is required to start an AccountAction');
			}
		}

		//Build endpoint based on accountData

		_createClass(Account, [{
			key: 'get',

			//Get a user
			value: function get() {
				logger.debug({ description: 'Account data loaded successfully.', func: 'get', obj: 'Account' });
				return request.get(this.accountEndpoint).then(function (response) {
					logger.info({ description: 'Account data loaded successfully.', response: response, func: 'get', obj: 'Account' });
					return new Account(response);
				})['catch'](function (errRes) {
					logger.error({ description: 'Error getting user.', error: errRes, func: 'get', obj: 'Account' });
					return Promise.reject(errRes);
				});
			}

			//Update a Account
		}, {
			key: 'update',
			value: function update(accountData) {
				logger.debug({ description: 'Update user called.', accountData: accountData, func: 'update', obj: 'Account' });
				return request.put(this.accountEndpoint, accountData).then(function (response) {
					logger.info({ description: 'Account updated successfully.', func: 'update', obj: 'Account' });
					//TODO: Extend this with current info before returning
					return new Account(response);
				})['catch'](function (errRes) {
					logger.error({ description: 'Error updating user.', func: 'update', obj: 'Account' });
					return Promise.reject(errRes);
				});
			}

			//Delete a Account
		}, {
			key: 'del',
			value: function del(accountData) {
				logger.debug({ description: 'Delete user called.', func: 'del', obj: 'Account' });
				return request.del(this.accountEndpoint, accountData).then(function (response) {
					logger.info({ description: 'Delete user successful.', response: response, func: 'del', obj: 'Account' });
					return new Account(response);
				})['catch'](function (errRes) {
					logger.error({ description: 'Error deleting user.', accountData: accountData, error: errRes, func: 'del', obj: 'Account' });
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'accountEndpoint',
			get: function get() {
				var endpointArray = [_classesMatter2['default'].endpoint, 'accounts', this.username];
				//Check for app account action
				if (_lodash2['default'].has(this, 'app') && _lodash2['default'].has(this.app, 'name')) {
					endpointArray.splice(1, 0, 'apps', this.app.name);
				}
				//Create string from endpointArray
				var endpointStr = endpointArray.join('/');
				logger.log({ description: 'Account Endpoint built.', endpoint: endpointStr, func: 'accountEndpoint', obj: 'Account' });
				return endpointStr;
			}
		}]);

		return Account;
	})();

	exports['default'] = Account;
	module.exports = exports['default'];

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * Firepad is an open-source, collaborative code and text editor. It was designed
	 * to be embedded inside larger applications. Since it uses Firebase as a backend,
	 * it requires no server-side code and can be added to any web app simply by
	 * including a couple JavaScript files.
	 *
	 * Firepad 1.2.0
	 * http://www.firepad.io/
	 * License: MIT
	 * Copyright: 2014 Firebase
	 * With code from ot.js (Copyright 2012-2013 Tim Baumann)
	 */
	!function(a,b,c){"undefined"!=typeof module&&module.exports?module.exports=b():"function"==typeof c.define&&c.define.amd?!(__WEBPACK_AMD_DEFINE_FACTORY__ = (b), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):c[a]=b()}("Firepad",function(){var a=a||{};a.utils={},a.utils.makeEventEmitter=function(a,b){a.prototype.allowedEvents_=b,a.prototype.on=function(a,b,c){this.validateEventType_(a),this.eventListeners_=this.eventListeners_||{},this.eventListeners_[a]=this.eventListeners_[a]||[],this.eventListeners_[a].push({callback:b,context:c})},a.prototype.off=function(a,b){this.validateEventType_(a),this.eventListeners_=this.eventListeners_||{};for(var c=this.eventListeners_[a]||[],d=0;d<c.length;d++)if(c[d].callback===b)return void c.splice(d,1)},a.prototype.trigger=function(a){this.eventListeners_=this.eventListeners_||{};for(var b=this.eventListeners_[a]||[],c=0;c<b.length;c++)b[c].callback.apply(b[c].context,Array.prototype.slice.call(arguments,1))},a.prototype.validateEventType_=function(a){if(this.allowedEvents_){for(var b=!1,c=0;c<this.allowedEvents_.length;c++)if(this.allowedEvents_[c]===a){b=!0;break}if(!b)throw new Error('Unknown event "'+a+'"')}}},a.utils.elt=function(b,c,d){var e=document.createElement(b);if("string"==typeof c)a.utils.setTextContent(e,c);else if(c)for(var f=0;f<c.length;++f)e.appendChild(c[f]);for(var g in d||{})e.setAttribute(g,d[g]);return e},a.utils.setTextContent=function(a,b){a.innerHTML="",a.appendChild(document.createTextNode(b))},a.utils.on=function(a,b,c,d){a.addEventListener?a.addEventListener(b,c,d||!1):a.attachEvent&&a.attachEvent("on"+b,c)},a.utils.off=function(a,b,c,d){a.removeEventListener?a.removeEventListener(b,c,d||!1):a.detachEvent&&a.detachEvent("on"+b,c)},a.utils.preventDefault=function(a){a.preventDefault?a.preventDefault():a.returnValue=!1},a.utils.stopPropagation=function(a){a.stopPropagation?a.stopPropagation():a.cancelBubble=!0},a.utils.stopEvent=function(b){a.utils.preventDefault(b),a.utils.stopPropagation(b)},a.utils.stopEventAnd=function(b){return function(c){return b(c),a.utils.stopEvent(c),!1}},a.utils.trim=function(a){return a.replace(/^\s+/g,"").replace(/\s+$/g,"")},a.utils.stringEndsWith=function(a,b){for(var c="string"==typeof b?[b]:b,d=0;d<c.length;d++){var b=c[d];if(-1!==a.indexOf(b,a.length-b.length))return!0}return!1},a.utils.assert=function(a,b){if(!a)throw new Error(b||"assertion error")},a.utils.log=function(){if("undefined"!=typeof console&&"undefined"!=typeof console.log){for(var a=["Firepad:"],b=0;b<arguments.length;b++)a.push(arguments[b]);console.log.apply(console,a)}};var a=a||{};a.Span=function(){function a(a,b){this.pos=a,this.length=b}return a.prototype.end=function(){return this.pos+this.length},a}();var a=a||{};a.TextOp=function(){function b(a){this.type=a,this.chars=null,this.text=null,this.attributes=null,"insert"===a?(this.text=arguments[1],c.assert("string"==typeof this.text),this.attributes=arguments[2]||{},c.assert("object"==typeof this.attributes)):"delete"===a?(this.chars=arguments[1],c.assert("number"==typeof this.chars)):"retain"===a&&(this.chars=arguments[1],c.assert("number"==typeof this.chars),this.attributes=arguments[2]||{},c.assert("object"==typeof this.attributes))}var c=a.utils;return b.prototype.isInsert=function(){return"insert"===this.type},b.prototype.isDelete=function(){return"delete"===this.type},b.prototype.isRetain=function(){return"retain"===this.type},b.prototype.equals=function(a){return this.type===a.type&&this.text===a.text&&this.chars===a.chars&&this.attributesEqual(a.attributes)},b.prototype.attributesEqual=function(a){for(var b in this.attributes)if(this.attributes[b]!==a[b])return!1;for(b in a)if(this.attributes[b]!==a[b])return!1;return!0},b.prototype.hasEmptyAttributes=function(){var a=!0;for(var b in this.attributes){a=!1;break}return a},b}();var a=a||{};a.TextOperation=function(){"use strict";function b(){return this&&this.constructor===b?(this.ops=[],this.baseLength=0,void(this.targetLength=0)):new b}function c(a){var b=a.ops;switch(b.length){case 1:return b[0];case 2:return b[0].isRetain()?b[1]:b[1].isRetain()?b[0]:null;case 3:if(b[0].isRetain()&&b[2].isRetain())return b[1]}return null}function d(a){return a.ops[0].isRetain()?a.ops[0].chars:0}var e=a.TextOp,f=a.utils;return b.prototype.equals=function(a){if(this.baseLength!==a.baseLength)return!1;if(this.targetLength!==a.targetLength)return!1;if(this.ops.length!==a.ops.length)return!1;for(var b=0;b<this.ops.length;b++)if(!this.ops[b].equals(a.ops[b]))return!1;return!0},b.prototype.retain=function(a,b){if("number"!=typeof a||0>a)throw new Error("retain expects a positive integer.");if(0===a)return this;this.baseLength+=a,this.targetLength+=a,b=b||{};var c=this.ops.length>0?this.ops[this.ops.length-1]:null;return c&&c.isRetain()&&c.attributesEqual(b)?c.chars+=a:this.ops.push(new e("retain",a,b)),this},b.prototype.insert=function(a,b){if("string"!=typeof a)throw new Error("insert expects a string");if(""===a)return this;b=b||{},this.targetLength+=a.length;var c=this.ops.length>0?this.ops[this.ops.length-1]:null,d=this.ops.length>1?this.ops[this.ops.length-2]:null;return c&&c.isInsert()&&c.attributesEqual(b)?c.text+=a:c&&c.isDelete()?d&&d.isInsert()&&d.attributesEqual(b)?d.text+=a:(this.ops[this.ops.length-1]=new e("insert",a,b),this.ops.push(c)):this.ops.push(new e("insert",a,b)),this},b.prototype["delete"]=function(a){if("string"==typeof a&&(a=a.length),"number"!=typeof a||0>a)throw new Error("delete expects a positive integer or a string");if(0===a)return this;this.baseLength+=a;var b=this.ops.length>0?this.ops[this.ops.length-1]:null;return b&&b.isDelete()?b.chars+=a:this.ops.push(new e("delete",a)),this},b.prototype.isNoop=function(){return 0===this.ops.length||1===this.ops.length&&this.ops[0].isRetain()&&this.ops[0].hasEmptyAttributes()},b.prototype.clone=function(){for(var a=new b,c=0;c<this.ops.length;c++)this.ops[c].isRetain()?a.retain(this.ops[c].chars,this.ops[c].attributes):this.ops[c].isInsert()?a.insert(this.ops[c].text,this.ops[c].attributes):a["delete"](this.ops[c].chars);return a},b.prototype.toString=function(){var a=Array.prototype.map||function(a){for(var b=this,c=[],d=0,e=b.length;e>d;d++)c[d]=a(b[d]);return c};return a.call(this.ops,function(a){return a.isRetain()?"retain "+a.chars:a.isInsert()?"insert '"+a.text+"'":"delete "+a.chars}).join(", ")},b.prototype.toJSON=function(){for(var a=[],b=0;b<this.ops.length;b++)this.ops[b].hasEmptyAttributes()||a.push(this.ops[b].attributes),"retain"===this.ops[b].type?a.push(this.ops[b].chars):"insert"===this.ops[b].type?a.push(this.ops[b].text):"delete"===this.ops[b].type&&a.push(-this.ops[b].chars);return 0===a.length&&a.push(0),a},b.fromJSON=function(a){for(var c=new b,d=0,e=a.length;e>d;d++){var g=a[d],h={};"object"==typeof g&&(h=g,d++,g=a[d]),"number"==typeof g?g>0?c.retain(g,h):c["delete"](-g):(f.assert("string"==typeof g),c.insert(g,h))}return c},b.prototype.apply=function(a,b,c){var d=this;if(b=b||[],c=c||[],a.length!==d.baseLength)throw new Error("The operation's base length must be equal to the string's length.");for(var e,g,h=[],i=0,j=0,k=this.ops,l=0,m=k.length;m>l;l++){var n=k[l];if(n.isRetain()){if(j+n.chars>a.length)throw new Error("Operation can't retain more characters than are left in the string.");for(h[i++]=a.slice(j,j+n.chars),e=0;e<n.chars;e++){var o=b[j+e]||{},p={};for(g in o)p[g]=o[g],f.assert(p[g]!==!1);for(g in n.attributes)n.attributes[g]===!1?delete p[g]:p[g]=n.attributes[g],f.assert(p[g]!==!1);c.push(p)}j+=n.chars}else if(n.isInsert())for(h[i++]=n.text,e=0;e<n.text.length;e++){var q={};for(g in n.attributes)q[g]=n.attributes[g],f.assert(q[g]!==!1);c.push(q)}else j+=n.chars}if(j!==a.length)throw new Error("The operation didn't operate on the whole string.");var r=h.join("");return f.assert(r.length===c.length),r},b.prototype.invert=function(a){for(var c=0,d=new b,e=this.ops,f=0,g=e.length;g>f;f++){var h=e[f];h.isRetain()?(d.retain(h.chars),c+=h.chars):h.isInsert()?d["delete"](h.text.length):(d.insert(a.slice(c,c+h.chars)),c+=h.chars)}return d},b.prototype.compose=function(a){function c(a,b,c){var d,e={};for(d in a)e[d]=a[d];for(d in b)c&&b[d]===!1?delete e[d]:e[d]=b[d];return e}var d=this;if(d.targetLength!==a.baseLength)throw new Error("The base length of the second operation has to be the target length of the first operation");for(var e,f=new b,g=d.clone().ops,h=a.clone().ops,i=0,j=0,k=g[i++],l=h[j++];;){if("undefined"==typeof k&&"undefined"==typeof l)break;if(k&&k.isDelete())f["delete"](k.chars),k=g[i++];else if(l&&l.isInsert())f.insert(l.text,l.attributes),l=h[j++];else{if("undefined"==typeof k)throw new Error("Cannot compose operations: first operation is too short.");if("undefined"==typeof l)throw new Error("Cannot compose operations: first operation is too long.");if(k.isRetain()&&l.isRetain())e=c(k.attributes,l.attributes),k.chars>l.chars?(f.retain(l.chars,e),k.chars-=l.chars,l=h[j++]):k.chars===l.chars?(f.retain(k.chars,e),k=g[i++],l=h[j++]):(f.retain(k.chars,e),l.chars-=k.chars,k=g[i++]);else if(k.isInsert()&&l.isDelete())k.text.length>l.chars?(k.text=k.text.slice(l.chars),l=h[j++]):k.text.length===l.chars?(k=g[i++],l=h[j++]):(l.chars-=k.text.length,k=g[i++]);else if(k.isInsert()&&l.isRetain())e=c(k.attributes,l.attributes,!0),k.text.length>l.chars?(f.insert(k.text.slice(0,l.chars),e),k.text=k.text.slice(l.chars),l=h[j++]):k.text.length===l.chars?(f.insert(k.text,e),k=g[i++],l=h[j++]):(f.insert(k.text,e),l.chars-=k.text.length,k=g[i++]);else{if(!k.isRetain()||!l.isDelete())throw new Error("This shouldn't happen: op1: "+JSON.stringify(k)+", op2: "+JSON.stringify(l));k.chars>l.chars?(f["delete"](l.chars),k.chars-=l.chars,l=h[j++]):k.chars===l.chars?(f["delete"](l.chars),k=g[i++],l=h[j++]):(f["delete"](k.chars),l.chars-=k.chars,k=g[i++])}}}return f},b.prototype.shouldBeComposedWith=function(a){if(this.isNoop()||a.isNoop())return!0;var b=d(this),e=d(a),f=c(this),g=c(a);return f&&g?f.isInsert()&&g.isInsert()?b+f.text.length===e:f.isDelete()&&g.isDelete()?e+g.chars===b||b===e:!1:!1},b.prototype.shouldBeComposedWithInverted=function(a){if(this.isNoop()||a.isNoop())return!0;var b=d(this),e=d(a),f=c(this),g=c(a);return f&&g?f.isInsert()&&g.isInsert()?b+f.text.length===e||b===e:f.isDelete()&&g.isDelete()?e+g.chars===b:!1:!1},b.transformAttributes=function(a,b){var c,d={},e={},g={};for(c in a)g[c]=!0;for(c in b)g[c]=!0;for(c in g){var h=a[c],i=b[c];f.assert(null!=h||null!=i),null==h?e[c]=i:null==i?d[c]=h:h===i||(d[c]=h)}return[d,e]},b.transform=function(a,c){if(a.baseLength!==c.baseLength)throw new Error("Both operations have to have the same base length");for(var d=new b,e=new b,f=a.clone().ops,g=c.clone().ops,h=0,i=0,j=f[h++],k=g[i++];;){if("undefined"==typeof j&&"undefined"==typeof k)break;if(j&&j.isInsert())d.insert(j.text,j.attributes),e.retain(j.text.length),j=f[h++];else if(k&&k.isInsert())d.retain(k.text.length),e.insert(k.text,k.attributes),k=g[i++];else{if("undefined"==typeof j)throw new Error("Cannot transform operations: first operation is too short.");if("undefined"==typeof k)throw new Error("Cannot transform operations: first operation is too long.");var l;if(j.isRetain()&&k.isRetain()){var m=b.transformAttributes(j.attributes,k.attributes);j.chars>k.chars?(l=k.chars,j.chars-=k.chars,k=g[i++]):j.chars===k.chars?(l=k.chars,j=f[h++],k=g[i++]):(l=j.chars,k.chars-=j.chars,j=f[h++]),d.retain(l,m[0]),e.retain(l,m[1])}else if(j.isDelete()&&k.isDelete())j.chars>k.chars?(j.chars-=k.chars,k=g[i++]):j.chars===k.chars?(j=f[h++],k=g[i++]):(k.chars-=j.chars,j=f[h++]);else if(j.isDelete()&&k.isRetain())j.chars>k.chars?(l=k.chars,j.chars-=k.chars,k=g[i++]):j.chars===k.chars?(l=k.chars,j=f[h++],k=g[i++]):(l=j.chars,k.chars-=j.chars,j=f[h++]),d["delete"](l);else{if(!j.isRetain()||!k.isDelete())throw new Error("The two operations aren't compatible");j.chars>k.chars?(l=k.chars,j.chars-=k.chars,k=g[i++]):j.chars===k.chars?(l=j.chars,j=f[h++],k=g[i++]):(l=j.chars,k.chars-=j.chars,j=f[h++]),e["delete"](l)}}}return[d,e]},b}();var a=a||{};a.AnnotationList=function(){function b(a,b){if(!a)throw new Error("AnnotationList assertion failed"+(b?": "+b:""))}function c(a,b){this.pos=a,this.length=b.length,this.annotation=b.annotation,this.attachedObject_=b.attachedObject}function d(a,b){this.pos=a,this.length=b.length,this.annotation=b.annotation,this.node_=b}function e(a){this.head_=new f(0,h),this.changeHandler_=a}function f(a,b){this.length=a,this.annotation=b,this.attachedObject=null,this.next=null}var g=a.Span;c.prototype.getAttachedObject=function(){return this.attachedObject_},d.prototype.attachObject=function(a){this.node_.attachedObject=a};var h={equals:function(){return!1}};return e.prototype.insertAnnotatedSpan=function(a,c){this.wrapOperation_(new g(a.pos,0),function(d,e){b(!e||null===e.next);var g=new f(a.length,c);if(e){b(a.pos>d&&a.pos<d+e.length);var i=new f(0,h);return i.next=new f(a.pos-d,e.annotation),i.next.next=g,g.next=new f(d+e.length-a.pos,e.annotation),i.next}return g})},e.prototype.removeSpan=function(a){0!==a.length&&this.wrapOperation_(a,function(c,d){b(null!==d);var e=new f(0,h),g=e;for(a.pos>c&&(g.next=new f(a.pos-c,d.annotation),g=g.next);a.end()>c+d.length;)c+=d.length,d=d.next;var i=c+d.length-a.end();return i>0&&(g.next=new f(i,d.annotation)),e.next})},e.prototype.updateSpan=function(a,c){0!==a.length&&this.wrapOperation_(a,function(d,e){b(null!==e);var g=new f(0,h),i=g,j=d,k=a.pos-j;for(b(k<e.length),k>0&&(i.next=new f(k,e.annotation),i=i.next,j+=i.length);null!==e&&a.end()>=d+e.length;){var l=d+e.length-j;i.next=new f(l,c(e.annotation,l)),i=i.next,d+=e.length,e=e.next,j=d}var m=a.end()-j;return m>0&&(b(m<e.length),i.next=new f(m,c(e.annotation,m)),i=i.next,j+=i.length,i.next=new f(d+e.length-j,e.annotation)),g.next})},e.prototype.wrapOperation_=function(a,b){if(a.pos<0)throw new Error("Span start cannot be negative.");var e,g=[],h=[],i=this.getAffectedNodes_(a);null!==i.start?(e=i.end.next,i.end.next=null):e=i.succ;var j=b(i.startPos,i.start),k=!1,l=!1;if(j){this.mergeNodesWithSameAnnotations_(j);var m;for(i.pred&&i.pred.annotation.equals(j.annotation)?(k=!0,j.length+=i.pred.length,i.beforePred.next=j,m=i.predPos):(i.beforeStart.next=j,m=i.startPos);j.next;)h.push(new d(m,j)),m+=j.length,j=j.next;i.succ&&i.succ.annotation.equals(j.annotation)?(j.length+=i.succ.length,l=!0,j.next=i.succ.next):j.next=e,h.push(new d(m,j))}else i.pred&&i.succ&&i.pred.annotation.equals(i.succ.annotation)?(k=!0,l=!0,j=new f(i.pred.length+i.succ.length,i.pred.annotation),i.beforePred.next=j,j.next=i.succ.next,h.push(new d(i.startPos-i.pred.length,j))):i.beforeStart.next=e;k&&g.push(new c(i.predPos,i.pred));for(var n=i.startPos,o=i.start;null!==o;)g.push(new c(n,o)),n+=o.length,o=o.next;l&&g.push(new c(n,i.succ)),this.changeHandler_(g,h)},e.prototype.getAffectedNodes_=function(a){for(var b={},c=null,d=this.head_,e=d.next,f=0;null!==e&&a.pos>=f+e.length;)f+=e.length,c=d,d=e,e=e.next;if(null===e&&(0!==a.length||a.pos!==f))throw new Error("Span start exceeds the bounds of the AnnotationList.");for(b.startPos=f,0===a.length&&a.pos===f?b.start=null:b.start=e,b.beforeStart=d,f===a.pos&&f>0?(b.pred=d,b.predPos=f-d.length,b.beforePred=c):b.pred=null;null!==e&&a.end()>f;)f+=e.length,d=e,e=e.next;if(a.end()>f)throw new Error("Span end exceeds the bounds of the AnnotationList.");return 0===a.length&&a.end()===f?b.end=null:b.end=d,b.succ=f===a.end()?e:null,b},e.prototype.mergeNodesWithSameAnnotations_=function(a){if(a)for(var b=null,c=a;c;)b&&b.annotation.equals(c.annotation)?(b.length+=c.length,b.next=c.next):b=c,c=c.next},e.prototype.forEach=function(a){for(var b=this.head_.next;null!==b;)a(b.length,b.annotation,b.attachedObject),b=b.next},e.prototype.getAnnotatedSpansForPos=function(a){for(var b=0,d=this.head_.next,e=null;null!==d&&b+d.length<=a;)b+=d.length,e=d,d=d.next;if(null===d&&b!==a)throw new Error("pos exceeds the bounds of the AnnotationList");var f=[];return b===a&&e&&f.push(new c(b-e.length,e)),d&&f.push(new c(b,d)),f},e.prototype.getAnnotatedSpansForSpan=function(a){if(0===a.length)return[];for(var b=[],c=this.getAffectedNodes_(a),d=c.startPos,e=c.start;null!==e&&d<a.end();){var f=Math.max(d,a.pos),h=Math.min(d+e.length,a.end()),i=new g(f,h-f);i.annotation=e.annotation,b.push(i),d+=e.length,e=e.next}return b},e.prototype.count=function(){for(var a=0,c=this.head_.next,d=null;null!==c;)d&&b(!d.annotation.equals(c.annotation)),d=c,c=c.next,a++;return a},f.prototype.clone=function(){var a=new f(this.spanLength,this.annotation);return a.next=this.next,a},e}();var a=a||{};a.Cursor=function(){"use strict";function a(a,b){this.position=a,this.selectionEnd=b}return a.fromJSON=function(b){return new a(b.position,b.selectionEnd)},a.prototype.equals=function(a){return this.position===a.position&&this.selectionEnd===a.selectionEnd},a.prototype.compose=function(a){return a},a.prototype.transform=function(b){function c(a){for(var c=a,d=b.ops,e=0,f=b.ops.length;f>e&&(d[e].isRetain()?a-=d[e].chars:d[e].isInsert()?c+=d[e].text.length:(c-=Math.min(a,d[e].chars),a-=d[e].chars),!(0>a));e++);return c}var d=c(this.position);return this.position===this.selectionEnd?new a(d,d):new a(d,c(this.selectionEnd))},a}();var a=a||{};a.FirebaseAdapter=function(b){function c(a,b,c){this.ref_=a,this.ready_=!1,this.firebaseCallbacks_=[],this.zombie_=!1,this.document_=new g,this.revision_=0,this.pendingReceivedRevisions_={};var d=this;b?(this.setUserId(b),this.setColor(c),this.firebaseOn_(a.root().child(".info/connected"),"value",function(a){a.val()===!0&&d.initializeUserData_()},this),this.on("ready",function(){d.monitorCursors_()})):this.userId_=a.push().key(),setTimeout(function(){d.monitorHistory_()},0)}function d(a,b){if(!a)throw new Error(b||"assertion error")}function e(a){if(0===a)return"A0";for(var b="";a>0;){var c=a%j.length;b=j[c]+b,a-=c,a/=j.length}var d=j[b.length+9];return d+b}function f(a){d(a.length>0&&a[0]===j[a.length+8]);for(var b=0,c=1;c<a.length;c++)b*=j.length,b+=j.indexOf(a[c]);return b}"function"=="function"&&"function"!=typeof Firebase&&(Firebase=__webpack_require__(18));var g=a.TextOperation,h=a.utils,i=100;h.makeEventEmitter(c,["ready","cursor","operation","ack","retry"]),c.prototype.dispose=function(){var a=this;return this.ready_?(this.removeFirebaseCallbacks_(),this.userRef_&&(this.userRef_.child("cursor").remove(),this.userRef_.child("color").remove()),this.ref_=null,this.document_=null,void(this.zombie_=!0)):void this.on("ready",function(){a.dispose()})},c.prototype.setUserId=function(a){this.userRef_&&(this.userRef_.child("cursor").remove(),this.userRef_.child("cursor").onDisconnect().cancel(),this.userRef_.child("color").remove(),this.userRef_.child("color").onDisconnect().cancel()),this.userId_=a,this.userRef_=this.ref_.child("users").child(a),this.initializeUserData_()},c.prototype.isHistoryEmpty=function(){return d(this.ready_,"Not ready yet."),0===this.revision_},c.prototype.sendOperation=function(a,b){function c(a,d){f.ref_.child("history").child(a).transaction(function(a){return null===a?d:void 0},function(e,g,i){if(e){if("disconnect"!==e.message)throw h.log("Transaction failure!",e),e;f.sent_&&f.sent_.id===a?setTimeout(function(){c(a,d)},0):b&&b(e,!1)}else b&&b(null,g)},!1)}var f=this;if(!this.ready_)return void this.on("ready",function(){f.trigger("retry")});d(this.document_.targetLength===a.baseLength,"sendOperation() called with invalid operation.");var g=e(this.revision_);this.sent_={id:g,op:a},c(g,{a:f.userId_,o:a.toJSON(),t:Firebase.ServerValue.TIMESTAMP})},c.prototype.sendCursor=function(a){this.userRef_.child("cursor").set(a),this.cursor_=a},c.prototype.setColor=function(a){this.userRef_.child("color").set(a),this.color_=a},c.prototype.getDocument=function(){return this.document_},c.prototype.registerCallbacks=function(a){for(var b in a)this.on(b,a[b])},c.prototype.initializeUserData_=function(){this.userRef_.child("cursor").onDisconnect().remove(),this.userRef_.child("color").onDisconnect().remove(),this.sendCursor(this.cursor_||null),this.setColor(this.color_||null)},c.prototype.monitorCursors_=function(){function a(a){var b=a.key(),d=a.val();c.trigger("cursor",b,d.cursor,d.color)}var b=this.ref_.child("users"),c=this;this.firebaseOn_(b,"child_added",a),this.firebaseOn_(b,"child_changed",a),this.firebaseOn_(b,"child_removed",function(a){var b=a.key();c.trigger("cursor",b,null)})},c.prototype.monitorHistory_=function(){var a=this;this.ref_.child("checkpoint").once("value",function(b){if(!a.zombie_){var c=b.child("id").val(),d=b.child("o").val(),e=b.child("a").val();null!=d&&null!=c&&null!==e?(a.pendingReceivedRevisions_[c]={o:d,a:e},a.checkpointRevision_=f(c),a.monitorHistoryStartingAt_(a.checkpointRevision_+1)):(a.checkpointRevision_=0,a.monitorHistoryStartingAt_(a.checkpointRevision_))}})},c.prototype.monitorHistoryStartingAt_=function(a){var b=this.ref_.child("history").startAt(null,e(a)),c=this;setTimeout(function(){c.firebaseOn_(b,"child_added",function(a){var b=a.key();c.pendingReceivedRevisions_[b]=a.val(),c.ready_&&c.handlePendingReceivedRevisions_()}),b.once("value",function(){c.handleInitialRevisions_()})},0)},c.prototype.handleInitialRevisions_=function(){d(!this.ready_,"Should not be called multiple times."),this.revision_=this.checkpointRevision_;for(var a=e(this.revision_),b=this.pendingReceivedRevisions_;null!=b[a];){var c=this.parseRevision_(b[a]);c?this.document_=this.document_.compose(c.operation):h.log("Invalid operation.",this.ref_.toString(),a,b[a]),delete b[a],this.revision_++,a=e(this.revision_)}this.trigger("operation",this.document_),this.ready_=!0;var f=this;setTimeout(function(){f.trigger("ready")},0)},c.prototype.handlePendingReceivedRevisions_=function(){for(var a=this.pendingReceivedRevisions_,b=e(this.revision_),c=!1;null!=a[b];){this.revision_++;var d=this.parseRevision_(a[b]);d?(this.document_=this.document_.compose(d.operation),this.sent_&&b===this.sent_.id?this.sent_.op.equals(d.operation)&&d.author===this.userId_?(this.revision_%i===0&&this.saveCheckpoint_(),this.sent_=null,this.trigger("ack")):(c=!0,this.trigger("operation",d.operation)):this.trigger("operation",d.operation)):h.log("Invalid operation.",this.ref_.toString(),b,a[b]),delete a[b],b=e(this.revision_)}c&&(this.sent_=null,this.trigger("retry"))},c.prototype.parseRevision_=function(a){if("object"!=typeof a)return null;if("string"!=typeof a.a||"object"!=typeof a.o)return null;var b=null;try{b=g.fromJSON(a.o)}catch(c){return null}return b.baseLength!==this.document_.targetLength?null:{author:a.a,operation:b}},c.prototype.saveCheckpoint_=function(){this.ref_.child("checkpoint").set({a:this.userId_,o:this.document_.toJSON(),id:e(this.revision_-1)})},c.prototype.firebaseOn_=function(a,b,c,d){return this.firebaseCallbacks_.push({ref:a,eventType:b,callback:c,context:d}),a.on(b,c,d),c},c.prototype.firebaseOff_=function(a,b,c,d){a.off(b,c,d);for(var e=0;e<this.firebaseCallbacks_.length;e++){var f=this.firebaseCallbacks_[e];if(f.ref===a&&f.eventType===b&&f.callback===c&&f.context===d){this.firebaseCallbacks_.splice(e,1);break}}},c.prototype.removeFirebaseCallbacks_=function(){for(var a=0;a<this.firebaseCallbacks_.length;a++){var b=this.firebaseCallbacks_[a];b.ref.off(b.eventType,b.callback,b.context)}this.firebaseCallbacks_=[]};var j="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";return c}();var a=a||{};a.RichTextToolbar=function(b){function c(a){this.imageInsertionUI=a,this.element_=this.makeElement_()}var d=a.utils;return d.makeEventEmitter(c,["bold","italic","underline","strike","font","font-size","color","left","center","right","unordered-list","ordered-list","todo-list","indent-increase","indent-decrease","undo","redo","insert-image"]),c.prototype.element=function(){return this.element_},c.prototype.makeButton_=function(a,b){var c=this;b=b||a;var e=d.elt("a",[d.elt("span","",{"class":"firepad-tb-"+b})],{"class":"firepad-btn"});return d.on(e,"click",d.stopEventAnd(function(){c.trigger(a)})),e},c.prototype.makeElement_=function(){var a=this,b=this.makeFontDropdown_(),c=this.makeFontSizeDropdown_(),e=this.makeColorDropdown_(),f=[d.elt("div",[b],{"class":"firepad-btn-group"}),d.elt("div",[c],{"class":"firepad-btn-group"}),d.elt("div",[e],{"class":"firepad-btn-group"}),d.elt("div",[a.makeButton_("bold"),a.makeButton_("italic"),a.makeButton_("underline"),a.makeButton_("strike","strikethrough")],{"class":"firepad-btn-group"}),d.elt("div",[a.makeButton_("unordered-list","list-2"),a.makeButton_("ordered-list","numbered-list"),a.makeButton_("todo-list","list")],{"class":"firepad-btn-group"}),d.elt("div",[a.makeButton_("indent-decrease"),a.makeButton_("indent-increase")],{"class":"firepad-btn-group"}),d.elt("div",[a.makeButton_("left","paragraph-left"),a.makeButton_("center","paragraph-center"),a.makeButton_("right","paragraph-right")],{"class":"firepad-btn-group"}),d.elt("div",[a.makeButton_("undo"),a.makeButton_("redo")],{"class":"firepad-btn-group"})];a.imageInsertionUI&&f.push(d.elt("div",[a.makeButton_("insert-image")],{"class":"firepad-btn-group"}));var g=d.elt("div",f,{"class":"firepad-toolbar-wrapper"}),h=d.elt("div",null,{"class":"firepad-toolbar"});return h.appendChild(g),h},c.prototype.makeFontDropdown_=function(){for(var a=["Arial","Comic Sans MS","Courier New","Impact","Times New Roman","Verdana"],b=[],c=0;c<a.length;c++){var e=d.elt("span",a[c]);e.setAttribute("style","font-family:"+a[c]),b.push({content:e,value:a[c]})}return this.makeDropdown_("Font","font",b)},c.prototype.makeFontSizeDropdown_=function(){for(var a=[9,10,12,14,18,24,32,42],b=[],c=0;c<a.length;c++){var e=d.elt("span",a[c].toString());e.setAttribute("style","font-size:"+a[c]+"px; line-height:"+(a[c]-6)+"px;"),b.push({content:e,value:a[c]})}return this.makeDropdown_("Size","font-size",b,"px")},c.prototype.makeColorDropdown_=function(){for(var a=["black","red","green","blue","yellow","cyan","magenta","grey"],b=[],c=0;c<a.length;c++){var e=d.elt("div");e.className="firepad-color-dropdown-item",e.setAttribute("style","background-color:"+a[c]),b.push({content:e,value:a[c]})}return this.makeDropdown_("Color","color",b)},c.prototype.makeDropdown_=function(a,b,c,e){function f(){l||(k.style.display="block",d.on(document,"click",g,!0),l=!0)}function g(){l&&(k.style.display="",d.off(document,"click",g,!0),l=!1),m=!0,setTimeout(function(){m=!1},0)}function h(a,c){"object"!=typeof a&&(a=document.createTextNode(String(a)));var f=d.elt("a",[a]);d.on(f,"click",d.stopEventAnd(function(){g(),i.trigger(b,c+e)})),k.appendChild(f)}e=e||"";var i=this,j=d.elt("a",a+" ▾",{"class":"firepad-btn firepad-dropdown"}),k=d.elt("ul",[],{"class":"firepad-dropdown-menu"});j.appendChild(k);for(var l=!1,m=!1,n=0;n<c.length;n++){var o=c[n].content,p=c[n].value;h(o,p)}return d.on(j,"click",d.stopEventAnd(function(){m||f()})),j},c}();var a=a||{};a.WrappedOperation=function(a){"use strict";function b(a,b){this.wrapped=a,this.meta=b}function c(a,b){for(var c in a)a.hasOwnProperty(c)&&(b[c]=a[c])}function d(a,b){if(a&&"object"==typeof a){if("function"==typeof a.compose)return a.compose(b);var d={};return c(a,d),c(b,d),d}return b}function e(a,b){return a&&"object"==typeof a&&"function"==typeof a.transform?a.transform(b):a}return b.prototype.apply=function(){return this.wrapped.apply.apply(this.wrapped,arguments)},b.prototype.invert=function(){var a=this.meta;return new b(this.wrapped.invert.apply(this.wrapped,arguments),a&&"object"==typeof a&&"function"==typeof a.invert?a.invert.apply(a,arguments):a)},b.prototype.compose=function(a){return new b(this.wrapped.compose(a.wrapped),d(this.meta,a.meta))},b.transform=function(a,c){var d=a.wrapped.constructor.transform,f=d(a.wrapped,c.wrapped);return[new b(f[0],e(a.meta,c.wrapped)),new b(f[1],e(c.meta,a.wrapped))]},b}();var a=a||{};a.UndoManager=function(){"use strict";function a(a){this.maxItems=a||50,this.state=c,this.dontCompose=!1,this.undoStack=[],this.redoStack=[]}function b(a,b){for(var c=[],d=b.constructor,e=a.length-1;e>=0;e--){var f=d.transform(a[e],b);"function"==typeof f[0].isNoop&&f[0].isNoop()||c.push(f[0]),b=f[1]}return c.reverse()}var c="normal",d="undoing",e="redoing";return a.prototype.add=function(a,b){if(this.state===d)this.redoStack.push(a),this.dontCompose=!0;else if(this.state===e)this.undoStack.push(a),this.dontCompose=!0;else{var c=this.undoStack;!this.dontCompose&&b&&c.length>0?c.push(a.compose(c.pop())):(c.push(a),c.length>this.maxItems&&c.shift()),this.dontCompose=!1,this.redoStack=[]}},a.prototype.transform=function(a){this.undoStack=b(this.undoStack,a),this.redoStack=b(this.redoStack,a)},a.prototype.performUndo=function(a){if(this.state=d,0===this.undoStack.length)throw new Error("undo not possible");a(this.undoStack.pop()),this.state=c},a.prototype.performRedo=function(a){if(this.state=e,0===this.redoStack.length)throw new Error("redo not possible");a(this.redoStack.pop()),this.state=c},a.prototype.canUndo=function(){return 0!==this.undoStack.length},a.prototype.canRedo=function(){return 0!==this.redoStack.length},a.prototype.isUndoing=function(){return this.state===d},a.prototype.isRedoing=function(){return this.state===e},a}();var a=a||{};a.Client=function(){"use strict";function a(){this.state=e}function b(){}function c(a){this.outstanding=a}function d(a,b){this.outstanding=a,this.buffer=b}a.prototype.setState=function(a){this.state=a},a.prototype.applyClient=function(a){this.setState(this.state.applyClient(this,a))},a.prototype.applyServer=function(a){this.setState(this.state.applyServer(this,a))},a.prototype.serverAck=function(){this.setState(this.state.serverAck(this))},a.prototype.serverRetry=function(){this.setState(this.state.serverRetry(this))},a.prototype.sendOperation=function(a){throw new Error("sendOperation must be defined in child class")},a.prototype.applyOperation=function(a){throw new Error("applyOperation must be defined in child class")},a.Synchronized=b,b.prototype.applyClient=function(a,b){return a.sendOperation(b),new c(b)},b.prototype.applyServer=function(a,b){return a.applyOperation(b),this},b.prototype.serverAck=function(a){throw new Error("There is no pending operation.")},b.prototype.serverRetry=function(a){throw new Error("There is no pending operation.")};var e=new b;return a.AwaitingConfirm=c,c.prototype.applyClient=function(a,b){return new d(this.outstanding,b)},c.prototype.applyServer=function(a,b){var d=b.constructor.transform(this.outstanding,b);return a.applyOperation(d[1]),new c(d[0])},c.prototype.serverAck=function(a){return e},c.prototype.serverRetry=function(a){return a.sendOperation(this.outstanding),this},a.AwaitingWithBuffer=d,d.prototype.applyClient=function(a,b){var c=this.buffer.compose(b);return new d(this.outstanding,c)},d.prototype.applyServer=function(a,b){var c=b.constructor.transform,e=c(this.outstanding,b),f=c(this.buffer,e[1]);return a.applyOperation(f[1]),new d(e[0],f[0])},d.prototype.serverRetry=function(a){var b=this.outstanding.compose(this.buffer);return a.sendOperation(b),new c(b)},d.prototype.serverAck=function(a){return a.sendOperation(this.buffer),new c(this.buffer)},a}();var a=a||{};a.EditorClient=function(){"use strict";function b(a,b){this.cursorBefore=a,this.cursorAfter=b}function c(a,b){this.id=a,this.editorAdapter=b,this.li=document.createElement("li")}function d(a,b){g.call(this),this.serverAdapter=a,this.editorAdapter=b,this.undoManager=new i,this.clients={};var c=this;this.editorAdapter.registerCallbacks({change:function(a,b){c.onChange(a,b)},cursorActivity:function(){c.onCursorActivity()},blur:function(){c.onBlur()},focus:function(){c.onFocus()}}),this.editorAdapter.registerUndo(function(){c.undo()}),this.editorAdapter.registerRedo(function(){c.redo()}),this.serverAdapter.registerCallbacks({ack:function(){c.serverAck(),c.focused&&c.state instanceof g.Synchronized&&(c.updateCursor(),c.sendCursor(c.cursor)),c.emitStatus()},retry:function(){c.serverRetry()},operation:function(a){c.applyServer(a)},cursor:function(a,b,d){if(c.serverAdapter.userId_!==a&&c.state instanceof g.Synchronized){var e=c.getClientObject(a);b?(d&&e.setColor(d),e.updateCursor(h.fromJSON(b))):e.removeCursor()}}})}function e(a,b){function c(){}c.prototype=b.prototype,
	a.prototype=new c,a.prototype.constructor=a}function f(a){return a[a.length-1]}var g=a.Client,h=a.Cursor,i=a.UndoManager,j=a.WrappedOperation;return b.prototype.invert=function(){return new b(this.cursorAfter,this.cursorBefore)},b.prototype.compose=function(a){return new b(this.cursorBefore,a.cursorAfter)},b.prototype.transform=function(a){return new b(this.cursorBefore?this.cursorBefore.transform(a):null,this.cursorAfter?this.cursorAfter.transform(a):null)},c.prototype.setColor=function(a){this.color=a},c.prototype.updateCursor=function(a){this.removeCursor(),this.cursor=a,this.mark=this.editorAdapter.setOtherCursor(a,this.color,this.id)},c.prototype.removeCursor=function(){this.mark&&this.mark.clear()},e(d,g),d.prototype.getClientObject=function(a){var b=this.clients[a];return b?b:this.clients[a]=new c(a,this.editorAdapter)},d.prototype.applyUnredo=function(a){this.undoManager.add(this.editorAdapter.invertOperation(a)),this.editorAdapter.applyOperation(a.wrapped),this.cursor=a.meta.cursorAfter,this.cursor&&this.editorAdapter.setCursor(this.cursor),this.applyClient(a.wrapped)},d.prototype.undo=function(){var a=this;this.undoManager.canUndo()&&this.undoManager.performUndo(function(b){a.applyUnredo(b)})},d.prototype.redo=function(){var a=this;this.undoManager.canRedo()&&this.undoManager.performRedo(function(b){a.applyUnredo(b)})},d.prototype.onChange=function(a,c){var d=this.cursor;this.updateCursor();var e=this.undoManager.undoStack.length>0&&c.shouldBeComposedWithInverted(f(this.undoManager.undoStack).wrapped),g=new b(this.cursor,d);this.undoManager.add(new j(c,g),e),this.applyClient(a)},d.prototype.updateCursor=function(){this.cursor=this.editorAdapter.getCursor()},d.prototype.onCursorActivity=function(){var a=this.cursor;this.updateCursor(),!this.focused||a&&this.cursor.equals(a)||this.sendCursor(this.cursor)},d.prototype.onBlur=function(){this.cursor=null,this.sendCursor(null),this.focused=!1},d.prototype.onFocus=function(){this.focused=!0,this.onCursorActivity()},d.prototype.sendCursor=function(a){this.state instanceof g.AwaitingWithBuffer||this.serverAdapter.sendCursor(a)},d.prototype.sendOperation=function(a){this.serverAdapter.sendOperation(a),this.emitStatus()},d.prototype.applyOperation=function(a){this.editorAdapter.applyOperation(a),this.updateCursor(),this.undoManager.transform(new j(a,null))},d.prototype.emitStatus=function(){var a=this;setTimeout(function(){a.trigger("synced",a.state instanceof g.Synchronized)},0)},d}(),a.utils.makeEventEmitter(a.EditorClient,["synced"]);var a,b=function(a,b){return function(){return a.apply(b,arguments)}},c=[].slice;("undefined"==typeof a||null===a)&&(a={}),a.ACEAdapter=function(){function d(a){this.onCursorActivity=b(this.onCursorActivity,this),this.onFocus=b(this.onFocus,this),this.onBlur=b(this.onBlur,this),this.onChange=b(this.onChange,this);var c;this.ace=a,this.aceSession=this.ace.getSession(),this.aceDoc=this.aceSession.getDocument(),this.aceDoc.setNewLineMode("unix"),this.grabDocumentState(),this.ace.on("change",this.onChange),this.ace.on("blur",this.onBlur),this.ace.on("focus",this.onFocus),this.aceSession.selection.on("changeCursor",this.onCursorActivity),null==this.aceRange&&(this.aceRange=(null!=(c=ace.require)?c:__webpack_require__(71))("ace/range").Range)}return d.prototype.ignoreChanges=!1,d.prototype.grabDocumentState=function(){return this.lastDocLines=this.aceDoc.getAllLines(),this.lastCursorRange=this.aceSession.selection.getRange()},d.prototype.detach=function(){return this.ace.removeListener("change",this.onChange),this.ace.removeListener("blur",this.onBlur),this.ace.removeListener("focus",this.onCursorActivity),this.aceSession.selection.removeListener("changeCursor",this.onCursorActivity)},d.prototype.onChange=function(a){var b;return this.ignoreChanges?void 0:(b=this.operationFromACEChange(a),this.trigger.apply(this,["change"].concat(c.call(b))),this.grabDocumentState())},d.prototype.onBlur=function(){return this.ace.selection.isEmpty()?this.trigger("blur"):void 0},d.prototype.onFocus=function(){return this.trigger("focus")},d.prototype.onCursorActivity=function(){var a=this;return setTimeout(function(){return a.trigger("cursorActivity")},0)},d.prototype.operationFromACEChange=function(b){var c,d,e,f,g,h,i,j,k;return d=b.data,"insertLines"===(j=d.action)||"removeLines"===j?(i=d.lines.join("\n")+"\n",c=d.action.replace("Lines","")):(i=d.text.replace(this.aceDoc.getNewLineCharacter(),"\n"),c=d.action.replace("Text","")),h=this.indexFromPos(d.range.start),g=this.lastDocLines.join("\n").length-h,"remove"===c&&(g-=i.length),f=(new a.TextOperation).retain(h).insert(i).retain(g),e=(new a.TextOperation).retain(h)["delete"](i).retain(g),"remove"===c&&(k=[e,f],f=k[0],e=k[1]),[f,e]},d.prototype.applyOperationToACE=function(a){var b,c,d,e,f,g,h,i;for(c=0,i=a.ops,g=0,h=i.length;h>g;g++)d=i[g],d.isRetain()?c+=d.chars:d.isInsert()?(this.aceDoc.insert(this.posFromIndex(c),d.text),c+=d.text.length):d.isDelete()&&(b=this.posFromIndex(c),f=this.posFromIndex(c+d.chars),e=this.aceRange.fromPoints(b,f),this.aceDoc.remove(e));return this.grabDocumentState()},d.prototype.posFromIndex=function(a){var b,c,d,e,f;for(f=this.aceDoc.$lines,c=d=0,e=f.length;e>d&&(b=f[c],!(a<=b.length));c=++d)a-=b.length+1;return{row:c,column:a}},d.prototype.indexFromPos=function(a,b){var c,d,e,f;for(null==b&&(b=this.lastDocLines),d=0,c=e=0,f=a.row;f>=0?f>e:e>f;c=f>=0?++e:--e)d+=this.lastDocLines[c].length+1;return d+=a.column},d.prototype.getValue=function(){return this.aceDoc.getValue()},d.prototype.getCursor=function(){var b,c,d,e,f,g;try{e=this.indexFromPos(this.aceSession.selection.getRange().start,this.aceDoc.$lines),d=this.indexFromPos(this.aceSession.selection.getRange().end,this.aceDoc.$lines)}catch(h){b=h;try{e=this.indexFromPos(this.lastCursorRange.start),d=this.indexFromPos(this.lastCursorRange.end)}catch(h){c=h,console.log("Couldn't figure out the cursor range:",c,"-- setting it to 0:0."),f=[0,0],e=f[0],d=f[1]}}return e>d&&(g=[d,e],e=g[0],d=g[1]),new a.Cursor(e,d)},d.prototype.setCursor=function(a){var b,c,d;return c=this.posFromIndex(a.position),b=this.posFromIndex(a.selectionEnd),a.position>a.selectionEnd&&(d=[b,c],c=d[0],b=d[1]),this.aceSession.selection.setSelectionRange(new this.aceRange(c.row,c.column,b.row,b.column))},d.prototype.setOtherCursor=function(a,b,c){var d,e,f,g,h,i,j,k,l=this;return null==this.otherCursors&&(this.otherCursors={}),f=this.otherCursors[c],f&&(f.start.detach(),f.end.detach(),this.aceSession.removeMarker(f.id)),j=this.posFromIndex(a.position),g=this.posFromIndex(a.selectionEnd),a.selectionEnd<a.position&&(k=[g,j],j=k[0],g=k[1]),d="other-client-selection-"+b.replace("#",""),h=a.position===a.selectionEnd,h&&(d=d.replace("selection","cursor")),e="."+d+" {\n  position: absolute;\n  background-color: "+(h?"transparent":b)+";\n  border-left: 2px solid "+b+";\n}",this.addStyleRule(e),this.otherCursors[c]=f=new this.aceRange(j.row,j.column,g.row,g.column),i=this,f.clipRows=function(){var a;return a=i.aceRange.prototype.clipRows.apply(this,arguments),a.isEmpty=function(){return!1},a},f.start=this.aceDoc.createAnchor(f.start),f.end=this.aceDoc.createAnchor(f.end),f.id=this.aceSession.addMarker(f,d,"text"),{clear:function(){return f.start.detach(),f.end.detach(),l.aceSession.removeMarker(f.id)}}},d.prototype.addStyleRule=function(a){var b;if("undefined"!=typeof document&&null!==document&&(this.addedStyleRules||(this.addedStyleRules={},b=document.createElement("style"),document.documentElement.getElementsByTagName("head")[0].appendChild(b),this.addedStyleSheet=b.sheet),!this.addedStyleRules[a]))return this.addedStyleRules[a]=!0,this.addedStyleSheet.insertRule(a,0)},d.prototype.registerCallbacks=function(a){this.callbacks=a},d.prototype.trigger=function(){var a,b,d,e;return b=arguments[0],a=2<=arguments.length?c.call(arguments,1):[],null!=(d=this.callbacks)&&null!=(e=d[b])?e.apply(this,a):void 0},d.prototype.applyOperation=function(a){return a.isNoop()||(this.ignoreChanges=!0),this.applyOperationToACE(a),this.ignoreChanges=!1},d.prototype.registerUndo=function(a){return this.ace.undo=a},d.prototype.registerRedo=function(a){return this.ace.redo=a},d.prototype.invertOperation=function(a){return a.invert(this.getValue())},d}();var a=a||{};a.AttributeConstants={BOLD:"b",ITALIC:"i",UNDERLINE:"u",STRIKE:"s",FONT:"f",FONT_SIZE:"fs",COLOR:"c",BACKGROUND_COLOR:"bc",ENTITY_SENTINEL:"ent",LINE_SENTINEL:"l",LINE_INDENT:"li",LINE_ALIGN:"la",LIST_TYPE:"lt"},a.sentinelConstants={LINE_SENTINEL_CHARACTER:"",ENTITY_SENTINEL_CHARACTER:""};var a=a||{};a.EntityManager=function(){function b(){this.entities_={};var a=["src","alt","width","height","style","class"];this.register("img",{render:function(a){c.assert(a.src,"image entity should have 'src'!");for(var b=["src","alt","width","height","style","class"],d="<img ",e=0;e<b.length;e++){var f=b[e];f in a&&(d+=" "+f+'="'+a[f]+'"')}return d+=">"},fromElement:function(b){for(var c={},d=0;d<a.length;d++){var e=a[d];b.hasAttribute(e)&&(c[e]=b.getAttribute(e))}return c}})}var c=a.utils;return b.prototype.register=function(b,c){a.utils.assert(c.render,"Entity options should include a 'render' function!"),a.utils.assert(c.fromElement,"Entity options should include a 'fromElement' function!"),this.entities_[b]=c},b.prototype.renderToElement=function(a,b){return this.tryRenderToElement_(a,"render",b)},b.prototype.exportToElement=function(a){var b=this.tryRenderToElement_(a,"export")||this.tryRenderToElement_(a,"getHtml")||this.tryRenderToElement_(a,"render");return b.setAttribute("data-firepad-entity",a.type),b},b.prototype.updateElement=function(a,b){var c=a.type,d=a.info;this.entities_[c]&&"undefined"!=typeof this.entities_[c].update&&this.entities_[c].update(d,b)},b.prototype.fromElement=function(b){var c=b.getAttribute("data-firepad-entity");if(c||(c=b.nodeName.toLowerCase()),c&&this.entities_[c]){var d=this.entities_[c].fromElement(b);return new a.Entity(c,d)}},b.prototype.tryRenderToElement_=function(b,c,d){var e=b.type,f=b.info;if(this.entities_[e]&&this.entities_[e][c]){var g=a.document||window&&window.document,h=this.entities_[e][c](f,d,g);if(h){if("string"==typeof h){var i=(a.document||document).createElement("div");return i.innerHTML=h,i.childNodes[0]}if("object"==typeof h)return a.utils.assert("undefined"!=typeof h.nodeType,"Error rendering "+e+" entity.  render() function must return an html string or a DOM element."),h}}},b.prototype.entitySupportsUpdate=function(a){return this.entities_[a]&&this.entities_[a].update},b}();var a=a||{};a.Entity=function(){function b(a,c){return this instanceof b?(this.type=a,void(this.info=c||{})):new b(a,c)}var c=a.AttributeConstants,d=c.ENTITY_SENTINEL,e=d+"_";return b.prototype.toAttributes=function(){var a={};a[d]=this.type;for(var b in this.info)a[e+b]=this.info[b];return a},b.fromAttributes=function(a){var c=a[d],f={};for(var g in a)0===g.indexOf(e)&&(f[g.substr(e.length)]=a[g]);return new b(c,f)},b}();var a=a||{};a.RichTextCodeMirror=function(){function b(a,b,c){this.codeMirror=a,this.options_=c||{},this.entityManager_=b,this.currentAttributes_=null;var d=this;this.annotationList_=new j(function(a,b){d.onAnnotationsChanged_(a,b)}),this.initAnnotationList_(),i(this,"onCodeMirrorBeforeChange_"),i(this,"onCodeMirrorChange_"),i(this,"onCursorActivity_"),parseInt(CodeMirror.version)>=4?this.codeMirror.on("changes",this.onCodeMirrorChange_):this.codeMirror.on("change",this.onCodeMirrorChange_),this.codeMirror.on("beforeChange",this.onCodeMirrorBeforeChange_),this.codeMirror.on("cursorActivity",this.onCursorActivity_),this.changeId_=0,this.outstandingChanges_={},this.dirtyLines_=[]}function c(a,b){return a.line-b.line||a.ch-b.ch}function d(a,b){return c(a,b)<=0}function e(a){return a[a.length-1]}function f(a){if(0===a.length)return 0;for(var b=0,c=0;c<a.length;c++)b+=a[c].length;return b+a.length-1}function g(a){this.attributes=a||{}}function h(a){for(var b in a)return!1;return!0}function i(a,b){var c=a[b];a[b]=function(){c.apply(a,arguments)}}var j=a.AnnotationList,k=a.Span,l=a.utils,m=a.AttributeConstants,n="cmrt-",o="cmrt-",p={c:"color",bc:"background-color",fs:"font-size",li:function(a){return"padding-left: "+40*a+"px"}},q={};l.makeEventEmitter(b,["change","attributesChange","newLine"]);var r=a.sentinelConstants.LINE_SENTINEL_CHARACTER,s=a.sentinelConstants.ENTITY_SENTINEL_CHARACTER;return b.prototype.detach=function(){this.codeMirror.off("beforeChange",this.onCodeMirrorBeforeChange_),this.codeMirror.off("change",this.onCodeMirrorChange_),this.codeMirror.off("changes",this.onCodeMirrorChange_),this.codeMirror.off("cursorActivity",this.onCursorActivity_),this.clearAnnotations_()},b.prototype.toggleAttribute=function(a,b){var c=b||!0;if(this.emptySelection_()){var d=this.getCurrentAttributes_();d[a]===c?delete d[a]:d[a]=c,this.currentAttributes_=d}else{var e=this.getCurrentAttributes_(),f=e[a]!==c?c:!1;this.setAttribute(a,f)}},b.prototype.setAttribute=function(a,b){var c=this.codeMirror;if(this.emptySelection_()){var d=this.getCurrentAttributes_();b===!1?delete d[a]:d[a]=b,this.currentAttributes_=d}else this.updateTextAttributes(c.indexFromPos(c.getCursor("start")),c.indexFromPos(c.getCursor("end")),function(c){b===!1?delete c[a]:c[a]=b}),this.updateCurrentAttributes_()},b.prototype.updateTextAttributes=function(a,b,c,d,e){var f=[],i=a,j=this;this.annotationList_.updateSpan(new k(a,b-a),function(a,b){var k={};for(var l in a.attributes)k[l]=a.attributes[l];(!k[m.LINE_SENTINEL]||e)&&c(k);var n={},o={};return j.computeChangedAttributes_(a.attributes,k,n,o),h(n)||f.push({start:i,end:i+b,attributes:n,attributesInverse:o,origin:d}),i+=b,new g(k)}),f.length>0&&this.trigger("attributesChange",this,f)},b.prototype.computeChangedAttributes_=function(a,b,c,d){var e,f={};for(e in a)f[e]=!0;for(e in b)f[e]=!0;for(e in f)e in b?e in a?a[e]!==b[e]&&(c[e]=b[e],d[e]=a[e]):(c[e]=b[e],d[e]=!1):(c[e]=!1,d[e]=a[e])},b.prototype.toggleLineAttribute=function(a,b){var c,d=this.getCurrentLineAttributes_();c=a in d&&d[a]===b?!1:b,this.setLineAttribute(a,c)},b.prototype.setLineAttribute=function(a,b){this.updateLineAttributesForSelection(function(c){b===!1?delete c[a]:c[a]=b})},b.prototype.updateLineAttributesForSelection=function(a){var b=this.codeMirror,c=b.getCursor("start"),d=b.getCursor("end"),e=c.line,f=d.line,g=b.getLine(f),h=this.areLineSentinelCharacters_(g.substr(0,d.ch));f>e&&h&&f--,this.updateLineAttributes(e,f,a)},b.prototype.updateLineAttributes=function(a,b,c){for(var d=a;b>=d;d++){var e=this.codeMirror.getLine(d),f=this.codeMirror.indexFromPos({line:d,ch:0});if(e[0]!==r){var g={};g[m.LINE_SENTINEL]=!0,c(g),this.insertText(f,r,g)}else this.updateTextAttributes(f,f+1,c,null,!0)}},b.prototype.replaceText=function(a,b,c,d,e){this.changeId_++;var f=o+this.changeId_;this.outstandingChanges_[f]={origOrigin:e,attributes:d};var g=this.codeMirror,h=g.posFromIndex(a),i="number"==typeof b?g.posFromIndex(b):null;g.replaceRange(c,h,i,f)},b.prototype.insertText=function(a,b,c,d){var e=this.codeMirror,f=e.getCursor(),g="RTCMADAPTER"==d&&!e.somethingSelected()&&a==e.indexFromPos(f);this.replaceText(a,null,b,c,d),g&&e.setCursor(f)},b.prototype.removeText=function(a,b,c){var d=this.codeMirror;d.replaceRange("",d.posFromIndex(a),d.posFromIndex(b),c)},b.prototype.insertEntityAtCursor=function(a,b,c){var d=this.codeMirror,e=d.indexFromPos(d.getCursor("head"));this.insertEntityAt(e,a,b,c)},b.prototype.insertEntityAt=function(b,c,d,e){this.codeMirror;this.insertEntity_(b,new a.Entity(c,d),e)},b.prototype.insertEntity_=function(a,b,c){this.replaceText(a,null,s,b.toAttributes(),c)},b.prototype.getAttributeSpans=function(a,b){for(var c=[],d=this.annotationList_.getAnnotatedSpansForSpan(new k(a,b-a)),e=0;e<d.length;e++)c.push({length:d[e].length,attributes:d[e].annotation.attributes});return c},b.prototype.end=function(){var a=this.codeMirror.lineCount()-1;return this.codeMirror.indexFromPos({line:a,ch:this.codeMirror.getLine(a).length})},b.prototype.getRange=function(a,b){var c=this.codeMirror.posFromIndex(a),d=this.codeMirror.posFromIndex(b);return this.codeMirror.getRange(c,d)},b.prototype.initAnnotationList_=function(){var a=this.end();0!==a&&this.annotationList_.insertAnnotatedSpan(new k(0,a),new g)},b.prototype.onAnnotationsChanged_=function(a,b){var c,d={};this.tryToUpdateEntitiesInPlace(a,b);for(var e=0;e<a.length;e++){var f=a[e].annotation.attributes;m.LINE_SENTINEL in f&&(d[this.codeMirror.posFromIndex(a[e].pos).line]=!0),c=a[e].getAttachedObject(),c&&c.clear()}for(e=0;e<b.length;e++){var g=b[e].annotation,h=m.LINE_SENTINEL in g.attributes,i=m.ENTITY_SENTINEL in g.attributes,j=this.codeMirror.posFromIndex(b[e].pos);if(h)d[j.line]=!0;else if(i)this.markEntity_(b[e]);else{var k=this.getClassNameForAttributes_(g.attributes);if(""!==k){var l=this.codeMirror.posFromIndex(b[e].pos+b[e].length);c=this.codeMirror.markText(j,l,{className:k}),b[e].attachObject(c)}}}for(var n in d)this.dirtyLines_.push(this.codeMirror.getLineHandle(Number(n))),this.queueLineMarking_()},b.prototype.tryToUpdateEntitiesInPlace=function(a,b){for(var c=a.length;c--;)for(var d=a[c],e=b.length;e--;){var f=b[e];if(d.pos==f.pos&&d.length==f.length&&d.annotation.attributes.ent&&d.annotation.attributes.ent==f.annotation.attributes.ent){var g=f.annotation.attributes.ent;if(this.entityManager_.entitySupportsUpdate(g)){a.splice(c,1),b.splice(e,1);var h=d.getAttachedObject();h.update(f.annotation.attributes),f.attachObject(h)}}}},b.prototype.queueLineMarking_=function(){if(null==this.lineMarkTimeout_){var a=this;this.lineMarkTimeout_=setTimeout(function(){a.lineMarkTimeout_=null;for(var b=[],c=0;c<a.dirtyLines_.length;c++){var d=a.codeMirror.getLineNumber(a.dirtyLines_[c]);b.push(Number(d))}a.dirtyLines_=[],b.sort(function(a,b){return a-b});var e=-1;for(c=0;c<b.length;c++){var f=b[c];f>e&&(e=a.markLineSentinelCharactersForChangedLines_(f,f))}},0)}},b.prototype.addStyleWithCSS_=function(a){var b=document.getElementsByTagName("head")[0],c=document.createElement("style");c.type="text/css",c.styleSheet?c.styleSheet.cssText=a:c.appendChild(document.createTextNode(a)),b.appendChild(c)},b.prototype.getClassNameForAttributes_=function(b){var c="";for(var d in b){var e=b[d];if(d===m.LINE_SENTINEL)a.utils.assert(e===!0,"LINE_SENTINEL attribute should be true if it exists.");else{var f=(this.options_.cssPrefix||n)+d;if(e!==!0){d===m.FONT_SIZE&&"string"!=typeof e&&(e+="px");var g=e.toString().toLowerCase().replace(/[^a-z0-9-_]/g,"-");if(f+="-"+g,p[d]&&(q[d]||(q[d]={}),!q[d][g])){q[d][g]=!0;var h=p[d],i="function"==typeof h?h(e):h+": "+e,j=d==m.LINE_INDENT?"pre."+f:"."+f;this.addStyleWithCSS_(j+" { "+i+" }")}}c=c+" "+f}}return c},b.prototype.markEntity_=function(b){for(var c=b.annotation.attributes,d=a.Entity.fromAttributes(c),e=this.codeMirror,f=this,g=[],h=0;h<b.length;h++){var i=e.posFromIndex(b.pos+h),j=e.posFromIndex(b.pos+h+1),k={collapsed:!0,atomic:!0,inclusiveLeft:!1,inclusiveRight:!1},l=this.createEntityHandle_(d,b.pos),m=this.entityManager_.renderToElement(d,l);m&&(k.replacedWith=m);var n=e.markText(i,j,k);g.push(n),l.setMarker(n)}b.attachObject({clear:function(){for(var a=0;a<g.length;a++)g[a].clear()},update:function(b){for(var c=a.Entity.fromAttributes(b),d=0;d<g.length;d++)f.entityManager_.updateElement(c,g[d].replacedWith)}}),this.queueRefresh_()},b.prototype.queueRefresh_=function(){var a=this;this.refreshTimer_||(this.refreshTimer_=setTimeout(function(){a.codeMirror.refresh(),a.refreshTimer_=null},0))},b.prototype.createEntityHandle_=function(b,c){function d(){if(h){var a=h.find();return a?i.codeMirror.indexFromPos(a.from):null}return c}function e(){var a=d();null!=a&&(i.codeMirror.focus(),i.removeText(a,a+1))}function f(c){var e=a.AttributeConstants,f=e.ENTITY_SENTINEL,g=f+"_",h=d();i.updateTextAttributes(h,h+1,function(a){for(var d in a)delete a[d];a[f]=b.type;for(var e in c)a[g+e]=c[e]})}function g(a){h=a}var h=null,i=this;return{find:d,remove:e,replace:f,setMarker:g}},b.prototype.lineClassRemover_=function(a){var b=this.codeMirror,c=b.getLineHandle(a);return{clear:function(){b.removeLineClass(c,"text",".*")}}},b.prototype.emptySelection_=function(){var a=this.codeMirror.getCursor("start"),b=this.codeMirror.getCursor("end");return a.line===b.line&&a.ch===b.ch},b.prototype.onCodeMirrorBeforeChange_=function(a,b){if("+input"===b.origin||"paste"===b.origin){for(var c=[],d=0;d<b.text.length;d++){var e=b.text[d];e=e.replace(new RegExp("["+r+s+"]","g"),""),c.push(e)}b.update(b.from,b.to,c)}},b.prototype.onCodeMirrorChange_=function(a,b){if("object"==typeof b.from){for(var c=[];b;)c.push(b),b=b.next;b=c}for(var d=this.convertCoordinateSystemForChanges_(b),e=[],f=0;f<d.length;f++){var h=d[f],i=h.start,j=(h.end,h.text),l=h.removed,m=h.origin;if(l.length>0){for(var n=this.annotationList_.getAnnotatedSpansForSpan(new k(i,l.length)),o=0,p=0;p<n.length;p++){var q=n[p];e.push({start:i,end:i+q.length,removedAttributes:q.annotation.attributes,removed:l.substr(o,q.length),attributes:{},text:"",origin:h.origin}),o+=q.length}this.annotationList_.removeSpan(new k(i,l.length))}if(j.length>0){var r;"+input"===h.origin||"paste"===h.origin?r=this.currentAttributes_||{}:m in this.outstandingChanges_?(r=this.outstandingChanges_[m].attributes,m=this.outstandingChanges_[m].origOrigin,delete this.outstandingChanges_[m]):r={},this.annotationList_.insertAnnotatedSpan(new k(i,j.length),new g(r)),e.push({start:i,end:i,removedAttributes:{},removed:"",text:j,attributes:r,origin:m})}}this.markLineSentinelCharactersForChanges_(b),e.length>0&&this.trigger("change",this,e)},b.prototype.convertCoordinateSystemForChanges_=function(a){function b(a,b){return function(c){return d(c,b.from)?a(c):d(b.to,c)?a({line:c.line+b.text.length-1-(b.to.line-b.from.line),ch:b.to.line<c.line?c.ch:b.text.length<=1?c.ch-(b.to.ch-b.from.ch)+f(b.text):c.ch-b.to.ch+e(b.text).length})+f(b.removed)-f(b.text):b.from.line===c.line?a(b.from)+c.ch-b.from.ch:a(b.from)+f(b.removed.slice(0,c.line-b.from.line))+1+c.ch}}for(var c=this,g=function(a){return c.codeMirror.indexFromPos(a)},h=[],i=a.length-1;i>=0;i--){var j=a[i];g=b(g,j);var k=g(j.from),l=j.removed.join("\n"),m=j.text.join("\n");h.unshift({start:k,end:k+l.length,removed:l,text:m,origin:j.origin})}return h},b.prototype.markLineSentinelCharactersForChanges_=function(a){for(var b=Number.MAX_VALUE,c=-1,d=0;d<a.length;d++){var e=a[d],f=e.from.line;e.from.ch;(e.removed.length>1||e.removed[0].indexOf(r)>=0)&&(b=Math.min(b,f),c=Math.max(c,f)),e.text.length>1?(b=Math.min(b,f),c=Math.max(c,f+e.text.length-1)):e.text[0].indexOf(r)>=0&&(b=Math.min(b,f),c=Math.max(c,f))}c=Math.min(c,this.codeMirror.lineCount()-1),this.markLineSentinelCharactersForChangedLines_(b,c)},b.prototype.markLineSentinelCharactersForChangedLines_=function(a,b){if(a<Number.MAX_VALUE)for(;a>0&&this.lineIsListItemOrIndented_(a-1);)a--;if(b>-1)for(var c=this.codeMirror.lineCount();c>b+1&&this.lineIsListItemOrIndented_(b+1);)b++;for(var d=[],e=this.codeMirror,f=a;b>=f;f++){var g=e.getLine(f),h=e.getLineHandle(f);if(e.removeLineClass(h,"text",".*"),g.length>0)for(var i=g.indexOf(r);i>=0;){for(var j=i;i<g.length&&g[i]===r;){for(var k=e.findMarksAt({line:f,ch:i}),l=0;l<k.length;l++)k[l].isForLineSentinel&&k[l].clear();i++}this.markLineSentinelCharacters_(f,j,i,d),i=g.indexOf(r,i)}else d=[]}return b},b.prototype.markLineSentinelCharacters_=function(a,b,c,d){var e=this.codeMirror,f=null,g=null,h=function(){var a=g.find();return a?a.from.line:null};if(0===b){var i=this.getLineAttributes_(a),j=i[m.LIST_TYPE],k=i[m.LINE_INDENT]||0;for(j&&0===k&&(k=1);k>=d.length;)d.push(1);"o"===j?(f=this.makeOrderedListElement_(d[k]),d[k]++):"u"===j?(f=this.makeUnorderedListElement_(),d[k]=1):"t"===j?(f=this.makeTodoListElement_(!1,h),d[k]=1):"tc"===j&&(f=this.makeTodoListElement_(!0,h),d[k]=1);var l=this.getClassNameForAttributes_(i);""!==l&&this.codeMirror.addLineClass(a,"text",l),d=d.slice(0,k+1)}var n={inclusiveLeft:!0,collapsed:!0};f&&(n.replacedWith=f);var g=e.markText({line:a,ch:b},{line:a,ch:c},n);g.isForLineSentinel=!0},b.prototype.makeOrderedListElement_=function(a){return l.elt("div",a+".",{"class":"firepad-list-left"})},b.prototype.makeUnorderedListElement_=function(){return l.elt("div","•",{"class":"firepad-list-left"})},b.prototype.toggleTodo=function(a){var b,c=m.LIST_TYPE,d=this.getCurrentLineAttributes_();c in d&&("t"===d[c]||"tc"===d[c])?"t"===d[c]?b="tc":"tc"===d[c]&&(b=a?"t":!1):b="t",this.setLineAttribute(c,b)},b.prototype.makeTodoListElement_=function(a,b){var c={type:"checkbox","class":"firepad-todo-left"};a&&(c.checked=!0);var d=l.elt("input",!1,c),e=this;return l.on(d,"click",l.stopEventAnd(function(a){e.codeMirror.setCursor({line:b(),ch:1}),e.toggleTodo(!0)})),d},b.prototype.lineIsListItemOrIndented_=function(a){var b=this.getLineAttributes_(a);return(b[m.LIST_TYPE]||!1)!==!1||0!==(b[m.LINE_INDENT]||0)},b.prototype.onCursorActivity_=function(){var a=this;setTimeout(function(){a.updateCurrentAttributes_()},1)},b.prototype.getCurrentAttributes_=function(){return this.currentAttributes_||this.updateCurrentAttributes_(),this.currentAttributes_},b.prototype.updateCurrentAttributes_=function(){var b=this.codeMirror,c=b.indexFromPos(b.getCursor("anchor")),d=b.indexFromPos(b.getCursor("head")),e=d;if(c>d){for(;e<this.end();){var f=this.getRange(e,e+1);if("\n"!==f&&f!==r)break;e++}e<this.end()&&e++}else for(;e>0&&(f=this.getRange(e-1,e),"\n"===f||f===r);)e--;var g=this.annotationList_.getAnnotatedSpansForPos(e);this.currentAttributes_={};var h={};g.length>0&&!(m.LINE_SENTINEL in g[0].annotation.attributes)?h=g[0].annotation.attributes:g.length>1&&(a.utils.assert(!(m.LINE_SENTINEL in g[1].annotation.attributes),"Cursor can't be between two line sentinel characters."),h=g[1].annotation.attributes);for(var i in h)"l"!==i&&"lt"!==i&&"li"!==i&&0!==i.indexOf(m.ENTITY_SENTINEL)&&(this.currentAttributes_[i]=h[i])},b.prototype.getCurrentLineAttributes_=function(){var a=this.codeMirror,b=a.getCursor("anchor"),c=a.getCursor("head"),d=c.line;return 0===c.ch&&b.line<c.line&&d--,this.getLineAttributes_(d)},b.prototype.getLineAttributes_=function(b){var c={},d=this.codeMirror.getLine(b);if(d.length>0&&d[0]===r){var e=this.codeMirror.indexFromPos({line:b,ch:0}),f=this.annotationList_.getAnnotatedSpansForSpan(new k(e,1));a.utils.assert(1===f.length);for(var g in f[0].annotation.attributes)c[g]=f[0].annotation.attributes[g]}return c},b.prototype.clearAnnotations_=function(){this.annotationList_.updateSpan(new k(0,this.end()),function(a,b){return new g({})})},b.prototype.newline=function(){var a=this.codeMirror,b=this;if(this.emptySelection_()){var c=a.getCursor("head").line,d=this.getLineAttributes_(c),e=d[m.LIST_TYPE];e&&1===a.getLine(c).length?this.updateLineAttributes(c,c,function(a){delete a[m.LIST_TYPE],delete a[m.LINE_INDENT]}):(a.replaceSelection("\n","end","+input"),this.updateLineAttributes(c+1,c+1,function(a){for(var f in d)a[f]=d[f];"tc"===e&&(a[m.LIST_TYPE]="t"),b.trigger("newLine",{line:c+1,attr:a})}))}else a.replaceSelection("\n","end","+input")},b.prototype.deleteLeft=function(){var a=this.codeMirror,b=a.getCursor("head"),c=this.getLineAttributes_(b.line),d=c[m.LIST_TYPE],e=c[m.LINE_INDENT],f=this.emptySelection_()&&1===b.ch;f&&d?this.updateLineAttributes(b.line,b.line,function(a){delete a[m.LIST_TYPE],delete a[m.LINE_INDENT]}):f&&e&&e>0?this.unindent():a.deleteH(-1,"char")},b.prototype.deleteRight=function(){var a=this.codeMirror,b=a.getCursor("head"),c=a.getLine(b.line),d=this.areLineSentinelCharacters_(c),e=b.line+1<a.lineCount()?a.getLine(b.line+1):"";this.emptySelection_()&&d&&e[0]===r?a.replaceRange("",{line:b.line,ch:0},{line:b.line+1,ch:0},"+input"):a.deleteH(1,"char")},b.prototype.indent=function(){this.updateLineAttributesForSelection(function(a){var b=a[m.LINE_INDENT],c=a[m.LIST_TYPE];b?a[m.LINE_INDENT]++:c?a[m.LINE_INDENT]=2:a[m.LINE_INDENT]=1})},b.prototype.unindent=function(){this.updateLineAttributesForSelection(function(a){var b=a[m.LINE_INDENT];b&&b>1?a[m.LINE_INDENT]=b-1:(delete a[m.LIST_TYPE],delete a[m.LINE_INDENT])})},b.prototype.getText=function(){return this.codeMirror.getValue().replace(new RegExp(r,"g"),"")},b.prototype.areLineSentinelCharacters_=function(a){for(var b=0;b<a.length;b++)if(a[b]!==r)return!1;return!0},g.prototype.equals=function(a){if(!(a instanceof g))return!1;var b;for(b in this.attributes)if(a.attributes[b]!==this.attributes[b])return!1;for(b in a.attributes)if(a.attributes[b]!==this.attributes[b])return!1;return!0},b}();var a=a||{};a.RichTextCodeMirrorAdapter=function(){"use strict";function b(a){this.rtcm=a,this.cm=a.codeMirror,g(this,"onChange"),g(this,"onAttributesChange"),g(this,"onCursorActivity"),g(this,"onFocus"),g(this,"onBlur"),this.rtcm.on("change",this.onChange),this.rtcm.on("attributesChange",this.onAttributesChange),this.cm.on("cursorActivity",this.onCursorActivity),this.cm.on("focus",this.onFocus),this.cm.on("blur",this.onBlur)}function c(a,b){return a.line<b.line?-1:a.line>b.line?1:a.ch<b.ch?-1:a.ch>b.ch?1:0}function d(a,b){return 0===c(a,b)}function e(a){var b=a.lineCount()-1;return a.indexFromPos({line:b,ch:a.getLine(b).length})}function f(a,b){if(!a)throw new Error(b||"assertion error")}function g(a,b){var c=a[b];a[b]=function(){c.apply(a,arguments)}}function h(a){for(var b in a)return!1;return!0}function i(a,b){if("string"!=typeof a)throw new TypeError("Expected a string");a=a.replace(/^#/,""),3===a.length&&(a=a[0]+a[0]+a[1]+a[1]+a[2]+a[2]);var c=parseInt(a,16),d=[c>>16,c>>8&255,255&c],e="rgb";return j(b)&&(e="rgba",d.push(b)),e+"("+d.join(",")+")"}function j(a){return null!==a&&void 0!==a}var k=a.TextOperation,l=a.WrappedOperation,m=a.Cursor;return b.prototype.detach=function(){this.rtcm.off("change",this.onChange),this.rtcm.off("attributesChange",this.onAttributesChange),this.cm.off("cursorActivity",this.onCursorActivity),this.cm.off("focus",this.onFocus),this.cm.off("blur",this.onBlur)},b.operationFromCodeMirrorChanges=function(a,b){for(var c=e(b),d=(new k).retain(c),f=(new k).retain(c),g=a.length-1;g>=0;g--){var h=a[g],i=h.start,j=c-i-h.text.length;d=(new k).retain(i)["delete"](h.removed.length).insert(h.text,h.attributes).retain(j).compose(d),f=f.compose((new k).retain(i)["delete"](h.text.length).insert(h.removed,h.removedAttributes).retain(j)),c+=h.removed.length-h.text.length}return[d,f]},b.operationFromAttributesChanges=function(a,b){for(var c=e(b),d=new k,g=new k,h=0,i=0;i<a.length;i++){var j=a[i],l=j.start-h;f(l>=0),d.retain(l),g.retain(l);var m=j.end-j.start;d.retain(m,j.attributes),g.retain(m,j.attributesInverse),h=j.start+m}return d.retain(c-h),g.retain(c-h),[d,g]},b.applyOperationToCodeMirror=function(a,b){a.ops.length>10&&b.codeMirror.getWrapperElement().setAttribute("style","display: none");for(var c=a.ops,d=0,e=0,f=c.length;f>e;e++){var g=c[e];g.isRetain()?(h(g.attributes)||b.updateTextAttributes(d,d+g.chars,function(a){for(var b in g.attributes)g.attributes[b]===!1?delete a[b]:a[b]=g.attributes[b]},"RTCMADAPTER",!0),d+=g.chars):g.isInsert()?(b.insertText(d,g.text,g.attributes,"RTCMADAPTER"),d+=g.text.length):g.isDelete()&&b.removeText(d,d+g.chars,"RTCMADAPTER")}a.ops.length>10&&(b.codeMirror.getWrapperElement().setAttribute("style",""),b.codeMirror.refresh())},b.prototype.registerCallbacks=function(a){this.callbacks=a},b.prototype.onChange=function(a,c){if("RTCMADAPTER"!==c[0].origin){var d=b.operationFromCodeMirrorChanges(c,this.cm);this.trigger("change",d[0],d[1])}},b.prototype.onAttributesChange=function(a,c){if("RTCMADAPTER"!==c[0].origin){var d=b.operationFromAttributesChanges(c,this.cm);this.trigger("change",d[0],d[1])}},b.prototype.onCursorActivity=function(){var a=this;setTimeout(function(){a.trigger("cursorActivity")},1)},b.prototype.onFocus=function(){this.trigger("focus")},b.prototype.onBlur=function(){this.cm.somethingSelected()||this.trigger("blur")},b.prototype.getValue=function(){return this.cm.getValue()},b.prototype.getCursor=function(){var a,b=this.cm,c=b.getCursor(),e=b.indexFromPos(c);if(b.somethingSelected()){var f=b.getCursor(!0),g=d(c,f)?b.getCursor(!1):f;a=b.indexFromPos(g)}else a=e;return new m(e,a)},
	b.prototype.setCursor=function(a){this.cm.setSelection(this.cm.posFromIndex(a.position),this.cm.posFromIndex(a.selectionEnd))},b.prototype.addStyleRule=function(a){if("undefined"!=typeof document&&null!==document){if(!this.addedStyleRules){this.addedStyleRules={};var b=document.createElement("style");document.documentElement.getElementsByTagName("head")[0].appendChild(b),this.addedStyleSheet=b.sheet}if(!this.addedStyleRules[a])return this.addedStyleRules[a]=!0,this.addedStyleSheet.insertRule(a,0)}},b.prototype.setOtherCursor=function(a,b,c){var d=this.cm.posFromIndex(a.position);if("string"==typeof b&&b.match(/^#[a-fA-F0-9]{3,6}$/)){var e=this.rtcm.end();if("object"==typeof a&&"number"==typeof a.position&&"number"==typeof a.selectionEnd&&!(a.position<0||a.position>e||a.selectionEnd<0||a.selectionEnd>e)){if(a.position===a.selectionEnd){var f=this.cm.cursorCoords(d),g=document.createElement("span");return g.className="other-client",g.style.borderLeftWidth="2px",g.style.borderLeftStyle="solid",g.style.borderLeftColor=b,g.style.marginLeft=g.style.marginRight="-1px",g.style.height=.9*(f.bottom-f.top)+"px",g.setAttribute("data-clientid",c),g.style.zIndex=0,this.cm.setBookmark(d,{widget:g,insertLeft:!0})}var h="selection-"+b.replace("#",""),j=.4,k="."+h+" { background: "+i(b)+";\n background: "+i(b,j)+";}";this.addStyleRule(k);var l,m;return a.selectionEnd>a.position?(l=d,m=this.cm.posFromIndex(a.selectionEnd)):(l=this.cm.posFromIndex(a.selectionEnd),m=d),this.cm.markText(l,m,{className:h})}}},b.prototype.trigger=function(a){var b=Array.prototype.slice.call(arguments,1),c=this.callbacks&&this.callbacks[a];c&&c.apply(this,b)},b.prototype.applyOperation=function(a){b.applyOperationToCodeMirror(a,this.rtcm)},b.prototype.registerUndo=function(a){this.cm.undo=a},b.prototype.registerRedo=function(a){this.cm.redo=a},b.prototype.invertOperation=function(a){for(var b,c,d=0,e=this.rtcm.codeMirror,f=new k,g=0;g<a.wrapped.ops.length;g++){var i=a.wrapped.ops[g];if(i.isRetain())if(h(i.attributes))f.retain(i.chars),d+=i.chars;else for(b=this.rtcm.getAttributeSpans(d,d+i.chars),c=0;c<b.length;c++){var j={};for(var m in i.attributes){var n=i.attributes[m],o=b[c].attributes[m];n===!1?o&&(j[m]=o):n!==o&&(j[m]=o||!1)}f.retain(b[c].length,j),d+=b[c].length}else if(i.isInsert())f["delete"](i.text.length);else if(i.isDelete()){var p=e.getRange(e.posFromIndex(d),e.posFromIndex(d+i.chars));b=this.rtcm.getAttributeSpans(d,d+i.chars);var q=0;for(c=0;c<b.length;c++)f.insert(p.substr(q,b[c].length),b[c].attributes),q+=b[c].length;d+=i.chars}}return new l(f,a.meta.invert())},b}();var a=a||{};a.Formatting=function(){function b(a){return this instanceof b?void(this.attributes=a||{}):new b(a)}var c=a.AttributeConstants;return b.prototype.cloneWithNewAttribute_=function(a,c){var d={};for(var e in this.attributes)d[e]=this.attributes[e];return c===!1?delete d[a]:d[a]=c,new b(d)},b.prototype.bold=function(a){return this.cloneWithNewAttribute_(c.BOLD,a)},b.prototype.italic=function(a){return this.cloneWithNewAttribute_(c.ITALIC,a)},b.prototype.underline=function(a){return this.cloneWithNewAttribute_(c.UNDERLINE,a)},b.prototype.strike=function(a){return this.cloneWithNewAttribute_(c.STRIKE,a)},b.prototype.font=function(a){return this.cloneWithNewAttribute_(c.FONT,a)},b.prototype.fontSize=function(a){return this.cloneWithNewAttribute_(c.FONT_SIZE,a)},b.prototype.color=function(a){return this.cloneWithNewAttribute_(c.COLOR,a)},b.prototype.backgroundColor=function(a){return this.cloneWithNewAttribute_(c.BACKGROUND_COLOR,a)},b}();var a=a||{};a.Text=function(){function b(c,d){return this instanceof b?(this.text=c,void(this.formatting=d||a.Formatting())):new b(c,d)}return b}();var a=a||{};a.LineFormatting=function(){function b(a){return this instanceof b?(this.attributes=a||{},void(this.attributes[c.LINE_SENTINEL]=!0)):new b(a)}var c=a.AttributeConstants;return b.LIST_TYPE={NONE:!1,ORDERED:"o",UNORDERED:"u",TODO:"t",TODOCHECKED:"tc"},b.prototype.cloneWithNewAttribute_=function(a,c){var d={};for(var e in this.attributes)d[e]=this.attributes[e];return c===!1?delete d[a]:d[a]=c,new b(d)},b.prototype.indent=function(a){return this.cloneWithNewAttribute_(c.LINE_INDENT,a)},b.prototype.align=function(a){return this.cloneWithNewAttribute_(c.LINE_ALIGN,a)},b.prototype.listItem=function(b){return a.utils.assert(b===!1||"u"===b||"o"===b||"t"===b||"tc"===b),this.cloneWithNewAttribute_(c.LIST_TYPE,b)},b.prototype.getIndent=function(){return this.attributes[c.LINE_INDENT]||0},b.prototype.getAlign=function(){return this.attributes[c.LINE_ALIGN]||0},b.prototype.getListItem=function(){return this.attributes[c.LIST_TYPE]||!1},b}();var a=a||{};a.Line=function(){function b(c,d){return this instanceof b?("[object Array]"!==Object.prototype.toString.call(c)&&(c="undefined"==typeof c?[]:[c]),this.textPieces=c,void(this.formatting=d||a.LineFormatting())):new b(c,d)}return b}();var a=a||{};a.ParseHtml=function(){function b(b,c,d){this.listType=b||i.UNORDERED,this.lineFormatting=c||a.LineFormatting(),this.textFormatting=d||a.Formatting()}function c(){this.lines=[],this.currentLine=[],this.currentLineListItemType=null}function d(d,f){var g=(a.document||document).createElement("div");g.innerHTML=d,j=f;var h=new c,i=new b;return e(g,i,h),h.lines}function e(b,c,d){if(b.nodeType===k.ELEMENT_NODE){var e=j.fromElement(b);if(e)return void d.currentLine.push(new a.Text(a.sentinelConstants.ENTITY_SENTINEL_CHARACTER,new a.Formatting(e.toAttributes())))}switch(b.nodeType){case k.TEXT_NODE:var l=b.nodeValue.replace(/[ \n\t]+/g," ");d.currentLine.push(a.Text(l,c.textFormatting));break;case k.ELEMENT_NODE:var m=b.getAttribute("style")||"";switch(c=h(c,m),b.nodeName.toLowerCase()){case"div":case"h1":case"h2":case"h3":case"p":d.newlineIfNonEmpty(c),f(b,c,d),d.newlineIfNonEmpty(c);break;case"center":c=c.withAlign("center"),d.newlineIfNonEmpty(c),f(b,c.withAlign("center"),d),d.newlineIfNonEmpty(c);break;case"b":case"strong":f(b,c.withTextFormatting(c.textFormatting.bold(!0)),d);break;case"u":f(b,c.withTextFormatting(c.textFormatting.underline(!0)),d);break;case"i":case"em":f(b,c.withTextFormatting(c.textFormatting.italic(!0)),d);break;case"s":f(b,c.withTextFormatting(c.textFormatting.strike(!0)),d);break;case"font":var n=b.getAttribute("face"),o=b.getAttribute("color"),p=parseInt(b.getAttribute("size"));n&&(c=c.withTextFormatting(c.textFormatting.font(n))),o&&(c=c.withTextFormatting(c.textFormatting.color(o))),p&&(c=c.withTextFormatting(c.textFormatting.fontSize(p))),f(b,c,d);break;case"br":d.newline(c);break;case"ul":d.newlineIfNonEmptyOrListItem(c);var q="firepad-todo"===b.getAttribute("class")?i.TODO:i.UNORDERED;f(b,c.withListType(q).withIncreasedIndent(),d),d.newlineIfNonEmpty(c);break;case"ol":d.newlineIfNonEmptyOrListItem(c),f(b,c.withListType(i.ORDERED).withIncreasedIndent(),d),d.newlineIfNonEmpty(c);break;case"li":g(b,c,d);break;case"style":break;default:f(b,c,d)}}}function f(a,b,c){if(a.hasChildNodes())for(var d=0;d<a.childNodes.length;d++)e(a.childNodes[d],b,c)}function g(a,b,c){c.newlineIfNonEmptyOrListItem(b);var d="firepad-checked"===a.getAttribute("class")?i.TODOCHECKED:b.listType;c.makeListItem(d);var e=c.currentLine;f(a,b,c),(e===c.currentLine||c.currentLine.length>0)&&c.newline(b)}function h(b,c){for(var d=b.textFormatting,e=b.lineFormatting,f=c.split(";"),g=0;g<f.length;g++){var h=f[g].split(":");if(2===h.length){var i=a.utils.trim(h[0]).toLowerCase(),j=a.utils.trim(h[1]).toLowerCase();switch(i){case"text-decoration":var k=j.indexOf("underline")>=0,l=j.indexOf("line-through")>=0;d=d.underline(k).strike(l);break;case"font-weight":var m="bold"===j||parseInt(j)>=600;d=d.bold(m);break;case"font-style":var n="italic"===j||"oblique"===j;d=d.italic(n);break;case"color":d=d.color(j);break;case"background-color":d=d.backgroundColor(j);break;case"text-align":e=e.align(j);break;case"font-size":var o=null,p=["px","pt","%","em","xx-small","x-small","small","medium","large","x-large","xx-large","smaller","larger"];a.utils.stringEndsWith(j,p)?o=j:parseInt(j)&&(o=parseInt(j)+"px"),o&&(d=d.fontSize(o));break;case"font-family":var q=a.utils.trim(j.split(",")[0]);q=q.replace(/['"]/g,""),q=q.replace(/\w\S*/g,function(a){return a.charAt(0).toUpperCase()+a.substr(1).toLowerCase()}),d=d.font(q)}}}return b.withLineFormatting(e).withTextFormatting(d)}var i=a.LineFormatting.LIST_TYPE;b.prototype.withTextFormatting=function(a){return new b(this.listType,this.lineFormatting,a)},b.prototype.withLineFormatting=function(a){return new b(this.listType,a,this.textFormatting)},b.prototype.withListType=function(a){return new b(a,this.lineFormatting,this.textFormatting)},b.prototype.withIncreasedIndent=function(){var a=this.lineFormatting.indent(this.lineFormatting.getIndent()+1);return new b(this.listType,a,this.textFormatting)},b.prototype.withAlign=function(a){var c=this.lineFormatting.align(a);return new b(this.listType,c,this.textFormatting)},c.prototype.newlineIfNonEmpty=function(a){this.cleanLine_(),this.currentLine.length>0&&this.newline(a)},c.prototype.newlineIfNonEmptyOrListItem=function(a){this.cleanLine_(),(this.currentLine.length>0||null!==this.currentLineListItemType)&&this.newline(a)},c.prototype.newline=function(b){this.cleanLine_();var c=b.lineFormatting;null!==this.currentLineListItemType&&(c=c.listItem(this.currentLineListItemType),this.currentLineListItemType=null),this.lines.push(a.Line(this.currentLine,c)),this.currentLine=[]},c.prototype.makeListItem=function(a){this.currentLineListItemType=a},c.prototype.cleanLine_=function(){if(this.currentLine.length>0){var a=this.currentLine.length-1;this.currentLine[0].text=this.currentLine[0].text.replace(/^ +/,""),this.currentLine[a].text=this.currentLine[a].text.replace(/ +$/g,"");for(var b=0;b<this.currentLine.length;b++)this.currentLine[b].text=this.currentLine[b].text.replace(/\u00a0/g," ")}1===this.currentLine.length&&""===this.currentLine[0].text&&(this.currentLine=[])};var j,k=k||{ELEMENT_NODE:1,TEXT_NODE:3};return d}();var a=a||{};a.SerializeHtml=function(){function b(a){return a===i.ORDERED?"<ol>":a===i.UNORDERED?"<ul>":'<ul class="firepad-todo">'}function c(a){return a===i.ORDERED?"</ol>":"</ul>"}function d(a,b){return a===b||a===i.TODO&&b===i.TODOCHECKED||a===i.TODOCHECKED&&b===i.TODO}function e(a){return a.replace(/&/g,"&amp;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\u00a0/g,"&nbsp;")}function f(f,k){for(var l="",m=!0,n=[],o=!1,p=!0,q=!0,r=0,s=f.ops[r],t=!1;s;){g.assert(s.isInsert());var u=s.attributes;if(m){m=!1;var v=0,w=null,x="left";h.LINE_SENTINEL in u&&(v=u[h.LINE_INDENT]||0,w=u[h.LIST_TYPE]||null,x=u[h.LINE_ALIGN]||"left"),w&&(v=v||1),o?(l+="</li>",o=!1):p||(q&&(l+="<br/>"),l+="</div>"),p=!1,g.assert(v>=0,"Indent must not be negative.");for(;n.length>v||v===n.length&&null!==w&&!d(w,n[n.length-1]);)l+=c(n.pop());for(;n.length<v;){var y=w||i.UNORDERED;t=w==i.TODO||w==i.TODOCHECKED||t,l+=b(y),n.push(y)}var z="left"!==x?' style="text-align:'+x+'"':"";if(w){var A="";switch(w){case i.TODOCHECKED:A=' class="firepad-checked"';break;case i.TODO:A=' class="firepad-unchecked"'}l+="<li"+A+z+">",o=!0}else l+="<div"+z+">";q=!0}if(h.LINE_SENTINEL in u)s=f.ops[++r];else if(h.ENTITY_SENTINEL in u){for(var B=0;B<s.text.length;B++){var C=a.Entity.fromAttributes(u),D=k.exportToElement(C);l+=D.outerHTML}s=f.ops[++r]}else{var E="",F="";for(var G in u){var H,I,J=u[G];G===h.BOLD||G===h.ITALIC||G===h.UNDERLINE||G===h.STRIKE?(g.assert(J===!0),H=I=G):G===h.FONT_SIZE?(H='span style="font-size: '+J,H+="string"!=typeof J||-1===J.indexOf("px",J.length-2)?'px"':'"',I="span"):G===h.FONT?(H='span style="font-family: '+J+'"',I="span"):G===h.COLOR?(H='span style="color: '+J+'"',I="span"):G===h.BACKGROUND_COLOR?(H='span style="background-color: '+J+'"',I="span"):g.log(!1,"Encountered unknown attribute while rendering html: "+G),H&&(E+="<"+H+">"),I&&(F="</"+I+">"+F)}var K=s.text,L=K.indexOf("\n");L>=0?(m=!0,s=L<K.length-1?new a.TextOp("insert",K.substr(L+1),u):f.ops[++r],K=K.substr(0,L)):s=f.ops[++r],K=K.replace(/  +/g,function(a){return new Array(a.length+1).join(" ")}).replace(/^ /," ").replace(/ $/," "),K.length>0&&(q=!1),l+=E+e(K)+F}}for(o?l+="</li>":p||(q&&(l+="&nbsp;"),l+="</div>");n.length>0;)l+=c(n.pop());return t&&(l=j+l),l}var g=a.utils,h=a.AttributeConstants,i=a.LineFormatting.LIST_TYPE,j='<style>ul.firepad-todo { list-style: none; margin-left: 0; padding-left: 0; } ul.firepad-todo > li { padding-left: 1em; text-indent: -1em; } ul.firepad-todo > li:before { content: "\\2610"; padding-right: 5px; } ul.firepad-todo > li.firepad-checked:before { content: "\\2611"; padding-right: 5px; }</style>\n';return f}();var a=a||{};a.textPiecesToInserts=function(b,c){function d(c,d){c instanceof a.Text&&(d=c.formatting.attributes,c=c.text),f.push({string:c,attributes:d}),b="\n"===c[c.length-1]}function e(c){b&&d(a.sentinelConstants.LINE_SENTINEL_CHARACTER,c.formatting.attributes);for(var e=0;e<c.textPieces.length;e++)d(c.textPieces[e]);d("\n")}for(var f=[],g=0;g<c.length;g++)c[g]instanceof a.Line?e(c[g]):d(c[g]);return f};var a=a||{};a.Headless=function(){function b(a){if(!(this instanceof b))return new b(a);if("string"==typeof a){if("function"!=typeof Firebase)var c=__webpack_require__(18);else var c=Firebase;var f=new c(a)}else var f=a;this.entityManager_=new e,this.firebaseAdapter_=new d(f),this.ready_=!1,this.zombie_=!1}var c=a.TextOperation,d=a.FirebaseAdapter,e=a.EntityManager,f=a.ParseHtml;return b.prototype.getDocument=function(a){var b=this;return b.ready_?a(b.firebaseAdapter_.getDocument()):void b.firebaseAdapter_.on("ready",function(){b.ready_=!0,a(b.firebaseAdapter_.getDocument())})},b.prototype.getText=function(b){if(this.zombie_)throw new Error("You can't use a firepad.Headless after calling dispose()!");this.getDocument(function(c){var d=c.apply("");for(key in a.sentinelConstants)d=d.replace(new RegExp(a.sentinelConstants[key],"g"),"");b(d)})},b.prototype.setText=function(a,b){if(this.zombie_)throw new Error("You can't use a firepad.Headless after calling dispose()!");var d=c().insert(a);this.sendOperationWithRetry(d,b)},b.prototype.initializeFakeDom=function(b){"object"==typeof document||"object"==typeof a.document?b():__webpack_require__(43).env("<head></head><body></body>",function(c,d){return a.document?(d.close(),b()):(a.document=d.document,void b())})},b.prototype.getHtml=function(b){var c=this;if(this.zombie_)throw new Error("You can't use a firepad.Headless after calling dispose()!");c.initializeFakeDom(function(){c.getDocument(function(d){b(a.SerializeHtml(d,c.entityManager_))})})},b.prototype.setHtml=function(b,d){var e=this;if(this.zombie_)throw new Error("You can't use a firepad.Headless after calling dispose()!");e.initializeFakeDom(function(){for(var g=f(b,e.entityManager_),h=a.textPiecesToInserts(!0,g),i=new c,j=0;j<h.length;j++)i.insert(h[j].string,h[j].attributes);e.sendOperationWithRetry(i,d)})},b.prototype.sendOperationWithRetry=function(a,b){var c=this;c.getDocument(function(d){var e=a.clone()["delete"](d.targetLength);c.firebaseAdapter_.sendOperation(e,function(d,e){e?"undefined"!=typeof b&&b(null,e):c.sendOperationWithRetry(a,b)})})},b.prototype.dispose=function(){this.zombie_=!0,this.firebaseAdapter_.dispose()},b}();var a=a||{};return a.Firepad=function(b){function c(a,b,e){if(!(this instanceof c))return new c(a,b,e);if(!p&&!q)throw new Error("Couldn't find CodeMirror or ACE.  Did you forget to include codemirror.js or ace.js?");if(this.zombie_=!1,p&&b instanceof p){this.codeMirror_=this.editor_=b;var f=this.codeMirror_.getValue();if(""!==f)throw new Error("Can't initialize Firepad with a CodeMirror instance that already contains text.")}else if(q&&b&&b.session instanceof q.EditSession){if(this.ace_=this.editor_=b,f=this.ace_.getValue(),""!==f)throw new Error("Can't initialize Firepad with an ACE instance that already contains text.")}else this.codeMirror_=this.editor_=new p(b);var i=this.codeMirror_?this.codeMirror_.getWrapperElement():this.ace_.container;this.firepadWrapper_=o.elt("div",null,{"class":"firepad"}),i.parentNode.replaceChild(this.firepadWrapper_,i),this.firepadWrapper_.appendChild(i),o.on(i,"dragstart",o.stopEvent),this.editor_.firepad=this,this.options_=e||{},this.getOption("richTextShortcuts",!1)&&(p.keyMap.richtext||this.initializeKeyMap_(),this.codeMirror_.setOption("keyMap","richtext"),this.firepadWrapper_.className+=" firepad-richtext"),this.imageInsertionUI=this.getOption("imageInsertionUI",!0),this.getOption("richTextToolbar",!1)&&(this.addToolbar_(),this.firepadWrapper_.className+=" firepad-richtext firepad-with-toolbar"),this.addPoweredByLogo_(),this.codeMirror_&&this.codeMirror_.refresh();var n=this.getOption("userId",a.push().key()),r=this.getOption("userColor",d(n));this.entityManager_=new m,this.firebaseAdapter_=new k(a,n,r),this.codeMirror_?(this.richTextCodeMirror_=new h(this.codeMirror_,this.entityManager_,{cssPrefix:"firepad-"}),this.editorAdapter_=new g(this.richTextCodeMirror_)):this.editorAdapter_=new j(this.ace_),this.client_=new l(this.firebaseAdapter_,this.editorAdapter_);var s=this;this.firebaseAdapter_.on("cursor",function(){s.trigger.apply(s,["cursor"].concat([].slice.call(arguments)))}),this.codeMirror_&&this.richTextCodeMirror_.on("newLine",function(){s.trigger.apply(s,["newLine"].concat([].slice.call(arguments)))}),this.firebaseAdapter_.on("ready",function(){s.ready_=!0,this.ace_&&this.editorAdapter_.grabDocumentState();var a=s.getOption("defaultText",null);a&&s.isHistoryEmpty()&&s.setText(a),s.trigger("ready")}),this.client_.on("synced",function(a){s.trigger("synced",a)}),"Microsoft Internet Explorer"==navigator.appName&&navigator.userAgent.match(/MSIE 8\./)&&(window.onload=function(){var a=document.getElementsByTagName("head")[0],b=document.createElement("style");b.type="text/css",b.styleSheet.cssText=":before,:after{content:none !important;}",a.appendChild(b),setTimeout(function(){a.removeChild(b)},0)})}function d(a){for(var b=1,c=0;c<a.length;c++)b=17*(b+a.charCodeAt(c))%360;var d=b/360;return f(d,1,.75)}function e(a,b,c){function d(a){var b=Math.round(255*a).toString(16);return 1===b.length?"0"+b:b}return"#"+d(a)+d(b)+d(c)}function f(a,b,c){if(0===b)return e(c,c,c);var d=.5>c?c*(1+b):c+b-b*c,f=2*c-d,g=function(a){return 0>a&&(a+=1),a>1&&(a-=1),1>6*a?f+6*(d-f)*a:1>2*a?d:2>3*a?f+6*(d-f)*(2/3-a):f};return e(g(a+1/3),g(a),g(a-1/3))}if(!a.RichTextCodeMirrorAdapter)throw new Error("Oops! It looks like you're trying to include lib/firepad.js directly.  This is actually one of many source files that make up firepad.  You want dist/firepad.js instead.");var g=a.RichTextCodeMirrorAdapter,h=a.RichTextCodeMirror,i=a.RichTextToolbar,j=a.ACEAdapter,k=a.FirebaseAdapter,l=a.EditorClient,m=a.EntityManager,n=a.AttributeConstants,o=a.utils,p=(a.LineFormatting.LIST_TYPE,b.CodeMirror),q=b.ace;return o.makeEventEmitter(c),c.fromCodeMirror=c,c.fromACE=c,c.prototype.dispose=function(){this.zombie_=!0;var a=this.codeMirror_?this.codeMirror_.getWrapperElement():this.ace_.container;this.firepadWrapper_.removeChild(a),this.firepadWrapper_.parentNode.replaceChild(a,this.firepadWrapper_),this.editor_.firepad=null,this.codeMirror_&&"richtext"===this.codeMirror_.getOption("keyMap")&&this.codeMirror_.setOption("keyMap","default"),this.firebaseAdapter_.dispose(),this.editorAdapter_.detach(),this.richTextCodeMirror_&&this.richTextCodeMirror_.detach()},c.prototype.setUserId=function(a){this.firebaseAdapter_.setUserId(a)},c.prototype.setUserColor=function(a){this.firebaseAdapter_.setColor(a)},c.prototype.getText=function(){return this.assertReady_("getText"),this.codeMirror_?this.richTextCodeMirror_.getText():this.ace_.getSession().getDocument().getValue()},c.prototype.setText=function(a){return this.assertReady_("setText"),this.ace_?this.ace_.getSession().getDocument().setValue(a):(this.codeMirror_.getWrapperElement().setAttribute("style","display: none"),this.codeMirror_.setValue(""),this.insertText(0,a),this.codeMirror_.getWrapperElement().setAttribute("style",""),this.codeMirror_.refresh(),void this.editorAdapter_.setCursor({position:0,selectionEnd:0}))},c.prototype.insertTextAtCursor=function(a){this.insertText(this.codeMirror_.indexFromPos(this.codeMirror_.getCursor()),a)},c.prototype.insertText=function(b,c){o.assert(!this.ace_,"Not supported for ace yet."),this.assertReady_("insertText"),"[object Array]"!==Object.prototype.toString.call(c)&&(c=[c]);for(var d=0===b,e=a.textPiecesToInserts(d,c),f=0;f<e.length;f++){var g=e[f].string,h=e[f].attributes;this.richTextCodeMirror_.insertText(b,g,h),b+=g.length}},c.prototype.getOperationForSpan=function(b,c){for(var d=this.richTextCodeMirror_.getRange(b,c),e=this.richTextCodeMirror_.getAttributeSpans(b,c),f=0,g=new a.TextOperation,h=0;h<e.length;h++)g.insert(d.substr(f,e[h].length),e[h].attributes),f+=e[h].length;return g},c.prototype.getHtml=function(){return this.getHtmlFromRange(null,null)},c.prototype.getHtmlFromSelection=function(){var a=this.codeMirror_.getCursor("start"),b=this.codeMirror_.getCursor("end"),c=this.codeMirror_.indexFromPos(a),d=this.codeMirror_.indexFromPos(b);return this.getHtmlFromRange(c,d)},c.prototype.getHtmlFromRange=function(b,c){this.assertReady_("getHtmlFromRange");var d=null!=b&&null!=c?this.getOperationForSpan(b,c):this.getOperationForSpan(0,this.codeMirror_.getValue().length);return a.SerializeHtml(d,this.entityManager_)},c.prototype.insertHtml=function(b,c){var d=a.ParseHtml(c,this.entityManager_);this.insertText(b,d)},c.prototype.insertHtmlAtCursor=function(a){this.insertHtml(this.codeMirror_.indexFromPos(this.codeMirror_.getCursor()),a)},c.prototype.setHtml=function(b){var c=a.ParseHtml(b,this.entityManager_);this.setText(c)},c.prototype.isHistoryEmpty=function(){return this.assertReady_("isHistoryEmpty"),this.firebaseAdapter_.isHistoryEmpty()},c.prototype.bold=function(){this.richTextCodeMirror_.toggleAttribute(n.BOLD),this.codeMirror_.focus()},c.prototype.italic=function(){this.richTextCodeMirror_.toggleAttribute(n.ITALIC),this.codeMirror_.focus()},c.prototype.underline=function(){this.richTextCodeMirror_.toggleAttribute(n.UNDERLINE),this.codeMirror_.focus()},c.prototype.strike=function(){this.richTextCodeMirror_.toggleAttribute(n.STRIKE),this.codeMirror_.focus()},c.prototype.fontSize=function(a){this.richTextCodeMirror_.setAttribute(n.FONT_SIZE,a),this.codeMirror_.focus()},c.prototype.font=function(a){this.richTextCodeMirror_.setAttribute(n.FONT,a),this.codeMirror_.focus()},c.prototype.color=function(a){this.richTextCodeMirror_.setAttribute(n.COLOR,a),this.codeMirror_.focus()},c.prototype.highlight=function(){this.richTextCodeMirror_.toggleAttribute(n.BACKGROUND_COLOR,"rgba(255,255,0,.65)"),this.codeMirror_.focus()},c.prototype.align=function(a){if("left"!==a&&"center"!==a&&"right"!==a)throw new Error('align() must be passed "left", "center", or "right".');this.richTextCodeMirror_.setLineAttribute(n.LINE_ALIGN,a),this.codeMirror_.focus()},c.prototype.orderedList=function(){this.richTextCodeMirror_.toggleLineAttribute(n.LIST_TYPE,"o"),this.codeMirror_.focus()},c.prototype.unorderedList=function(){this.richTextCodeMirror_.toggleLineAttribute(n.LIST_TYPE,"u"),this.codeMirror_.focus()},c.prototype.todo=function(){this.richTextCodeMirror_.toggleTodo(),this.codeMirror_.focus()},c.prototype.newline=function(){this.richTextCodeMirror_.newline()},c.prototype.deleteLeft=function(){this.richTextCodeMirror_.deleteLeft()},c.prototype.deleteRight=function(){this.richTextCodeMirror_.deleteRight()},c.prototype.indent=function(){this.richTextCodeMirror_.indent(),this.codeMirror_.focus()},c.prototype.unindent=function(){this.richTextCodeMirror_.unindent(),this.codeMirror_.focus()},c.prototype.undo=function(){this.codeMirror_.undo()},c.prototype.redo=function(){this.codeMirror_.redo()},c.prototype.insertEntity=function(a,b,c){this.richTextCodeMirror_.insertEntityAtCursor(a,b,c)},c.prototype.insertEntityAt=function(a,b,c,d){this.richTextCodeMirror_.insertEntityAt(a,b,c,d)},c.prototype.registerEntity=function(a,b){this.entityManager_.register(a,b)},c.prototype.getOption=function(a,b){return a in this.options_?this.options_[a]:b},c.prototype.assertReady_=function(a){if(!this.ready_)throw new Error('You must wait for the "ready" event before calling '+a+".");if(this.zombie_)throw new Error("You can't use a Firepad after calling dispose()!  [called "+a+"]")},c.prototype.makeImageDialog_=function(){this.makeDialog_("img","Insert image url")},c.prototype.makeDialog_=function(a,b){var c=this,d=function(){var a=document.getElementById("overlay");a.style.visibility="hidden",c.firepadWrapper_.removeChild(a)},e=function(){var b=document.getElementById("overlay");b.style.visibility="hidden";var d=document.getElementById(a).value;null!==d&&c.insertEntity(a,{src:d}),c.firepadWrapper_.removeChild(b)},f=o.elt("input",null,{"class":"firepad-dialog-input",id:a,type:"text",placeholder:b,autofocus:"autofocus"}),g=o.elt("a","Submit",{"class":"firepad-btn",id:"submitbtn"});o.on(g,"click",o.stopEventAnd(e));var h=o.elt("a","Cancel",{"class":"firepad-btn"});o.on(h,"click",o.stopEventAnd(d));var i=o.elt("div",[g,h],{"class":"firepad-btn-group"}),j=o.elt("div",[f,i],{"class":"firepad-dialog-div"}),k=o.elt("div",[j],{"class":"firepad-dialog",id:"overlay"});this.firepadWrapper_.appendChild(k)},c.prototype.addToolbar_=function(){this.toolbar=new i(this.imageInsertionUI),this.toolbar.on("undo",this.undo,this),this.toolbar.on("redo",this.redo,this),this.toolbar.on("bold",this.bold,this),this.toolbar.on("italic",this.italic,this),this.toolbar.on("underline",this.underline,this),this.toolbar.on("strike",this.strike,this),this.toolbar.on("font-size",this.fontSize,this),this.toolbar.on("font",this.font,this),this.toolbar.on("color",this.color,this),this.toolbar.on("left",function(){this.align("left")},this),this.toolbar.on("center",function(){this.align("center")},this),this.toolbar.on("right",function(){this.align("right")},this),this.toolbar.on("ordered-list",this.orderedList,this),this.toolbar.on("unordered-list",this.unorderedList,this),this.toolbar.on("todo-list",this.todo,this),this.toolbar.on("indent-increase",this.indent,this),this.toolbar.on("indent-decrease",this.unindent,this),this.toolbar.on("insert-image",this.makeImageDialog_,this),this.firepadWrapper_.insertBefore(this.toolbar.element(),this.firepadWrapper_.firstChild)},c.prototype.addPoweredByLogo_=function(){var a=o.elt("a",null,{"class":"powered-by-firepad"});a.setAttribute("href","http://www.firepad.io/"),a.setAttribute("target","_blank"),this.firepadWrapper_.appendChild(a)},c.prototype.initializeKeyMap_=function(){function a(a){return function(b){setTimeout(function(){a.call(b.firepad)},0)}}p.keyMap.richtext={"Ctrl-B":a(this.bold),"Cmd-B":a(this.bold),"Ctrl-I":a(this.italic),"Cmd-I":a(this.italic),"Ctrl-U":a(this.underline),"Cmd-U":a(this.underline),"Ctrl-H":a(this.highlight),"Cmd-H":a(this.highlight),Enter:a(this.newline),Delete:a(this.deleteRight),Backspace:a(this.deleteLeft),Tab:a(this.indent),"Shift-Tab":a(this.unindent),fallthrough:["default"]}},c}(this),a.Firepad.Formatting=a.Formatting,a.Firepad.Text=a.Text,a.Firepad.Entity=a.Entity,a.Firepad.LineFormatting=a.LineFormatting,a.Firepad.Line=a.Line,a.Firepad.TextOperation=a.TextOperation,a.Firepad.Headless=a.Headless,a.Firepad.RichTextCodeMirrorAdapter=a.RichTextCodeMirrorAdapter,a.Firepad.ACEAdapter=a.ACEAdapter,a.Firepad},this);

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var fs = __webpack_require__(38);
	var path = __webpack_require__(14);
	var URL = __webpack_require__(9);

	var toFileUrl = __webpack_require__(3).toFileUrl;
	var defineGetter = __webpack_require__(3).defineGetter;
	var defineSetter = __webpack_require__(3).defineSetter;
	var features = __webpack_require__(73);
	var dom = __webpack_require__(189);
	var browserAugmentation = __webpack_require__(173).browserAugmentation;
	var domToHtml = __webpack_require__(44).domToHtml;
	var VirtualConsole = __webpack_require__(76);

	var canReadFilesFromFS = !!fs.readFile; // in a browserify environment, this isn't present

	var request = function() { // lazy loading request
	  request = __webpack_require__(199);
	  return request.apply(undefined, arguments);
	}

	exports.getVirtualConsole = function (window) {
	  return window._virtualConsole;
	};
	exports.debugMode = false;

	// Proxy feature functions to features module.
	['availableDocumentFeatures',
	 'defaultDocumentFeatures',
	 'applyDocumentFeatures'].forEach(function (propName) {
	  defineGetter(exports, propName, function () {
	    return features[propName];
	  });
	  defineSetter(exports, propName, function (val) {
	    return features[propName] = val;
	  });
	});

	exports.jsdom = function (html, options) {
	  if (options === undefined) {
	    options = {};
	  }
	  if (options.parsingMode === undefined || options.parsingMode === 'auto') {
	    options.parsingMode = 'html';
	  }

	  var browser = browserAugmentation(dom, options);
	  var doc = new browser.HTMLDocument(options);

	  if (options.created) {
	    options.created(null, doc.parentWindow);
	  }

	  features.applyDocumentFeatures(doc, options.features);

	  if (html === undefined) {
	    html = '';
	  }
	  html = String(html);
	  doc.write(html);

	  if (doc.close && !options.deferClose) {
	    doc.close();
	  }

	  return doc;
	};

	exports.jQueryify = exports.jsdom.jQueryify = function (window, jqueryUrl, callback) {
	  if (!window || !window.document) {
	    return;
	  }

	  var features = window.document.implementation._features;
	  window.document.implementation._addFeature('FetchExternalResources', ['script']);
	  window.document.implementation._addFeature('ProcessExternalResources', ['script']);
	  window.document.implementation._addFeature('MutationEvents', ['2.0']);

	  var scriptEl = window.document.createElement('script');
	  scriptEl.className = 'jsdom';
	  scriptEl.src = jqueryUrl;
	  scriptEl.onload = scriptEl.onerror = function () {
	    window.document.implementation._features = features;

	    if (callback) {
	      callback(window, window.jQuery);
	    }
	  };

	  window.document.body.appendChild(scriptEl);
	};

	exports.env = exports.jsdom.env = function () {
	  var config = getConfigFromArguments(arguments);

	  if (config.file && canReadFilesFromFS) {
	    fs.readFile(config.file, 'utf-8', function (err, text) {
	      if (err) {
	        if (config.created) {
	          config.created(err);
	        }
	        if (config.done) {
	          config.done([err]);
	        }
	        return;
	      }

	      setParsingModeFromExtension(config, config.file);

	      config.html = text;
	      processHTML(config);
	    });
	  } else if (config.html !== undefined) {
	    processHTML(config);
	  } else if (config.url) {
	    handleUrl(config);
	  } else if (config.somethingToAutodetect !== undefined) {
	    var url = URL.parse(config.somethingToAutodetect);
	    if (url.protocol && url.hostname) {
	      config.url = config.somethingToAutodetect;
	      handleUrl(config.somethingToAutodetect);
	    } else if (canReadFilesFromFS) {
	      fs.readFile(config.somethingToAutodetect, 'utf-8', function (err, text) {
	        if (err) {
	          // the toString() test is because in Node.js, there is no proper code for this.
	          // This is fixed in io.js: https://github.com/iojs/io.js/issues/517 so:
	          // TODO: remove when we start requiring io.js
	          if (err.code === 'ENOENT' || err.code === 'ENAMETOOLONG'
	          	|| (err.toString() == 'Error: Path must be a string without null bytes.')
	          ) {
	            config.html = config.somethingToAutodetect;
	            processHTML(config);
	          } else {
	            if (config.created) {
	              config.created(err);
	            }
	            if (config.done) {
	              config.done([err]);
	            }
	          }
	        } else {
	          setParsingModeFromExtension(config, config.somethingToAutodetect);

	          config.html = text;
	          config.url = toFileUrl(config.somethingToAutodetect);
	          processHTML(config);
	        }
	      });
	    } else {
	      config.html = config.somethingToAutodetect;
	      processHTML(config);
	    }
	  }

	  function handleUrl() {
	    var options = {
	      uri: config.url,
	      encoding: config.encoding || 'utf8',
	      headers: config.headers || {},
	      proxy: config.proxy || null,
	      jar: config.jar !== undefined ? config.jar : true
	    };

	    request(options, function (err, res, responseText) {
	      if (err) {
	        if (config.created) {
	          config.created(err);
	        }
	        if (config.done) {
	          config.done([err]);
	        }
	        return;
	      }

	      // The use of `res.request.uri.href` ensures that `window.location.href`
	      // is updated when `request` follows redirects.
	      config.html = responseText;
	      config.url = res.request.uri.href;

	      if (config.parsingMode === "auto" && (
	        res.headers["content-type"] === "application/xml" ||
	        res.headers["content-type"] === "text/xml" ||
	        res.headers["content-type"] === "application/xhtml+xml")) {
	        config.parsingMode = "xml";
	      }

	      processHTML(config);
	    });
	  }
	};

	exports.serializeDocument = function (doc) {
	  return domToHtml(doc, true);
	};

	function processHTML(config) {
	  var options = {
	    features: config.features,
	    url: config.url,
	    parser: config.parser,
	    parsingMode: config.parsingMode,
	    created: config.created,
	    resourceLoader: config.resourceLoader
	  };

	  if (config.document) {
	    options.referrer = config.document.referrer;
	    options.cookie = config.document.cookie;
	    options.cookieDomain = config.document.cookieDomain;
	  }

	  var window = exports.jsdom(config.html, options).parentWindow;
	  var features = JSON.parse(JSON.stringify(window.document.implementation._features));

	  var docsLoaded = 0;
	  var totalDocs = config.scripts.length + config.src.length;
	  var readyState = null;
	  var errors = [];

	  if (!window || !window.document) {
	    if (config.created) {
	      config.created(new Error('JSDOM: a window object could not be created.'));
	    }
	    if (config.done) {
	      config.done([new Error('JSDOM: a window object could not be created.')]);
	    }
	    return;
	  }

	  window.document.implementation._addFeature('FetchExternalResources', ['script']);
	  window.document.implementation._addFeature('ProcessExternalResources', ['script']);
	  window.document.implementation._addFeature('MutationEvents', ['2.0']);

	  function scriptComplete() {
	    docsLoaded++;

	    if (docsLoaded >= totalDocs) {
	      window.document.implementation._features = features;

	      errors = errors.concat(window.document.errors || []);
	      if (errors.length === 0) {
	        errors = null;
	      }

	      process.nextTick(function() {
	        if (config.loaded) {
	          config.loaded(errors, window);
	        }
	        if (config.done) {
	          config.done(errors, window);
	        }
	      });
	    }
	  }

	  function handleScriptError(e) {
	    if (!errors) {
	      errors = [];
	    }
	    errors.push(e.error || e.message);

	    // nextTick so that an exception within scriptComplete won't cause
	    // another script onerror (which would be an infinite loop)
	    process.nextTick(scriptComplete);
	  }

	  if (config.scripts.length > 0 || config.src.length > 0) {
	    config.scripts.forEach(function (scriptSrc) {
	      var script = window.document.createElement('script');
	      script.className = 'jsdom';
	      script.onload = scriptComplete;
	      script.onerror = handleScriptError;
	      script.src = scriptSrc;

	      try {
	        // protect against invalid dom
	        // ex: http://www.google.com/foo#bar
	        window.document.documentElement.appendChild(script);
	      } catch (e) {
	        handleScriptError(e);
	      }
	    });

	    config.src.forEach(function (scriptText) {
	      var script = window.document.createElement('script');
	      script.onload = scriptComplete;
	      script.onerror = handleScriptError;
	      script.text = scriptText;

	      window.document.documentElement.appendChild(script);
	      window.document.documentElement.removeChild(script);
	    });
	  } else {
	    if (window.document.readyState === 'complete') {
	      scriptComplete();
	    } else {
	      window.addEventListener('load', function() {
	        scriptComplete();
	      });
	    }
	  }
	}

	function getConfigFromArguments(args, callback) {
	  var config = {};
	  if (typeof args[0] === 'object') {
	    var configToClone = args[0];
	    Object.keys(configToClone).forEach(function (key) {
	      config[key] = configToClone[key];
	    });
	  } else {
	    var stringToAutodetect = null;

	    Array.prototype.forEach.call(args, function (arg) {
	      switch (typeof arg) {
	        case 'string':
	          config.somethingToAutodetect = arg;
	          break;
	        case 'function':
	          config.done = arg;
	          break;
	        case 'object':
	          if (Array.isArray(arg)) {
	            config.scripts = arg;
	          } else {
	            extend(config, arg);
	          }
	          break;
	      }
	    });
	  }

	  if (!config.done && !config.created && !config.loaded) {
	    throw new Error('Must pass a "created", "loaded", "done" option or a callback to jsdom.env.');
	  }

	  if (config.somethingToAutodetect === undefined &&
	      config.html === undefined && !config.file && !config.url) {
	    throw new Error('Must pass a "html", "file", or "url" option, or a string, to jsdom.env');
	  }

	  config.scripts = ensureArray(config.scripts);
	  config.src = ensureArray(config.src);
	  config.parsingMode = config.parsingMode || "auto";

	  config.features = config.features || {
	    FetchExternalResources: false,
	    ProcessExternalResources: false,
	    SkipExternalResources: false
	  };

	  if (!config.url && config.file) {
	    config.url = toFileUrl(config.file);
	  }

	  return config;
	}

	function ensureArray(value) {
	  var array = value || [];
	  if (typeof array === 'string') {
	    array = [array];
	  }
	  return array;
	}

	function extend(config, overrides) {
	  Object.keys(overrides).forEach(function (key) {
	    config[key] = overrides[key];
	  });
	}

	function setParsingModeFromExtension(config, filename) {
	  if (config.parsingMode === "auto") {
	    var ext = path.extname(filename);
	    if (ext === ".xhtml" || ext === ".xml") {
	      config.parsingMode = "xml";
	    }
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var parse5 = __webpack_require__(119);
	var serializer = new parse5.TreeSerializer(__webpack_require__(171));

	exports.domToHtml = function(dom) {
	  if (dom._toArray) {
	    // node list
	    dom = dom._toArray();
	  }
	  if (typeof dom.length !== "undefined") {
	    var ret = "";
	    for (var i = 0, len = dom.length; i < len; i++) {
	      ret += dom[i].nodeType === dom.DOCUMENT_NODE ?
	        serializer.serialize(dom[i]) :
	        serializer.serialize({ childNodes: [dom[i]] });
	    }
	    return ret;
	  } else {
	    return dom.nodeType === dom.DOCUMENT_NODE ?
	      serializer.serialize(dom) :
	      serializer.serialize({ childNodes: [dom] });
	  }
	};


/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(12).CSSRule,
		CSSStyleDeclaration: __webpack_require__(19).CSSStyleDeclaration
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframeRule
	 */
	CSSOM.CSSKeyframeRule = function CSSKeyframeRule() {
		CSSOM.CSSRule.call(this);
		this.keyText = '';
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};

	CSSOM.CSSKeyframeRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframeRule.prototype.constructor = CSSOM.CSSKeyframeRule;
	CSSOM.CSSKeyframeRule.prototype.type = 9;
	//FIXME
	//CSSOM.CSSKeyframeRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframeRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframeRule.cpp
	Object.defineProperty(CSSOM.CSSKeyframeRule.prototype, "cssText", {
	  get: function() {
	    return this.keyText + " {" + this.style.cssText + "} ";
	  }
	});


	//.CommonJS
	exports.CSSKeyframeRule = CSSOM.CSSKeyframeRule;
	///CommonJS


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(12).CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/css3-animations/#DOM-CSSKeyframesRule
	 */
	CSSOM.CSSKeyframesRule = function CSSKeyframesRule() {
		CSSOM.CSSRule.call(this);
		this.name = '';
		this.cssRules = [];
	};

	CSSOM.CSSKeyframesRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSKeyframesRule.prototype.constructor = CSSOM.CSSKeyframesRule;
	CSSOM.CSSKeyframesRule.prototype.type = 8;
	//FIXME
	//CSSOM.CSSKeyframesRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSKeyframesRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSKeyframesRule.cpp
	Object.defineProperty(CSSOM.CSSKeyframesRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	      cssTexts.push("  " + this.cssRules[i].cssText);
	    }
	    return "@" + (this._vendorPrefix || '') + "keyframes " + this.name + " { \n" + cssTexts.join("\n") + "\n}";
	  }
	});


	//.CommonJS
	exports.CSSKeyframesRule = CSSOM.CSSKeyframesRule;
	///CommonJS


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(12).CSSRule,
		MediaList: __webpack_require__(48).MediaList
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssmediarule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSMediaRule
	 */
	CSSOM.CSSMediaRule = function CSSMediaRule() {
		CSSOM.CSSRule.call(this);
		this.media = new CSSOM.MediaList;
		this.cssRules = [];
	};

	CSSOM.CSSMediaRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSMediaRule.prototype.constructor = CSSOM.CSSMediaRule;
	CSSOM.CSSMediaRule.prototype.type = 4;
	//FIXME
	//CSSOM.CSSMediaRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSMediaRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	// http://opensource.apple.com/source/WebCore/WebCore-658.28/css/CSSMediaRule.cpp
	Object.defineProperty(CSSOM.CSSMediaRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	      cssTexts.push(this.cssRules[i].cssText);
	    }
	    return "@media " + this.media.mediaText + " {" + cssTexts.join("") + "}";
	  }
	});


	//.CommonJS
	exports.CSSMediaRule = CSSOM.CSSMediaRule;
	///CommonJS


/***/ },
/* 48 */
/***/ function(module, exports) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-medialist-interface
	 */
	CSSOM.MediaList = function MediaList(){
		this.length = 0;
	};

	CSSOM.MediaList.prototype = {

		constructor: CSSOM.MediaList,

		/**
		 * @return {string}
		 */
		get mediaText() {
			return Array.prototype.join.call(this, ", ");
		},

		/**
		 * @param {string} value
		 */
		set mediaText(value) {
			var values = value.split(",");
			var length = this.length = values.length;
			for (var i=0; i<length; i++) {
				this[i] = values[i].trim();
			}
		},

		/**
		 * @param {string} medium
		 */
		appendMedium: function(medium) {
			if (Array.prototype.indexOf.call(this, medium) === -1) {
				this[this.length] = medium;
				this.length++;
			}
		},

		/**
		 * @param {string} medium
		 */
		deleteMedium: function(medium) {
			var index = Array.prototype.indexOf.call(this, medium);
			if (index !== -1) {
				Array.prototype.splice.call(this, index, 1);
			}
		}

	};


	//.CommonJS
	exports.MediaList = CSSOM.MediaList;
	///CommonJS


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS


	/**
	 * @param {string} token
	 */
	CSSOM.parse = function parse(token) {

		var i = 0;

		/**
			"before-selector" or
			"selector" or
			"atRule" or
			"atBlock" or
			"before-name" or
			"name" or
			"before-value" or
			"value"
		*/
		var state = "before-selector";

		var index;
		var buffer = "";

		var SIGNIFICANT_WHITESPACE = {
			"selector": true,
			"value": true,
			"atRule": true,
			"importRule-begin": true,
			"importRule": true,
			"atBlock": true,
			'documentRule-begin': true
		};

		var styleSheet = new CSSOM.CSSStyleSheet;

		// @type CSSStyleSheet|CSSMediaRule|CSSFontFaceRule|CSSKeyframesRule|CSSDocumentRule
		var currentScope = styleSheet;

		// @type CSSMediaRule|CSSKeyframesRule|CSSDocumentRule
		var parentRule;

		var selector, name, value, priority="", styleRule, mediaRule, importRule, fontFaceRule, keyframesRule, keyframeRule, documentRule;

		var atKeyframesRegExp = /@(-(?:\w+-)+)?keyframes/g;

		var parseError = function(message) {
			var lines = token.substring(0, i).split('\n');
			var lineCount = lines.length;
			var charCount = lines.pop().length + 1;
			var error = new Error(message + ' (line ' + lineCount + ', char ' + charCount + ')');
			error.line = lineCount;
			error.char = charCount;
			error.styleSheet = styleSheet;
			throw error;
		};

		for (var character; character = token.charAt(i); i++) {

			switch (character) {

			case " ":
			case "\t":
			case "\r":
			case "\n":
			case "\f":
				if (SIGNIFICANT_WHITESPACE[state]) {
					buffer += character;
				}
				break;

			// String
			case '"':
				index = i + 1;
				do {
					index = token.indexOf('"', index) + 1;
					if (!index) {
						parseError('Unmatched "');
					}
				} while (token[index - 2] === '\\')
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;

			case "'":
				index = i + 1;
				do {
					index = token.indexOf("'", index) + 1;
					if (!index) {
						parseError("Unmatched '");
					}
				} while (token[index - 2] === '\\')
				buffer += token.slice(i, index);
				i = index - 1;
				switch (state) {
					case 'before-value':
						state = 'value';
						break;
					case 'importRule-begin':
						state = 'importRule';
						break;
				}
				break;

			// Comment
			case "/":
				if (token.charAt(i + 1) === "*") {
					i += 2;
					index = token.indexOf("*/", i);
					if (index === -1) {
						parseError("Missing */");
					} else {
						i = index + 1;
					}
				} else {
					buffer += character;
				}
				if (state === "importRule-begin") {
					buffer += " ";
					state = "importRule";
				}
				break;

			// At-rule
			case "@":
				if (token.indexOf("@-moz-document", i) === i) {
					state = "documentRule-begin";
					documentRule = new CSSOM.CSSDocumentRule;
					documentRule.__starts = i;
					i += "-moz-document".length;
					buffer = "";
					break;
				} else if (token.indexOf("@media", i) === i) {
					state = "atBlock";
					mediaRule = new CSSOM.CSSMediaRule;
					mediaRule.__starts = i;
					i += "media".length;
					buffer = "";
					break;
				} else if (token.indexOf("@import", i) === i) {
					state = "importRule-begin";
					i += "import".length;
					buffer += "@import";
					break;
				} else if (token.indexOf("@font-face", i) === i) {
					state = "fontFaceRule-begin";
					i += "font-face".length;
					fontFaceRule = new CSSOM.CSSFontFaceRule;
					fontFaceRule.__starts = i;
					buffer = "";
					break;
				} else {
					atKeyframesRegExp.lastIndex = i;
					var matchKeyframes = atKeyframesRegExp.exec(token);
					if (matchKeyframes && matchKeyframes.index === i) {
						state = "keyframesRule-begin";
						keyframesRule = new CSSOM.CSSKeyframesRule;
						keyframesRule.__starts = i;
						keyframesRule._vendorPrefix = matchKeyframes[1]; // Will come out as undefined if no prefix was found
						i += matchKeyframes[0].length - 1;
						buffer = "";
						break;
					} else if (state == "selector") {
						state = "atRule";
					}
				}
				buffer += character;
				break;

			case "{":
				if (state === "selector" || state === "atRule") {
					styleRule.selectorText = buffer.trim();
					styleRule.style.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "atBlock") {
					mediaRule.media.mediaText = buffer.trim();
					currentScope = parentRule = mediaRule;
					mediaRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				} else if (state === "fontFaceRule-begin") {
					if (parentRule) {
						fontFaceRule.parentRule = parentRule;
					}
					fontFaceRule.parentStyleSheet = styleSheet;
					styleRule = fontFaceRule;
					buffer = "";
					state = "before-name";
				} else if (state === "keyframesRule-begin") {
					keyframesRule.name = buffer.trim();
					if (parentRule) {
						keyframesRule.parentRule = parentRule;
					}
					keyframesRule.parentStyleSheet = styleSheet;
					currentScope = parentRule = keyframesRule;
					buffer = "";
					state = "keyframeRule-begin";
				} else if (state === "keyframeRule-begin") {
					styleRule = new CSSOM.CSSKeyframeRule;
					styleRule.keyText = buffer.trim();
					styleRule.__starts = i;
					buffer = "";
					state = "before-name";
				} else if (state === "documentRule-begin") {
					// FIXME: what if this '{' is in the url text of the match function?
					documentRule.matcher.matcherText = buffer.trim();
					if (parentRule) {
						documentRule.parentRule = parentRule;
					}
					currentScope = parentRule = documentRule;
					documentRule.parentStyleSheet = styleSheet;
					buffer = "";
					state = "before-selector";
				}
				break;

			case ":":
				if (state === "name") {
					name = buffer.trim();
					buffer = "";
					state = "before-value";
				} else {
					buffer += character;
				}
				break;

			case '(':
				if (state === 'value') {
					// ie css expression mode
					if (buffer.trim() == 'expression') {
						var info = (new CSSOM.CSSValueExpression(token, i)).parse();

						if (info.error) {
							parseError(info.error);
						} else {
							buffer += info.expression;
							i = info.idx;
						}
					} else {
						index = token.indexOf(')', i + 1);
						if (index === -1) {
							parseError('Unmatched "("');
						}
						buffer += token.slice(i, index + 1);
						i = index;
					}
				} else {
					buffer += character;
				}

				break;

			case "!":
				if (state === "value" && token.indexOf("!important", i) === i) {
					priority = "important";
					i += "important".length;
				} else {
					buffer += character;
				}
				break;

			case ";":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
						buffer = "";
						state = "before-name";
						break;
					case "atRule":
						buffer = "";
						state = "before-selector";
						break;
					case "importRule":
						importRule = new CSSOM.CSSImportRule;
						importRule.parentStyleSheet = importRule.styleSheet.parentStyleSheet = styleSheet;
						importRule.cssText = buffer + character;
						styleSheet.cssRules.push(importRule);
						buffer = "";
						state = "before-selector";
						break;
					default:
						buffer += character;
						break;
				}
				break;

			case "}":
				switch (state) {
					case "value":
						styleRule.style.setProperty(name, buffer.trim(), priority);
						priority = "";
					case "before-name":
					case "name":
						styleRule.__ends = i + 1;
						if (parentRule) {
							styleRule.parentRule = parentRule;
						}
						styleRule.parentStyleSheet = styleSheet;
						currentScope.cssRules.push(styleRule);
						buffer = "";
						if (currentScope.constructor === CSSOM.CSSKeyframesRule) {
							state = "keyframeRule-begin";
						} else {
							state = "before-selector";
						}
						break;
					case "keyframeRule-begin":
					case "before-selector":
					case "selector":
						// End of media/document rule.
						if (!parentRule) {
							parseError("Unexpected }");
						}
						currentScope.__ends = i + 1;
						// Nesting rules aren't supported yet
						styleSheet.cssRules.push(currentScope);
						currentScope = styleSheet;
						parentRule = null;
						buffer = "";
						state = "before-selector";
						break;
				}
				break;

			default:
				switch (state) {
					case "before-selector":
						state = "selector";
						styleRule = new CSSOM.CSSStyleRule;
						styleRule.__starts = i;
						break;
					case "before-name":
						state = "name";
						break;
					case "before-value":
						state = "value";
						break;
					case "importRule-begin":
						state = "importRule";
						break;
				}
				buffer += character;
				break;
			}
		}

		return styleSheet;
	};


	//.CommonJS
	exports.parse = CSSOM.parse;
	// The following modules cannot be included sooner due to the mutual dependency with parse.js
	CSSOM.CSSStyleSheet = __webpack_require__(35).CSSStyleSheet;
	CSSOM.CSSStyleRule = __webpack_require__(34).CSSStyleRule;
	CSSOM.CSSImportRule = __webpack_require__(79).CSSImportRule;
	CSSOM.CSSMediaRule = __webpack_require__(47).CSSMediaRule;
	CSSOM.CSSFontFaceRule = __webpack_require__(78).CSSFontFaceRule;
	CSSOM.CSSStyleDeclaration = __webpack_require__(19).CSSStyleDeclaration;
	CSSOM.CSSKeyframeRule = __webpack_require__(45).CSSKeyframeRule;
	CSSOM.CSSKeyframesRule = __webpack_require__(46).CSSKeyframesRule;
	CSSOM.CSSValueExpression = __webpack_require__(81).CSSValueExpression;
	CSSOM.CSSDocumentRule = __webpack_require__(77).CSSDocumentRule;
	///CommonJS


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(13);
	  var binarySearch = __webpack_require__(112);
	  var ArraySet = __webpack_require__(110).ArraySet;
	  var base64VLQ = __webpack_require__(111);
	  var SourceMapConsumer = __webpack_require__(51).SourceMapConsumer;

	  /**
	   * A BasicSourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function BasicSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);

	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    // Some source maps produce relative source paths like "./foo.js" instead of
	    // "foo.js".  Normalize these first so that future comparisons will succeed.
	    // See bugzil.la/1090768.
	    sources = sources.map(util.normalize);

	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);

	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }

	  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns BasicSourceMapConsumer
	   */
	  BasicSourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(BasicSourceMapConsumer.prototype);

	      smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;

	      smc.__generatedMappings = aSourceMap._mappings.toArray().slice();
	      smc.__originalMappings = aSourceMap._mappings.toArray().slice()
	        .sort(util.compareByOriginalPositions);

	      return smc;
	    };

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  BasicSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  BasicSourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var str = aStr;
	      var temp = {};
	      var mapping;

	      while (str.length > 0) {
	        if (str.charAt(0) === ';') {
	          generatedLine++;
	          str = str.slice(1);
	          previousGeneratedColumn = 0;
	        }
	        else if (str.charAt(0) === ',') {
	          str = str.slice(1);
	        }
	        else {
	          mapping = {};
	          mapping.generatedLine = generatedLine;

	          // Generated column.
	          base64VLQ.decode(str, temp);
	          mapping.generatedColumn = previousGeneratedColumn + temp.value;
	          previousGeneratedColumn = mapping.generatedColumn;
	          str = temp.rest;

	          if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
	            // Original source.
	            base64VLQ.decode(str, temp);
	            mapping.source = this._sources.at(previousSource + temp.value);
	            previousSource += temp.value;
	            str = temp.rest;
	            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
	              throw new Error('Found a source, but no line and column');
	            }

	            // Original line.
	            base64VLQ.decode(str, temp);
	            mapping.originalLine = previousOriginalLine + temp.value;
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;
	            str = temp.rest;
	            if (str.length === 0 || this._nextCharIsMappingSeparator(str)) {
	              throw new Error('Found a source and line, but no column');
	            }

	            // Original column.
	            base64VLQ.decode(str, temp);
	            mapping.originalColumn = previousOriginalColumn + temp.value;
	            previousOriginalColumn = mapping.originalColumn;
	            str = temp.rest;

	            if (str.length > 0 && !this._nextCharIsMappingSeparator(str)) {
	              // Original name.
	              base64VLQ.decode(str, temp);
	              mapping.name = this._names.at(previousName + temp.value);
	              previousName += temp.value;
	              str = temp.rest;
	            }
	          }

	          this.__generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            this.__originalMappings.push(mapping);
	          }
	        }
	      }

	      this.__generatedMappings.sort(util.compareByGeneratedPositions);
	      this.__originalMappings.sort(util.compareByOriginalPositions);
	    };

	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  BasicSourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.

	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }

	      return binarySearch.search(aNeedle, aMappings, aComparator);
	    };

	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  BasicSourceMapConsumer.prototype.computeColumnSpans =
	    function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];

	        // Mappings do not contain a field for the last generated columnt. We
	        // can come up with an optimistic estimate, however, by assuming that
	        // mappings are contiguous (i.e. given two consecutive mappings, the
	        // first mapping ends where the second one starts).
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];

	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }

	        // The last mapping for each line spans the entire line.
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  BasicSourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(needle,
	                                    this._generatedMappings,
	                                    "generatedLine",
	                                    "generatedColumn",
	                                    util.compareByGeneratedPositions);

	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];

	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source != null && this.sourceRoot != null) {
	            source = util.join(this.sourceRoot, source);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: util.getArg(mapping, 'name', null)
	          };
	        }
	      }

	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * availible.
	   */
	  BasicSourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      if (!this.sourcesContent) {
	        return null;
	      }

	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }

	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }

	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }

	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }

	      // This function is used recursively from
	      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	      // don't want to throw if we can't find the source - we just want to
	      // return null, so we provide a flag to exit gracefully.
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  BasicSourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };

	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }

	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions);

	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        return {
	          line: util.getArg(mapping, 'generatedLine', null),
	          column: util.getArg(mapping, 'generatedColumn', null),
	          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	        };
	      }

	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };

	  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(13);

	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    // We do late requires because the subclasses require() this file.
	    if (sourceMap.sections != null) {
	      var indexedSourceMapConsumer = __webpack_require__(575);
	      return new indexedSourceMapConsumer.IndexedSourceMapConsumer(sourceMap);
	    } else {
	      var basicSourceMapConsumer = __webpack_require__(50);
	      return new basicSourceMapConsumer.BasicSourceMapConsumer(sourceMap);
	    }
	  }

	  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	    var basicSourceMapConsumer = __webpack_require__(50);
	    return basicSourceMapConsumer.BasicSourceMapConsumer
	            .fromSourceMap(aSourceMap);
	  }

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;


	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.

	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this.__generatedMappings = [];
	        this.__originalMappings = [];
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__generatedMappings;
	    }
	  });

	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this.__generatedMappings = [];
	        this.__originalMappings = [];
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__originalMappings;
	    }
	  });

	  SourceMapConsumer.prototype._nextCharIsMappingSeparator =
	    function SourceMapConsumer_nextCharIsMappingSeparator(aStr) {
	      var c = aStr.charAt(0);
	      return c === ";" || c === ",";
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      throw new Error("Subclasses must implement _parseMappings");
	    };

	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;

	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }

	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source;
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name
	        };
	      }).forEach(aCallback, context);
	    };

	  /**
	   * Returns all generated line and column information for the original source
	   * and line provided. The only argument is an object with the following
	   * properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.allGeneratedPositionsFor =
	    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	      // returns the index of the closest mapping less than the needle. By
	      // setting needle.originalColumn to Infinity, we thus find the last
	      // mapping for the given line, provided such a mapping exists.
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: Infinity
	      };

	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }

	      var mappings = [];

	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        while (mapping && mapping.originalLine === needle.originalLine) {
	          mappings.push({
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          });

	          mapping = this._originalMappings[--index];
	        }
	      }

	      return mappings.reverse();
	    };

	  exports.SourceMapConsumer = SourceMapConsumer;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 52 */
/***/ function(module, exports) {

	'use strict';

	//Const
	var VALID_DOCTYPE_NAME = 'html',
	    QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd',
	    QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
	        "+//silmaril//dtd html pro v0r11 19970101//en",
	        "-//advasoft ltd//dtd html 3.0 aswedit + extensions//en",
	        "-//as//dtd html 3.0 aswedit + extensions//en",
	        "-//ietf//dtd html 2.0 level 1//en",
	        "-//ietf//dtd html 2.0 level 2//en",
	        "-//ietf//dtd html 2.0 strict level 1//en",
	        "-//ietf//dtd html 2.0 strict level 2//en",
	        "-//ietf//dtd html 2.0 strict//en",
	        "-//ietf//dtd html 2.0//en",
	        "-//ietf//dtd html 2.1e//en",
	        "-//ietf//dtd html 3.0//en",
	        "-//ietf//dtd html 3.0//en//",
	        "-//ietf//dtd html 3.2 final//en",
	        "-//ietf//dtd html 3.2//en",
	        "-//ietf//dtd html 3//en",
	        "-//ietf//dtd html level 0//en",
	        "-//ietf//dtd html level 0//en//2.0",
	        "-//ietf//dtd html level 1//en",
	        "-//ietf//dtd html level 1//en//2.0",
	        "-//ietf//dtd html level 2//en",
	        "-//ietf//dtd html level 2//en//2.0",
	        "-//ietf//dtd html level 3//en",
	        "-//ietf//dtd html level 3//en//3.0",
	        "-//ietf//dtd html strict level 0//en",
	        "-//ietf//dtd html strict level 0//en//2.0",
	        "-//ietf//dtd html strict level 1//en",
	        "-//ietf//dtd html strict level 1//en//2.0",
	        "-//ietf//dtd html strict level 2//en",
	        "-//ietf//dtd html strict level 2//en//2.0",
	        "-//ietf//dtd html strict level 3//en",
	        "-//ietf//dtd html strict level 3//en//3.0",
	        "-//ietf//dtd html strict//en",
	        "-//ietf//dtd html strict//en//2.0",
	        "-//ietf//dtd html strict//en//3.0",
	        "-//ietf//dtd html//en",
	        "-//ietf//dtd html//en//2.0",
	        "-//ietf//dtd html//en//3.0",
	        "-//metrius//dtd metrius presentational//en",
	        "-//microsoft//dtd internet explorer 2.0 html strict//en",
	        "-//microsoft//dtd internet explorer 2.0 html//en",
	        "-//microsoft//dtd internet explorer 2.0 tables//en",
	        "-//microsoft//dtd internet explorer 3.0 html strict//en",
	        "-//microsoft//dtd internet explorer 3.0 html//en",
	        "-//microsoft//dtd internet explorer 3.0 tables//en",
	        "-//netscape comm. corp.//dtd html//en",
	        "-//netscape comm. corp.//dtd strict html//en",
	        "-//o'reilly and associates//dtd html 2.0//en",
	        "-//o'reilly and associates//dtd html extended 1.0//en",
	        "-//spyglass//dtd html 2.0 extended//en",
	        "-//sq//dtd html 2.0 hotmetal + extensions//en",
	        "-//sun microsystems corp.//dtd hotjava html//en",
	        "-//sun microsystems corp.//dtd hotjava strict html//en",
	        "-//w3c//dtd html 3 1995-03-24//en",
	        "-//w3c//dtd html 3.2 draft//en",
	        "-//w3c//dtd html 3.2 final//en",
	        "-//w3c//dtd html 3.2//en",
	        "-//w3c//dtd html 3.2s draft//en",
	        "-//w3c//dtd html 4.0 frameset//en",
	        "-//w3c//dtd html 4.0 transitional//en",
	        "-//w3c//dtd html experimental 19960712//en",
	        "-//w3c//dtd html experimental 970421//en",
	        "-//w3c//dtd w3 html//en",
	        "-//w3o//dtd w3 html 3.0//en",
	        "-//w3o//dtd w3 html 3.0//en//",
	        "-//webtechs//dtd mozilla html 2.0//en",
	        "-//webtechs//dtd mozilla html//en"
	    ],
	    QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
	        '-//w3c//dtd html 4.01 frameset//',
	        '-//w3c//dtd html 4.01 transitional//'
	    ],
	    QUIRKS_MODE_PUBLIC_IDS = [
	        '-//w3o//dtd w3 html strict 3.0//en//',
	        '-/w3c/dtd html 4.0 transitional/en',
	        'html'
	    ];


	//Utils
	function enquoteDoctypeId(id) {
	    var quote = id.indexOf('"') !== -1 ? '\'' : '"';

	    return quote + id + quote;
	}


	//API
	exports.isQuirks = function (name, publicId, systemId) {
	    if (name !== VALID_DOCTYPE_NAME)
	        return true;

	    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID)
	        return true;

	    if (publicId !== null) {
	        publicId = publicId.toLowerCase();

	        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1)
	            return true;

	        var prefixes = QUIRKS_MODE_PUBLIC_ID_PREFIXES;

	        if (systemId === null)
	            prefixes = prefixes.concat(QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES);

	        for (var i = 0; i < prefixes.length; i++) {
	            if (publicId.indexOf(prefixes[i]) === 0)
	                return true;
	        }
	    }

	    return false;
	};

	exports.serializeContent = function (name, publicId, systemId) {
	    var str = '!DOCTYPE ' + name;

	    if (publicId !== null)
	        str += ' PUBLIC ' + enquoteDoctypeId(publicId);

	    else if (systemId !== null)
	        str += ' SYSTEM';

	    if (systemId !== null)
	        str += ' ' + enquoteDoctypeId(systemId);

	    return str;
	};


/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';

	exports.mergeOptions = function (defaults, options) {
	    options = options || {};

	    return [defaults, options].reduce(function (merged, optObj) {
	        Object.keys(optObj).forEach(function (key) {
	            merged[key] = optObj[key];
	        });

	        return merged;
	    }, {});
	};


/***/ },
/* 54 */
/***/ function(module, exports) {

	'use strict';

	//Node construction
	exports.createDocument = function () {
	    return {
	        nodeName: '#document',
	        quirksMode: false,
	        childNodes: []
	    };
	};

	exports.createDocumentFragment = function () {
	    return {
	        nodeName: '#document-fragment',
	        quirksMode: false,
	        childNodes: []
	    };
	};

	exports.createElement = function (tagName, namespaceURI, attrs) {
	    return {
	        nodeName: tagName,
	        tagName: tagName,
	        attrs: attrs,
	        namespaceURI: namespaceURI,
	        childNodes: [],
	        parentNode: null
	    };
	};

	exports.createCommentNode = function (data) {
	    return {
	        nodeName: '#comment',
	        data: data,
	        parentNode: null
	    };
	};

	var createTextNode = function (value) {
	    return {
	        nodeName: '#text',
	        value: value,
	        parentNode: null
	    }
	};


	//Tree mutation
	exports.setDocumentType = function (document, name, publicId, systemId) {
	    var doctypeNode = null;

	    for (var i = 0; i < document.childNodes.length; i++) {
	        if (document.childNodes[i].nodeName === '#documentType') {
	            doctypeNode = document.childNodes[i];
	            break;
	        }
	    }

	    if (doctypeNode) {
	        doctypeNode.name = name;
	        doctypeNode.publicId = publicId;
	        doctypeNode.systemId = systemId;
	    }

	    else {
	        appendChild(document, {
	            nodeName: '#documentType',
	            name: name,
	            publicId: publicId,
	            systemId: systemId
	        });
	    }
	};

	exports.setQuirksMode = function (document) {
	    document.quirksMode = true;
	};

	exports.isQuirksMode = function (document) {
	    return document.quirksMode;
	};

	var appendChild = exports.appendChild = function (parentNode, newNode) {
	    parentNode.childNodes.push(newNode);
	    newNode.parentNode = parentNode;
	};

	var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
	    var insertionIdx = parentNode.childNodes.indexOf(referenceNode);

	    parentNode.childNodes.splice(insertionIdx, 0, newNode);
	    newNode.parentNode = parentNode;
	};

	exports.detachNode = function (node) {
	    if (node.parentNode) {
	        var idx = node.parentNode.childNodes.indexOf(node);

	        node.parentNode.childNodes.splice(idx, 1);
	        node.parentNode = null;
	    }
	};

	exports.insertText = function (parentNode, text) {
	    if (parentNode.childNodes.length) {
	        var prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

	        if (prevNode.nodeName === '#text') {
	            prevNode.value += text;
	            return;
	        }
	    }

	    appendChild(parentNode, createTextNode(text));
	};

	exports.insertTextBefore = function (parentNode, text, referenceNode) {
	    var prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];

	    if (prevNode && prevNode.nodeName === '#text')
	        prevNode.value += text;
	    else
	        insertBefore(parentNode, createTextNode(text), referenceNode);
	};

	exports.adoptAttributes = function (recipientNode, attrs) {
	    var recipientAttrsMap = [];

	    for (var i = 0; i < recipientNode.attrs.length; i++)
	        recipientAttrsMap.push(recipientNode.attrs[i].name);

	    for (var j = 0; j < attrs.length; j++) {
	        if (recipientAttrsMap.indexOf(attrs[j].name) === -1)
	            recipientNode.attrs.push(attrs[j]);
	    }
	};


	//Tree traversing
	exports.getFirstChild = function (node) {
	    return node.childNodes[0];
	};

	exports.getChildNodes = function (node) {
	    return node.childNodes;
	};

	exports.getParentNode = function (node) {
	    return node.parentNode;
	};

	exports.getAttrList = function (node) {
	    return node.attrs;
	};

	//Node data
	exports.getTagName = function (element) {
	    return element.tagName;
	};

	exports.getNamespaceURI = function (element) {
	    return element.namespaceURI;
	};

	exports.getTextNodeContent = function (textNode) {
	    return textNode.value;
	};

	exports.getCommentNodeContent = function (commentNode) {
	    return commentNode.data;
	};

	exports.getDocumentTypeNodeName = function (doctypeNode) {
	    return doctypeNode.name;
	};

	exports.getDocumentTypeNodePublicId = function (doctypeNode) {
	    return doctypeNode.publicId;
	};

	exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
	    return doctypeNode.systemId;
	};

	//Node types
	exports.isTextNode = function (node) {
	    return node.nodeName === '#text';
	};

	exports.isCommentNode = function (node) {
	    return node.nodeName === '#comment';
	};

	exports.isDocumentTypeNode = function (node) {
	    return node.nodeName === '#documentType';
	};

	exports.isElementNode = function (node) {
	    return !!node.tagName;
	};


/***/ },
/* 55 */
/***/ function(module, exports) {

	module.exports = {
		"Aacute": "Á",
		"aacute": "á",
		"Abreve": "Ă",
		"abreve": "ă",
		"ac": "∾",
		"acd": "∿",
		"acE": "∾̳",
		"Acirc": "Â",
		"acirc": "â",
		"acute": "´",
		"Acy": "А",
		"acy": "а",
		"AElig": "Æ",
		"aelig": "æ",
		"af": "⁡",
		"Afr": "𝔄",
		"afr": "𝔞",
		"Agrave": "À",
		"agrave": "à",
		"alefsym": "ℵ",
		"aleph": "ℵ",
		"Alpha": "Α",
		"alpha": "α",
		"Amacr": "Ā",
		"amacr": "ā",
		"amalg": "⨿",
		"amp": "&",
		"AMP": "&",
		"andand": "⩕",
		"And": "⩓",
		"and": "∧",
		"andd": "⩜",
		"andslope": "⩘",
		"andv": "⩚",
		"ang": "∠",
		"ange": "⦤",
		"angle": "∠",
		"angmsdaa": "⦨",
		"angmsdab": "⦩",
		"angmsdac": "⦪",
		"angmsdad": "⦫",
		"angmsdae": "⦬",
		"angmsdaf": "⦭",
		"angmsdag": "⦮",
		"angmsdah": "⦯",
		"angmsd": "∡",
		"angrt": "∟",
		"angrtvb": "⊾",
		"angrtvbd": "⦝",
		"angsph": "∢",
		"angst": "Å",
		"angzarr": "⍼",
		"Aogon": "Ą",
		"aogon": "ą",
		"Aopf": "𝔸",
		"aopf": "𝕒",
		"apacir": "⩯",
		"ap": "≈",
		"apE": "⩰",
		"ape": "≊",
		"apid": "≋",
		"apos": "'",
		"ApplyFunction": "⁡",
		"approx": "≈",
		"approxeq": "≊",
		"Aring": "Å",
		"aring": "å",
		"Ascr": "𝒜",
		"ascr": "𝒶",
		"Assign": "≔",
		"ast": "*",
		"asymp": "≈",
		"asympeq": "≍",
		"Atilde": "Ã",
		"atilde": "ã",
		"Auml": "Ä",
		"auml": "ä",
		"awconint": "∳",
		"awint": "⨑",
		"backcong": "≌",
		"backepsilon": "϶",
		"backprime": "‵",
		"backsim": "∽",
		"backsimeq": "⋍",
		"Backslash": "∖",
		"Barv": "⫧",
		"barvee": "⊽",
		"barwed": "⌅",
		"Barwed": "⌆",
		"barwedge": "⌅",
		"bbrk": "⎵",
		"bbrktbrk": "⎶",
		"bcong": "≌",
		"Bcy": "Б",
		"bcy": "б",
		"bdquo": "„",
		"becaus": "∵",
		"because": "∵",
		"Because": "∵",
		"bemptyv": "⦰",
		"bepsi": "϶",
		"bernou": "ℬ",
		"Bernoullis": "ℬ",
		"Beta": "Β",
		"beta": "β",
		"beth": "ℶ",
		"between": "≬",
		"Bfr": "𝔅",
		"bfr": "𝔟",
		"bigcap": "⋂",
		"bigcirc": "◯",
		"bigcup": "⋃",
		"bigodot": "⨀",
		"bigoplus": "⨁",
		"bigotimes": "⨂",
		"bigsqcup": "⨆",
		"bigstar": "★",
		"bigtriangledown": "▽",
		"bigtriangleup": "△",
		"biguplus": "⨄",
		"bigvee": "⋁",
		"bigwedge": "⋀",
		"bkarow": "⤍",
		"blacklozenge": "⧫",
		"blacksquare": "▪",
		"blacktriangle": "▴",
		"blacktriangledown": "▾",
		"blacktriangleleft": "◂",
		"blacktriangleright": "▸",
		"blank": "␣",
		"blk12": "▒",
		"blk14": "░",
		"blk34": "▓",
		"block": "█",
		"bne": "=⃥",
		"bnequiv": "≡⃥",
		"bNot": "⫭",
		"bnot": "⌐",
		"Bopf": "𝔹",
		"bopf": "𝕓",
		"bot": "⊥",
		"bottom": "⊥",
		"bowtie": "⋈",
		"boxbox": "⧉",
		"boxdl": "┐",
		"boxdL": "╕",
		"boxDl": "╖",
		"boxDL": "╗",
		"boxdr": "┌",
		"boxdR": "╒",
		"boxDr": "╓",
		"boxDR": "╔",
		"boxh": "─",
		"boxH": "═",
		"boxhd": "┬",
		"boxHd": "╤",
		"boxhD": "╥",
		"boxHD": "╦",
		"boxhu": "┴",
		"boxHu": "╧",
		"boxhU": "╨",
		"boxHU": "╩",
		"boxminus": "⊟",
		"boxplus": "⊞",
		"boxtimes": "⊠",
		"boxul": "┘",
		"boxuL": "╛",
		"boxUl": "╜",
		"boxUL": "╝",
		"boxur": "└",
		"boxuR": "╘",
		"boxUr": "╙",
		"boxUR": "╚",
		"boxv": "│",
		"boxV": "║",
		"boxvh": "┼",
		"boxvH": "╪",
		"boxVh": "╫",
		"boxVH": "╬",
		"boxvl": "┤",
		"boxvL": "╡",
		"boxVl": "╢",
		"boxVL": "╣",
		"boxvr": "├",
		"boxvR": "╞",
		"boxVr": "╟",
		"boxVR": "╠",
		"bprime": "‵",
		"breve": "˘",
		"Breve": "˘",
		"brvbar": "¦",
		"bscr": "𝒷",
		"Bscr": "ℬ",
		"bsemi": "⁏",
		"bsim": "∽",
		"bsime": "⋍",
		"bsolb": "⧅",
		"bsol": "\\",
		"bsolhsub": "⟈",
		"bull": "•",
		"bullet": "•",
		"bump": "≎",
		"bumpE": "⪮",
		"bumpe": "≏",
		"Bumpeq": "≎",
		"bumpeq": "≏",
		"Cacute": "Ć",
		"cacute": "ć",
		"capand": "⩄",
		"capbrcup": "⩉",
		"capcap": "⩋",
		"cap": "∩",
		"Cap": "⋒",
		"capcup": "⩇",
		"capdot": "⩀",
		"CapitalDifferentialD": "ⅅ",
		"caps": "∩︀",
		"caret": "⁁",
		"caron": "ˇ",
		"Cayleys": "ℭ",
		"ccaps": "⩍",
		"Ccaron": "Č",
		"ccaron": "č",
		"Ccedil": "Ç",
		"ccedil": "ç",
		"Ccirc": "Ĉ",
		"ccirc": "ĉ",
		"Cconint": "∰",
		"ccups": "⩌",
		"ccupssm": "⩐",
		"Cdot": "Ċ",
		"cdot": "ċ",
		"cedil": "¸",
		"Cedilla": "¸",
		"cemptyv": "⦲",
		"cent": "¢",
		"centerdot": "·",
		"CenterDot": "·",
		"cfr": "𝔠",
		"Cfr": "ℭ",
		"CHcy": "Ч",
		"chcy": "ч",
		"check": "✓",
		"checkmark": "✓",
		"Chi": "Χ",
		"chi": "χ",
		"circ": "ˆ",
		"circeq": "≗",
		"circlearrowleft": "↺",
		"circlearrowright": "↻",
		"circledast": "⊛",
		"circledcirc": "⊚",
		"circleddash": "⊝",
		"CircleDot": "⊙",
		"circledR": "®",
		"circledS": "Ⓢ",
		"CircleMinus": "⊖",
		"CirclePlus": "⊕",
		"CircleTimes": "⊗",
		"cir": "○",
		"cirE": "⧃",
		"cire": "≗",
		"cirfnint": "⨐",
		"cirmid": "⫯",
		"cirscir": "⧂",
		"ClockwiseContourIntegral": "∲",
		"CloseCurlyDoubleQuote": "”",
		"CloseCurlyQuote": "’",
		"clubs": "♣",
		"clubsuit": "♣",
		"colon": ":",
		"Colon": "∷",
		"Colone": "⩴",
		"colone": "≔",
		"coloneq": "≔",
		"comma": ",",
		"commat": "@",
		"comp": "∁",
		"compfn": "∘",
		"complement": "∁",
		"complexes": "ℂ",
		"cong": "≅",
		"congdot": "⩭",
		"Congruent": "≡",
		"conint": "∮",
		"Conint": "∯",
		"ContourIntegral": "∮",
		"copf": "𝕔",
		"Copf": "ℂ",
		"coprod": "∐",
		"Coproduct": "∐",
		"copy": "©",
		"COPY": "©",
		"copysr": "℗",
		"CounterClockwiseContourIntegral": "∳",
		"crarr": "↵",
		"cross": "✗",
		"Cross": "⨯",
		"Cscr": "𝒞",
		"cscr": "𝒸",
		"csub": "⫏",
		"csube": "⫑",
		"csup": "⫐",
		"csupe": "⫒",
		"ctdot": "⋯",
		"cudarrl": "⤸",
		"cudarrr": "⤵",
		"cuepr": "⋞",
		"cuesc": "⋟",
		"cularr": "↶",
		"cularrp": "⤽",
		"cupbrcap": "⩈",
		"cupcap": "⩆",
		"CupCap": "≍",
		"cup": "∪",
		"Cup": "⋓",
		"cupcup": "⩊",
		"cupdot": "⊍",
		"cupor": "⩅",
		"cups": "∪︀",
		"curarr": "↷",
		"curarrm": "⤼",
		"curlyeqprec": "⋞",
		"curlyeqsucc": "⋟",
		"curlyvee": "⋎",
		"curlywedge": "⋏",
		"curren": "¤",
		"curvearrowleft": "↶",
		"curvearrowright": "↷",
		"cuvee": "⋎",
		"cuwed": "⋏",
		"cwconint": "∲",
		"cwint": "∱",
		"cylcty": "⌭",
		"dagger": "†",
		"Dagger": "‡",
		"daleth": "ℸ",
		"darr": "↓",
		"Darr": "↡",
		"dArr": "⇓",
		"dash": "‐",
		"Dashv": "⫤",
		"dashv": "⊣",
		"dbkarow": "⤏",
		"dblac": "˝",
		"Dcaron": "Ď",
		"dcaron": "ď",
		"Dcy": "Д",
		"dcy": "д",
		"ddagger": "‡",
		"ddarr": "⇊",
		"DD": "ⅅ",
		"dd": "ⅆ",
		"DDotrahd": "⤑",
		"ddotseq": "⩷",
		"deg": "°",
		"Del": "∇",
		"Delta": "Δ",
		"delta": "δ",
		"demptyv": "⦱",
		"dfisht": "⥿",
		"Dfr": "𝔇",
		"dfr": "𝔡",
		"dHar": "⥥",
		"dharl": "⇃",
		"dharr": "⇂",
		"DiacriticalAcute": "´",
		"DiacriticalDot": "˙",
		"DiacriticalDoubleAcute": "˝",
		"DiacriticalGrave": "`",
		"DiacriticalTilde": "˜",
		"diam": "⋄",
		"diamond": "⋄",
		"Diamond": "⋄",
		"diamondsuit": "♦",
		"diams": "♦",
		"die": "¨",
		"DifferentialD": "ⅆ",
		"digamma": "ϝ",
		"disin": "⋲",
		"div": "÷",
		"divide": "÷",
		"divideontimes": "⋇",
		"divonx": "⋇",
		"DJcy": "Ђ",
		"djcy": "ђ",
		"dlcorn": "⌞",
		"dlcrop": "⌍",
		"dollar": "$",
		"Dopf": "𝔻",
		"dopf": "𝕕",
		"Dot": "¨",
		"dot": "˙",
		"DotDot": "⃜",
		"doteq": "≐",
		"doteqdot": "≑",
		"DotEqual": "≐",
		"dotminus": "∸",
		"dotplus": "∔",
		"dotsquare": "⊡",
		"doublebarwedge": "⌆",
		"DoubleContourIntegral": "∯",
		"DoubleDot": "¨",
		"DoubleDownArrow": "⇓",
		"DoubleLeftArrow": "⇐",
		"DoubleLeftRightArrow": "⇔",
		"DoubleLeftTee": "⫤",
		"DoubleLongLeftArrow": "⟸",
		"DoubleLongLeftRightArrow": "⟺",
		"DoubleLongRightArrow": "⟹",
		"DoubleRightArrow": "⇒",
		"DoubleRightTee": "⊨",
		"DoubleUpArrow": "⇑",
		"DoubleUpDownArrow": "⇕",
		"DoubleVerticalBar": "∥",
		"DownArrowBar": "⤓",
		"downarrow": "↓",
		"DownArrow": "↓",
		"Downarrow": "⇓",
		"DownArrowUpArrow": "⇵",
		"DownBreve": "̑",
		"downdownarrows": "⇊",
		"downharpoonleft": "⇃",
		"downharpoonright": "⇂",
		"DownLeftRightVector": "⥐",
		"DownLeftTeeVector": "⥞",
		"DownLeftVectorBar": "⥖",
		"DownLeftVector": "↽",
		"DownRightTeeVector": "⥟",
		"DownRightVectorBar": "⥗",
		"DownRightVector": "⇁",
		"DownTeeArrow": "↧",
		"DownTee": "⊤",
		"drbkarow": "⤐",
		"drcorn": "⌟",
		"drcrop": "⌌",
		"Dscr": "𝒟",
		"dscr": "𝒹",
		"DScy": "Ѕ",
		"dscy": "ѕ",
		"dsol": "⧶",
		"Dstrok": "Đ",
		"dstrok": "đ",
		"dtdot": "⋱",
		"dtri": "▿",
		"dtrif": "▾",
		"duarr": "⇵",
		"duhar": "⥯",
		"dwangle": "⦦",
		"DZcy": "Џ",
		"dzcy": "џ",
		"dzigrarr": "⟿",
		"Eacute": "É",
		"eacute": "é",
		"easter": "⩮",
		"Ecaron": "Ě",
		"ecaron": "ě",
		"Ecirc": "Ê",
		"ecirc": "ê",
		"ecir": "≖",
		"ecolon": "≕",
		"Ecy": "Э",
		"ecy": "э",
		"eDDot": "⩷",
		"Edot": "Ė",
		"edot": "ė",
		"eDot": "≑",
		"ee": "ⅇ",
		"efDot": "≒",
		"Efr": "𝔈",
		"efr": "𝔢",
		"eg": "⪚",
		"Egrave": "È",
		"egrave": "è",
		"egs": "⪖",
		"egsdot": "⪘",
		"el": "⪙",
		"Element": "∈",
		"elinters": "⏧",
		"ell": "ℓ",
		"els": "⪕",
		"elsdot": "⪗",
		"Emacr": "Ē",
		"emacr": "ē",
		"empty": "∅",
		"emptyset": "∅",
		"EmptySmallSquare": "◻",
		"emptyv": "∅",
		"EmptyVerySmallSquare": "▫",
		"emsp13": " ",
		"emsp14": " ",
		"emsp": " ",
		"ENG": "Ŋ",
		"eng": "ŋ",
		"ensp": " ",
		"Eogon": "Ę",
		"eogon": "ę",
		"Eopf": "𝔼",
		"eopf": "𝕖",
		"epar": "⋕",
		"eparsl": "⧣",
		"eplus": "⩱",
		"epsi": "ε",
		"Epsilon": "Ε",
		"epsilon": "ε",
		"epsiv": "ϵ",
		"eqcirc": "≖",
		"eqcolon": "≕",
		"eqsim": "≂",
		"eqslantgtr": "⪖",
		"eqslantless": "⪕",
		"Equal": "⩵",
		"equals": "=",
		"EqualTilde": "≂",
		"equest": "≟",
		"Equilibrium": "⇌",
		"equiv": "≡",
		"equivDD": "⩸",
		"eqvparsl": "⧥",
		"erarr": "⥱",
		"erDot": "≓",
		"escr": "ℯ",
		"Escr": "ℰ",
		"esdot": "≐",
		"Esim": "⩳",
		"esim": "≂",
		"Eta": "Η",
		"eta": "η",
		"ETH": "Ð",
		"eth": "ð",
		"Euml": "Ë",
		"euml": "ë",
		"euro": "€",
		"excl": "!",
		"exist": "∃",
		"Exists": "∃",
		"expectation": "ℰ",
		"exponentiale": "ⅇ",
		"ExponentialE": "ⅇ",
		"fallingdotseq": "≒",
		"Fcy": "Ф",
		"fcy": "ф",
		"female": "♀",
		"ffilig": "ﬃ",
		"fflig": "ﬀ",
		"ffllig": "ﬄ",
		"Ffr": "𝔉",
		"ffr": "𝔣",
		"filig": "ﬁ",
		"FilledSmallSquare": "◼",
		"FilledVerySmallSquare": "▪",
		"fjlig": "fj",
		"flat": "♭",
		"fllig": "ﬂ",
		"fltns": "▱",
		"fnof": "ƒ",
		"Fopf": "𝔽",
		"fopf": "𝕗",
		"forall": "∀",
		"ForAll": "∀",
		"fork": "⋔",
		"forkv": "⫙",
		"Fouriertrf": "ℱ",
		"fpartint": "⨍",
		"frac12": "½",
		"frac13": "⅓",
		"frac14": "¼",
		"frac15": "⅕",
		"frac16": "⅙",
		"frac18": "⅛",
		"frac23": "⅔",
		"frac25": "⅖",
		"frac34": "¾",
		"frac35": "⅗",
		"frac38": "⅜",
		"frac45": "⅘",
		"frac56": "⅚",
		"frac58": "⅝",
		"frac78": "⅞",
		"frasl": "⁄",
		"frown": "⌢",
		"fscr": "𝒻",
		"Fscr": "ℱ",
		"gacute": "ǵ",
		"Gamma": "Γ",
		"gamma": "γ",
		"Gammad": "Ϝ",
		"gammad": "ϝ",
		"gap": "⪆",
		"Gbreve": "Ğ",
		"gbreve": "ğ",
		"Gcedil": "Ģ",
		"Gcirc": "Ĝ",
		"gcirc": "ĝ",
		"Gcy": "Г",
		"gcy": "г",
		"Gdot": "Ġ",
		"gdot": "ġ",
		"ge": "≥",
		"gE": "≧",
		"gEl": "⪌",
		"gel": "⋛",
		"geq": "≥",
		"geqq": "≧",
		"geqslant": "⩾",
		"gescc": "⪩",
		"ges": "⩾",
		"gesdot": "⪀",
		"gesdoto": "⪂",
		"gesdotol": "⪄",
		"gesl": "⋛︀",
		"gesles": "⪔",
		"Gfr": "𝔊",
		"gfr": "𝔤",
		"gg": "≫",
		"Gg": "⋙",
		"ggg": "⋙",
		"gimel": "ℷ",
		"GJcy": "Ѓ",
		"gjcy": "ѓ",
		"gla": "⪥",
		"gl": "≷",
		"glE": "⪒",
		"glj": "⪤",
		"gnap": "⪊",
		"gnapprox": "⪊",
		"gne": "⪈",
		"gnE": "≩",
		"gneq": "⪈",
		"gneqq": "≩",
		"gnsim": "⋧",
		"Gopf": "𝔾",
		"gopf": "𝕘",
		"grave": "`",
		"GreaterEqual": "≥",
		"GreaterEqualLess": "⋛",
		"GreaterFullEqual": "≧",
		"GreaterGreater": "⪢",
		"GreaterLess": "≷",
		"GreaterSlantEqual": "⩾",
		"GreaterTilde": "≳",
		"Gscr": "𝒢",
		"gscr": "ℊ",
		"gsim": "≳",
		"gsime": "⪎",
		"gsiml": "⪐",
		"gtcc": "⪧",
		"gtcir": "⩺",
		"gt": ">",
		"GT": ">",
		"Gt": "≫",
		"gtdot": "⋗",
		"gtlPar": "⦕",
		"gtquest": "⩼",
		"gtrapprox": "⪆",
		"gtrarr": "⥸",
		"gtrdot": "⋗",
		"gtreqless": "⋛",
		"gtreqqless": "⪌",
		"gtrless": "≷",
		"gtrsim": "≳",
		"gvertneqq": "≩︀",
		"gvnE": "≩︀",
		"Hacek": "ˇ",
		"hairsp": " ",
		"half": "½",
		"hamilt": "ℋ",
		"HARDcy": "Ъ",
		"hardcy": "ъ",
		"harrcir": "⥈",
		"harr": "↔",
		"hArr": "⇔",
		"harrw": "↭",
		"Hat": "^",
		"hbar": "ℏ",
		"Hcirc": "Ĥ",
		"hcirc": "ĥ",
		"hearts": "♥",
		"heartsuit": "♥",
		"hellip": "…",
		"hercon": "⊹",
		"hfr": "𝔥",
		"Hfr": "ℌ",
		"HilbertSpace": "ℋ",
		"hksearow": "⤥",
		"hkswarow": "⤦",
		"hoarr": "⇿",
		"homtht": "∻",
		"hookleftarrow": "↩",
		"hookrightarrow": "↪",
		"hopf": "𝕙",
		"Hopf": "ℍ",
		"horbar": "―",
		"HorizontalLine": "─",
		"hscr": "𝒽",
		"Hscr": "ℋ",
		"hslash": "ℏ",
		"Hstrok": "Ħ",
		"hstrok": "ħ",
		"HumpDownHump": "≎",
		"HumpEqual": "≏",
		"hybull": "⁃",
		"hyphen": "‐",
		"Iacute": "Í",
		"iacute": "í",
		"ic": "⁣",
		"Icirc": "Î",
		"icirc": "î",
		"Icy": "И",
		"icy": "и",
		"Idot": "İ",
		"IEcy": "Е",
		"iecy": "е",
		"iexcl": "¡",
		"iff": "⇔",
		"ifr": "𝔦",
		"Ifr": "ℑ",
		"Igrave": "Ì",
		"igrave": "ì",
		"ii": "ⅈ",
		"iiiint": "⨌",
		"iiint": "∭",
		"iinfin": "⧜",
		"iiota": "℩",
		"IJlig": "Ĳ",
		"ijlig": "ĳ",
		"Imacr": "Ī",
		"imacr": "ī",
		"image": "ℑ",
		"ImaginaryI": "ⅈ",
		"imagline": "ℐ",
		"imagpart": "ℑ",
		"imath": "ı",
		"Im": "ℑ",
		"imof": "⊷",
		"imped": "Ƶ",
		"Implies": "⇒",
		"incare": "℅",
		"in": "∈",
		"infin": "∞",
		"infintie": "⧝",
		"inodot": "ı",
		"intcal": "⊺",
		"int": "∫",
		"Int": "∬",
		"integers": "ℤ",
		"Integral": "∫",
		"intercal": "⊺",
		"Intersection": "⋂",
		"intlarhk": "⨗",
		"intprod": "⨼",
		"InvisibleComma": "⁣",
		"InvisibleTimes": "⁢",
		"IOcy": "Ё",
		"iocy": "ё",
		"Iogon": "Į",
		"iogon": "į",
		"Iopf": "𝕀",
		"iopf": "𝕚",
		"Iota": "Ι",
		"iota": "ι",
		"iprod": "⨼",
		"iquest": "¿",
		"iscr": "𝒾",
		"Iscr": "ℐ",
		"isin": "∈",
		"isindot": "⋵",
		"isinE": "⋹",
		"isins": "⋴",
		"isinsv": "⋳",
		"isinv": "∈",
		"it": "⁢",
		"Itilde": "Ĩ",
		"itilde": "ĩ",
		"Iukcy": "І",
		"iukcy": "і",
		"Iuml": "Ï",
		"iuml": "ï",
		"Jcirc": "Ĵ",
		"jcirc": "ĵ",
		"Jcy": "Й",
		"jcy": "й",
		"Jfr": "𝔍",
		"jfr": "𝔧",
		"jmath": "ȷ",
		"Jopf": "𝕁",
		"jopf": "𝕛",
		"Jscr": "𝒥",
		"jscr": "𝒿",
		"Jsercy": "Ј",
		"jsercy": "ј",
		"Jukcy": "Є",
		"jukcy": "є",
		"Kappa": "Κ",
		"kappa": "κ",
		"kappav": "ϰ",
		"Kcedil": "Ķ",
		"kcedil": "ķ",
		"Kcy": "К",
		"kcy": "к",
		"Kfr": "𝔎",
		"kfr": "𝔨",
		"kgreen": "ĸ",
		"KHcy": "Х",
		"khcy": "х",
		"KJcy": "Ќ",
		"kjcy": "ќ",
		"Kopf": "𝕂",
		"kopf": "𝕜",
		"Kscr": "𝒦",
		"kscr": "𝓀",
		"lAarr": "⇚",
		"Lacute": "Ĺ",
		"lacute": "ĺ",
		"laemptyv": "⦴",
		"lagran": "ℒ",
		"Lambda": "Λ",
		"lambda": "λ",
		"lang": "⟨",
		"Lang": "⟪",
		"langd": "⦑",
		"langle": "⟨",
		"lap": "⪅",
		"Laplacetrf": "ℒ",
		"laquo": "«",
		"larrb": "⇤",
		"larrbfs": "⤟",
		"larr": "←",
		"Larr": "↞",
		"lArr": "⇐",
		"larrfs": "⤝",
		"larrhk": "↩",
		"larrlp": "↫",
		"larrpl": "⤹",
		"larrsim": "⥳",
		"larrtl": "↢",
		"latail": "⤙",
		"lAtail": "⤛",
		"lat": "⪫",
		"late": "⪭",
		"lates": "⪭︀",
		"lbarr": "⤌",
		"lBarr": "⤎",
		"lbbrk": "❲",
		"lbrace": "{",
		"lbrack": "[",
		"lbrke": "⦋",
		"lbrksld": "⦏",
		"lbrkslu": "⦍",
		"Lcaron": "Ľ",
		"lcaron": "ľ",
		"Lcedil": "Ļ",
		"lcedil": "ļ",
		"lceil": "⌈",
		"lcub": "{",
		"Lcy": "Л",
		"lcy": "л",
		"ldca": "⤶",
		"ldquo": "“",
		"ldquor": "„",
		"ldrdhar": "⥧",
		"ldrushar": "⥋",
		"ldsh": "↲",
		"le": "≤",
		"lE": "≦",
		"LeftAngleBracket": "⟨",
		"LeftArrowBar": "⇤",
		"leftarrow": "←",
		"LeftArrow": "←",
		"Leftarrow": "⇐",
		"LeftArrowRightArrow": "⇆",
		"leftarrowtail": "↢",
		"LeftCeiling": "⌈",
		"LeftDoubleBracket": "⟦",
		"LeftDownTeeVector": "⥡",
		"LeftDownVectorBar": "⥙",
		"LeftDownVector": "⇃",
		"LeftFloor": "⌊",
		"leftharpoondown": "↽",
		"leftharpoonup": "↼",
		"leftleftarrows": "⇇",
		"leftrightarrow": "↔",
		"LeftRightArrow": "↔",
		"Leftrightarrow": "⇔",
		"leftrightarrows": "⇆",
		"leftrightharpoons": "⇋",
		"leftrightsquigarrow": "↭",
		"LeftRightVector": "⥎",
		"LeftTeeArrow": "↤",
		"LeftTee": "⊣",
		"LeftTeeVector": "⥚",
		"leftthreetimes": "⋋",
		"LeftTriangleBar": "⧏",
		"LeftTriangle": "⊲",
		"LeftTriangleEqual": "⊴",
		"LeftUpDownVector": "⥑",
		"LeftUpTeeVector": "⥠",
		"LeftUpVectorBar": "⥘",
		"LeftUpVector": "↿",
		"LeftVectorBar": "⥒",
		"LeftVector": "↼",
		"lEg": "⪋",
		"leg": "⋚",
		"leq": "≤",
		"leqq": "≦",
		"leqslant": "⩽",
		"lescc": "⪨",
		"les": "⩽",
		"lesdot": "⩿",
		"lesdoto": "⪁",
		"lesdotor": "⪃",
		"lesg": "⋚︀",
		"lesges": "⪓",
		"lessapprox": "⪅",
		"lessdot": "⋖",
		"lesseqgtr": "⋚",
		"lesseqqgtr": "⪋",
		"LessEqualGreater": "⋚",
		"LessFullEqual": "≦",
		"LessGreater": "≶",
		"lessgtr": "≶",
		"LessLess": "⪡",
		"lesssim": "≲",
		"LessSlantEqual": "⩽",
		"LessTilde": "≲",
		"lfisht": "⥼",
		"lfloor": "⌊",
		"Lfr": "𝔏",
		"lfr": "𝔩",
		"lg": "≶",
		"lgE": "⪑",
		"lHar": "⥢",
		"lhard": "↽",
		"lharu": "↼",
		"lharul": "⥪",
		"lhblk": "▄",
		"LJcy": "Љ",
		"ljcy": "љ",
		"llarr": "⇇",
		"ll": "≪",
		"Ll": "⋘",
		"llcorner": "⌞",
		"Lleftarrow": "⇚",
		"llhard": "⥫",
		"lltri": "◺",
		"Lmidot": "Ŀ",
		"lmidot": "ŀ",
		"lmoustache": "⎰",
		"lmoust": "⎰",
		"lnap": "⪉",
		"lnapprox": "⪉",
		"lne": "⪇",
		"lnE": "≨",
		"lneq": "⪇",
		"lneqq": "≨",
		"lnsim": "⋦",
		"loang": "⟬",
		"loarr": "⇽",
		"lobrk": "⟦",
		"longleftarrow": "⟵",
		"LongLeftArrow": "⟵",
		"Longleftarrow": "⟸",
		"longleftrightarrow": "⟷",
		"LongLeftRightArrow": "⟷",
		"Longleftrightarrow": "⟺",
		"longmapsto": "⟼",
		"longrightarrow": "⟶",
		"LongRightArrow": "⟶",
		"Longrightarrow": "⟹",
		"looparrowleft": "↫",
		"looparrowright": "↬",
		"lopar": "⦅",
		"Lopf": "𝕃",
		"lopf": "𝕝",
		"loplus": "⨭",
		"lotimes": "⨴",
		"lowast": "∗",
		"lowbar": "_",
		"LowerLeftArrow": "↙",
		"LowerRightArrow": "↘",
		"loz": "◊",
		"lozenge": "◊",
		"lozf": "⧫",
		"lpar": "(",
		"lparlt": "⦓",
		"lrarr": "⇆",
		"lrcorner": "⌟",
		"lrhar": "⇋",
		"lrhard": "⥭",
		"lrm": "‎",
		"lrtri": "⊿",
		"lsaquo": "‹",
		"lscr": "𝓁",
		"Lscr": "ℒ",
		"lsh": "↰",
		"Lsh": "↰",
		"lsim": "≲",
		"lsime": "⪍",
		"lsimg": "⪏",
		"lsqb": "[",
		"lsquo": "‘",
		"lsquor": "‚",
		"Lstrok": "Ł",
		"lstrok": "ł",
		"ltcc": "⪦",
		"ltcir": "⩹",
		"lt": "<",
		"LT": "<",
		"Lt": "≪",
		"ltdot": "⋖",
		"lthree": "⋋",
		"ltimes": "⋉",
		"ltlarr": "⥶",
		"ltquest": "⩻",
		"ltri": "◃",
		"ltrie": "⊴",
		"ltrif": "◂",
		"ltrPar": "⦖",
		"lurdshar": "⥊",
		"luruhar": "⥦",
		"lvertneqq": "≨︀",
		"lvnE": "≨︀",
		"macr": "¯",
		"male": "♂",
		"malt": "✠",
		"maltese": "✠",
		"Map": "⤅",
		"map": "↦",
		"mapsto": "↦",
		"mapstodown": "↧",
		"mapstoleft": "↤",
		"mapstoup": "↥",
		"marker": "▮",
		"mcomma": "⨩",
		"Mcy": "М",
		"mcy": "м",
		"mdash": "—",
		"mDDot": "∺",
		"measuredangle": "∡",
		"MediumSpace": " ",
		"Mellintrf": "ℳ",
		"Mfr": "𝔐",
		"mfr": "𝔪",
		"mho": "℧",
		"micro": "µ",
		"midast": "*",
		"midcir": "⫰",
		"mid": "∣",
		"middot": "·",
		"minusb": "⊟",
		"minus": "−",
		"minusd": "∸",
		"minusdu": "⨪",
		"MinusPlus": "∓",
		"mlcp": "⫛",
		"mldr": "…",
		"mnplus": "∓",
		"models": "⊧",
		"Mopf": "𝕄",
		"mopf": "𝕞",
		"mp": "∓",
		"mscr": "𝓂",
		"Mscr": "ℳ",
		"mstpos": "∾",
		"Mu": "Μ",
		"mu": "μ",
		"multimap": "⊸",
		"mumap": "⊸",
		"nabla": "∇",
		"Nacute": "Ń",
		"nacute": "ń",
		"nang": "∠⃒",
		"nap": "≉",
		"napE": "⩰̸",
		"napid": "≋̸",
		"napos": "ŉ",
		"napprox": "≉",
		"natural": "♮",
		"naturals": "ℕ",
		"natur": "♮",
		"nbsp": " ",
		"nbump": "≎̸",
		"nbumpe": "≏̸",
		"ncap": "⩃",
		"Ncaron": "Ň",
		"ncaron": "ň",
		"Ncedil": "Ņ",
		"ncedil": "ņ",
		"ncong": "≇",
		"ncongdot": "⩭̸",
		"ncup": "⩂",
		"Ncy": "Н",
		"ncy": "н",
		"ndash": "–",
		"nearhk": "⤤",
		"nearr": "↗",
		"neArr": "⇗",
		"nearrow": "↗",
		"ne": "≠",
		"nedot": "≐̸",
		"NegativeMediumSpace": "​",
		"NegativeThickSpace": "​",
		"NegativeThinSpace": "​",
		"NegativeVeryThinSpace": "​",
		"nequiv": "≢",
		"nesear": "⤨",
		"nesim": "≂̸",
		"NestedGreaterGreater": "≫",
		"NestedLessLess": "≪",
		"NewLine": "\n",
		"nexist": "∄",
		"nexists": "∄",
		"Nfr": "𝔑",
		"nfr": "𝔫",
		"ngE": "≧̸",
		"nge": "≱",
		"ngeq": "≱",
		"ngeqq": "≧̸",
		"ngeqslant": "⩾̸",
		"nges": "⩾̸",
		"nGg": "⋙̸",
		"ngsim": "≵",
		"nGt": "≫⃒",
		"ngt": "≯",
		"ngtr": "≯",
		"nGtv": "≫̸",
		"nharr": "↮",
		"nhArr": "⇎",
		"nhpar": "⫲",
		"ni": "∋",
		"nis": "⋼",
		"nisd": "⋺",
		"niv": "∋",
		"NJcy": "Њ",
		"njcy": "њ",
		"nlarr": "↚",
		"nlArr": "⇍",
		"nldr": "‥",
		"nlE": "≦̸",
		"nle": "≰",
		"nleftarrow": "↚",
		"nLeftarrow": "⇍",
		"nleftrightarrow": "↮",
		"nLeftrightarrow": "⇎",
		"nleq": "≰",
		"nleqq": "≦̸",
		"nleqslant": "⩽̸",
		"nles": "⩽̸",
		"nless": "≮",
		"nLl": "⋘̸",
		"nlsim": "≴",
		"nLt": "≪⃒",
		"nlt": "≮",
		"nltri": "⋪",
		"nltrie": "⋬",
		"nLtv": "≪̸",
		"nmid": "∤",
		"NoBreak": "⁠",
		"NonBreakingSpace": " ",
		"nopf": "𝕟",
		"Nopf": "ℕ",
		"Not": "⫬",
		"not": "¬",
		"NotCongruent": "≢",
		"NotCupCap": "≭",
		"NotDoubleVerticalBar": "∦",
		"NotElement": "∉",
		"NotEqual": "≠",
		"NotEqualTilde": "≂̸",
		"NotExists": "∄",
		"NotGreater": "≯",
		"NotGreaterEqual": "≱",
		"NotGreaterFullEqual": "≧̸",
		"NotGreaterGreater": "≫̸",
		"NotGreaterLess": "≹",
		"NotGreaterSlantEqual": "⩾̸",
		"NotGreaterTilde": "≵",
		"NotHumpDownHump": "≎̸",
		"NotHumpEqual": "≏̸",
		"notin": "∉",
		"notindot": "⋵̸",
		"notinE": "⋹̸",
		"notinva": "∉",
		"notinvb": "⋷",
		"notinvc": "⋶",
		"NotLeftTriangleBar": "⧏̸",
		"NotLeftTriangle": "⋪",
		"NotLeftTriangleEqual": "⋬",
		"NotLess": "≮",
		"NotLessEqual": "≰",
		"NotLessGreater": "≸",
		"NotLessLess": "≪̸",
		"NotLessSlantEqual": "⩽̸",
		"NotLessTilde": "≴",
		"NotNestedGreaterGreater": "⪢̸",
		"NotNestedLessLess": "⪡̸",
		"notni": "∌",
		"notniva": "∌",
		"notnivb": "⋾",
		"notnivc": "⋽",
		"NotPrecedes": "⊀",
		"NotPrecedesEqual": "⪯̸",
		"NotPrecedesSlantEqual": "⋠",
		"NotReverseElement": "∌",
		"NotRightTriangleBar": "⧐̸",
		"NotRightTriangle": "⋫",
		"NotRightTriangleEqual": "⋭",
		"NotSquareSubset": "⊏̸",
		"NotSquareSubsetEqual": "⋢",
		"NotSquareSuperset": "⊐̸",
		"NotSquareSupersetEqual": "⋣",
		"NotSubset": "⊂⃒",
		"NotSubsetEqual": "⊈",
		"NotSucceeds": "⊁",
		"NotSucceedsEqual": "⪰̸",
		"NotSucceedsSlantEqual": "⋡",
		"NotSucceedsTilde": "≿̸",
		"NotSuperset": "⊃⃒",
		"NotSupersetEqual": "⊉",
		"NotTilde": "≁",
		"NotTildeEqual": "≄",
		"NotTildeFullEqual": "≇",
		"NotTildeTilde": "≉",
		"NotVerticalBar": "∤",
		"nparallel": "∦",
		"npar": "∦",
		"nparsl": "⫽⃥",
		"npart": "∂̸",
		"npolint": "⨔",
		"npr": "⊀",
		"nprcue": "⋠",
		"nprec": "⊀",
		"npreceq": "⪯̸",
		"npre": "⪯̸",
		"nrarrc": "⤳̸",
		"nrarr": "↛",
		"nrArr": "⇏",
		"nrarrw": "↝̸",
		"nrightarrow": "↛",
		"nRightarrow": "⇏",
		"nrtri": "⋫",
		"nrtrie": "⋭",
		"nsc": "⊁",
		"nsccue": "⋡",
		"nsce": "⪰̸",
		"Nscr": "𝒩",
		"nscr": "𝓃",
		"nshortmid": "∤",
		"nshortparallel": "∦",
		"nsim": "≁",
		"nsime": "≄",
		"nsimeq": "≄",
		"nsmid": "∤",
		"nspar": "∦",
		"nsqsube": "⋢",
		"nsqsupe": "⋣",
		"nsub": "⊄",
		"nsubE": "⫅̸",
		"nsube": "⊈",
		"nsubset": "⊂⃒",
		"nsubseteq": "⊈",
		"nsubseteqq": "⫅̸",
		"nsucc": "⊁",
		"nsucceq": "⪰̸",
		"nsup": "⊅",
		"nsupE": "⫆̸",
		"nsupe": "⊉",
		"nsupset": "⊃⃒",
		"nsupseteq": "⊉",
		"nsupseteqq": "⫆̸",
		"ntgl": "≹",
		"Ntilde": "Ñ",
		"ntilde": "ñ",
		"ntlg": "≸",
		"ntriangleleft": "⋪",
		"ntrianglelefteq": "⋬",
		"ntriangleright": "⋫",
		"ntrianglerighteq": "⋭",
		"Nu": "Ν",
		"nu": "ν",
		"num": "#",
		"numero": "№",
		"numsp": " ",
		"nvap": "≍⃒",
		"nvdash": "⊬",
		"nvDash": "⊭",
		"nVdash": "⊮",
		"nVDash": "⊯",
		"nvge": "≥⃒",
		"nvgt": ">⃒",
		"nvHarr": "⤄",
		"nvinfin": "⧞",
		"nvlArr": "⤂",
		"nvle": "≤⃒",
		"nvlt": "<⃒",
		"nvltrie": "⊴⃒",
		"nvrArr": "⤃",
		"nvrtrie": "⊵⃒",
		"nvsim": "∼⃒",
		"nwarhk": "⤣",
		"nwarr": "↖",
		"nwArr": "⇖",
		"nwarrow": "↖",
		"nwnear": "⤧",
		"Oacute": "Ó",
		"oacute": "ó",
		"oast": "⊛",
		"Ocirc": "Ô",
		"ocirc": "ô",
		"ocir": "⊚",
		"Ocy": "О",
		"ocy": "о",
		"odash": "⊝",
		"Odblac": "Ő",
		"odblac": "ő",
		"odiv": "⨸",
		"odot": "⊙",
		"odsold": "⦼",
		"OElig": "Œ",
		"oelig": "œ",
		"ofcir": "⦿",
		"Ofr": "𝔒",
		"ofr": "𝔬",
		"ogon": "˛",
		"Ograve": "Ò",
		"ograve": "ò",
		"ogt": "⧁",
		"ohbar": "⦵",
		"ohm": "Ω",
		"oint": "∮",
		"olarr": "↺",
		"olcir": "⦾",
		"olcross": "⦻",
		"oline": "‾",
		"olt": "⧀",
		"Omacr": "Ō",
		"omacr": "ō",
		"Omega": "Ω",
		"omega": "ω",
		"Omicron": "Ο",
		"omicron": "ο",
		"omid": "⦶",
		"ominus": "⊖",
		"Oopf": "𝕆",
		"oopf": "𝕠",
		"opar": "⦷",
		"OpenCurlyDoubleQuote": "“",
		"OpenCurlyQuote": "‘",
		"operp": "⦹",
		"oplus": "⊕",
		"orarr": "↻",
		"Or": "⩔",
		"or": "∨",
		"ord": "⩝",
		"order": "ℴ",
		"orderof": "ℴ",
		"ordf": "ª",
		"ordm": "º",
		"origof": "⊶",
		"oror": "⩖",
		"orslope": "⩗",
		"orv": "⩛",
		"oS": "Ⓢ",
		"Oscr": "𝒪",
		"oscr": "ℴ",
		"Oslash": "Ø",
		"oslash": "ø",
		"osol": "⊘",
		"Otilde": "Õ",
		"otilde": "õ",
		"otimesas": "⨶",
		"Otimes": "⨷",
		"otimes": "⊗",
		"Ouml": "Ö",
		"ouml": "ö",
		"ovbar": "⌽",
		"OverBar": "‾",
		"OverBrace": "⏞",
		"OverBracket": "⎴",
		"OverParenthesis": "⏜",
		"para": "¶",
		"parallel": "∥",
		"par": "∥",
		"parsim": "⫳",
		"parsl": "⫽",
		"part": "∂",
		"PartialD": "∂",
		"Pcy": "П",
		"pcy": "п",
		"percnt": "%",
		"period": ".",
		"permil": "‰",
		"perp": "⊥",
		"pertenk": "‱",
		"Pfr": "𝔓",
		"pfr": "𝔭",
		"Phi": "Φ",
		"phi": "φ",
		"phiv": "ϕ",
		"phmmat": "ℳ",
		"phone": "☎",
		"Pi": "Π",
		"pi": "π",
		"pitchfork": "⋔",
		"piv": "ϖ",
		"planck": "ℏ",
		"planckh": "ℎ",
		"plankv": "ℏ",
		"plusacir": "⨣",
		"plusb": "⊞",
		"pluscir": "⨢",
		"plus": "+",
		"plusdo": "∔",
		"plusdu": "⨥",
		"pluse": "⩲",
		"PlusMinus": "±",
		"plusmn": "±",
		"plussim": "⨦",
		"plustwo": "⨧",
		"pm": "±",
		"Poincareplane": "ℌ",
		"pointint": "⨕",
		"popf": "𝕡",
		"Popf": "ℙ",
		"pound": "£",
		"prap": "⪷",
		"Pr": "⪻",
		"pr": "≺",
		"prcue": "≼",
		"precapprox": "⪷",
		"prec": "≺",
		"preccurlyeq": "≼",
		"Precedes": "≺",
		"PrecedesEqual": "⪯",
		"PrecedesSlantEqual": "≼",
		"PrecedesTilde": "≾",
		"preceq": "⪯",
		"precnapprox": "⪹",
		"precneqq": "⪵",
		"precnsim": "⋨",
		"pre": "⪯",
		"prE": "⪳",
		"precsim": "≾",
		"prime": "′",
		"Prime": "″",
		"primes": "ℙ",
		"prnap": "⪹",
		"prnE": "⪵",
		"prnsim": "⋨",
		"prod": "∏",
		"Product": "∏",
		"profalar": "⌮",
		"profline": "⌒",
		"profsurf": "⌓",
		"prop": "∝",
		"Proportional": "∝",
		"Proportion": "∷",
		"propto": "∝",
		"prsim": "≾",
		"prurel": "⊰",
		"Pscr": "𝒫",
		"pscr": "𝓅",
		"Psi": "Ψ",
		"psi": "ψ",
		"puncsp": " ",
		"Qfr": "𝔔",
		"qfr": "𝔮",
		"qint": "⨌",
		"qopf": "𝕢",
		"Qopf": "ℚ",
		"qprime": "⁗",
		"Qscr": "𝒬",
		"qscr": "𝓆",
		"quaternions": "ℍ",
		"quatint": "⨖",
		"quest": "?",
		"questeq": "≟",
		"quot": "\"",
		"QUOT": "\"",
		"rAarr": "⇛",
		"race": "∽̱",
		"Racute": "Ŕ",
		"racute": "ŕ",
		"radic": "√",
		"raemptyv": "⦳",
		"rang": "⟩",
		"Rang": "⟫",
		"rangd": "⦒",
		"range": "⦥",
		"rangle": "⟩",
		"raquo": "»",
		"rarrap": "⥵",
		"rarrb": "⇥",
		"rarrbfs": "⤠",
		"rarrc": "⤳",
		"rarr": "→",
		"Rarr": "↠",
		"rArr": "⇒",
		"rarrfs": "⤞",
		"rarrhk": "↪",
		"rarrlp": "↬",
		"rarrpl": "⥅",
		"rarrsim": "⥴",
		"Rarrtl": "⤖",
		"rarrtl": "↣",
		"rarrw": "↝",
		"ratail": "⤚",
		"rAtail": "⤜",
		"ratio": "∶",
		"rationals": "ℚ",
		"rbarr": "⤍",
		"rBarr": "⤏",
		"RBarr": "⤐",
		"rbbrk": "❳",
		"rbrace": "}",
		"rbrack": "]",
		"rbrke": "⦌",
		"rbrksld": "⦎",
		"rbrkslu": "⦐",
		"Rcaron": "Ř",
		"rcaron": "ř",
		"Rcedil": "Ŗ",
		"rcedil": "ŗ",
		"rceil": "⌉",
		"rcub": "}",
		"Rcy": "Р",
		"rcy": "р",
		"rdca": "⤷",
		"rdldhar": "⥩",
		"rdquo": "”",
		"rdquor": "”",
		"rdsh": "↳",
		"real": "ℜ",
		"realine": "ℛ",
		"realpart": "ℜ",
		"reals": "ℝ",
		"Re": "ℜ",
		"rect": "▭",
		"reg": "®",
		"REG": "®",
		"ReverseElement": "∋",
		"ReverseEquilibrium": "⇋",
		"ReverseUpEquilibrium": "⥯",
		"rfisht": "⥽",
		"rfloor": "⌋",
		"rfr": "𝔯",
		"Rfr": "ℜ",
		"rHar": "⥤",
		"rhard": "⇁",
		"rharu": "⇀",
		"rharul": "⥬",
		"Rho": "Ρ",
		"rho": "ρ",
		"rhov": "ϱ",
		"RightAngleBracket": "⟩",
		"RightArrowBar": "⇥",
		"rightarrow": "→",
		"RightArrow": "→",
		"Rightarrow": "⇒",
		"RightArrowLeftArrow": "⇄",
		"rightarrowtail": "↣",
		"RightCeiling": "⌉",
		"RightDoubleBracket": "⟧",
		"RightDownTeeVector": "⥝",
		"RightDownVectorBar": "⥕",
		"RightDownVector": "⇂",
		"RightFloor": "⌋",
		"rightharpoondown": "⇁",
		"rightharpoonup": "⇀",
		"rightleftarrows": "⇄",
		"rightleftharpoons": "⇌",
		"rightrightarrows": "⇉",
		"rightsquigarrow": "↝",
		"RightTeeArrow": "↦",
		"RightTee": "⊢",
		"RightTeeVector": "⥛",
		"rightthreetimes": "⋌",
		"RightTriangleBar": "⧐",
		"RightTriangle": "⊳",
		"RightTriangleEqual": "⊵",
		"RightUpDownVector": "⥏",
		"RightUpTeeVector": "⥜",
		"RightUpVectorBar": "⥔",
		"RightUpVector": "↾",
		"RightVectorBar": "⥓",
		"RightVector": "⇀",
		"ring": "˚",
		"risingdotseq": "≓",
		"rlarr": "⇄",
		"rlhar": "⇌",
		"rlm": "‏",
		"rmoustache": "⎱",
		"rmoust": "⎱",
		"rnmid": "⫮",
		"roang": "⟭",
		"roarr": "⇾",
		"robrk": "⟧",
		"ropar": "⦆",
		"ropf": "𝕣",
		"Ropf": "ℝ",
		"roplus": "⨮",
		"rotimes": "⨵",
		"RoundImplies": "⥰",
		"rpar": ")",
		"rpargt": "⦔",
		"rppolint": "⨒",
		"rrarr": "⇉",
		"Rrightarrow": "⇛",
		"rsaquo": "›",
		"rscr": "𝓇",
		"Rscr": "ℛ",
		"rsh": "↱",
		"Rsh": "↱",
		"rsqb": "]",
		"rsquo": "’",
		"rsquor": "’",
		"rthree": "⋌",
		"rtimes": "⋊",
		"rtri": "▹",
		"rtrie": "⊵",
		"rtrif": "▸",
		"rtriltri": "⧎",
		"RuleDelayed": "⧴",
		"ruluhar": "⥨",
		"rx": "℞",
		"Sacute": "Ś",
		"sacute": "ś",
		"sbquo": "‚",
		"scap": "⪸",
		"Scaron": "Š",
		"scaron": "š",
		"Sc": "⪼",
		"sc": "≻",
		"sccue": "≽",
		"sce": "⪰",
		"scE": "⪴",
		"Scedil": "Ş",
		"scedil": "ş",
		"Scirc": "Ŝ",
		"scirc": "ŝ",
		"scnap": "⪺",
		"scnE": "⪶",
		"scnsim": "⋩",
		"scpolint": "⨓",
		"scsim": "≿",
		"Scy": "С",
		"scy": "с",
		"sdotb": "⊡",
		"sdot": "⋅",
		"sdote": "⩦",
		"searhk": "⤥",
		"searr": "↘",
		"seArr": "⇘",
		"searrow": "↘",
		"sect": "§",
		"semi": ";",
		"seswar": "⤩",
		"setminus": "∖",
		"setmn": "∖",
		"sext": "✶",
		"Sfr": "𝔖",
		"sfr": "𝔰",
		"sfrown": "⌢",
		"sharp": "♯",
		"SHCHcy": "Щ",
		"shchcy": "щ",
		"SHcy": "Ш",
		"shcy": "ш",
		"ShortDownArrow": "↓",
		"ShortLeftArrow": "←",
		"shortmid": "∣",
		"shortparallel": "∥",
		"ShortRightArrow": "→",
		"ShortUpArrow": "↑",
		"shy": "­",
		"Sigma": "Σ",
		"sigma": "σ",
		"sigmaf": "ς",
		"sigmav": "ς",
		"sim": "∼",
		"simdot": "⩪",
		"sime": "≃",
		"simeq": "≃",
		"simg": "⪞",
		"simgE": "⪠",
		"siml": "⪝",
		"simlE": "⪟",
		"simne": "≆",
		"simplus": "⨤",
		"simrarr": "⥲",
		"slarr": "←",
		"SmallCircle": "∘",
		"smallsetminus": "∖",
		"smashp": "⨳",
		"smeparsl": "⧤",
		"smid": "∣",
		"smile": "⌣",
		"smt": "⪪",
		"smte": "⪬",
		"smtes": "⪬︀",
		"SOFTcy": "Ь",
		"softcy": "ь",
		"solbar": "⌿",
		"solb": "⧄",
		"sol": "/",
		"Sopf": "𝕊",
		"sopf": "𝕤",
		"spades": "♠",
		"spadesuit": "♠",
		"spar": "∥",
		"sqcap": "⊓",
		"sqcaps": "⊓︀",
		"sqcup": "⊔",
		"sqcups": "⊔︀",
		"Sqrt": "√",
		"sqsub": "⊏",
		"sqsube": "⊑",
		"sqsubset": "⊏",
		"sqsubseteq": "⊑",
		"sqsup": "⊐",
		"sqsupe": "⊒",
		"sqsupset": "⊐",
		"sqsupseteq": "⊒",
		"square": "□",
		"Square": "□",
		"SquareIntersection": "⊓",
		"SquareSubset": "⊏",
		"SquareSubsetEqual": "⊑",
		"SquareSuperset": "⊐",
		"SquareSupersetEqual": "⊒",
		"SquareUnion": "⊔",
		"squarf": "▪",
		"squ": "□",
		"squf": "▪",
		"srarr": "→",
		"Sscr": "𝒮",
		"sscr": "𝓈",
		"ssetmn": "∖",
		"ssmile": "⌣",
		"sstarf": "⋆",
		"Star": "⋆",
		"star": "☆",
		"starf": "★",
		"straightepsilon": "ϵ",
		"straightphi": "ϕ",
		"strns": "¯",
		"sub": "⊂",
		"Sub": "⋐",
		"subdot": "⪽",
		"subE": "⫅",
		"sube": "⊆",
		"subedot": "⫃",
		"submult": "⫁",
		"subnE": "⫋",
		"subne": "⊊",
		"subplus": "⪿",
		"subrarr": "⥹",
		"subset": "⊂",
		"Subset": "⋐",
		"subseteq": "⊆",
		"subseteqq": "⫅",
		"SubsetEqual": "⊆",
		"subsetneq": "⊊",
		"subsetneqq": "⫋",
		"subsim": "⫇",
		"subsub": "⫕",
		"subsup": "⫓",
		"succapprox": "⪸",
		"succ": "≻",
		"succcurlyeq": "≽",
		"Succeeds": "≻",
		"SucceedsEqual": "⪰",
		"SucceedsSlantEqual": "≽",
		"SucceedsTilde": "≿",
		"succeq": "⪰",
		"succnapprox": "⪺",
		"succneqq": "⪶",
		"succnsim": "⋩",
		"succsim": "≿",
		"SuchThat": "∋",
		"sum": "∑",
		"Sum": "∑",
		"sung": "♪",
		"sup1": "¹",
		"sup2": "²",
		"sup3": "³",
		"sup": "⊃",
		"Sup": "⋑",
		"supdot": "⪾",
		"supdsub": "⫘",
		"supE": "⫆",
		"supe": "⊇",
		"supedot": "⫄",
		"Superset": "⊃",
		"SupersetEqual": "⊇",
		"suphsol": "⟉",
		"suphsub": "⫗",
		"suplarr": "⥻",
		"supmult": "⫂",
		"supnE": "⫌",
		"supne": "⊋",
		"supplus": "⫀",
		"supset": "⊃",
		"Supset": "⋑",
		"supseteq": "⊇",
		"supseteqq": "⫆",
		"supsetneq": "⊋",
		"supsetneqq": "⫌",
		"supsim": "⫈",
		"supsub": "⫔",
		"supsup": "⫖",
		"swarhk": "⤦",
		"swarr": "↙",
		"swArr": "⇙",
		"swarrow": "↙",
		"swnwar": "⤪",
		"szlig": "ß",
		"Tab": "\t",
		"target": "⌖",
		"Tau": "Τ",
		"tau": "τ",
		"tbrk": "⎴",
		"Tcaron": "Ť",
		"tcaron": "ť",
		"Tcedil": "Ţ",
		"tcedil": "ţ",
		"Tcy": "Т",
		"tcy": "т",
		"tdot": "⃛",
		"telrec": "⌕",
		"Tfr": "𝔗",
		"tfr": "𝔱",
		"there4": "∴",
		"therefore": "∴",
		"Therefore": "∴",
		"Theta": "Θ",
		"theta": "θ",
		"thetasym": "ϑ",
		"thetav": "ϑ",
		"thickapprox": "≈",
		"thicksim": "∼",
		"ThickSpace": "  ",
		"ThinSpace": " ",
		"thinsp": " ",
		"thkap": "≈",
		"thksim": "∼",
		"THORN": "Þ",
		"thorn": "þ",
		"tilde": "˜",
		"Tilde": "∼",
		"TildeEqual": "≃",
		"TildeFullEqual": "≅",
		"TildeTilde": "≈",
		"timesbar": "⨱",
		"timesb": "⊠",
		"times": "×",
		"timesd": "⨰",
		"tint": "∭",
		"toea": "⤨",
		"topbot": "⌶",
		"topcir": "⫱",
		"top": "⊤",
		"Topf": "𝕋",
		"topf": "𝕥",
		"topfork": "⫚",
		"tosa": "⤩",
		"tprime": "‴",
		"trade": "™",
		"TRADE": "™",
		"triangle": "▵",
		"triangledown": "▿",
		"triangleleft": "◃",
		"trianglelefteq": "⊴",
		"triangleq": "≜",
		"triangleright": "▹",
		"trianglerighteq": "⊵",
		"tridot": "◬",
		"trie": "≜",
		"triminus": "⨺",
		"TripleDot": "⃛",
		"triplus": "⨹",
		"trisb": "⧍",
		"tritime": "⨻",
		"trpezium": "⏢",
		"Tscr": "𝒯",
		"tscr": "𝓉",
		"TScy": "Ц",
		"tscy": "ц",
		"TSHcy": "Ћ",
		"tshcy": "ћ",
		"Tstrok": "Ŧ",
		"tstrok": "ŧ",
		"twixt": "≬",
		"twoheadleftarrow": "↞",
		"twoheadrightarrow": "↠",
		"Uacute": "Ú",
		"uacute": "ú",
		"uarr": "↑",
		"Uarr": "↟",
		"uArr": "⇑",
		"Uarrocir": "⥉",
		"Ubrcy": "Ў",
		"ubrcy": "ў",
		"Ubreve": "Ŭ",
		"ubreve": "ŭ",
		"Ucirc": "Û",
		"ucirc": "û",
		"Ucy": "У",
		"ucy": "у",
		"udarr": "⇅",
		"Udblac": "Ű",
		"udblac": "ű",
		"udhar": "⥮",
		"ufisht": "⥾",
		"Ufr": "𝔘",
		"ufr": "𝔲",
		"Ugrave": "Ù",
		"ugrave": "ù",
		"uHar": "⥣",
		"uharl": "↿",
		"uharr": "↾",
		"uhblk": "▀",
		"ulcorn": "⌜",
		"ulcorner": "⌜",
		"ulcrop": "⌏",
		"ultri": "◸",
		"Umacr": "Ū",
		"umacr": "ū",
		"uml": "¨",
		"UnderBar": "_",
		"UnderBrace": "⏟",
		"UnderBracket": "⎵",
		"UnderParenthesis": "⏝",
		"Union": "⋃",
		"UnionPlus": "⊎",
		"Uogon": "Ų",
		"uogon": "ų",
		"Uopf": "𝕌",
		"uopf": "𝕦",
		"UpArrowBar": "⤒",
		"uparrow": "↑",
		"UpArrow": "↑",
		"Uparrow": "⇑",
		"UpArrowDownArrow": "⇅",
		"updownarrow": "↕",
		"UpDownArrow": "↕",
		"Updownarrow": "⇕",
		"UpEquilibrium": "⥮",
		"upharpoonleft": "↿",
		"upharpoonright": "↾",
		"uplus": "⊎",
		"UpperLeftArrow": "↖",
		"UpperRightArrow": "↗",
		"upsi": "υ",
		"Upsi": "ϒ",
		"upsih": "ϒ",
		"Upsilon": "Υ",
		"upsilon": "υ",
		"UpTeeArrow": "↥",
		"UpTee": "⊥",
		"upuparrows": "⇈",
		"urcorn": "⌝",
		"urcorner": "⌝",
		"urcrop": "⌎",
		"Uring": "Ů",
		"uring": "ů",
		"urtri": "◹",
		"Uscr": "𝒰",
		"uscr": "𝓊",
		"utdot": "⋰",
		"Utilde": "Ũ",
		"utilde": "ũ",
		"utri": "▵",
		"utrif": "▴",
		"uuarr": "⇈",
		"Uuml": "Ü",
		"uuml": "ü",
		"uwangle": "⦧",
		"vangrt": "⦜",
		"varepsilon": "ϵ",
		"varkappa": "ϰ",
		"varnothing": "∅",
		"varphi": "ϕ",
		"varpi": "ϖ",
		"varpropto": "∝",
		"varr": "↕",
		"vArr": "⇕",
		"varrho": "ϱ",
		"varsigma": "ς",
		"varsubsetneq": "⊊︀",
		"varsubsetneqq": "⫋︀",
		"varsupsetneq": "⊋︀",
		"varsupsetneqq": "⫌︀",
		"vartheta": "ϑ",
		"vartriangleleft": "⊲",
		"vartriangleright": "⊳",
		"vBar": "⫨",
		"Vbar": "⫫",
		"vBarv": "⫩",
		"Vcy": "В",
		"vcy": "в",
		"vdash": "⊢",
		"vDash": "⊨",
		"Vdash": "⊩",
		"VDash": "⊫",
		"Vdashl": "⫦",
		"veebar": "⊻",
		"vee": "∨",
		"Vee": "⋁",
		"veeeq": "≚",
		"vellip": "⋮",
		"verbar": "|",
		"Verbar": "‖",
		"vert": "|",
		"Vert": "‖",
		"VerticalBar": "∣",
		"VerticalLine": "|",
		"VerticalSeparator": "❘",
		"VerticalTilde": "≀",
		"VeryThinSpace": " ",
		"Vfr": "𝔙",
		"vfr": "𝔳",
		"vltri": "⊲",
		"vnsub": "⊂⃒",
		"vnsup": "⊃⃒",
		"Vopf": "𝕍",
		"vopf": "𝕧",
		"vprop": "∝",
		"vrtri": "⊳",
		"Vscr": "𝒱",
		"vscr": "𝓋",
		"vsubnE": "⫋︀",
		"vsubne": "⊊︀",
		"vsupnE": "⫌︀",
		"vsupne": "⊋︀",
		"Vvdash": "⊪",
		"vzigzag": "⦚",
		"Wcirc": "Ŵ",
		"wcirc": "ŵ",
		"wedbar": "⩟",
		"wedge": "∧",
		"Wedge": "⋀",
		"wedgeq": "≙",
		"weierp": "℘",
		"Wfr": "𝔚",
		"wfr": "𝔴",
		"Wopf": "𝕎",
		"wopf": "𝕨",
		"wp": "℘",
		"wr": "≀",
		"wreath": "≀",
		"Wscr": "𝒲",
		"wscr": "𝓌",
		"xcap": "⋂",
		"xcirc": "◯",
		"xcup": "⋃",
		"xdtri": "▽",
		"Xfr": "𝔛",
		"xfr": "𝔵",
		"xharr": "⟷",
		"xhArr": "⟺",
		"Xi": "Ξ",
		"xi": "ξ",
		"xlarr": "⟵",
		"xlArr": "⟸",
		"xmap": "⟼",
		"xnis": "⋻",
		"xodot": "⨀",
		"Xopf": "𝕏",
		"xopf": "𝕩",
		"xoplus": "⨁",
		"xotime": "⨂",
		"xrarr": "⟶",
		"xrArr": "⟹",
		"Xscr": "𝒳",
		"xscr": "𝓍",
		"xsqcup": "⨆",
		"xuplus": "⨄",
		"xutri": "△",
		"xvee": "⋁",
		"xwedge": "⋀",
		"Yacute": "Ý",
		"yacute": "ý",
		"YAcy": "Я",
		"yacy": "я",
		"Ycirc": "Ŷ",
		"ycirc": "ŷ",
		"Ycy": "Ы",
		"ycy": "ы",
		"yen": "¥",
		"Yfr": "𝔜",
		"yfr": "𝔶",
		"YIcy": "Ї",
		"yicy": "ї",
		"Yopf": "𝕐",
		"yopf": "𝕪",
		"Yscr": "𝒴",
		"yscr": "𝓎",
		"YUcy": "Ю",
		"yucy": "ю",
		"yuml": "ÿ",
		"Yuml": "Ÿ",
		"Zacute": "Ź",
		"zacute": "ź",
		"Zcaron": "Ž",
		"zcaron": "ž",
		"Zcy": "З",
		"zcy": "з",
		"Zdot": "Ż",
		"zdot": "ż",
		"zeetrf": "ℨ",
		"ZeroWidthSpace": "​",
		"Zeta": "Ζ",
		"zeta": "ζ",
		"zfr": "𝔷",
		"Zfr": "ℨ",
		"ZHcy": "Ж",
		"zhcy": "ж",
		"zigrarr": "⇝",
		"zopf": "𝕫",
		"Zopf": "ℤ",
		"Zscr": "𝒵",
		"zscr": "𝓏",
		"zwj": "‍",
		"zwnj": "‌"
	};

/***/ },
/* 56 */
/***/ function(module, exports) {

	module.exports = {
		"amp": "&",
		"apos": "'",
		"gt": ">",
		"lt": "<",
		"quot": "\""
	};

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _lodash = __webpack_require__(6);

	var defaultConfig = {
		envs: {
			local: {
				serverUrl: 'http://localhost:4000',
				logLevel: 'trace'
			},
			dev: {
				serverUrl: 'http://tessellate-stage.elasticbeanstalk.com',
				logLevel: 'debug'
			},
			stage: {
				serverUrl: 'http://tessellate-stage.elasticbeanstalk.com',
				logLevel: 'debug'
			},
			prod: {
				serverUrl: 'http://tessellate.elasticbeanstalk.com',
				logLevel: 'info'
			}
		},
		tokenName: 'tessellate',
		tokenDataName: 'tessellate-tokenData',
		tokenUserDataName: 'tessellate-currentUser'
	};
	var instance = null;
	var envName = 'prod';
	var level = null;

	var Config = (function () {
		function Config() {
			_classCallCheck(this, Config);

			if (!instance) {
				instance = this;
			}
			// console.log({description: 'Config object created.', config: merge(this, defaultConfig), func: 'constructor', obj: 'Config'});
			return (0, _lodash.merge)(instance, defaultConfig);
		}

		_createClass(Config, [{
			key: 'applySettings',
			value: function applySettings(settings) {
				(0, _lodash.merge)(instance, settings);
			}
		}, {
			key: 'serverUrl',
			get: function get() {
				var url = defaultConfig.envs[envName].serverUrl;
				if (typeof window !== 'undefined' && (0, _lodash.has)(window, 'location') && (0, _lodash.has)(window.location, 'host') && window.location.host !== '') {
					var matchingEnv = (0, _lodash.find)(defaultConfig.envs, function (e) {
						return e.serverUrl === window.location.host;
					});
					if (matchingEnv) {
						url = '';
					}
				}
				return url;
			}
		}, {
			key: 'logLevel',
			set: function set(setLevel) {
				level = setLevel;
			},
			get: function get() {
				if (level) {
					return level;
				}
				return defaultConfig.envs[envName].logLevel;
			}
		}, {
			key: 'envName',
			set: function set(newEnv) {
				envName = newEnv;
				// this.envName = newEnv;
				// console.log('Environment name set:', envName);
			}
		}, {
			key: 'env',
			get: function get() {
				return defaultConfig.envs[envName];
			}
		}]);

		return Config;
	})();

	var config = new Config();

	exports['default'] = config;
	module.exports = exports['default'];

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * The endpoint that a service will talk to, for example,
	 * `'https://ec2.ap-southeast-1.amazonaws.com'`. If
	 * you need to override an endpoint for a service, you can
	 * set the endpoint on a service by passing the endpoint
	 * object with the `endpoint` option key:
	 *
	 * ```javascript
	 * var ep = new AWS.Endpoint('awsproxy.example.com');
	 * var s3 = new AWS.S3({endpoint: ep});
	 * s3.service.endpoint.hostname == 'awsproxy.example.com'
	 * ```
	 *
	 * Note that if you do not specify a protocol, the protocol will
	 * be selected based on your current {AWS.config} configuration.
	 *
	 * @!attribute protocol
	 *   @return [String] the protocol (http or https) of the endpoint
	 *     URL
	 * @!attribute hostname
	 *   @return [String] the host portion of the endpoint, e.g.,
	 *     example.com
	 * @!attribute host
	 *   @return [String] the host portion of the endpoint including
	 *     the port, e.g., example.com:80
	 * @!attribute port
	 *   @return [Integer] the port of the endpoint
	 * @!attribute href
	 *   @return [String] the full URL of the endpoint
	 */
	AWS.Endpoint = inherit({

	  /**
	   * @overload Endpoint(endpoint)
	   *   Constructs a new endpoint given an endpoint URL. If the
	   *   URL omits a protocol (http or https), the default protocol
	   *   set in the global {AWS.config} will be used.
	   *   @param endpoint [String] the URL to construct an endpoint from
	   */
	  constructor: function Endpoint(endpoint, config) {
	    AWS.util.hideProperties(this, ['slashes', 'auth', 'hash', 'search', 'query']);

	    if (typeof endpoint === 'undefined' || endpoint === null) {
	      throw new Error('Invalid endpoint: ' + endpoint);
	    } else if (typeof endpoint !== 'string') {
	      return AWS.util.copy(endpoint);
	    }

	    if (!endpoint.match(/^http/)) {
	      var useSSL = config && config.sslEnabled !== undefined ?
	        config.sslEnabled : AWS.config.sslEnabled;
	      endpoint = (useSSL ? 'https' : 'http') + '://' + endpoint;
	    }

	    AWS.util.update(this, AWS.util.urlParse(endpoint));

	    // Ensure the port property is set as an integer
	    if (this.port) {
	      this.port = parseInt(this.port, 10);
	    } else {
	      this.port = this.protocol === 'https:' ? 443 : 80;
	    }
	  }

	});

	/**
	 * The low level HTTP request object, encapsulating all HTTP header
	 * and body data sent by a service request.
	 *
	 * @!attribute method
	 *   @return [String] the HTTP method of the request
	 * @!attribute path
	 *   @return [String] the path portion of the URI, e.g.,
	 *     "/list/?start=5&num=10"
	 * @!attribute headers
	 *   @return [map<String,String>]
	 *     a map of header keys and their respective values
	 * @!attribute body
	 *   @return [String] the request body payload
	 * @!attribute endpoint
	 *   @return [AWS.Endpoint] the endpoint for the request
	 * @!attribute region
	 *   @api private
	 *   @return [String] the region, for signing purposes only.
	 */
	AWS.HttpRequest = inherit({

	  /**
	   * @api private
	   */
	  constructor: function HttpRequest(endpoint, region) {
	    endpoint = new AWS.Endpoint(endpoint);
	    this.method = 'POST';
	    this.path = endpoint.path || '/';
	    this.headers = {};
	    this.body = '';
	    this.endpoint = endpoint;
	    this.region = region;
	    this.setUserAgent();
	  },

	  /**
	   * @api private
	   */
	  setUserAgent: function setUserAgent() {
	    var prefix = AWS.util.isBrowser() ? 'X-Amz-' : '';
	    this.headers[prefix + 'User-Agent'] = AWS.util.userAgent();
	  },

	  /**
	   * @return [String] the part of the {path} excluding the
	   *   query string
	   */
	  pathname: function pathname() {
	    return this.path.split('?', 1)[0];
	  },

	  /**
	   * @return [String] the query string portion of the {path}
	   */
	  search: function search() {
	    var query = this.path.split('?', 2)[1];
	    if (query) {
	      query = AWS.util.queryStringParse(query);
	      return AWS.util.queryParamsToString(query);
	    }
	    return '';
	  }

	});

	/**
	 * The low level HTTP response object, encapsulating all HTTP header
	 * and body data returned from the request.
	 *
	 * @!attribute statusCode
	 *   @return [Integer] the HTTP status code of the response (e.g., 200, 404)
	 * @!attribute headers
	 *   @return [map<String,String>]
	 *      a map of response header keys and their respective values
	 * @!attribute body
	 *   @return [String] the response body payload
	 * @!attribute [r] streaming
	 *   @return [Boolean] whether this response is being streamed at a low-level.
	 *     Defaults to `false` (buffered reads). Do not modify this manually, use
	 *     {createUnbufferedStream} to convert the stream to unbuffered mode
	 *     instead.
	 */
	AWS.HttpResponse = inherit({

	  /**
	   * @api private
	   */
	  constructor: function HttpResponse() {
	    this.statusCode = undefined;
	    this.headers = {};
	    this.body = undefined;
	    this.streaming = false;
	    this.stream = null;
	  },

	  /**
	   * Disables buffering on the HTTP response and returns the stream for reading.
	   * @return [Stream, XMLHttpRequest, null] the underlying stream object.
	   *   Use this object to directly read data off of the stream.
	   * @note This object is only available after the {AWS.Request~httpHeaders}
	   *   event has fired. This method must be called prior to
	   *   {AWS.Request~httpData}.
	   * @example Taking control of a stream
	   *   request.on('httpHeaders', function(statusCode, headers) {
	   *     if (statusCode < 300) {
	   *       if (headers.etag === 'xyz') {
	   *         // pipe the stream, disabling buffering
	   *         var stream = this.response.httpResponse.createUnbufferedStream();
	   *         stream.pipe(process.stdout);
	   *       } else { // abort this request and set a better error message
	   *         this.abort();
	   *         this.response.error = new Error('Invalid ETag');
	   *       }
	   *     }
	   *   }).send(console.log);
	   */
	  createUnbufferedStream: function createUnbufferedStream() {
	    this.streaming = true;
	    return this.stream;
	  }
	});


	AWS.HttpClient = inherit({});

	/**
	 * @api private
	 */
	AWS.HttpClient.getInstance = function getInstance() {
	  if (this.singleton === undefined) {
	    this.singleton = new this();
	  }
	  return this.singleton;
	};


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);

	function JsonBuilder() { }

	JsonBuilder.prototype.build = function(value, shape) {
	  return JSON.stringify(translate(value, shape));
	};

	function translate(value, shape) {
	  if (!shape || value === undefined || value === null) return undefined;

	  switch (shape.type) {
	    case 'structure': return translateStructure(value, shape);
	    case 'map': return translateMap(value, shape);
	    case 'list': return translateList(value, shape);
	    default: return translateScalar(value, shape);
	  }
	}

	function translateStructure(structure, shape) {
	  var struct = {};
	  util.each(structure, function(name, value) {
	    var memberShape = shape.members[name];
	    if (memberShape) {
	      if (memberShape.location !== 'body') return;
	      var locationName = memberShape.isLocationName ? memberShape.name : name;
	      var result = translate(value, memberShape);
	      if (result !== undefined) struct[locationName] = result;
	    }
	  });
	  return struct;
	}

	function translateList(list, shape) {
	  var out = [];
	  util.arrayEach(list, function(value) {
	    var result = translate(value, shape.member);
	    if (result !== undefined) out.push(result);
	  });
	  return out;
	}

	function translateMap(map, shape) {
	  var out = {};
	  util.each(map, function(key, value) {
	    var result = translate(value, shape.value);
	    if (result !== undefined) out[key] = result;
	  });
	  return out;
	}

	function translateScalar(value, shape) {
	  return shape.toWireFormat(value);
	}

	module.exports = JsonBuilder;


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);

	function JsonParser() { }

	JsonParser.prototype.parse = function(value, shape) {
	  return translate(JSON.parse(value), shape);
	};

	function translate(value, shape) {
	  if (!shape || value === undefined) return undefined;

	  switch (shape.type) {
	    case 'structure': return translateStructure(value, shape);
	    case 'map': return translateMap(value, shape);
	    case 'list': return translateList(value, shape);
	    default: return translateScalar(value, shape);
	  }
	}

	function translateStructure(structure, shape) {
	  if (structure == null) return undefined;

	  var struct = {};
	  var shapeMembers = shape.members;
	  util.each(shapeMembers, function(name, memberShape) {
	    var locationName = memberShape.isLocationName ? memberShape.name : name;
	    if (structure.hasOwnProperty(locationName)) {
	      var value = structure[locationName];
	      var result = translate(value, memberShape);
	      if (result !== undefined) struct[name] = result;
	    }
	  });
	  return struct;
	}

	function translateList(list, shape) {
	  if (list == null) return undefined;

	  var out = [];
	  util.arrayEach(list, function(value) {
	    var result = translate(value, shape.member);
	    if (result === undefined) out.push(null);
	    else out.push(result);
	  });
	  return out;
	}

	function translateMap(map, shape) {
	  if (map == null) return undefined;

	  var out = {};
	  util.each(map, function(key, value) {
	    var result = translate(value, shape.value);
	    if (result === undefined) out[key] = null;
	    else out[key] = result;
	  });
	  return out;
	}

	function translateScalar(value, shape) {
	  return shape.toType(value);
	}

	module.exports = JsonParser;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);
	var JsonBuilder = __webpack_require__(59);
	var JsonParser = __webpack_require__(60);

	function buildRequest(req) {
	  var httpRequest = req.httpRequest;
	  var api = req.service.api;
	  var target = api.targetPrefix + '.' + api.operations[req.operation].name;
	  var version = api.jsonVersion || '1.0';
	  var input = api.operations[req.operation].input;
	  var builder = new JsonBuilder();

	  if (version === 1) version = '1.0';
	  httpRequest.body = builder.build(req.params || {}, input);
	  httpRequest.headers['Content-Type'] = 'application/x-amz-json-' + version;
	  httpRequest.headers['X-Amz-Target'] = target;
	}

	function extractError(resp) {
	  var error = {};
	  var httpResponse = resp.httpResponse;

	  error.code = httpResponse.headers['x-amzn-errortype'] || 'UnknownError';
	  if (typeof error.code === 'string') {
	    error.code = error.code.split(':')[0];
	  }

	  if (httpResponse.body.length > 0) {
	    var e = JSON.parse(httpResponse.body.toString());
	    if (e.__type || e.code) {
	      error.code = (e.__type || e.code).split('#').pop();
	    }
	    if (error.code === 'RequestEntityTooLarge') {
	      error.message = 'Request body must be less than 1 MB';
	    } else {
	      error.message = (e.message || e.Message || null);
	    }
	  } else {
	    error.statusCode = httpResponse.statusCode;
	    error.message = httpResponse.statusCode.toString();
	  }

	  resp.error = util.error(new Error(), error);
	}

	function extractData(resp) {
	  var body = resp.httpResponse.body.toString() || '{}';
	  if (resp.request.service.config.convertResponseTypes === false) {
	    resp.data = JSON.parse(body);
	  } else {
	    var operation = resp.request.service.api.operations[resp.request.operation];
	    var shape = operation.output || {};
	    var parser = new JsonParser();
	    resp.data = parser.parse(body, shape);
	  }
	}

	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};


/***/ },
/* 62 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.


	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	module.exports = Transform;

	var Duplex = __webpack_require__(15);

	/*<replacement>*/
	var util = __webpack_require__(32);
	util.inherits = __webpack_require__(33);
	/*</replacement>*/

	util.inherits(Transform, Duplex);


	function TransformState(options, stream) {
	  this.afterTransform = function(er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb)
	    return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (!util.isNullOrUndefined(data))
	    stream.push(data);

	  if (cb)
	    cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}


	function Transform(options) {
	  if (!(this instanceof Transform))
	    return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(options, this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  this.once('prefinish', function() {
	    if (util.isFunction(this._flush))
	      this._flush(function(er) {
	        done(stream, er);
	      });
	    else
	      done(stream);
	  });
	}

	Transform.prototype.push = function(chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function(chunk, encoding, cb) {
	  throw new Error('not implemented');
	};

	Transform.prototype._write = function(chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform ||
	        rs.needReadable ||
	        rs.length < rs.highWaterMark)
	      this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function(n) {
	  var ts = this._transformState;

	  if (!util.isNull(ts.writechunk) && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};


	function done(stream, er) {
	  if (er)
	    return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length)
	    throw new Error('calling transform done when ws.length != 0');

	  if (ts.transforming)
	    throw new Error('calling transform done when still transforming');

	  return stream.push(null);
	}


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// A bit simpler than readable streams.
	// Implement an async ._write(chunk, cb), and it'll handle all
	// the drain event emission and buffering.

	module.exports = Writable;

	/*<replacement>*/
	var Buffer = __webpack_require__(7).Buffer;
	/*</replacement>*/

	Writable.WritableState = WritableState;


	/*<replacement>*/
	var util = __webpack_require__(32);
	util.inherits = __webpack_require__(33);
	/*</replacement>*/

	var Stream = __webpack_require__(16);

	util.inherits(Writable, Stream);

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	}

	function WritableState(options, stream) {
	  var Duplex = __webpack_require__(15);

	  options = options || {};

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function(er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.buffer = [];

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;
	}

	function Writable(options) {
	  var Duplex = __webpack_require__(15);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex))
	    return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function() {
	  this.emit('error', new Error('Cannot pipe. Not readable.'));
	};


	function writeAfterEnd(stream, state, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  process.nextTick(function() {
	    cb(er);
	  });
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    var er = new TypeError('Invalid non-string/buffer chunk');
	    stream.emit('error', er);
	    process.nextTick(function() {
	      cb(er);
	    });
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function(chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  else if (!encoding)
	    encoding = state.defaultEncoding;

	  if (!util.isFunction(cb))
	    cb = function() {};

	  if (state.ended)
	    writeAfterEnd(this, state, cb);
	  else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function() {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function() {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing &&
	        !state.corked &&
	        !state.finished &&
	        !state.bufferProcessing &&
	        state.buffer.length)
	      clearBuffer(this, state);
	  }
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode &&
	      state.decodeStrings !== false &&
	      util.isString(chunk)) {
	    chunk = new Buffer(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);
	  if (util.isBuffer(chunk))
	    encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret)
	    state.needDrain = true;

	  if (state.writing || state.corked)
	    state.buffer.push(new WriteReq(chunk, encoding, cb));
	  else
	    doWrite(stream, state, false, len, chunk, encoding, cb);

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev)
	    stream._writev(chunk, state.onwrite);
	  else
	    stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  if (sync)
	    process.nextTick(function() {
	      state.pendingcb--;
	      cb(er);
	    });
	  else {
	    state.pendingcb--;
	    cb(er);
	  }

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er)
	    onwriteError(stream, state, sync, er, cb);
	  else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(stream, state);

	    if (!finished &&
	        !state.corked &&
	        !state.bufferProcessing &&
	        state.buffer.length) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      process.nextTick(function() {
	        afterWrite(stream, state, finished, cb);
	      });
	    } else {
	      afterWrite(stream, state, finished, cb);
	    }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished)
	    onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}


	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;

	  if (stream._writev && state.buffer.length > 1) {
	    // Fast case, write everything using _writev()
	    var cbs = [];
	    for (var c = 0; c < state.buffer.length; c++)
	      cbs.push(state.buffer[c].callback);

	    // count the one we are adding, as well.
	    // TODO(isaacs) clean this up
	    state.pendingcb++;
	    doWrite(stream, state, true, state.length, state.buffer, '', function(err) {
	      for (var i = 0; i < cbs.length; i++) {
	        state.pendingcb--;
	        cbs[i](err);
	      }
	    });

	    // Clear buffer
	    state.buffer = [];
	  } else {
	    // Slow case, write chunks one-by-one
	    for (var c = 0; c < state.buffer.length; c++) {
	      var entry = state.buffer[c];
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);

	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        c++;
	        break;
	      }
	    }

	    if (c < state.buffer.length)
	      state.buffer = state.buffer.slice(c);
	    else
	      state.buffer.length = 0;
	  }

	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function(chunk, encoding, cb) {
	  cb(new Error('not implemented'));

	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function(chunk, encoding, cb) {
	  var state = this._writableState;

	  if (util.isFunction(chunk)) {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (util.isFunction(encoding)) {
	    cb = encoding;
	    encoding = null;
	  }

	  if (!util.isNullOrUndefined(chunk))
	    this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished)
	    endWritable(this, state, cb);
	};


	function needFinish(stream, state) {
	  return (state.ending &&
	          state.length === 0 &&
	          !state.finished &&
	          !state.writing);
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(stream, state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else
	      prefinish(stream, state);
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished)
	      process.nextTick(cb);
	    else
	      stream.once('finish', cb);
	  }
	  state.ended = true;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _classesMatter = __webpack_require__(8);

	var _classesMatter2 = _interopRequireDefault(_classesMatter);

	var _classesAccount = __webpack_require__(41);

	var _classesAccount2 = _interopRequireDefault(_classesAccount);

	var logger = _classesMatter2['default'].utils.logger;
	//Actions for accounts list

	var AccountsAction = (function () {
		function AccountsAction(actionData) {
			_classCallCheck(this, AccountsAction);

			//Check to see if action is for a specific app
			if (actionData && _lodash2['default'].isObject(actionData) && _lodash2['default'].has(actionData, 'app')) {
				this.app = actionData.app;
				logger.log({ description: 'Provided app data set to app parameter.', action: this, providedData: actionData, func: 'constructor', obj: 'AccountsAction' });
			} else if (actionData && _lodash2['default'].isString(actionData)) {
				this.app = { name: actionData };
				logger.log({ description: 'App name provided as string was set.', action: this, providedData: actionData, func: 'constructor', obj: 'AccountsAction' });
			}
			logger.info({ description: 'New Accounts action.', action: this, providedData: actionData, func: 'constructor', obj: 'AccountsAction' });
		}

		_createClass(AccountsAction, [{
			key: 'get',

			//Get accounts or single application
			value: function get() {
				logger.log({ description: 'Accounts get called.', func: 'get', obj: 'AccountsAction' });
				return _classesMatter2['default'].utils.request.get(this.accountsEndpoint).then(function (response) {
					logger.info({ description: 'Accounts loaded successfully.', func: 'get', obj: 'AccountsAction' });
					return response;
				})['catch'](function (errRes) {
					logger.info({ description: 'Error getting accounts.', error: errRes, func: 'get', obj: 'AccountsAction' });
					return Promise.reject(errRes.message || 'Error getting accounts.');
				});
			}

			//Add an application
		}, {
			key: 'add',
			value: function add(accountData) {
				logger.info({ description: 'Account add called.', accountData: accountData, func: 'add', obj: 'AccountsAction' });
				return this.utils.request.post(this.accountsEndpoint, accountData).then(function (response) {
					logger.info({ description: 'Account added successfully.', response: response, newAccount: new _classesAccount2['default'](response), func: 'add', obj: 'AccountsAction' });
					return new _classesAccount2['default'](response);
				})['catch'](function (errRes) {
					logger.error({ description: 'Account add called.', error: errRes, accountData: accountData, func: 'add', obj: 'AccountsAction' });
					return Promise.reject(errRes.message || 'Error adding account.');
				});
			}

			//Search with partial of accountname
		}, {
			key: 'search',
			value: function search(query) {
				logger.log({ description: 'Accounts search called.', query: query, func: 'search', obj: 'AccountsAction' });
				var searchEndpoint = this.accountsEndpoint + '/search/';
				if (query && _lodash2['default'].isString(query)) {
					searchEndpoint += query;
				}
				if (!query || query == '') {
					logger.log({ description: 'Null query, returning empty array.', func: 'search', obj: 'AccountsAction' });
					return Promise.resolve([]);
				}
				return _classesMatter2['default'].utils.request.get(searchEndpoint).then(function (response) {
					logger.log({ description: 'Accounts search responded.', response: response, query: query, func: 'search', obj: 'AccountsAction' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error searching Accounts.', error: errRes, query: query, func: 'search', obj: 'AccountsAction' });
					return Promise.reject(errRes.message || 'Error searching accounts.');
				});
			}
		}, {
			key: 'accountsEndpoint',
			get: function get() {
				var endpointArray = [_classesMatter2['default'].endpoint, 'accounts'];
				//Check for app account action
				if (_lodash2['default'].has(this, 'app') && _lodash2['default'].has(this.app, 'name')) {
					//Splice apps, appName into index 1
					endpointArray.splice(1, 0, 'apps', this.app.name);
				}
				//Create string from endpointArray
				var endpointStr = endpointArray.join('/');
				logger.log({ description: 'Accounts Endpoint built.', endpoint: endpointStr, func: 'accountsEndpoint', obj: 'AccountsAction' });
				return endpointStr;
			}
		}]);

		return AccountsAction;
	})();

	exports['default'] = AccountsAction;
	module.exports = exports['default'];

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _classesMatter = __webpack_require__(8);

	var _classesMatter2 = _interopRequireDefault(_classesMatter);

	var request = _classesMatter2['default'].utils.request;
	var logger = _classesMatter2['default'].utils.logger;

	//Actions for directories list

	var DirectoriesAction = (function () {
		function DirectoriesAction(actionData) {
			_classCallCheck(this, DirectoriesAction);

			//Check to see if action is for a specific app
			if (actionData && _lodash2['default'].isObject(actionData) && _lodash2['default'].has(actionData, 'app')) {
				this.app = actionData.app;
				logger.log({ description: 'Provided app data set to app parameter.', action: this, providedData: actionData, func: 'constructor', obj: 'DirectoriesAction' });
			} else if (actionData && _lodash2['default'].isString(actionData)) {
				this.app = { name: actionData };
				logger.log({ description: 'App name provided as string was set.', action: this, providedData: actionData, func: 'constructor', obj: 'DirectoriesAction' });
			}
			logger.info({ description: 'New directories action.', action: this, providedData: actionData, func: 'constructor', obj: 'DirectoriesAction' });
		}

		_createClass(DirectoriesAction, [{
			key: 'get',

			//Get users or single application
			value: function get() {
				logger.debug({ description: 'Directories get called.', action: this, func: 'get', obj: 'DirectoriesAction' });
				return request.get(this.directoriesEndpoint).then(function (response) {
					logger.info({ descrption: 'Directories loaded successfully.', response: response, func: 'get', obj: 'DirectoriesAction' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ descrption: 'error getting users', error: errRes, func: 'get', obj: 'DirectoriesAction' });
					return Promise.reject(errRes);
				});
			}

			//Add an application
		}, {
			key: 'add',
			value: function add(appData) {
				logger.debug({ description: 'Add directory called.', action: this, appData: appData, func: 'get', obj: 'DirectoriesAction' });
				return request.post(this.directoriesEndpoint, appData).then(function (response) {
					logger.log({ description: 'Application added successfully.', response: response, func: 'add', obj: 'DirectoriesAction' });
					//TODO: Return list of group objects
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error adding group.', error: errRes, func: 'add', obj: 'DirectoriesAction' });
					return Promise.reject(errRes);
				});
			}

			//Search with partial of directory name
		}, {
			key: 'search',
			value: function search(query) {
				var searchEndpoint = this.directoriesEndpoint + '/search/';
				if (query && _lodash2['default'].isString(query)) {
					searchEndpoint += query;
				}
				if (!query || query == '') {
					logger.debug({ description: 'Null query, returning empty array.', func: 'search', obj: 'DirectoriesAction' });
					return Promise.resolve([]);
				}
				return request.get(searchEndpoint).then(function (response) {
					logger.log({ description: 'Found directories based on search.', response: response, func: 'search', obj: 'DirectoriesAction' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error searching directories.', error: errRes, func: 'search', obj: 'DirectoriesAction' });
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'directoriesEndpoint',
			get: function get() {
				var endpointArray = [_classesMatter2['default'].endpoint, 'directories'];
				//Check for app groups action
				if (_lodash2['default'].has(this, 'app') && _lodash2['default'].has(this.app, 'name')) {
					endpointArray.splice(1, 0, 'apps', this.app.name);
				}
				//Create string from endpointArray
				var endpointStr = endpointArray.join('/');
				logger.log({ description: 'Directories endpoint built.', endpoint: endpointStr, func: 'directoriesEndpoint', obj: 'DirectoriesAction' });
				return endpointStr;
			}
		}]);

		return DirectoriesAction;
	})();

	exports['default'] = DirectoriesAction;
	module.exports = exports['default'];

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _classesMatter = __webpack_require__(8);

	var _classesMatter2 = _interopRequireDefault(_classesMatter);

	var request = _classesMatter2['default'].utils.request;
	var logger = _classesMatter2['default'].utils.logger;

	//Actions for users list

	var GroupsAction = (function () {
		function GroupsAction(actionData) {
			_classCallCheck(this, GroupsAction);

			//Check to see if action is for a specific app
			if (actionData && _lodash2['default'].isObject(actionData) && _lodash2['default'].has(actionData, 'app')) {
				this.app = actionData.app;
				logger.log({
					description: 'Provided app data set to app parameter.',
					action: this, providedData: actionData,
					func: 'constructor', obj: 'GroupsAction'
				});
			} else if (actionData && _lodash2['default'].isString(actionData)) {
				this.app = { name: actionData };
				logger.log({
					description: 'App name provided as string was set.',
					action: this, providedData: actionData,
					func: 'constructor', obj: 'GroupsAction'
				});
			}
			logger.info({
				description: 'New Groups action.', action: this,
				providedData: actionData, func: 'constructor', obj: 'GroupsAction'
			});
		}

		_createClass(GroupsAction, [{
			key: 'get',

			//Get users or single application
			value: function get() {
				logger.log({
					description: 'Get group called.',
					func: 'get', obj: 'GroupsAction'
				});
				return request.get(this.groupsEndpoint).then(function (response) {
					logger.info({
						description: 'Groups loaded successfully.',
						response: response, func: 'get', obj: 'GroupsAction'
					});
					return response;
				})['catch'](function (errRes) {
					logger.info({
						description: 'Error getting groups.', error: errRes,
						func: 'get', obj: 'GroupsAction'
					});
					return Promise.reject(errRes);
				});
			}

			//Add an application
		}, {
			key: 'add',
			value: function add(groupData) {
				var newGroupData = groupData;
				logger.debug({
					description: 'Add group called.', groupData: groupData,
					func: 'add', obj: 'GroupsAction'
				});
				if (_lodash2['default'].isString(groupData)) {
					//Group data is string
					newGroupData = { name: groupData };
				}
				logger.debug({
					description: 'Add group called.', newGroupData: newGroupData,
					func: 'add', obj: 'GroupsAction'
				});
				return request.post(this.groupsEndpoint, newGroupData).then(function (response) {
					logger.log({
						description: 'Group added to application successfully.',
						response: response, func: 'add', obj: 'GroupsAction'
					});
					//TODO: Return list of group objects
					return response;
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error adding group.',
						error: errRes, func: 'add', obj: 'GroupsAction'
					});
					return Promise.reject(errRes);
				});
			}

			//Search with partial of username
		}, {
			key: 'search',
			value: function search(query) {
				logger.debug({
					description: 'Search groups called.', query: query,
					func: 'search', obj: 'GroupsAction'
				});
				if (!query || query == '' || !_lodash2['default'].isString(query)) {
					logger.log({
						description: 'Null or invalid query, returning empty array.',
						func: 'search', obj: 'GroupsAction'
					});
					return Promise.resolve([]);
				}
				var searchEndpoint = this.groupsEndpoint + '/search/' + query;
				logger.debug({
					description: 'Search endpoint created.',
					endpoint: searchEndpoint, func: 'search', obj: 'GroupsAction'
				});
				return request.get(searchEndpoint).then(function (response) {
					logger.log({
						description: 'Found groups based on search.',
						response: response, func: 'search', obj: 'GroupsAction'
					});
					return response;
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error searching groups.',
						error: errRes, func: 'search', obj: 'GroupsAction'
					});
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'groupsEndpoint',
			get: function get() {
				var endpointArray = [_classesMatter2['default'].endpoint, 'groups'];
				//Check for app groups action
				if (_lodash2['default'].has(this, 'app') && _lodash2['default'].has(this.app, 'name')) {
					endpointArray.splice(1, 0, 'apps', this.app.name);
				}
				//Create string from endpointArray
				var endpointStr = endpointArray.join('/');
				logger.log({
					description: 'Groups Endpoint built.', endpoint: endpointStr,
					func: 'groupsEndpoint', obj: 'GroupsAction'
				});
				return endpointStr;
			}
		}]);

		return GroupsAction;
	})();

	exports['default'] = GroupsAction;
	module.exports = exports['default'];

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Matter = __webpack_require__(8);

	var _Matter2 = _interopRequireDefault(_Matter);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var request = _Matter2['default'].utils.request;
	var logger = _Matter2['default'].utils.logger;

	//Actions for specific directory

	var Directory = (function () {
		function Directory(actionData) {
			_classCallCheck(this, Directory);

			if (actionData && _lodash2['default'].isObject(actionData) && (_lodash2['default'].has(actionData, 'directoryName') || _lodash2['default'].has(actionData, 'name'))) {
				//Data is object containing directory data
				this.name = actionData.directoryName || actionData.name;
				if (_lodash2['default'].has(actionData, 'appName')) {
					this.appName = actionData.appName;
				}
			} else if (actionData && _lodash2['default'].isString(actionData)) {
				//Data is string name
				this.name = actionData;
			} else {
				logger.error({
					description: 'Action data object with name is required to start a Directory Action.',
					func: 'constructor', obj: 'Directory'
				});
				throw new Error('Directory Data object with name is required to start a Directory action.');
			}
		}

		_createClass(Directory, [{
			key: 'get',

			//Get userlications or single userlication
			value: function get() {
				return request.get(this.directoryEndpoint).then(function (response) {
					logger.info({
						description: 'Directory data loaded successfully.',
						response: response, func: 'get', obj: 'Directory'
					});
					return response;
				})['catch'](function (errRes) {
					logger.info({
						description: 'Error getting directory.',
						error: errRes, func: 'get', obj: 'Directory'
					});
					return Promise.reject(errRes);
				});
			}

			//Update an Directory
		}, {
			key: 'update',
			value: function update(directoryData) {
				logger.debug({
					description: 'Directory updated called.',
					directoryData: directoryData, func: 'update', obj: 'Directory'
				});
				return _Matter2['default'].utils.request.put(this.directoryEndpoint, directoryData).then(function (response) {
					logger.info({
						description: 'Directory updated successfully.',
						directoryData: directoryData, response: response,
						func: 'update', obj: 'Directory'
					});
					return response;
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error updating directory.',
						directoryData: directoryData, error: errRes,
						func: 'update', obj: 'Directory'
					});
					return Promise.reject(errRes);
				});
			}

			//Delete an Directory
		}, {
			key: 'del',
			value: function del(directoryData) {
				logger.debug({
					description: 'Delete directory called.',
					directoryData: directoryData, func: 'del', obj: 'Directory'
				});
				return request['delete'](this.directoryEndpoint, directoryData).then(function (response) {
					logger.info({
						description: 'Directory deleted successfully.',
						directoryData: directoryData, func: 'del', obj: 'Directory'
					});
					return response;
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error deleting directory.',
						error: errRes, func: 'del', obj: 'Directory'
					});
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'directoryEndpoint',
			get: function get() {
				var endpointArray = [_Matter2['default'].endpoint, 'directories', this.name];
				//Check for app account action
				if (_lodash2['default'].has(this, 'app') && _lodash2['default'].has(this.app, 'name')) {
					endpointArray.splice(1, 0, 'apps', this.app.name);
				}
				//Create string from endpointArray
				var endpointStr = endpointArray.join('/');
				logger.log({
					description: 'Directory endpoint built.',
					endpoint: endpointStr, func: 'directoryEndpoint',
					obj: 'Directory'
				});
				return endpointStr;
			}
		}]);

		return Directory;
	})();

	exports['default'] = Directory;
	module.exports = exports['default'];

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Matter = __webpack_require__(8);

	var _Matter2 = _interopRequireDefault(_Matter);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var request = _Matter2['default'].utils.request;
	var logger = _Matter2['default'].utils.logger;

	//Actions for specific user

	var Group = (function () {
		function Group(actionData) {
			_classCallCheck(this, Group);

			//Call matter with name and settings
			if (actionData && _lodash2['default'].isObject(actionData) && _lodash2['default'].has(actionData, 'groupData')) {
				//Data is object containing group data
				this.name = _lodash2['default'].isObject(actionData.groupData) ? actionData.groupData.name : actionData.groupData;
				if (_lodash2['default'].has(actionData, 'app')) {
					this.app = actionData.app;
				}
			} else if (actionData && _lodash2['default'].isString(actionData)) {
				//Data is string name
				this.name = actionData;
			} else {
				logger.error({ description: 'Action data is required to start a Group Action.', func: 'constructor', obj: 'Group' });
				throw new Error('Username is required to start an Group');
			}
		}

		_createClass(Group, [{
			key: 'get',

			//Get userlications or single userlication
			value: function get() {
				return request.get(this.groupEndpoint).then(function (response) {
					logger.info({ description: 'Group data loaded successfully.', response: response, func: 'get', obj: 'Group' });
					return response;
				})['catch'](function (errRes) {
					logger.info({ description: 'Error getting group.', error: errRes, func: 'get', obj: 'Group' });
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}

			//Update an Group
		}, {
			key: 'update',
			value: function update(groupData) {
				logger.log({ description: 'Group updated called.', groupData: groupData, func: 'update', obj: 'Group' });
				return _Matter2['default'].utils.request.put(this.groupEndpoint, groupData).then(function (response) {
					logger.info({ description: 'Group updated successfully.', groupData: groupData, response: response, func: 'update', obj: 'Group' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error updating group.', groupData: groupData, error: errRes, func: 'update', obj: 'Group' });
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}

			//Delete an Group
		}, {
			key: 'del',
			value: function del(groupData) {
				logger.log({ description: 'Delete group called.', groupData: groupData, func: 'del', obj: 'Group' });
				return request.del(this.groupEndpoint, {}).then(function (response) {
					logger.info({ description: 'Group deleted successfully.', groupData: groupData, func: 'del', obj: 'Group' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error deleting group.', error: errRes, text: errRes.response.text, groupData: groupData, func: 'del', obj: 'Group' });
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}

			//Update an Group
		}, {
			key: 'addAccounts',
			value: function addAccounts(accountsData) {
				logger.log({ description: 'Group updated called.', accountsData: accountsData, func: 'update', obj: 'Group' });
				var accountsArray = accountsData;
				//Handle provided data being a string list
				if (_lodash2['default'].isString(accountsData)) {
					accountsArray = accountsData.split(',');
				}
				//Check item in array to see if it is a string (username) instead of _id
				if (_lodash2['default'].isString(accountsArray[0])) {
					logger.error({ description: 'Accounts array only currently supports account._id not account.username.', accountsData: accountsData, func: 'update', obj: 'Group' });
					return Promise.reject({ message: 'Accounts array only currently supports account._id not account.username.' });
				}
				logger.log({ description: 'Updating group with accounts array.', accountsArray: accountsArray, func: 'update', obj: 'Group' });
				return this.update({ accounts: accountsArray }).then(function (response) {
					logger.info({ description: 'Account(s) added to group successfully.', response: response, func: 'addAccounts', obj: 'Group' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error addAccountseting group.', error: errRes, func: 'addAccounts', obj: 'Group' });
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}
		}, {
			key: 'groupEndpoint',
			get: function get() {
				var endpointArray = [_Matter2['default'].endpoint, 'groups', this.name];
				//Check for app account action

				if (_lodash2['default'].has(this, 'app') && _lodash2['default'].has(this.app, 'name')) {
					endpointArray.splice(1, 0, 'apps', this.app.name);
				}
				//Create string from endpointArray
				var endpointStr = endpointArray.join('/');
				logger.log({ description: 'Group Endpoint built.', endpoint: endpointStr, func: 'groupEndpoint', obj: 'Group' });
				return endpointStr;
			}
		}]);

		return Group;
	})();

	exports['default'] = Group;
	module.exports = exports['default'];

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _config = __webpack_require__(26);

	var _config2 = _interopRequireDefault(_config);

	var _kyperMatter = __webpack_require__(124);

	var _kyperMatter2 = _interopRequireDefault(_kyperMatter);

	var _actionsAppsAction = __webpack_require__(164);

	var _actionsAppsAction2 = _interopRequireDefault(_actionsAppsAction);

	var _classesApplication = __webpack_require__(166);

	var _classesApplication2 = _interopRequireDefault(_classesApplication);

	var _actionsAccountsAction = __webpack_require__(65);

	var _actionsAccountsAction2 = _interopRequireDefault(_actionsAccountsAction);

	var _classesAccount = __webpack_require__(41);

	var _classesAccount2 = _interopRequireDefault(_classesAccount);

	var _actionsGroupsAction = __webpack_require__(67);

	var _actionsGroupsAction2 = _interopRequireDefault(_actionsGroupsAction);

	var _classesGroup = __webpack_require__(69);

	var _classesGroup2 = _interopRequireDefault(_classesGroup);

	var _actionsDirectoriesAction = __webpack_require__(66);

	var _actionsDirectoriesAction2 = _interopRequireDefault(_actionsDirectoriesAction);

	var _classesDirectory = __webpack_require__(68);

	var _classesDirectory2 = _interopRequireDefault(_classesDirectory);

	var _actionsTemplatesAction = __webpack_require__(165);

	var _actionsTemplatesAction2 = _interopRequireDefault(_actionsTemplatesAction);

	var _classesTemplate = __webpack_require__(169);

	var _classesTemplate2 = _interopRequireDefault(_classesTemplate);

	/**Grout Client Class
	 * @ description Extending matter provides token storage and login/logout/signup capabilities
	 */

	var Grout = (function (_Matter) {
		_inherits(Grout, _Matter);

		//TODO: Use getter/setter to make this not a function

		function Grout() {
			_classCallCheck(this, Grout);

			//Call matter with tessellate
			_get(Object.getPrototypeOf(Grout.prototype), 'constructor', this).call(this, _config2['default'].appName, _config2['default'].matterOptions);
		}

		//Start a new Apps Action

		_createClass(Grout, [{
			key: 'App',

			//Start a new App action
			value: function App(appName) {
				this.utils.logger.debug({ description: 'Application action called.', appName: appName, template: new _classesApplication2['default'](appName), func: 'App', obj: 'Grout' });
				return new _classesApplication2['default'](appName);
			}

			//Start a new Apps Action
		}, {
			key: 'Template',

			//Start a new App action
			value: function Template(templateData) {
				this.utils.logger.debug({ description: 'Template Action called.', templateData: templateData, template: new _classesTemplate2['default'](templateData), func: 'Template', obj: 'Grout' });
				return new _classesTemplate2['default'](templateData);
			}

			//Start a new Accounts action
		}, {
			key: 'Account',

			//Start a new Account action
			value: function Account(userData) {
				this.utils.logger.debug({ description: 'Account Action called.', userData: userData, user: new _classesAccount2['default'](userData), func: 'user', obj: 'Grout' });
				return new _classesAccount2['default'](userData);
			}

			//ALIAS OF ACCOUNTS
			//Start a new Accounts action
		}, {
			key: 'User',

			//ALIAS OF ACCOUNT
			//Start a new Account action
			value: function User(userData) {
				this.utils.logger.debug({ description: 'Account Action called.', userData: userData, user: new _classesAccount2['default'](userData), func: 'user', obj: 'Grout' });
				return new _classesAccount2['default'](userData);
			}

			//Start a new Groups action
		}, {
			key: 'Group',

			//Start a new Group action
			value: function Group(groupData) {
				this.utils.logger.debug({
					description: 'Group Action called.', groupData: groupData,
					action: new _classesGroup2['default']({ app: this, groupData: groupData }),
					func: 'group', obj: 'Grout'
				});
				return new _classesGroup2['default'](groupData);
			}

			//Start a new Directories action
		}, {
			key: 'Directory',

			//Start a new Group action
			value: function Directory(directoryData) {
				this.utils.logger.debug({
					description: 'Directory Action called.', directoryData: directoryData,
					action: new _classesDirectory2['default'](directoryData), func: 'directory', obj: 'Grout'
				});
				return new _classesDirectory2['default'](directoryData);
			}
		}, {
			key: 'Apps',
			get: function get() {
				this.utils.logger.debug({
					description: 'Apps Action called.', action: new _actionsAppsAction2['default'](),
					func: 'Apps', obj: 'Grout'
				});
				return new _actionsAppsAction2['default']();
			}
		}, {
			key: 'Templates',
			get: function get() {
				this.utils.logger.debug({ description: 'Templates Action called.', action: new _actionsTemplatesAction2['default'](), func: 'Templates', obj: 'Grout' });
				return new _actionsTemplatesAction2['default']();
			}
		}, {
			key: 'Accounts',
			get: function get() {
				this.utils.logger.debug({ description: 'Account Action called.', action: new _actionsAccountsAction2['default'](), func: 'users', obj: 'Grout' });
				return new _actionsAccountsAction2['default']();
			}
		}, {
			key: 'Users',
			get: function get() {
				this.utils.logger.debug({ description: 'Accounts Action called.', action: new _actionsAccountsAction2['default'](), func: 'Users', obj: 'Grout' });
				return new _actionsAccountsAction2['default']();
			}
		}, {
			key: 'Groups',
			get: function get() {
				this.utils.logger.debug({
					description: 'Groups Action called.', action: new _actionsGroupsAction2['default'](), func: 'groups', obj: 'Grout'
				});
				return new _actionsGroupsAction2['default']();
			}
		}, {
			key: 'Directories',
			get: function get() {
				this.utils.logger.debug({
					description: 'Directories Action called.',
					action: new _actionsDirectoriesAction2['default'](), func: 'directories', obj: 'Grout'
				});
				return new _actionsDirectoriesAction2['default']();
			}
		}]);

		return Grout;
	})(_kyperMatter2['default']);

	exports['default'] = Grout;
	module.exports = exports['default'];

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./firepad": 72,
		"./firepad.js": 72,
		"./firepad.min": 42,
		"./firepad.min.js": 42
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 71;


/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * Firepad is an open-source, collaborative code and text editor. It was designed
	 * to be embedded inside larger applications. Since it uses Firebase as a backend,
	 * it requires no server-side code and can be added to any web app simply by
	 * including a couple JavaScript files.
	 *
	 * Firepad 1.2.0
	 * http://www.firepad.io/
	 * License: MIT
	 * Copyright: 2014 Firebase
	 * With code from ot.js (Copyright 2012-2013 Tim Baumann)
	 */

	(function (name, definition, context) {
	  //try CommonJS, then AMD (require.js), then use global.
	  if (typeof module != 'undefined' && module.exports) module.exports = definition();
	  else if (typeof context['define'] == 'function' && context['define']['amd']) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  else context[name] = definition();
	})('Firepad', function () {var firepad = firepad || { };
	firepad.utils = { };

	firepad.utils.makeEventEmitter = function(clazz, opt_allowedEVents) {
	  clazz.prototype.allowedEvents_ = opt_allowedEVents;

	  clazz.prototype.on = function(eventType, callback, context) {
	    this.validateEventType_(eventType);
	    this.eventListeners_ = this.eventListeners_ || { };
	    this.eventListeners_[eventType] = this.eventListeners_[eventType] || [];
	    this.eventListeners_[eventType].push({ callback: callback, context: context });
	  };

	  clazz.prototype.off = function(eventType, callback) {
	    this.validateEventType_(eventType);
	    this.eventListeners_ = this.eventListeners_ || { };
	    var listeners = this.eventListeners_[eventType] || [];
	    for(var i = 0; i < listeners.length; i++) {
	      if (listeners[i].callback === callback) {
	        listeners.splice(i, 1);
	        return;
	      }
	    }
	  };

	  clazz.prototype.trigger =  function(eventType /*, args ... */) {
	    this.eventListeners_ = this.eventListeners_ || { };
	    var listeners = this.eventListeners_[eventType] || [];
	    for(var i = 0; i < listeners.length; i++) {
	      listeners[i].callback.apply(listeners[i].context, Array.prototype.slice.call(arguments, 1));
	    }
	  };

	  clazz.prototype.validateEventType_ = function(eventType) {
	    if (this.allowedEvents_) {
	      var allowed = false;
	      for(var i = 0; i < this.allowedEvents_.length; i++) {
	        if (this.allowedEvents_[i] === eventType) {
	          allowed = true;
	          break;
	        }
	      }
	      if (!allowed) {
	        throw new Error('Unknown event "' + eventType + '"');
	      }
	    }
	  };
	};

	firepad.utils.elt = function(tag, content, attrs) {
	  var e = document.createElement(tag);
	  if (typeof content === "string") {
	    firepad.utils.setTextContent(e, content);
	  } else if (content) {
	    for (var i = 0; i < content.length; ++i) { e.appendChild(content[i]); }
	  }
	  for(var attr in (attrs || { })) {
	    e.setAttribute(attr, attrs[attr]);
	  }
	  return e;
	};

	firepad.utils.setTextContent = function(e, str) {
	  e.innerHTML = "";
	  e.appendChild(document.createTextNode(str));
	};


	firepad.utils.on = function(emitter, type, f, capture) {
	  if (emitter.addEventListener) {
	    emitter.addEventListener(type, f, capture || false);
	  } else if (emitter.attachEvent) {
	    emitter.attachEvent("on" + type, f);
	  }
	};

	firepad.utils.off = function(emitter, type, f, capture) {
	  if (emitter.removeEventListener) {
	    emitter.removeEventListener(type, f, capture || false);
	  } else if (emitter.detachEvent) {
	    emitter.detachEvent("on" + type, f);
	  }
	};

	firepad.utils.preventDefault = function(e) {
	  if (e.preventDefault) {
	    e.preventDefault();
	  } else {
	    e.returnValue = false;
	  }
	};

	firepad.utils.stopPropagation = function(e) {
	  if (e.stopPropagation) {
	    e.stopPropagation();
	  } else {
	    e.cancelBubble = true;
	  }
	};

	firepad.utils.stopEvent = function(e) {
	  firepad.utils.preventDefault(e);
	  firepad.utils.stopPropagation(e);
	};

	firepad.utils.stopEventAnd = function(fn) {
	  return function(e) {
	    fn(e);
	    firepad.utils.stopEvent(e);
	    return false;
	  };
	};

	firepad.utils.trim = function(str) {
	  return str.replace(/^\s+/g, '').replace(/\s+$/g, '');
	};

	firepad.utils.stringEndsWith = function(str, suffix) {
	  var list = (typeof suffix == 'string') ? [suffix] : suffix;
	  for (var i = 0; i < list.length; i++) {
	    var suffix = list[i];
	    if (str.indexOf(suffix, str.length - suffix.length) !== -1)
	      return true;
	  }
	  return false;
	};

	firepad.utils.assert = function assert (b, msg) {
	  if (!b) {
	    throw new Error(msg || "assertion error");
	  }
	};

	firepad.utils.log = function() {
	  if (typeof console !== 'undefined' && typeof console.log !== 'undefined') {
	    var args = ['Firepad:'];
	    for(var i = 0; i < arguments.length; i++) {
	      args.push(arguments[i]);
	    }
	    console.log.apply(console, args);
	  }
	};

	var firepad = firepad || { };
	firepad.Span = (function () {
	  function Span(pos, length) {
	    this.pos = pos;
	    this.length = length;
	  }

	  Span.prototype.end = function() {
	    return this.pos + this.length;
	  };

	  return Span;
	}());

	var firepad = firepad || { };

	firepad.TextOp = (function() {
	  var utils = firepad.utils;

	  // Operation are essentially lists of ops. There are three types of ops:
	  //
	  // * Retain ops: Advance the cursor position by a given number of characters.
	  //   Represented by positive ints.
	  // * Insert ops: Insert a given string at the current cursor position.
	  //   Represented by strings.
	  // * Delete ops: Delete the next n characters. Represented by negative ints.
	  function TextOp(type) {
	    this.type = type;
	    this.chars = null;
	    this.text = null;
	    this.attributes = null;

	    if (type === 'insert') {
	      this.text = arguments[1];
	      utils.assert(typeof this.text === 'string');
	      this.attributes = arguments[2] || { };
	      utils.assert (typeof this.attributes === 'object');
	    } else if (type === 'delete') {
	      this.chars = arguments[1];
	      utils.assert(typeof this.chars === 'number');
	    } else if (type === 'retain') {
	      this.chars = arguments[1];
	      utils.assert(typeof this.chars === 'number');
	      this.attributes = arguments[2] || { };
	      utils.assert (typeof this.attributes === 'object');
	    }
	  }

	  TextOp.prototype.isInsert = function() { return this.type === 'insert'; };
	  TextOp.prototype.isDelete = function() { return this.type === 'delete'; };
	  TextOp.prototype.isRetain = function() { return this.type === 'retain'; };

	  TextOp.prototype.equals = function(other) {
	    return (this.type === other.type &&
	        this.text === other.text &&
	        this.chars === other.chars &&
	        this.attributesEqual(other.attributes));
	  };

	  TextOp.prototype.attributesEqual = function(otherAttributes) {
	    for (var attr in this.attributes) {
	      if (this.attributes[attr] !== otherAttributes[attr]) { return false; }
	    }

	    for (attr in otherAttributes) {
	      if (this.attributes[attr] !== otherAttributes[attr]) { return false; }
	    }

	    return true;
	  };

	  TextOp.prototype.hasEmptyAttributes = function() {
	    var empty = true;
	    for (var attr in this.attributes) {
	      empty = false;
	      break;
	    }

	    return empty;
	  };

	  return TextOp;
	})();

	var firepad = firepad || { };

	firepad.TextOperation = (function () {
	  'use strict';
	  var TextOp = firepad.TextOp;
	  var utils = firepad.utils;

	  // Constructor for new operations.
	  function TextOperation () {
	    if (!this || this.constructor !== TextOperation) {
	      // => function was called without 'new'
	      return new TextOperation();
	    }

	    // When an operation is applied to an input string, you can think of this as
	    // if an imaginary cursor runs over the entire string and skips over some
	    // parts, deletes some parts and inserts characters at some positions. These
	    // actions (skip/delete/insert) are stored as an array in the "ops" property.
	    this.ops = [];
	    // An operation's baseLength is the length of every string the operation
	    // can be applied to.
	    this.baseLength = 0;
	    // The targetLength is the length of every string that results from applying
	    // the operation on a valid input string.
	    this.targetLength = 0;
	  }

	  TextOperation.prototype.equals = function (other) {
	    if (this.baseLength !== other.baseLength) { return false; }
	    if (this.targetLength !== other.targetLength) { return false; }
	    if (this.ops.length !== other.ops.length) { return false; }
	    for (var i = 0; i < this.ops.length; i++) {
	      if (!this.ops[i].equals(other.ops[i])) { return false; }
	    }
	    return true;
	  };


	  // After an operation is constructed, the user of the library can specify the
	  // actions of an operation (skip/insert/delete) with these three builder
	  // methods. They all return the operation for convenient chaining.

	  // Skip over a given number of characters.
	  TextOperation.prototype.retain = function (n, attributes) {
	    if (typeof n !== 'number' || n < 0) {
	      throw new Error("retain expects a positive integer.");
	    }
	    if (n === 0) { return this; }
	    this.baseLength += n;
	    this.targetLength += n;
	    attributes = attributes || { };
	    var prevOp = (this.ops.length > 0) ? this.ops[this.ops.length - 1] : null;
	    if (prevOp && prevOp.isRetain() && prevOp.attributesEqual(attributes)) {
	      // The last op is a retain op with the same attributes => we can merge them into one op.
	      prevOp.chars += n;
	    } else {
	      // Create a new op.
	      this.ops.push(new TextOp('retain', n, attributes));
	    }
	    return this;
	  };

	  // Insert a string at the current position.
	  TextOperation.prototype.insert = function (str, attributes) {
	    if (typeof str !== 'string') {
	      throw new Error("insert expects a string");
	    }
	    if (str === '') { return this; }
	    attributes = attributes || { };
	    this.targetLength += str.length;
	    var prevOp = (this.ops.length > 0) ? this.ops[this.ops.length - 1] : null;
	    var prevPrevOp = (this.ops.length > 1) ? this.ops[this.ops.length - 2] : null;
	    if (prevOp && prevOp.isInsert() && prevOp.attributesEqual(attributes)) {
	      // Merge insert op.
	      prevOp.text += str;
	    } else if (prevOp && prevOp.isDelete()) {
	      // It doesn't matter when an operation is applied whether the operation
	      // is delete(3), insert("something") or insert("something"), delete(3).
	      // Here we enforce that in this case, the insert op always comes first.
	      // This makes all operations that have the same effect when applied to
	      // a document of the right length equal in respect to the `equals` method.
	      if (prevPrevOp && prevPrevOp.isInsert() && prevPrevOp.attributesEqual(attributes)) {
	        prevPrevOp.text += str;
	      } else {
	        this.ops[this.ops.length - 1] = new TextOp('insert', str, attributes);
	        this.ops.push(prevOp);
	      }
	    } else {
	      this.ops.push(new TextOp('insert', str, attributes));
	    }
	    return this;
	  };

	  // Delete a string at the current position.
	  TextOperation.prototype['delete'] = function (n) {
	    if (typeof n === 'string') { n = n.length; }
	    if (typeof n !== 'number' || n < 0) {
	      throw new Error("delete expects a positive integer or a string");
	    }
	    if (n === 0) { return this; }
	    this.baseLength += n;
	    var prevOp = (this.ops.length > 0) ? this.ops[this.ops.length - 1] : null;
	    if (prevOp && prevOp.isDelete()) {
	      prevOp.chars += n;
	    } else {
	      this.ops.push(new TextOp('delete', n));
	    }
	    return this;
	  };

	  // Tests whether this operation has no effect.
	  TextOperation.prototype.isNoop = function () {
	    return this.ops.length === 0 ||
	        (this.ops.length === 1 && (this.ops[0].isRetain() && this.ops[0].hasEmptyAttributes()));
	  };

	  TextOperation.prototype.clone = function() {
	    var clone = new TextOperation();
	    for(var i = 0; i < this.ops.length; i++) {
	      if (this.ops[i].isRetain()) {
	        clone.retain(this.ops[i].chars, this.ops[i].attributes);
	      } else if (this.ops[i].isInsert()) {
	        clone.insert(this.ops[i].text, this.ops[i].attributes);
	      } else {
	        clone['delete'](this.ops[i].chars);
	      }
	    }

	    return clone;
	  };

	  // Pretty printing.
	  TextOperation.prototype.toString = function () {
	    // map: build a new array by applying a function to every element in an old
	    // array.
	    var map = Array.prototype.map || function (fn) {
	      var arr = this;
	      var newArr = [];
	      for (var i = 0, l = arr.length; i < l; i++) {
	        newArr[i] = fn(arr[i]);
	      }
	      return newArr;
	    };
	    return map.call(this.ops, function (op) {
	      if (op.isRetain()) {
	        return "retain " + op.chars;
	      } else if (op.isInsert()) {
	        return "insert '" + op.text + "'";
	      } else {
	        return "delete " + (op.chars);
	      }
	    }).join(', ');
	  };

	  // Converts operation into a JSON value.
	  TextOperation.prototype.toJSON = function () {
	    var ops = [];
	    for(var i = 0; i < this.ops.length; i++) {
	      // We prefix ops with their attributes if non-empty.
	      if (!this.ops[i].hasEmptyAttributes()) {
	        ops.push(this.ops[i].attributes);
	      }
	      if (this.ops[i].type === 'retain') {
	        ops.push(this.ops[i].chars);
	      } else if (this.ops[i].type === 'insert') {
	        ops.push(this.ops[i].text);
	      } else if (this.ops[i].type === 'delete') {
	        ops.push(-this.ops[i].chars);
	      }
	    }
	    // Return an array with /something/ in it, since an empty array will be treated as null by Firebase.
	    if (ops.length === 0) {
	      ops.push(0);
	    }
	    return ops;
	  };

	  // Converts a plain JS object into an operation and validates it.
	  TextOperation.fromJSON = function (ops) {
	    var o = new TextOperation();
	    for (var i = 0, l = ops.length; i < l; i++) {
	      var op = ops[i];
	      var attributes = { };
	      if (typeof op === 'object') {
	        attributes = op;
	        i++;
	        op = ops[i];
	      }
	      if (typeof op === 'number') {
	        if (op > 0) {
	          o.retain(op, attributes);
	        } else {
	          o['delete'](-op);
	        }
	      } else {
	        utils.assert(typeof op === 'string');
	        o.insert(op, attributes);
	      }
	    }
	    return o;
	  };

	  // Apply an operation to a string, returning a new string. Throws an error if
	  // there's a mismatch between the input string and the operation.
	  TextOperation.prototype.apply = function (str, oldAttributes, newAttributes) {
	    var operation = this;
	    oldAttributes = oldAttributes || [];
	    newAttributes = newAttributes || [];
	    if (str.length !== operation.baseLength) {
	      throw new Error("The operation's base length must be equal to the string's length.");
	    }
	    var newStringParts = [], j = 0, k, attr;
	    var oldIndex = 0;
	    var ops = this.ops;
	    for (var i = 0, l = ops.length; i < l; i++) {
	      var op = ops[i];
	      if (op.isRetain()) {
	        if (oldIndex + op.chars > str.length) {
	          throw new Error("Operation can't retain more characters than are left in the string.");
	        }
	        // Copy skipped part of the retained string.
	        newStringParts[j++] = str.slice(oldIndex, oldIndex + op.chars);

	        // Copy (and potentially update) attributes for each char in retained string.
	        for(k = 0; k < op.chars; k++) {
	          var currAttributes = oldAttributes[oldIndex + k] || { }, updatedAttributes = { };
	          for(attr in currAttributes) {
	            updatedAttributes[attr] = currAttributes[attr];
	            utils.assert(updatedAttributes[attr] !== false);
	          }
	          for(attr in op.attributes) {
	            if (op.attributes[attr] === false) {
	              delete updatedAttributes[attr];
	            } else {
	              updatedAttributes[attr] = op.attributes[attr];
	            }
	            utils.assert(updatedAttributes[attr] !== false);
	          }
	          newAttributes.push(updatedAttributes);
	        }

	        oldIndex += op.chars;
	      } else if (op.isInsert()) {
	        // Insert string.
	        newStringParts[j++] = op.text;

	        // Insert attributes for each char.
	        for(k = 0; k < op.text.length; k++) {
	          var insertedAttributes = { };
	          for(attr in op.attributes) {
	            insertedAttributes[attr] = op.attributes[attr];
	            utils.assert(insertedAttributes[attr] !== false);
	          }
	          newAttributes.push(insertedAttributes);
	        }
	      } else { // delete op
	        oldIndex += op.chars;
	      }
	    }
	    if (oldIndex !== str.length) {
	      throw new Error("The operation didn't operate on the whole string.");
	    }
	    var newString = newStringParts.join('');
	    utils.assert(newString.length === newAttributes.length);

	    return newString;
	  };

	  // Computes the inverse of an operation. The inverse of an operation is the
	  // operation that reverts the effects of the operation, e.g. when you have an
	  // operation 'insert("hello "); skip(6);' then the inverse is 'delete("hello ");
	  // skip(6);'. The inverse should be used for implementing undo.
	  TextOperation.prototype.invert = function (str) {
	    var strIndex = 0;
	    var inverse = new TextOperation();
	    var ops = this.ops;
	    for (var i = 0, l = ops.length; i < l; i++) {
	      var op = ops[i];
	      if (op.isRetain()) {
	        inverse.retain(op.chars);
	        strIndex += op.chars;
	      } else if (op.isInsert()) {
	        inverse['delete'](op.text.length);
	      } else { // delete op
	        inverse.insert(str.slice(strIndex, strIndex + op.chars));
	        strIndex += op.chars;
	      }
	    }
	    return inverse;
	  };

	  // Compose merges two consecutive operations into one operation, that
	  // preserves the changes of both. Or, in other words, for each input string S
	  // and a pair of consecutive operations A and B,
	  // apply(apply(S, A), B) = apply(S, compose(A, B)) must hold.
	  TextOperation.prototype.compose = function (operation2) {
	    var operation1 = this;
	    if (operation1.targetLength !== operation2.baseLength) {
	      throw new Error("The base length of the second operation has to be the target length of the first operation");
	    }

	    function composeAttributes(first, second, firstOpIsInsert) {
	      var merged = { }, attr;
	      for(attr in first) {
	        merged[attr] = first[attr];
	      }
	      for(attr in second) {
	        if (firstOpIsInsert && second[attr] === false) {
	          delete merged[attr];
	        } else {
	          merged[attr] = second[attr];
	        }
	      }
	      return merged;
	    }

	    var operation = new TextOperation(); // the combined operation
	    var ops1 = operation1.clone().ops, ops2 = operation2.clone().ops;
	    var i1 = 0, i2 = 0; // current index into ops1 respectively ops2
	    var op1 = ops1[i1++], op2 = ops2[i2++]; // current ops
	    var attributes;
	    while (true) {
	      // Dispatch on the type of op1 and op2
	      if (typeof op1 === 'undefined' && typeof op2 === 'undefined') {
	        // end condition: both ops1 and ops2 have been processed
	        break;
	      }

	      if (op1 && op1.isDelete()) {
	        operation['delete'](op1.chars);
	        op1 = ops1[i1++];
	        continue;
	      }
	      if (op2 && op2.isInsert()) {
	        operation.insert(op2.text, op2.attributes);
	        op2 = ops2[i2++];
	        continue;
	      }

	      if (typeof op1 === 'undefined') {
	        throw new Error("Cannot compose operations: first operation is too short.");
	      }
	      if (typeof op2 === 'undefined') {
	        throw new Error("Cannot compose operations: first operation is too long.");
	      }

	      if (op1.isRetain() && op2.isRetain()) {
	        attributes = composeAttributes(op1.attributes, op2.attributes);
	        if (op1.chars > op2.chars) {
	          operation.retain(op2.chars, attributes);
	          op1.chars -= op2.chars;
	          op2 = ops2[i2++];
	        } else if (op1.chars === op2.chars) {
	          operation.retain(op1.chars, attributes);
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          operation.retain(op1.chars, attributes);
	          op2.chars -= op1.chars;
	          op1 = ops1[i1++];
	        }
	      } else if (op1.isInsert() && op2.isDelete()) {
	        if (op1.text.length > op2.chars) {
	          op1.text = op1.text.slice(op2.chars);
	          op2 = ops2[i2++];
	        } else if (op1.text.length === op2.chars) {
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          op2.chars -= op1.text.length;
	          op1 = ops1[i1++];
	        }
	      } else if (op1.isInsert() && op2.isRetain()) {
	        attributes = composeAttributes(op1.attributes, op2.attributes, /*firstOpIsInsert=*/true);
	        if (op1.text.length > op2.chars) {
	          operation.insert(op1.text.slice(0, op2.chars), attributes);
	          op1.text = op1.text.slice(op2.chars);
	          op2 = ops2[i2++];
	        } else if (op1.text.length === op2.chars) {
	          operation.insert(op1.text, attributes);
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          operation.insert(op1.text, attributes);
	          op2.chars -= op1.text.length;
	          op1 = ops1[i1++];
	        }
	      } else if (op1.isRetain() && op2.isDelete()) {
	        if (op1.chars > op2.chars) {
	          operation['delete'](op2.chars);
	          op1.chars -= op2.chars;
	          op2 = ops2[i2++];
	        } else if (op1.chars === op2.chars) {
	          operation['delete'](op2.chars);
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          operation['delete'](op1.chars);
	          op2.chars -= op1.chars;
	          op1 = ops1[i1++];
	        }
	      } else {
	        throw new Error(
	          "This shouldn't happen: op1: " +
	          JSON.stringify(op1) + ", op2: " +
	          JSON.stringify(op2)
	        );
	      }
	    }
	    return operation;
	  };

	  function getSimpleOp (operation) {
	    var ops = operation.ops;
	    switch (ops.length) {
	    case 1:
	      return ops[0];
	    case 2:
	      return ops[0].isRetain() ? ops[1] : (ops[1].isRetain() ? ops[0] : null);
	    case 3:
	      if (ops[0].isRetain() && ops[2].isRetain()) { return ops[1]; }
	    }
	    return null;
	  }

	  function getStartIndex (operation) {
	    if (operation.ops[0].isRetain()) { return operation.ops[0].chars; }
	    return 0;
	  }

	  // When you use ctrl-z to undo your latest changes, you expect the program not
	  // to undo every single keystroke but to undo your last sentence you wrote at
	  // a stretch or the deletion you did by holding the backspace key down. This
	  // This can be implemented by composing operations on the undo stack. This
	  // method can help decide whether two operations should be composed. It
	  // returns true if the operations are consecutive insert operations or both
	  // operations delete text at the same position. You may want to include other
	  // factors like the time since the last change in your decision.
	  TextOperation.prototype.shouldBeComposedWith = function (other) {
	    if (this.isNoop() || other.isNoop()) { return true; }

	    var startA = getStartIndex(this), startB = getStartIndex(other);
	    var simpleA = getSimpleOp(this), simpleB = getSimpleOp(other);
	    if (!simpleA || !simpleB) { return false; }

	    if (simpleA.isInsert() && simpleB.isInsert()) {
	      return startA + simpleA.text.length === startB;
	    }

	    if (simpleA.isDelete() && simpleB.isDelete()) {
	      // there are two possibilities to delete: with backspace and with the
	      // delete key.
	      return (startB + simpleB.chars === startA) || startA === startB;
	    }

	    return false;
	  };

	  // Decides whether two operations should be composed with each other
	  // if they were inverted, that is
	  // `shouldBeComposedWith(a, b) = shouldBeComposedWithInverted(b^{-1}, a^{-1})`.
	  TextOperation.prototype.shouldBeComposedWithInverted = function (other) {
	    if (this.isNoop() || other.isNoop()) { return true; }

	    var startA = getStartIndex(this), startB = getStartIndex(other);
	    var simpleA = getSimpleOp(this), simpleB = getSimpleOp(other);
	    if (!simpleA || !simpleB) { return false; }

	    if (simpleA.isInsert() && simpleB.isInsert()) {
	      return startA + simpleA.text.length === startB || startA === startB;
	    }

	    if (simpleA.isDelete() && simpleB.isDelete()) {
	      return startB + simpleB.chars === startA;
	    }

	    return false;
	  };


	  TextOperation.transformAttributes = function(attributes1, attributes2) {
	    var attributes1prime = { }, attributes2prime = { };
	    var attr, allAttrs = { };
	    for(attr in attributes1) { allAttrs[attr] = true; }
	    for(attr in attributes2) { allAttrs[attr] = true; }

	    for (attr in allAttrs) {
	      var attr1 = attributes1[attr], attr2 = attributes2[attr];
	      utils.assert(attr1 != null || attr2 != null);
	      if (attr1 == null) {
	        // Only modified by attributes2; keep it.
	        attributes2prime[attr] = attr2;
	      } else if (attr2 == null) {
	        // only modified by attributes1; keep it
	        attributes1prime[attr] = attr1;
	      } else if (attr1 === attr2) {
	        // Both set it to the same value.  Nothing to do.
	      } else {
	        // attr1 and attr2 are different. Prefer attr1.
	        attributes1prime[attr] = attr1;
	      }
	    }
	    return [attributes1prime, attributes2prime];
	  };

	  // Transform takes two operations A and B that happened concurrently and
	  // produces two operations A' and B' (in an array) such that
	  // `apply(apply(S, A), B') = apply(apply(S, B), A')`. This function is the
	  // heart of OT.
	  TextOperation.transform = function (operation1, operation2) {
	    if (operation1.baseLength !== operation2.baseLength) {
	      throw new Error("Both operations have to have the same base length");
	    }

	    var operation1prime = new TextOperation();
	    var operation2prime = new TextOperation();
	    var ops1 = operation1.clone().ops, ops2 = operation2.clone().ops;
	    var i1 = 0, i2 = 0;
	    var op1 = ops1[i1++], op2 = ops2[i2++];
	    while (true) {
	      // At every iteration of the loop, the imaginary cursor that both
	      // operation1 and operation2 have that operates on the input string must
	      // have the same position in the input string.

	      if (typeof op1 === 'undefined' && typeof op2 === 'undefined') {
	        // end condition: both ops1 and ops2 have been processed
	        break;
	      }

	      // next two cases: one or both ops are insert ops
	      // => insert the string in the corresponding prime operation, skip it in
	      // the other one. If both op1 and op2 are insert ops, prefer op1.
	      if (op1 && op1.isInsert()) {
	        operation1prime.insert(op1.text, op1.attributes);
	        operation2prime.retain(op1.text.length);
	        op1 = ops1[i1++];
	        continue;
	      }
	      if (op2 && op2.isInsert()) {
	        operation1prime.retain(op2.text.length);
	        operation2prime.insert(op2.text, op2.attributes);
	        op2 = ops2[i2++];
	        continue;
	      }

	      if (typeof op1 === 'undefined') {
	        throw new Error("Cannot transform operations: first operation is too short.");
	      }
	      if (typeof op2 === 'undefined') {
	        throw new Error("Cannot transform operations: first operation is too long.");
	      }

	      var minl;
	      if (op1.isRetain() && op2.isRetain()) {
	        // Simple case: retain/retain
	        var attributesPrime = TextOperation.transformAttributes(op1.attributes, op2.attributes);
	        if (op1.chars > op2.chars) {
	          minl = op2.chars;
	          op1.chars -= op2.chars;
	          op2 = ops2[i2++];
	        } else if (op1.chars === op2.chars) {
	          minl = op2.chars;
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          minl = op1.chars;
	          op2.chars -= op1.chars;
	          op1 = ops1[i1++];
	        }

	        operation1prime.retain(minl, attributesPrime[0]);
	        operation2prime.retain(minl, attributesPrime[1]);
	      } else if (op1.isDelete() && op2.isDelete()) {
	        // Both operations delete the same string at the same position. We don't
	        // need to produce any operations, we just skip over the delete ops and
	        // handle the case that one operation deletes more than the other.
	        if (op1.chars > op2.chars) {
	          op1.chars -= op2.chars;
	          op2 = ops2[i2++];
	        } else if (op1.chars === op2.chars) {
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          op2.chars -= op1.chars;
	          op1 = ops1[i1++];
	        }
	      // next two cases: delete/retain and retain/delete
	      } else if (op1.isDelete() && op2.isRetain()) {
	        if (op1.chars > op2.chars) {
	          minl = op2.chars;
	          op1.chars -= op2.chars;
	          op2 = ops2[i2++];
	        } else if (op1.chars === op2.chars) {
	          minl = op2.chars;
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          minl = op1.chars;
	          op2.chars -= op1.chars;
	          op1 = ops1[i1++];
	        }
	        operation1prime['delete'](minl);
	      } else if (op1.isRetain() && op2.isDelete()) {
	        if (op1.chars > op2.chars) {
	          minl = op2.chars;
	          op1.chars -= op2.chars;
	          op2 = ops2[i2++];
	        } else if (op1.chars === op2.chars) {
	          minl = op1.chars;
	          op1 = ops1[i1++];
	          op2 = ops2[i2++];
	        } else {
	          minl = op1.chars;
	          op2.chars -= op1.chars;
	          op1 = ops1[i1++];
	        }
	        operation2prime['delete'](minl);
	      } else {
	        throw new Error("The two operations aren't compatible");
	      }
	    }

	    return [operation1prime, operation2prime];
	  };

	  return TextOperation;
	}());

	var firepad = firepad || { };

	// TODO: Rewrite this (probably using a splay tree) to be efficient.  Right now it's based on a linked list
	// so all operations are O(n), where n is the number of spans in the list.
	firepad.AnnotationList = (function () {
	  var Span = firepad.Span;

	  function assert(bool, text) {
	    if (!bool) {
	      throw new Error('AnnotationList assertion failed' + (text ? (': ' + text) : ''));
	    }
	  }

	  function OldAnnotatedSpan(pos, node) {
	    this.pos = pos;
	    this.length = node.length;
	    this.annotation = node.annotation;
	    this.attachedObject_ = node.attachedObject;
	  }

	  OldAnnotatedSpan.prototype.getAttachedObject = function() {
	    return this.attachedObject_;
	  };

	  function NewAnnotatedSpan(pos, node) {
	    this.pos = pos;
	    this.length = node.length;
	    this.annotation = node.annotation;
	    this.node_ = node;
	  }

	  NewAnnotatedSpan.prototype.attachObject = function(object) {
	    this.node_.attachedObject = object;
	  };

	  var NullAnnotation = { equals: function() { return false; } };

	  function AnnotationList(changeHandler) {
	    // There's always a head node; to avoid special cases.
	    this.head_ = new Node(0, NullAnnotation);
	    this.changeHandler_ = changeHandler;
	  }

	  AnnotationList.prototype.insertAnnotatedSpan = function(span, annotation) {
	    this.wrapOperation_(new Span(span.pos, 0), function(oldPos, old) {
	      assert(!old || old.next === null); // should be 0 or 1 nodes.
	      var toInsert = new Node(span.length, annotation);
	      if (!old) {
	        return toInsert;
	      } else {
	        assert (span.pos > oldPos && span.pos < oldPos + old.length);
	        var newNodes = new Node(0, NullAnnotation);
	        // Insert part of old before insertion point.
	        newNodes.next = new Node(span.pos - oldPos, old.annotation);
	        // Insert new node.
	        newNodes.next.next = toInsert;
	        // Insert part of old after insertion point.
	        toInsert.next = new Node(oldPos + old.length - span.pos, old.annotation);
	        return newNodes.next;
	      }
	    });
	  };

	  AnnotationList.prototype.removeSpan = function(removeSpan) {
	    if (removeSpan.length === 0) { return; }

	    this.wrapOperation_(removeSpan, function(oldPos, old) {
	      assert (old !== null);
	      var newNodes = new Node(0, NullAnnotation), current = newNodes;
	      // Add new node for part before the removed span (if any).
	      if (removeSpan.pos > oldPos) {
	        current.next = new Node(removeSpan.pos - oldPos, old.annotation);
	        current = current.next;
	      }

	      // Skip over removed nodes.
	      while (removeSpan.end() > oldPos + old.length) {
	        oldPos += old.length;
	        old = old.next;
	      }

	      // Add new node for part after the removed span (if any).
	      var afterChars = oldPos + old.length - removeSpan.end();
	      if (afterChars > 0) {
	        current.next = new Node(afterChars, old.annotation);
	      }

	      return newNodes.next;
	    });
	  };

	  AnnotationList.prototype.updateSpan = function (span, updateFn) {
	    if (span.length === 0) { return; }

	    this.wrapOperation_(span, function(oldPos, old) {
	      assert (old !== null);
	      var newNodes = new Node(0, NullAnnotation), current = newNodes, currentPos = oldPos;

	      // Add node for any characters before the span we're updating.
	      var beforeChars = span.pos - currentPos;
	      assert(beforeChars < old.length);
	      if (beforeChars > 0) {
	        current.next = new Node(beforeChars, old.annotation);
	        current = current.next;
	        currentPos += current.length;
	      }

	      // Add updated nodes for entirely updated nodes.
	      while (old !== null && span.end() >= oldPos + old.length) {
	        var length = oldPos + old.length - currentPos;
	        current.next = new Node(length, updateFn(old.annotation, length));
	        current = current.next;
	        oldPos += old.length;
	        old = old.next;
	        currentPos = oldPos;
	      }

	      // Add updated nodes for last node.
	      var updateChars = span.end() - currentPos;
	      if (updateChars > 0) {
	        assert(updateChars < old.length);
	        current.next = new Node(updateChars, updateFn(old.annotation, updateChars));
	        current = current.next;
	        currentPos += current.length;

	        // Add non-updated remaining part of node.
	        current.next = new Node(oldPos + old.length - currentPos, old.annotation);
	      }

	      return newNodes.next;
	    });
	  };

	  AnnotationList.prototype.wrapOperation_ = function(span, operationFn) {
	    if (span.pos < 0) {
	      throw new Error('Span start cannot be negative.');
	    }
	    var oldNodes = [], newNodes = [];

	    var res = this.getAffectedNodes_(span);

	    var tail;
	    if (res.start !== null) {
	      tail = res.end.next;
	      // Temporarily truncate list so we can pass it to operationFn.  We'll splice it back in later.
	      res.end.next = null;
	    } else {
	      // start and end are null, because span is empty and lies on the border of two nodes.
	      tail = res.succ;
	    }

	    // Create a new segment to replace the affected nodes.
	    var newSegment = operationFn(res.startPos, res.start);

	    var includePredInOldNodes = false, includeSuccInOldNodes = false;
	    if (newSegment) {
	      this.mergeNodesWithSameAnnotations_(newSegment);

	      var newPos;
	      if (res.pred && res.pred.annotation.equals(newSegment.annotation)) {
	        // We can merge the pred node with newSegment's first node.
	        includePredInOldNodes = true;
	        newSegment.length += res.pred.length;

	        // Splice newSegment in after beforePred.
	        res.beforePred.next = newSegment;
	        newPos = res.predPos;
	      } else {
	        // Splice newSegment in after beforeStart.
	        res.beforeStart.next = newSegment;
	        newPos = res.startPos;
	      }

	      // Generate newNodes, but not the last one (since we may be able to merge it with succ).
	      while(newSegment.next) {
	        newNodes.push(new NewAnnotatedSpan(newPos, newSegment));
	        newPos += newSegment.length;
	        newSegment = newSegment.next;
	      }

	      if (res.succ && res.succ.annotation.equals(newSegment.annotation)) {
	        // We can merge newSegment's last node with the succ node.
	        newSegment.length += res.succ.length;
	        includeSuccInOldNodes = true;

	        // Splice rest of list after succ after newSegment.
	        newSegment.next = res.succ.next;
	      } else {
	        // Splice tail after newSegment.
	        newSegment.next = tail;
	      }

	      // Add last newSegment node to newNodes.
	      newNodes.push(new NewAnnotatedSpan(newPos, newSegment));

	    } else {
	      // newList is empty.  Try to merge pred and succ.
	      if (res.pred && res.succ && res.pred.annotation.equals(res.succ.annotation)) {
	        includePredInOldNodes = true;
	        includeSuccInOldNodes = true;

	        // Create succ + pred merged node and splice list together.
	        newSegment = new Node(res.pred.length + res.succ.length, res.pred.annotation);
	        res.beforePred.next = newSegment;
	        newSegment.next = res.succ.next;

	        newNodes.push(new NewAnnotatedSpan(res.startPos - res.pred.length, newSegment));
	      } else {
	        // Just splice list back together.
	        res.beforeStart.next = tail;
	      }
	    }

	    // Build list of oldNodes.

	    if (includePredInOldNodes) {
	      oldNodes.push(new OldAnnotatedSpan(res.predPos, res.pred));
	    }

	    var oldPos = res.startPos, oldSegment = res.start;
	    while (oldSegment !== null) {
	      oldNodes.push(new OldAnnotatedSpan(oldPos, oldSegment));
	      oldPos += oldSegment.length;
	      oldSegment = oldSegment.next;
	    }

	    if (includeSuccInOldNodes) {
	      oldNodes.push(new OldAnnotatedSpan(oldPos, res.succ));
	    }

	    this.changeHandler_(oldNodes, newNodes);
	  };

	  AnnotationList.prototype.getAffectedNodes_ = function(span) {
	    // We want to find nodes 'start', 'end', 'beforeStart', 'pred', and 'succ' where:
	    //  - 'start' contains the first character in span.
	    //  - 'end' contains the last character in span.
	    //  - 'beforeStart' is the node before 'start'.
	    //  - 'beforePred' is the node before 'pred'.
	    //  - 'succ' contains the node after 'end' if span.end() was on a node boundary, else null.
	    //  - 'pred' contains the node before 'start' if span.pos was on a node boundary, else null.

	    var result = {};

	    var prevprev = null, prev = this.head_, current = prev.next, currentPos = 0;
	    while (current !== null && span.pos >= currentPos + current.length) {
	      currentPos += current.length;
	      prevprev = prev;
	      prev = current;
	      current = current.next;
	    }
	    if (current === null && !(span.length === 0 && span.pos === currentPos)) {
	      throw new Error('Span start exceeds the bounds of the AnnotationList.');
	    }

	    result.startPos = currentPos;
	    // Special case if span is empty and on the border of two nodes
	    if (span.length === 0 && span.pos === currentPos) {
	      result.start = null;
	    } else {
	      result.start = current;
	    }
	    result.beforeStart = prev;

	    if (currentPos === span.pos && currentPos > 0) {
	      result.pred = prev;
	      result.predPos = currentPos - prev.length;
	      result.beforePred = prevprev;
	    } else {
	      result.pred = null;
	    }

	    while (current !== null && span.end() > currentPos) {
	      currentPos += current.length;
	      prev = current;
	      current = current.next;
	    }
	    if (span.end() > currentPos) {
	      throw new Error('Span end exceeds the bounds of the AnnotationList.');
	    }

	    // Special case if span is empty and on the border of two nodes.
	    if (span.length === 0 && span.end() === currentPos) {
	      result.end = null;
	    } else {
	      result.end = prev;
	    }
	    result.succ = (currentPos === span.end()) ? current : null;

	    return result;
	  };

	  AnnotationList.prototype.mergeNodesWithSameAnnotations_ = function(list) {
	    if (!list) { return; }
	    var prev = null, curr = list;
	    while (curr) {
	      if (prev && prev.annotation.equals(curr.annotation)) {
	        prev.length += curr.length;
	        prev.next = curr.next;
	      } else {
	        prev = curr;
	      }
	      curr = curr.next;
	    }
	  };

	  AnnotationList.prototype.forEach = function(callback) {
	    var current = this.head_.next;
	    while (current !== null) {
	      callback(current.length, current.annotation, current.attachedObject);
	      current = current.next;
	    }
	  };

	  AnnotationList.prototype.getAnnotatedSpansForPos = function(pos) {
	    var currentPos = 0;
	    var current = this.head_.next, prev = null;
	    while (current !== null && currentPos + current.length <= pos) {
	      currentPos += current.length;
	      prev = current;
	      current = current.next;
	    }
	    if (current === null && currentPos !== pos) {
	      throw new Error('pos exceeds the bounds of the AnnotationList');
	    }

	    var res = [];
	    if (currentPos === pos && prev) {
	      res.push(new OldAnnotatedSpan(currentPos - prev.length, prev));
	    }
	    if (current) {
	      res.push(new OldAnnotatedSpan(currentPos, current));
	    }
	    return res;
	  };

	  AnnotationList.prototype.getAnnotatedSpansForSpan = function(span) {
	    if (span.length === 0) {
	      return [];
	    }
	    var oldSpans = [];
	    var res = this.getAffectedNodes_(span);
	    var currentPos = res.startPos, current = res.start;
	    while (current !== null && currentPos < span.end()) {
	      var start = Math.max(currentPos, span.pos), end = Math.min(currentPos + current.length, span.end());
	      var oldSpan = new Span(start, end - start);
	      oldSpan.annotation = current.annotation;
	      oldSpans.push(oldSpan);

	      currentPos += current.length;
	      current = current.next;
	    }
	    return oldSpans;
	  };

	  // For testing.
	  AnnotationList.prototype.count = function() {
	    var count = 0;
	    var current = this.head_.next, prev = null;
	    while(current !== null) {
	      if (prev) {
	        assert(!prev.annotation.equals(current.annotation));
	      }
	      prev = current;
	      current = current.next;
	      count++;
	    }
	    return count;
	  };

	  function Node(length, annotation) {
	    this.length = length;
	    this.annotation = annotation;
	    this.attachedObject = null;
	    this.next = null;
	  }

	  Node.prototype.clone = function() {
	    var node = new Node(this.spanLength, this.annotation);
	    node.next = this.next;
	    return node;
	  };

	  return AnnotationList;
	}());

	var firepad = firepad || { };
	firepad.Cursor = (function () {
	  'use strict';

	  // A cursor has a `position` and a `selectionEnd`. Both are zero-based indexes
	  // into the document. When nothing is selected, `selectionEnd` is equal to
	  // `position`. When there is a selection, `position` is always the side of the
	  // selection that would move if you pressed an arrow key.
	  function Cursor (position, selectionEnd) {
	    this.position = position;
	    this.selectionEnd = selectionEnd;
	  }

	  Cursor.fromJSON = function (obj) {
	    return new Cursor(obj.position, obj.selectionEnd);
	  };

	  Cursor.prototype.equals = function (other) {
	    return this.position === other.position &&
	      this.selectionEnd === other.selectionEnd;
	  };

	  // Return the more current cursor information.
	  Cursor.prototype.compose = function (other) {
	    return other;
	  };

	  // Update the cursor with respect to an operation.
	  Cursor.prototype.transform = function (other) {
	    function transformIndex (index) {
	      var newIndex = index;
	      var ops = other.ops;
	      for (var i = 0, l = other.ops.length; i < l; i++) {
	        if (ops[i].isRetain()) {
	          index -= ops[i].chars;
	        } else if (ops[i].isInsert()) {
	          newIndex += ops[i].text.length;
	        } else {
	          newIndex -= Math.min(index, ops[i].chars);
	          index -= ops[i].chars;
	        }
	        if (index < 0) { break; }
	      }
	      return newIndex;
	    }

	    var newPosition = transformIndex(this.position);
	    if (this.position === this.selectionEnd) {
	      return new Cursor(newPosition, newPosition);
	    }
	    return new Cursor(newPosition, transformIndex(this.selectionEnd));
	  };

	  return Cursor;

	}());


	var firepad = firepad || { };

	firepad.FirebaseAdapter = (function (global) {

	  if ("function" === 'function' && typeof Firebase !== 'function') {
	    Firebase = __webpack_require__(18);
	  }

	  var TextOperation = firepad.TextOperation;
	  var utils = firepad.utils;

	  // Save a checkpoint every 100 edits.
	  var CHECKPOINT_FREQUENCY = 100;

	  function FirebaseAdapter (ref, userId, userColor) {
	    this.ref_ = ref;
	    this.ready_ = false;
	    this.firebaseCallbacks_ = [];
	    this.zombie_ = false;

	    // We store the current document state as a TextOperation so we can write checkpoints to Firebase occasionally.
	    // TODO: Consider more efficient ways to do this. (composing text operations is ~linear in the length of the document).
	    this.document_ = new TextOperation();

	    // The next expected revision.
	    this.revision_ = 0;

	    // This is used for two purposes:
	    // 1) On initialization, we fill this with the latest checkpoint and any subsequent operations and then
	    //      process them all together.
	    // 2) If we ever receive revisions out-of-order (e.g. rev 5 before rev 4), we queue them here until it's time
	    //    for them to be handled. [this should never happen with well-behaved clients; but if it /does/ happen we want
	    //    to handle it gracefully.]
	    this.pendingReceivedRevisions_ = { };

	    var self = this;

	    if (userId) {
	      this.setUserId(userId);
	      this.setColor(userColor);

	      this.firebaseOn_(ref.root().child('.info/connected'), 'value', function(snapshot) {
	        if (snapshot.val() === true) {
	          self.initializeUserData_();
	        }
	      }, this);

	      // Once we're initialized, start tracking users' cursors.
	      this.on('ready', function() {
	        self.monitorCursors_();
	      });
	    } else {
	      this.userId_ = ref.push().key();
	    }

	    // Avoid triggering any events until our callers have had a chance to attach their listeners.
	    setTimeout(function() {
	      self.monitorHistory_();
	    }, 0);

	  }
	  utils.makeEventEmitter(FirebaseAdapter, ['ready', 'cursor', 'operation', 'ack', 'retry']);

	  FirebaseAdapter.prototype.dispose = function() {
	    var self = this;

	    if (!this.ready_) {
	      // TODO: this completes loading the text even though we're no longer interested in it.
	      this.on('ready', function() {
		self.dispose();
	      });
	      return;
	    }

	    this.removeFirebaseCallbacks_();

	    if (this.userRef_) {
	      this.userRef_.child('cursor').remove();
	      this.userRef_.child('color').remove();
	    }

	    this.ref_ = null;
	    this.document_ = null;
	    this.zombie_ = true;
	  };

	  FirebaseAdapter.prototype.setUserId = function(userId) {
	    if (this.userRef_) {
	      // Clean up existing data.  Avoid nuking another user's data
	      // (if a future user takes our old name).
	      this.userRef_.child('cursor').remove();
	      this.userRef_.child('cursor').onDisconnect().cancel();
	      this.userRef_.child('color').remove();
	      this.userRef_.child('color').onDisconnect().cancel();
	    }

	    this.userId_ = userId;
	    this.userRef_ = this.ref_.child('users').child(userId);

	    this.initializeUserData_();
	  };

	  FirebaseAdapter.prototype.isHistoryEmpty = function() {
	    assert(this.ready_, "Not ready yet.");
	    return this.revision_ === 0;
	  };

	  /*
	   * Send operation, retrying on connection failure. Takes an optional callback with signature:
	   * function(error, committed).
	   * An exception will be thrown on transaction failure, which should only happen on
	   * catastrophic failure like a security rule violation.
	   */
	  FirebaseAdapter.prototype.sendOperation = function (operation, callback) {
	    var self = this;

	    // If we're not ready yet, do nothing right now, and trigger a retry when we're ready.
	    if (!this.ready_) {
	      this.on('ready', function() {
	        self.trigger('retry');
	      });
	      return;
	    }

	    // Sanity check that this operation is valid.
	    assert(this.document_.targetLength === operation.baseLength, "sendOperation() called with invalid operation.");

	    // Convert revision into an id that will sort properly lexicographically.
	    var revisionId = revisionToId(this.revision_);

	    function doTransaction(revisionId, revisionData) {

	      self.ref_.child('history').child(revisionId).transaction(function(current) {
	        if (current === null) {
	          return revisionData;
	        }
	      }, function(error, committed, snapshot) {
	        if (error) {
	          if (error.message === 'disconnect') {
	            if (self.sent_ && self.sent_.id === revisionId) {
	              // We haven't seen our transaction succeed or fail.  Send it again.
	              setTimeout(function() {
	                doTransaction(revisionId, revisionData);
	              }, 0);
	            } else if (callback) {
	              callback(error, false);
	            }
	          } else {
	            utils.log('Transaction failure!', error);
	            throw error;
	          }
	        } else {
	          if (callback) callback(null, committed);
	        }
	      }, /*applyLocally=*/false);
	    }

	    this.sent_ = { id: revisionId, op: operation };
	    doTransaction(revisionId, { a: self.userId_, o: operation.toJSON(), t: Firebase.ServerValue.TIMESTAMP });
	  };

	  FirebaseAdapter.prototype.sendCursor = function (obj) {
	    this.userRef_.child('cursor').set(obj);
	    this.cursor_ = obj;
	  };

	  FirebaseAdapter.prototype.setColor = function(color) {
	    this.userRef_.child('color').set(color);
	    this.color_ = color;
	  };

	  FirebaseAdapter.prototype.getDocument = function() {
	    return this.document_;
	  };

	  FirebaseAdapter.prototype.registerCallbacks = function(callbacks) {
	    for (var eventType in callbacks) {
	      this.on(eventType, callbacks[eventType]);
	    }
	  };

	  FirebaseAdapter.prototype.initializeUserData_ = function() {
	    this.userRef_.child('cursor').onDisconnect().remove();
	    this.userRef_.child('color').onDisconnect().remove();

	    this.sendCursor(this.cursor_ || null);
	    this.setColor(this.color_ || null);
	  };

	  FirebaseAdapter.prototype.monitorCursors_ = function() {
	    var usersRef = this.ref_.child('users'), self = this;

	    function childChanged(childSnap) {
	      var userId = childSnap.key();
	      var userData = childSnap.val();
	      self.trigger('cursor', userId, userData.cursor, userData.color);
	    }

	    this.firebaseOn_(usersRef, 'child_added', childChanged);
	    this.firebaseOn_(usersRef, 'child_changed', childChanged);

	    this.firebaseOn_(usersRef, 'child_removed', function(childSnap) {
	      var userId = childSnap.key();
	      self.trigger('cursor', userId, null);
	    });
	  };

	  FirebaseAdapter.prototype.monitorHistory_ = function() {
	    var self = this;
	    // Get the latest checkpoint as a starting point so we don't have to re-play entire history.
	    this.ref_.child('checkpoint').once('value', function(s) {
	      if (self.zombie_) { return; } // just in case we were cleaned up before we got the checkpoint data.
	      var revisionId = s.child('id').val(),  op = s.child('o').val(), author = s.child('a').val();
	      if (op != null && revisionId != null && author !== null) {
	        self.pendingReceivedRevisions_[revisionId] = { o: op, a: author };
	        self.checkpointRevision_ = revisionFromId(revisionId);
	        self.monitorHistoryStartingAt_(self.checkpointRevision_ + 1);
	      } else {
	        self.checkpointRevision_ = 0;
	        self.monitorHistoryStartingAt_(self.checkpointRevision_);
	      }
	    });
	  };

	  FirebaseAdapter.prototype.monitorHistoryStartingAt_ = function(revision) {
	    var historyRef = this.ref_.child('history').startAt(null, revisionToId(revision));
	    var self = this;

	    setTimeout(function() {
	      self.firebaseOn_(historyRef, 'child_added', function(revisionSnapshot) {
	        var revisionId = revisionSnapshot.key();
	        self.pendingReceivedRevisions_[revisionId] = revisionSnapshot.val();
	        if (self.ready_) {
	          self.handlePendingReceivedRevisions_();
	        }
	      });

	      historyRef.once('value', function() {
	        self.handleInitialRevisions_();
	      });
	    }, 0);
	  };

	  FirebaseAdapter.prototype.handleInitialRevisions_ = function() {
	    assert(!this.ready_, "Should not be called multiple times.");

	    // Compose the checkpoint and all subsequent revisions into a single operation to apply at once.
	    this.revision_ = this.checkpointRevision_;
	    var revisionId = revisionToId(this.revision_), pending = this.pendingReceivedRevisions_;
	    while (pending[revisionId] != null) {
	      var revision = this.parseRevision_(pending[revisionId]);
	      if (!revision) {
	        // If a misbehaved client adds a bad operation, just ignore it.
	        utils.log('Invalid operation.', this.ref_.toString(), revisionId, pending[revisionId]);
	      } else {
	        this.document_ = this.document_.compose(revision.operation);
	      }

	      delete pending[revisionId];
	      this.revision_++;
	      revisionId = revisionToId(this.revision_);
	    }

	    this.trigger('operation', this.document_);

	    this.ready_ = true;
	    var self = this;
	    setTimeout(function() {
	      self.trigger('ready');
	    }, 0);
	  };

	  FirebaseAdapter.prototype.handlePendingReceivedRevisions_ = function() {
	    var pending = this.pendingReceivedRevisions_;
	    var revisionId = revisionToId(this.revision_);
	    var triggerRetry = false;
	    while (pending[revisionId] != null) {
	      this.revision_++;

	      var revision = this.parseRevision_(pending[revisionId]);
	      if (!revision) {
	        // If a misbehaved client adds a bad operation, just ignore it.
	        utils.log('Invalid operation.', this.ref_.toString(), revisionId, pending[revisionId]);
	      } else {
	        this.document_ = this.document_.compose(revision.operation);
	        if (this.sent_ && revisionId === this.sent_.id) {
	          // We have an outstanding change at this revision id.
	          if (this.sent_.op.equals(revision.operation) && revision.author === this.userId_) {
	            // This is our change; it succeeded.
	            if (this.revision_ % CHECKPOINT_FREQUENCY === 0) {
	              this.saveCheckpoint_();
	            }
	            this.sent_ = null;
	            this.trigger('ack');
	          } else {
	            // our op failed.  Trigger a retry after we're done catching up on any incoming ops.
	            triggerRetry = true;
	            this.trigger('operation', revision.operation);
	          }
	        } else {
	          this.trigger('operation', revision.operation);
	        }
	      }
	      delete pending[revisionId];

	      revisionId = revisionToId(this.revision_);
	    }

	    if (triggerRetry) {
	      this.sent_ = null;
	      this.trigger('retry');
	    }
	  };

	  FirebaseAdapter.prototype.parseRevision_ = function(data) {
	    // We could do some of this validation via security rules.  But it's nice to be robust, just in case.
	    if (typeof data !== 'object') { return null; }
	    if (typeof data.a !== 'string' || typeof data.o !== 'object') { return null; }
	    var op = null;
	    try {
	      op = TextOperation.fromJSON(data.o);
	    }
	    catch (e) {
	      return null;
	    }

	    if (op.baseLength !== this.document_.targetLength) {
	      return null;
	    }
	    return { author: data.a, operation: op }
	  };

	  FirebaseAdapter.prototype.saveCheckpoint_ = function() {
	    this.ref_.child('checkpoint').set({
	      a: this.userId_,
	      o: this.document_.toJSON(),
	      id: revisionToId(this.revision_ - 1) // use the id for the revision we just wrote.
	    });
	  };

	  FirebaseAdapter.prototype.firebaseOn_ = function(ref, eventType, callback, context) {
	    this.firebaseCallbacks_.push({ref: ref, eventType: eventType, callback: callback, context: context });
	    ref.on(eventType, callback, context);
	    return callback;
	  };

	  FirebaseAdapter.prototype.firebaseOff_ = function(ref, eventType, callback, context) {
	    ref.off(eventType, callback, context);
	    for(var i = 0; i < this.firebaseCallbacks_.length; i++) {
	      var l = this.firebaseCallbacks_[i];
	      if (l.ref === ref && l.eventType === eventType && l.callback === callback && l.context === context) {
	        this.firebaseCallbacks_.splice(i, 1);
	        break;
	      }
	    }
	  };

	  FirebaseAdapter.prototype.removeFirebaseCallbacks_ = function() {
	    for(var i = 0; i < this.firebaseCallbacks_.length; i++) {
	      var l = this.firebaseCallbacks_[i];
	      l.ref.off(l.eventType, l.callback, l.context);
	    }
	    this.firebaseCallbacks_ = [];
	  };

	  // Throws an error if the first argument is falsy. Useful for debugging.
	  function assert (b, msg) {
	    if (!b) {
	      throw new Error(msg || "assertion error");
	    }
	  }

	  // Based off ideas from http://www.zanopha.com/docs/elen.pdf
	  var characters = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
	  function revisionToId(revision) {
	    if (revision === 0) {
	      return 'A0';
	    }

	    var str = '';
	    while (revision > 0) {
	      var digit = (revision % characters.length);
	      str = characters[digit] + str;
	      revision -= digit;
	      revision /= characters.length;
	    }

	    // Prefix with length (starting at 'A' for length 1) to ensure the id's sort lexicographically.
	    var prefix = characters[str.length + 9];
	    return prefix + str;
	  }

	  function revisionFromId(revisionId) {
	    assert (revisionId.length > 0 && revisionId[0] === characters[revisionId.length + 8]);
	    var revision = 0;
	    for(var i = 1; i < revisionId.length; i++) {
	      revision *= characters.length;
	      revision += characters.indexOf(revisionId[i]);
	    }
	    return revision;
	  }

	  return FirebaseAdapter;
	}());

	var firepad = firepad || { };

	firepad.RichTextToolbar = (function(global) {
	  var utils = firepad.utils;

	  function RichTextToolbar(imageInsertionUI) {
	    this.imageInsertionUI = imageInsertionUI;
	    this.element_ = this.makeElement_();
	  }

	  utils.makeEventEmitter(RichTextToolbar, ['bold', 'italic', 'underline', 'strike', 'font', 'font-size', 'color',
	    'left', 'center', 'right', 'unordered-list', 'ordered-list', 'todo-list', 'indent-increase', 'indent-decrease',
	                                           'undo', 'redo', 'insert-image']);

	  RichTextToolbar.prototype.element = function() { return this.element_; };

	  RichTextToolbar.prototype.makeButton_ = function(eventName, iconName) {
	    var self = this;
	    iconName = iconName || eventName;
	    var btn = utils.elt('a', [utils.elt('span', '', { 'class': 'firepad-tb-' + iconName } )], { 'class': 'firepad-btn' });
	    utils.on(btn, 'click', utils.stopEventAnd(function() { self.trigger(eventName); }));
	    return btn;
	  }

	  RichTextToolbar.prototype.makeElement_ = function() {
	    var self = this;

	    var font = this.makeFontDropdown_();
	    var fontSize = this.makeFontSizeDropdown_();
	    var color = this.makeColorDropdown_();

	    var toolbarOptions = [
	      utils.elt('div', [font], { 'class': 'firepad-btn-group'}),
	      utils.elt('div', [fontSize], { 'class': 'firepad-btn-group'}),
	      utils.elt('div', [color], { 'class': 'firepad-btn-group'}),
	      utils.elt('div', [self.makeButton_('bold'), self.makeButton_('italic'), self.makeButton_('underline'), self.makeButton_('strike', 'strikethrough')], { 'class': 'firepad-btn-group'}),
	      utils.elt('div', [self.makeButton_('unordered-list', 'list-2'), self.makeButton_('ordered-list', 'numbered-list'), self.makeButton_('todo-list', 'list')], { 'class': 'firepad-btn-group'}),
	      utils.elt('div', [self.makeButton_('indent-decrease'), self.makeButton_('indent-increase')], { 'class': 'firepad-btn-group'}),
	      utils.elt('div', [self.makeButton_('left', 'paragraph-left'), self.makeButton_('center', 'paragraph-center'), self.makeButton_('right', 'paragraph-right')], { 'class': 'firepad-btn-group'}),
	      utils.elt('div', [self.makeButton_('undo'), self.makeButton_('redo')], { 'class': 'firepad-btn-group'})
	    ];

	    if (self.imageInsertionUI) {
	      toolbarOptions.push(utils.elt('div', [self.makeButton_('insert-image')], { 'class': 'firepad-btn-group' }));
	    }

	    var toolbarWrapper = utils.elt('div', toolbarOptions, { 'class': 'firepad-toolbar-wrapper' });
	    var toolbar = utils.elt('div', null, { 'class': 'firepad-toolbar' });
	    toolbar.appendChild(toolbarWrapper)

	    return toolbar;
	  };

	  RichTextToolbar.prototype.makeFontDropdown_ = function() {
	    // NOTE: There must be matching .css styles in firepad.css.
	    var fonts = ['Arial', 'Comic Sans MS', 'Courier New', 'Impact', 'Times New Roman', 'Verdana'];

	    var items = [];
	    for(var i = 0; i < fonts.length; i++) {
	      var content = utils.elt('span', fonts[i]);
	      content.setAttribute('style', 'font-family:' + fonts[i]);
	      items.push({ content: content, value: fonts[i] });
	    }
	    return this.makeDropdown_('Font', 'font', items);
	  };

	  RichTextToolbar.prototype.makeFontSizeDropdown_ = function() {
	    // NOTE: There must be matching .css styles in firepad.css.
	    var sizes = [9, 10, 12, 14, 18, 24, 32, 42];

	    var items = [];
	    for(var i = 0; i < sizes.length; i++) {
	      var content = utils.elt('span', sizes[i].toString());
	      content.setAttribute('style', 'font-size:' + sizes[i] + 'px; line-height:' + (sizes[i]-6) + 'px;');
	      items.push({ content: content, value: sizes[i] });
	    }
	    return this.makeDropdown_('Size', 'font-size', items, 'px');
	  };

	  RichTextToolbar.prototype.makeColorDropdown_ = function() {
	    var colors = ['black', 'red', 'green', 'blue', 'yellow', 'cyan', 'magenta', 'grey'];

	    var items = [];
	    for(var i = 0; i < colors.length; i++) {
	      var content = utils.elt('div');
	      content.className = 'firepad-color-dropdown-item';
	      content.setAttribute('style', 'background-color:' + colors[i]);
	      items.push({ content: content, value: colors[i] });
	    }
	    return this.makeDropdown_('Color', 'color', items);
	  };

	  RichTextToolbar.prototype.makeDropdown_ = function(title, eventName, items, value_suffix) {
	    value_suffix = value_suffix || "";
	    var self = this;
	    var button = utils.elt('a', title + ' \u25be', { 'class': 'firepad-btn firepad-dropdown' });
	    var list = utils.elt('ul', [ ], { 'class': 'firepad-dropdown-menu' });
	    button.appendChild(list);

	    var isShown = false;
	    function showDropdown() {
	      if (!isShown) {
	        list.style.display = 'block';
	        utils.on(document, 'click', hideDropdown, /*capture=*/true);
	        isShown = true;
	      }
	    }

	    var justDismissed = false;
	    function hideDropdown() {
	      if (isShown) {
	        list.style.display = '';
	        utils.off(document, 'click', hideDropdown, /*capture=*/true);
	        isShown = false;
	      }
	      // HACK so we can avoid re-showing the dropdown if you click on the dropdown header to dismiss it.
	      justDismissed = true;
	      setTimeout(function() { justDismissed = false; }, 0);
	    }

	    function addItem(content, value) {
	      if (typeof content !== 'object') {
	        content = document.createTextNode(String(content));
	      }
	      var element = utils.elt('a', [content]);

	      utils.on(element, 'click', utils.stopEventAnd(function() {
	        hideDropdown();
	        self.trigger(eventName, value + value_suffix);
	      }));

	      list.appendChild(element);
	    }

	    for(var i = 0; i < items.length; i++) {
	      var content = items[i].content, value = items[i].value;
	      addItem(content, value);
	    }

	    utils.on(button, 'click', utils.stopEventAnd(function() {
	      if (!justDismissed) {
	        showDropdown();
	      }
	    }));

	    return button;
	  };

	  return RichTextToolbar;
	})();

	var firepad = firepad || { };
	firepad.WrappedOperation = (function (global) {
	  'use strict';

	  // A WrappedOperation contains an operation and corresponing metadata.
	  function WrappedOperation (operation, meta) {
	    this.wrapped = operation;
	    this.meta    = meta;
	  }

	  WrappedOperation.prototype.apply = function () {
	    return this.wrapped.apply.apply(this.wrapped, arguments);
	  };

	  WrappedOperation.prototype.invert = function () {
	    var meta = this.meta;
	    return new WrappedOperation(
	      this.wrapped.invert.apply(this.wrapped, arguments),
	      meta && typeof meta === 'object' && typeof meta.invert === 'function' ?
	        meta.invert.apply(meta, arguments) : meta
	    );
	  };

	  // Copy all properties from source to target.
	  function copy (source, target) {
	    for (var key in source) {
	      if (source.hasOwnProperty(key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  function composeMeta (a, b) {
	    if (a && typeof a === 'object') {
	      if (typeof a.compose === 'function') { return a.compose(b); }
	      var meta = {};
	      copy(a, meta);
	      copy(b, meta);
	      return meta;
	    }
	    return b;
	  }

	  WrappedOperation.prototype.compose = function (other) {
	    return new WrappedOperation(
	      this.wrapped.compose(other.wrapped),
	      composeMeta(this.meta, other.meta)
	    );
	  };

	  function transformMeta (meta, operation) {
	    if (meta && typeof meta === 'object') {
	      if (typeof meta.transform === 'function') {
	        return meta.transform(operation);
	      }
	    }
	    return meta;
	  }

	  WrappedOperation.transform = function (a, b) {
	    var transform = a.wrapped.constructor.transform;
	    var pair = transform(a.wrapped, b.wrapped);
	    return [
	      new WrappedOperation(pair[0], transformMeta(a.meta, b.wrapped)),
	      new WrappedOperation(pair[1], transformMeta(b.meta, a.wrapped))
	    ];
	  };

	  return WrappedOperation;

	}());

	var firepad = firepad || { };

	firepad.UndoManager = (function () {
	  'use strict';

	  var NORMAL_STATE = 'normal';
	  var UNDOING_STATE = 'undoing';
	  var REDOING_STATE = 'redoing';

	  // Create a new UndoManager with an optional maximum history size.
	  function UndoManager (maxItems) {
	    this.maxItems  = maxItems || 50;
	    this.state = NORMAL_STATE;
	    this.dontCompose = false;
	    this.undoStack = [];
	    this.redoStack = [];
	  }

	  // Add an operation to the undo or redo stack, depending on the current state
	  // of the UndoManager. The operation added must be the inverse of the last
	  // edit. When `compose` is true, compose the operation with the last operation
	  // unless the last operation was alread pushed on the redo stack or was hidden
	  // by a newer operation on the undo stack.
	  UndoManager.prototype.add = function (operation, compose) {
	    if (this.state === UNDOING_STATE) {
	      this.redoStack.push(operation);
	      this.dontCompose = true;
	    } else if (this.state === REDOING_STATE) {
	      this.undoStack.push(operation);
	      this.dontCompose = true;
	    } else {
	      var undoStack = this.undoStack;
	      if (!this.dontCompose && compose && undoStack.length > 0) {
	        undoStack.push(operation.compose(undoStack.pop()));
	      } else {
	        undoStack.push(operation);
	        if (undoStack.length > this.maxItems) { undoStack.shift(); }
	      }
	      this.dontCompose = false;
	      this.redoStack = [];
	    }
	  };

	  function transformStack (stack, operation) {
	    var newStack = [];
	    var Operation = operation.constructor;
	    for (var i = stack.length - 1; i >= 0; i--) {
	      var pair = Operation.transform(stack[i], operation);
	      if (typeof pair[0].isNoop !== 'function' || !pair[0].isNoop()) {
	        newStack.push(pair[0]);
	      }
	      operation = pair[1];
	    }
	    return newStack.reverse();
	  }

	  // Transform the undo and redo stacks against a operation by another client.
	  UndoManager.prototype.transform = function (operation) {
	    this.undoStack = transformStack(this.undoStack, operation);
	    this.redoStack = transformStack(this.redoStack, operation);
	  };

	  // Perform an undo by calling a function with the latest operation on the undo
	  // stack. The function is expected to call the `add` method with the inverse
	  // of the operation, which pushes the inverse on the redo stack.
	  UndoManager.prototype.performUndo = function (fn) {
	    this.state = UNDOING_STATE;
	    if (this.undoStack.length === 0) { throw new Error("undo not possible"); }
	    fn(this.undoStack.pop());
	    this.state = NORMAL_STATE;
	  };

	  // The inverse of `performUndo`.
	  UndoManager.prototype.performRedo = function (fn) {
	    this.state = REDOING_STATE;
	    if (this.redoStack.length === 0) { throw new Error("redo not possible"); }
	    fn(this.redoStack.pop());
	    this.state = NORMAL_STATE;
	  };

	  // Is the undo stack not empty?
	  UndoManager.prototype.canUndo = function () {
	    return this.undoStack.length !== 0;
	  };

	  // Is the redo stack not empty?
	  UndoManager.prototype.canRedo = function () {
	    return this.redoStack.length !== 0;
	  };

	  // Whether the UndoManager is currently performing an undo.
	  UndoManager.prototype.isUndoing = function () {
	    return this.state === UNDOING_STATE;
	  };

	  // Whether the UndoManager is currently performing a redo.
	  UndoManager.prototype.isRedoing = function () {
	    return this.state === REDOING_STATE;
	  };

	  return UndoManager;

	}());

	var firepad = firepad || { };
	firepad.Client = (function () {
	  'use strict';

	  // Client constructor
	  function Client () {
	    this.state = synchronized_; // start state
	  }

	  Client.prototype.setState = function (state) {
	    this.state = state;
	  };

	  // Call this method when the user changes the document.
	  Client.prototype.applyClient = function (operation) {
	    this.setState(this.state.applyClient(this, operation));
	  };

	  // Call this method with a new operation from the server
	  Client.prototype.applyServer = function (operation) {
	    this.setState(this.state.applyServer(this, operation));
	  };

	  Client.prototype.serverAck = function () {
	    this.setState(this.state.serverAck(this));
	  };

	  Client.prototype.serverRetry = function() {
	    this.setState(this.state.serverRetry(this));
	  };

	  // Override this method.
	  Client.prototype.sendOperation = function (operation) {
	    throw new Error("sendOperation must be defined in child class");
	  };

	  // Override this method.
	  Client.prototype.applyOperation = function (operation) {
	    throw new Error("applyOperation must be defined in child class");
	  };


	  // In the 'Synchronized' state, there is no pending operation that the client
	  // has sent to the server.
	  function Synchronized () {}
	  Client.Synchronized = Synchronized;

	  Synchronized.prototype.applyClient = function (client, operation) {
	    // When the user makes an edit, send the operation to the server and
	    // switch to the 'AwaitingConfirm' state
	    client.sendOperation(operation);
	    return new AwaitingConfirm(operation);
	  };

	  Synchronized.prototype.applyServer = function (client, operation) {
	    // When we receive a new operation from the server, the operation can be
	    // simply applied to the current document
	    client.applyOperation(operation);
	    return this;
	  };

	  Synchronized.prototype.serverAck = function (client) {
	    throw new Error("There is no pending operation.");
	  };

	  Synchronized.prototype.serverRetry = function(client) {
	    throw new Error("There is no pending operation.");
	  };

	  // Singleton
	  var synchronized_ = new Synchronized();


	  // In the 'AwaitingConfirm' state, there's one operation the client has sent
	  // to the server and is still waiting for an acknowledgement.
	  function AwaitingConfirm (outstanding) {
	    // Save the pending operation
	    this.outstanding = outstanding;
	  }
	  Client.AwaitingConfirm = AwaitingConfirm;

	  AwaitingConfirm.prototype.applyClient = function (client, operation) {
	    // When the user makes an edit, don't send the operation immediately,
	    // instead switch to 'AwaitingWithBuffer' state
	    return new AwaitingWithBuffer(this.outstanding, operation);
	  };

	  AwaitingConfirm.prototype.applyServer = function (client, operation) {
	    // This is another client's operation. Visualization:
	    //
	    //                   /\
	    // this.outstanding /  \ operation
	    //                 /    \
	    //                 \    /
	    //  pair[1]         \  / pair[0] (new outstanding)
	    //  (can be applied  \/
	    //  to the client's
	    //  current document)
	    var pair = operation.constructor.transform(this.outstanding, operation);
	    client.applyOperation(pair[1]);
	    return new AwaitingConfirm(pair[0]);
	  };

	  AwaitingConfirm.prototype.serverAck = function (client) {
	    // The client's operation has been acknowledged
	    // => switch to synchronized state
	    return synchronized_;
	  };

	  AwaitingConfirm.prototype.serverRetry = function (client) {
	    client.sendOperation(this.outstanding);
	    return this;
	  };

	  // In the 'AwaitingWithBuffer' state, the client is waiting for an operation
	  // to be acknowledged by the server while buffering the edits the user makes
	  function AwaitingWithBuffer (outstanding, buffer) {
	    // Save the pending operation and the user's edits since then
	    this.outstanding = outstanding;
	    this.buffer = buffer;
	  }
	  Client.AwaitingWithBuffer = AwaitingWithBuffer;

	  AwaitingWithBuffer.prototype.applyClient = function (client, operation) {
	    // Compose the user's changes onto the buffer
	    var newBuffer = this.buffer.compose(operation);
	    return new AwaitingWithBuffer(this.outstanding, newBuffer);
	  };

	  AwaitingWithBuffer.prototype.applyServer = function (client, operation) {
	    // Operation comes from another client
	    //
	    //                       /\
	    //     this.outstanding /  \ operation
	    //                     /    \
	    //                    /\    /
	    //       this.buffer /  \* / pair1[0] (new outstanding)
	    //                  /    \/
	    //                  \    /
	    //          pair2[1] \  / pair2[0] (new buffer)
	    // the transformed    \/
	    // operation -- can
	    // be applied to the
	    // client's current
	    // document
	    //
	    // * pair1[1]
	    var transform = operation.constructor.transform;
	    var pair1 = transform(this.outstanding, operation);
	    var pair2 = transform(this.buffer, pair1[1]);
	    client.applyOperation(pair2[1]);
	    return new AwaitingWithBuffer(pair1[0], pair2[0]);
	  };

	  AwaitingWithBuffer.prototype.serverRetry = function (client) {
	    // Merge with our buffer and resend.
	    var outstanding = this.outstanding.compose(this.buffer);
	    client.sendOperation(outstanding);
	    return new AwaitingConfirm(outstanding);
	  };

	  AwaitingWithBuffer.prototype.serverAck = function (client) {
	    // The pending operation has been acknowledged
	    // => send buffer
	    client.sendOperation(this.buffer);
	    return new AwaitingConfirm(this.buffer);
	  };

	  return Client;

	}());

	var firepad = firepad || { };

	firepad.EditorClient = (function () {
	  'use strict';

	  var Client = firepad.Client;
	  var Cursor = firepad.Cursor;
	  var UndoManager = firepad.UndoManager;
	  var WrappedOperation = firepad.WrappedOperation;

	  function SelfMeta (cursorBefore, cursorAfter) {
	    this.cursorBefore = cursorBefore;
	    this.cursorAfter  = cursorAfter;
	  }

	  SelfMeta.prototype.invert = function () {
	    return new SelfMeta(this.cursorAfter, this.cursorBefore);
	  };

	  SelfMeta.prototype.compose = function (other) {
	    return new SelfMeta(this.cursorBefore, other.cursorAfter);
	  };

	  SelfMeta.prototype.transform = function (operation) {
	    return new SelfMeta(
	      this.cursorBefore ? this.cursorBefore.transform(operation) : null,
	      this.cursorAfter ? this.cursorAfter.transform(operation) : null
	    );
	  };

	  function OtherClient (id, editorAdapter) {
	    this.id = id;
	    this.editorAdapter = editorAdapter;

	    this.li = document.createElement('li');
	  }

	  OtherClient.prototype.setColor = function (color) {
	    this.color = color;
	  };

	  OtherClient.prototype.updateCursor = function (cursor) {
	    this.removeCursor();
	    this.cursor = cursor;
	    this.mark = this.editorAdapter.setOtherCursor(
	      cursor,
	      this.color,
	      this.id
	    );
	  };

	  OtherClient.prototype.removeCursor = function () {
	    if (this.mark) { this.mark.clear(); }
	  };

	  function EditorClient (serverAdapter, editorAdapter) {
	    Client.call(this);
	    this.serverAdapter = serverAdapter;
	    this.editorAdapter = editorAdapter;
	    this.undoManager = new UndoManager();

	    this.clients = { };

	    var self = this;

	    this.editorAdapter.registerCallbacks({
	      change: function (operation, inverse) { self.onChange(operation, inverse); },
	      cursorActivity: function () { self.onCursorActivity(); },
	      blur: function () { self.onBlur(); },
	      focus: function () { self.onFocus(); }
	    });
	    this.editorAdapter.registerUndo(function () { self.undo(); });
	    this.editorAdapter.registerRedo(function () { self.redo(); });

	    this.serverAdapter.registerCallbacks({
	      ack: function () {
	        self.serverAck();
	        if (self.focused && self.state instanceof Client.Synchronized) {
	          self.updateCursor();
	          self.sendCursor(self.cursor);
	        }
	        self.emitStatus();
	      },
	      retry: function() { self.serverRetry(); },
	      operation: function (operation) {
	        self.applyServer(operation);
	      },
	      cursor: function (clientId, cursor, color) {
	        if (self.serverAdapter.userId_ === clientId ||
	            !(self.state instanceof Client.Synchronized)) {
	          return;
	        }
	        var client = self.getClientObject(clientId);
	        if (cursor) {
	          if (color) client.setColor(color);
	          client.updateCursor(Cursor.fromJSON(cursor));
	        } else {
	          client.removeCursor();
	        }
	      }
	    });
	  }

	  inherit(EditorClient, Client);

	  EditorClient.prototype.getClientObject = function (clientId) {
	    var client = this.clients[clientId];
	    if (client) { return client; }
	    return this.clients[clientId] = new OtherClient(
	      clientId,
	      this.editorAdapter
	    );
	  };

	  EditorClient.prototype.applyUnredo = function (operation) {
	    this.undoManager.add(this.editorAdapter.invertOperation(operation));
	    this.editorAdapter.applyOperation(operation.wrapped);
	    this.cursor = operation.meta.cursorAfter;
	    if (this.cursor)
	      this.editorAdapter.setCursor(this.cursor);
	    this.applyClient(operation.wrapped);
	  };

	  EditorClient.prototype.undo = function () {
	    var self = this;
	    if (!this.undoManager.canUndo()) { return; }
	    this.undoManager.performUndo(function (o) { self.applyUnredo(o); });
	  };

	  EditorClient.prototype.redo = function () {
	    var self = this;
	    if (!this.undoManager.canRedo()) { return; }
	    this.undoManager.performRedo(function (o) { self.applyUnredo(o); });
	  };

	  EditorClient.prototype.onChange = function (textOperation, inverse) {
	    var cursorBefore = this.cursor;
	    this.updateCursor();

	    var compose = this.undoManager.undoStack.length > 0 &&
	      inverse.shouldBeComposedWithInverted(last(this.undoManager.undoStack).wrapped);
	    var inverseMeta = new SelfMeta(this.cursor, cursorBefore);
	    this.undoManager.add(new WrappedOperation(inverse, inverseMeta), compose);
	    this.applyClient(textOperation);
	  };

	  EditorClient.prototype.updateCursor = function () {
	    this.cursor = this.editorAdapter.getCursor();
	  };

	  EditorClient.prototype.onCursorActivity = function () {
	    var oldCursor = this.cursor;
	    this.updateCursor();
	    if (!this.focused || oldCursor && this.cursor.equals(oldCursor)) { return; }
	    this.sendCursor(this.cursor);
	  };

	  EditorClient.prototype.onBlur = function () {
	    this.cursor = null;
	    this.sendCursor(null);
	    this.focused = false;
	  };

	  EditorClient.prototype.onFocus = function () {
	    this.focused = true;
	    this.onCursorActivity();
	  };

	  EditorClient.prototype.sendCursor = function (cursor) {
	    if (this.state instanceof Client.AwaitingWithBuffer) { return; }
	    this.serverAdapter.sendCursor(cursor);
	  };

	  EditorClient.prototype.sendOperation = function (operation) {
	    this.serverAdapter.sendOperation(operation);
	    this.emitStatus();
	  };

	  EditorClient.prototype.applyOperation = function (operation) {
	    this.editorAdapter.applyOperation(operation);
	    this.updateCursor();
	    this.undoManager.transform(new WrappedOperation(operation, null));
	  };

	  EditorClient.prototype.emitStatus = function() {
	    var self = this;
	    setTimeout(function() {
	      self.trigger('synced', self.state instanceof Client.Synchronized);
	    }, 0);
	  };

	  // Set Const.prototype.__proto__ to Super.prototype
	  function inherit (Const, Super) {
	    function F () {}
	    F.prototype = Super.prototype;
	    Const.prototype = new F();
	    Const.prototype.constructor = Const;
	  }

	  function last (arr) { return arr[arr.length - 1]; }

	  return EditorClient;
	}());

	firepad.utils.makeEventEmitter(firepad.EditorClient, ['synced']);

	var firepad,
	  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	  __slice = [].slice;

	if (typeof firepad === "undefined" || firepad === null) {
	  firepad = {};
	}

	firepad.ACEAdapter = (function() {
	  ACEAdapter.prototype.ignoreChanges = false;

	  function ACEAdapter(aceInstance) {
	    this.onCursorActivity = __bind(this.onCursorActivity, this);
	    this.onFocus = __bind(this.onFocus, this);
	    this.onBlur = __bind(this.onBlur, this);
	    this.onChange = __bind(this.onChange, this);
	    var _ref;
	    this.ace = aceInstance;
	    this.aceSession = this.ace.getSession();
	    this.aceDoc = this.aceSession.getDocument();
	    this.aceDoc.setNewLineMode('unix');
	    this.grabDocumentState();
	    this.ace.on('change', this.onChange);
	    this.ace.on('blur', this.onBlur);
	    this.ace.on('focus', this.onFocus);
	    this.aceSession.selection.on('changeCursor', this.onCursorActivity);
	    if (this.aceRange == null) {
	      this.aceRange = ((_ref = ace.require) != null ? _ref : __webpack_require__(71))("ace/range").Range;
	    }
	  }

	  ACEAdapter.prototype.grabDocumentState = function() {
	    this.lastDocLines = this.aceDoc.getAllLines();
	    return this.lastCursorRange = this.aceSession.selection.getRange();
	  };

	  ACEAdapter.prototype.detach = function() {
	    this.ace.removeListener('change', this.onChange);
	    this.ace.removeListener('blur', this.onBlur);
	    this.ace.removeListener('focus', this.onCursorActivity);
	    return this.aceSession.selection.removeListener('changeCursor', this.onCursorActivity);
	  };

	  ACEAdapter.prototype.onChange = function(change) {
	    var pair;
	    if (!this.ignoreChanges) {
	      pair = this.operationFromACEChange(change);
	      this.trigger.apply(this, ['change'].concat(__slice.call(pair)));
	      return this.grabDocumentState();
	    }
	  };

	  ACEAdapter.prototype.onBlur = function() {
	    if (this.ace.selection.isEmpty()) {
	      return this.trigger('blur');
	    }
	  };

	  ACEAdapter.prototype.onFocus = function() {
	    return this.trigger('focus');
	  };

	  ACEAdapter.prototype.onCursorActivity = function() {
	    var _this = this;
	    return setTimeout(function() {
	      return _this.trigger('cursorActivity');
	    }, 0);
	  };

	  ACEAdapter.prototype.operationFromACEChange = function(change) {
	    var action, delta, inverse, operation, restLength, start, text, _ref, _ref1;
	    delta = change.data;
	    if ((_ref = delta.action) === "insertLines" || _ref === "removeLines") {
	      text = delta.lines.join("\n") + "\n";
	      action = delta.action.replace("Lines", "");
	    } else {
	      text = delta.text.replace(this.aceDoc.getNewLineCharacter(), '\n');
	      action = delta.action.replace("Text", "");
	    }
	    start = this.indexFromPos(delta.range.start);
	    restLength = this.lastDocLines.join('\n').length - start;
	    if (action === "remove") {
	      restLength -= text.length;
	    }
	    operation = new firepad.TextOperation().retain(start).insert(text).retain(restLength);
	    inverse = new firepad.TextOperation().retain(start)["delete"](text).retain(restLength);
	    if (action === 'remove') {
	      _ref1 = [inverse, operation], operation = _ref1[0], inverse = _ref1[1];
	    }
	    return [operation, inverse];
	  };

	  ACEAdapter.prototype.applyOperationToACE = function(operation) {
	    var from, index, op, range, to, _i, _len, _ref;
	    index = 0;
	    _ref = operation.ops;
	    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	      op = _ref[_i];
	      if (op.isRetain()) {
	        index += op.chars;
	      } else if (op.isInsert()) {
	        this.aceDoc.insert(this.posFromIndex(index), op.text);
	        index += op.text.length;
	      } else if (op.isDelete()) {
	        from = this.posFromIndex(index);
	        to = this.posFromIndex(index + op.chars);
	        range = this.aceRange.fromPoints(from, to);
	        this.aceDoc.remove(range);
	      }
	    }
	    return this.grabDocumentState();
	  };

	  ACEAdapter.prototype.posFromIndex = function(index) {
	    var line, row, _i, _len, _ref;
	    _ref = this.aceDoc.$lines;
	    for (row = _i = 0, _len = _ref.length; _i < _len; row = ++_i) {
	      line = _ref[row];
	      if (index <= line.length) {
	        break;
	      }
	      index -= line.length + 1;
	    }
	    return {
	      row: row,
	      column: index
	    };
	  };

	  ACEAdapter.prototype.indexFromPos = function(pos, lines) {
	    var i, index, _i, _ref;
	    if (lines == null) {
	      lines = this.lastDocLines;
	    }
	    index = 0;
	    for (i = _i = 0, _ref = pos.row; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
	      index += this.lastDocLines[i].length + 1;
	    }
	    return index += pos.column;
	  };

	  ACEAdapter.prototype.getValue = function() {
	    return this.aceDoc.getValue();
	  };

	  ACEAdapter.prototype.getCursor = function() {
	    var e, e2, end, start, _ref, _ref1;
	    try {
	      start = this.indexFromPos(this.aceSession.selection.getRange().start, this.aceDoc.$lines);
	      end = this.indexFromPos(this.aceSession.selection.getRange().end, this.aceDoc.$lines);
	    } catch (_error) {
	      e = _error;
	      try {
	        start = this.indexFromPos(this.lastCursorRange.start);
	        end = this.indexFromPos(this.lastCursorRange.end);
	      } catch (_error) {
	        e2 = _error;
	        console.log("Couldn't figure out the cursor range:", e2, "-- setting it to 0:0.");
	        _ref = [0, 0], start = _ref[0], end = _ref[1];
	      }
	    }
	    if (start > end) {
	      _ref1 = [end, start], start = _ref1[0], end = _ref1[1];
	    }
	    return new firepad.Cursor(start, end);
	  };

	  ACEAdapter.prototype.setCursor = function(cursor) {
	    var end, start, _ref;
	    start = this.posFromIndex(cursor.position);
	    end = this.posFromIndex(cursor.selectionEnd);
	    if (cursor.position > cursor.selectionEnd) {
	      _ref = [end, start], start = _ref[0], end = _ref[1];
	    }
	    return this.aceSession.selection.setSelectionRange(new this.aceRange(start.row, start.column, end.row, end.column));
	  };

	  ACEAdapter.prototype.setOtherCursor = function(cursor, color, clientId) {
	    var clazz, css, cursorRange, end, justCursor, self, start, _ref,
	      _this = this;
	    if (this.otherCursors == null) {
	      this.otherCursors = {};
	    }
	    cursorRange = this.otherCursors[clientId];
	    if (cursorRange) {
	      cursorRange.start.detach();
	      cursorRange.end.detach();
	      this.aceSession.removeMarker(cursorRange.id);
	    }
	    start = this.posFromIndex(cursor.position);
	    end = this.posFromIndex(cursor.selectionEnd);
	    if (cursor.selectionEnd < cursor.position) {
	      _ref = [end, start], start = _ref[0], end = _ref[1];
	    }
	    clazz = "other-client-selection-" + (color.replace('#', ''));
	    justCursor = cursor.position === cursor.selectionEnd;
	    if (justCursor) {
	      clazz = clazz.replace('selection', 'cursor');
	    }
	    css = "." + clazz + " {\n  position: absolute;\n  background-color: " + (justCursor ? 'transparent' : color) + ";\n  border-left: 2px solid " + color + ";\n}";
	    this.addStyleRule(css);
	    this.otherCursors[clientId] = cursorRange = new this.aceRange(start.row, start.column, end.row, end.column);
	    self = this;
	    cursorRange.clipRows = function() {
	      var range;
	      range = self.aceRange.prototype.clipRows.apply(this, arguments);
	      range.isEmpty = function() {
	        return false;
	      };
	      return range;
	    };
	    cursorRange.start = this.aceDoc.createAnchor(cursorRange.start);
	    cursorRange.end = this.aceDoc.createAnchor(cursorRange.end);
	    cursorRange.id = this.aceSession.addMarker(cursorRange, clazz, "text");
	    return {
	      clear: function() {
	        cursorRange.start.detach();
	        cursorRange.end.detach();
	        return _this.aceSession.removeMarker(cursorRange.id);
	      }
	    };
	  };

	  ACEAdapter.prototype.addStyleRule = function(css) {
	    var styleElement;
	    if (typeof document === "undefined" || document === null) {
	      return;
	    }
	    if (!this.addedStyleRules) {
	      this.addedStyleRules = {};
	      styleElement = document.createElement('style');
	      document.documentElement.getElementsByTagName('head')[0].appendChild(styleElement);
	      this.addedStyleSheet = styleElement.sheet;
	    }
	    if (this.addedStyleRules[css]) {
	      return;
	    }
	    this.addedStyleRules[css] = true;
	    return this.addedStyleSheet.insertRule(css, 0);
	  };

	  ACEAdapter.prototype.registerCallbacks = function(callbacks) {
	    this.callbacks = callbacks;
	  };

	  ACEAdapter.prototype.trigger = function() {
	    var args, event, _ref, _ref1;
	    event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	    return (_ref = this.callbacks) != null ? (_ref1 = _ref[event]) != null ? _ref1.apply(this, args) : void 0 : void 0;
	  };

	  ACEAdapter.prototype.applyOperation = function(operation) {
	    if (!operation.isNoop()) {
	      this.ignoreChanges = true;
	    }
	    this.applyOperationToACE(operation);
	    return this.ignoreChanges = false;
	  };

	  ACEAdapter.prototype.registerUndo = function(undoFn) {
	    return this.ace.undo = undoFn;
	  };

	  ACEAdapter.prototype.registerRedo = function(redoFn) {
	    return this.ace.redo = redoFn;
	  };

	  ACEAdapter.prototype.invertOperation = function(operation) {
	    return operation.invert(this.getValue());
	  };

	  return ACEAdapter;

	})();

	var firepad = firepad || { };

	firepad.AttributeConstants = {
	  BOLD: 'b',
	  ITALIC: 'i',
	  UNDERLINE: 'u',
	  STRIKE: 's',
	  FONT: 'f',
	  FONT_SIZE: 'fs',
	  COLOR: 'c',
	  BACKGROUND_COLOR: 'bc',
	  ENTITY_SENTINEL: 'ent',

	// Line Attributes
	  LINE_SENTINEL: 'l',
	  LINE_INDENT: 'li',
	  LINE_ALIGN: 'la',
	  LIST_TYPE: 'lt'
	};

	firepad.sentinelConstants = {
	  // A special character we insert at the beginning of lines so we can attach attributes to it to represent
	  // "line attributes."  E000 is from the unicode "private use" range.
	  LINE_SENTINEL_CHARACTER:   '\uE000',

	  // A special character used to represent any "entity" inserted into the document (e.g. an image).
	  ENTITY_SENTINEL_CHARACTER: '\uE001'
	};

	var firepad = firepad || { };

	firepad.EntityManager = (function () {
	  var utils = firepad.utils;

	  function EntityManager() {
	    this.entities_ = {};

	    var attrs = ['src', 'alt', 'width', 'height', 'style', 'class'];
	    this.register('img', {
	      render: function(info) {
	        utils.assert(info.src, "image entity should have 'src'!");
	        var attrs = ['src', 'alt', 'width', 'height', 'style', 'class'];
	        var html = '<img ';
	        for(var i = 0; i < attrs.length; i++) {
	          var attr = attrs[i];
	          if (attr in info) {
	            html += ' ' + attr + '="' + info[attr] + '"';
	          }
	        }
	        html += ">";
	        return html;
	      },
	      fromElement: function(element) {
	        var info = {};
	        for(var i = 0; i < attrs.length; i++) {
	          var attr = attrs[i];
	          if (element.hasAttribute(attr)) {
	            info[attr] = element.getAttribute(attr);
	          }
	        }
	        return info;
	      }
	    });
	  }

	  EntityManager.prototype.register = function(type, options) {
	    firepad.utils.assert(options.render, "Entity options should include a 'render' function!");
	    firepad.utils.assert(options.fromElement, "Entity options should include a 'fromElement' function!");
	    this.entities_[type] = options;
	  };

	  EntityManager.prototype.renderToElement = function(entity, entityHandle) {
	    return this.tryRenderToElement_(entity, 'render', entityHandle);
	  };

	  EntityManager.prototype.exportToElement = function(entity) {
	    // Turns out 'export' is a reserved keyword, so 'getHtml' is preferable.
	    var elt = this.tryRenderToElement_(entity, 'export') ||
	              this.tryRenderToElement_(entity, 'getHtml') ||
	              this.tryRenderToElement_(entity, 'render');
	    elt.setAttribute('data-firepad-entity', entity.type);
	    return elt;
	  };

	  /* Updates a DOM element to reflect the given entity.
	     If the entity doesn't support the update method, it is fully
	     re-rendered.
	  */
	  EntityManager.prototype.updateElement = function(entity, element) {
	    var type = entity.type;
	    var info = entity.info;
	    if (this.entities_[type] && typeof(this.entities_[type].update) != 'undefined') {
	      this.entities_[type].update(info, element);
	    }
	  };

	  EntityManager.prototype.fromElement = function(element) {
	    var type = element.getAttribute('data-firepad-entity');

	    // HACK.  This should be configurable through entity registration.
	    if (!type)
	      type = element.nodeName.toLowerCase();

	    if (type && this.entities_[type]) {
	      var info = this.entities_[type].fromElement(element);
	      return new firepad.Entity(type, info);
	    }
	  };

	  EntityManager.prototype.tryRenderToElement_ = function(entity, renderFn, entityHandle) {
	    var type = entity.type, info = entity.info;
	    if (this.entities_[type] && this.entities_[type][renderFn]) {
	      var windowDocument = firepad.document || (window && window.document);
	      var res = this.entities_[type][renderFn](info, entityHandle, windowDocument);
	      if (res) {
	        if (typeof res === 'string') {
	          var div = (firepad.document || document).createElement('div');
	          div.innerHTML = res;
	          return div.childNodes[0];
	        } else if (typeof res === 'object') {
	          firepad.utils.assert(typeof res.nodeType !== 'undefined', 'Error rendering ' + type + ' entity.  render() function' +
	              ' must return an html string or a DOM element.');
	          return res;
	        }
	      }
	    }
	  };

	  EntityManager.prototype.entitySupportsUpdate = function(entityType) {
	    return this.entities_[entityType] && this.entities_[entityType]['update'];
	  };

	  return EntityManager;
	})();

	var firepad = firepad || { };

	/**
	 * Object to represent an Entity.
	 */
	firepad.Entity = (function() {
	  var ATTR = firepad.AttributeConstants;
	  var SENTINEL = ATTR.ENTITY_SENTINEL;
	  var PREFIX = SENTINEL + '_';

	  function Entity(type, info) {
	    // Allow calling without new.
	    if (!(this instanceof Entity)) { return new Entity(type, info); }

	    this.type = type;
	    this.info = info || { };
	  }

	  Entity.prototype.toAttributes = function() {
	    var attrs = { };
	    attrs[SENTINEL] = this.type;

	    for(var attr in this.info) {
	      attrs[PREFIX + attr] = this.info[attr];
	    }

	    return attrs;
	  };

	  Entity.fromAttributes = function(attributes) {
	    var type = attributes[SENTINEL];
	    var info = { };
	    for(var attr in attributes) {
	      if (attr.indexOf(PREFIX) === 0) {
	        info[attr.substr(PREFIX.length)] = attributes[attr];
	      }
	    }

	    return new Entity(type, info);
	  };

	  return Entity;
	})();

	var firepad = firepad || { };

	firepad.RichTextCodeMirror = (function () {
	  var AnnotationList = firepad.AnnotationList;
	  var Span = firepad.Span;
	  var utils = firepad.utils;
	  var ATTR = firepad.AttributeConstants;
	  var RichTextClassPrefixDefault = 'cmrt-';
	  var RichTextOriginPrefix = 'cmrt-';

	  // These attributes will have styles generated dynamically in the page.
	  var DynamicStyleAttributes = {
	    'c' : 'color',
	    'bc': 'background-color',
	    'fs' : 'font-size',
	    'li' : function(indent) { return 'padding-left: ' + (indent * 40) + 'px'; }
	  };

	  // A cache of dynamically-created styles so we can re-use them.
	  var StyleCache_ = {};

	  function RichTextCodeMirror(codeMirror, entityManager, options) {
	    this.codeMirror = codeMirror;
	    this.options_ = options || { };
	    this.entityManager_ = entityManager;
	    this.currentAttributes_ = null;

	    var self = this;
	    this.annotationList_ = new AnnotationList(
	        function(oldNodes, newNodes) { self.onAnnotationsChanged_(oldNodes, newNodes); });

	    // Ensure annotationList is in sync with any existing codemirror contents.
	    this.initAnnotationList_();

	    bind(this, 'onCodeMirrorBeforeChange_');
	    bind(this, 'onCodeMirrorChange_');
	    bind(this, 'onCursorActivity_');

	    if (parseInt(CodeMirror.version) >= 4) {
	      this.codeMirror.on('changes', this.onCodeMirrorChange_);
	    } else {
	      this.codeMirror.on('change', this.onCodeMirrorChange_);
	    }
	    this.codeMirror.on('beforeChange', this.onCodeMirrorBeforeChange_);
	    this.codeMirror.on('cursorActivity', this.onCursorActivity_);

	    this.changeId_ = 0;
	    this.outstandingChanges_ = { };
	    this.dirtyLines_ = [];
	  }
	  utils.makeEventEmitter(RichTextCodeMirror, ['change', 'attributesChange', 'newLine']);


	  var LineSentinelCharacter   = firepad.sentinelConstants.LINE_SENTINEL_CHARACTER;
	  var EntitySentinelCharacter = firepad.sentinelConstants.ENTITY_SENTINEL_CHARACTER;

	  RichTextCodeMirror.prototype.detach = function() {
	    this.codeMirror.off('beforeChange', this.onCodeMirrorBeforeChange_);
	    this.codeMirror.off('change', this.onCodeMirrorChange_);
	    this.codeMirror.off('changes', this.onCodeMirrorChange_);
	    this.codeMirror.off('cursorActivity', this.onCursorActivity_);
	    this.clearAnnotations_();
	  };

	  RichTextCodeMirror.prototype.toggleAttribute = function(attribute, value) {
	    var trueValue = value || true;
	    if (this.emptySelection_()) {
	      var attrs = this.getCurrentAttributes_();
	      if (attrs[attribute] === trueValue) {
	        delete attrs[attribute];
	      } else {
	        attrs[attribute] = trueValue;
	      }
	      this.currentAttributes_ = attrs;
	    } else {
	      var attributes = this.getCurrentAttributes_();
	      var newValue = (attributes[attribute] !== trueValue) ? trueValue : false;
	      this.setAttribute(attribute, newValue);
	    }
	  };

	  RichTextCodeMirror.prototype.setAttribute = function(attribute, value) {
	    var cm = this.codeMirror;
	    if (this.emptySelection_()) {
	      var attrs = this.getCurrentAttributes_();
	      if (value === false) {
	        delete attrs[attribute];
	      } else {
	        attrs[attribute] = value;
	      }
	      this.currentAttributes_ = attrs;
	    } else {
	      this.updateTextAttributes(cm.indexFromPos(cm.getCursor('start')), cm.indexFromPos(cm.getCursor('end')),
	        function(attributes) {
	          if (value === false) {
	            delete attributes[attribute];
	          } else {
	            attributes[attribute] = value;
	          }
	        });

	      this.updateCurrentAttributes_();
	    }
	  };

	  RichTextCodeMirror.prototype.updateTextAttributes = function(start, end, updateFn, origin, doLineAttributes) {
	    var newChanges = [];
	    var pos = start, self = this;
	    this.annotationList_.updateSpan(new Span(start, end - start), function(annotation, length) {
	      var attributes = { };
	      for(var attr in annotation.attributes) {
	        attributes[attr] = annotation.attributes[attr];
	      }

	      // Don't modify if this is a line sentinel.
	      if (!attributes[ATTR.LINE_SENTINEL] || doLineAttributes)
	        updateFn(attributes);

	      // changedAttributes will be the attributes we changed, with their new values.
	      // changedAttributesInverse will be the attributes we changed, with their old values.
	      var changedAttributes = { }, changedAttributesInverse = { };
	      self.computeChangedAttributes_(annotation.attributes, attributes, changedAttributes, changedAttributesInverse);
	      if (!emptyAttributes(changedAttributes)) {
	        newChanges.push({ start: pos, end: pos + length, attributes: changedAttributes, attributesInverse: changedAttributesInverse, origin: origin });
	      }

	      pos += length;
	      return new RichTextAnnotation(attributes);
	    });

	    if (newChanges.length > 0) {
	      this.trigger('attributesChange', this, newChanges);
	    }
	  };

	  RichTextCodeMirror.prototype.computeChangedAttributes_ = function(oldAttrs, newAttrs, changed, inverseChanged) {
	    var attrs = { }, attr;
	    for(attr in oldAttrs) { attrs[attr] = true; }
	    for(attr in newAttrs) { attrs[attr] = true; }

	    for (attr in attrs) {
	      if (!(attr in newAttrs)) {
	        // it was removed.
	        changed[attr] = false;
	        inverseChanged[attr] = oldAttrs[attr];
	      } else if (!(attr in oldAttrs)) {
	        // it was added.
	        changed[attr] = newAttrs[attr];
	        inverseChanged[attr] = false;
	      } else if (oldAttrs[attr] !== newAttrs[attr]) {
	        // it was changed.
	        changed[attr] = newAttrs[attr];
	        inverseChanged[attr] = oldAttrs[attr];
	      }
	    }
	  };

	  RichTextCodeMirror.prototype.toggleLineAttribute = function(attribute, value) {
	    var currentAttributes = this.getCurrentLineAttributes_();
	    var newValue;
	    if (!(attribute in currentAttributes) || currentAttributes[attribute] !== value) {
	      newValue = value;
	    } else {
	      newValue = false;
	    }
	    this.setLineAttribute(attribute, newValue);
	  };

	  RichTextCodeMirror.prototype.setLineAttribute = function(attribute, value) {
	    this.updateLineAttributesForSelection(function(attributes) {
	      if (value === false) {
	        delete attributes[attribute];
	      } else {
	        attributes[attribute] = value;
	      }
	    });
	  };

	  RichTextCodeMirror.prototype.updateLineAttributesForSelection = function(updateFn) {
	    var cm = this.codeMirror;
	    var start = cm.getCursor('start'), end = cm.getCursor('end');
	    var startLine = start.line, endLine = end.line;
	    var endLineText = cm.getLine(endLine);
	    var endsAtBeginningOfLine = this.areLineSentinelCharacters_(endLineText.substr(0, end.ch));
	    if (endLine > startLine && endsAtBeginningOfLine) {
	      // If the selection ends at the beginning of a line, don't include that line.
	      endLine--;
	    }

	    this.updateLineAttributes(startLine, endLine, updateFn);
	  };

	  RichTextCodeMirror.prototype.updateLineAttributes = function(startLine, endLine, updateFn) {
	    // TODO: Batch this into a single operation somehow.
	    for(var line = startLine; line <= endLine; line++) {
	      var text = this.codeMirror.getLine(line);
	      var lineStartIndex = this.codeMirror.indexFromPos({line: line, ch: 0});
	      // Create line sentinel character if necessary.
	      if (text[0] !== LineSentinelCharacter) {
	        var attributes = { };
	        attributes[ATTR.LINE_SENTINEL] = true;
	        updateFn(attributes);
	        this.insertText(lineStartIndex, LineSentinelCharacter, attributes);
	      } else {
	        this.updateTextAttributes(lineStartIndex, lineStartIndex + 1, updateFn, /*origin=*/null, /*doLineAttributes=*/true);
	      }
	    }
	  };

	  RichTextCodeMirror.prototype.replaceText = function(start, end, text, attributes, origin) {
	    this.changeId_++;
	    var newOrigin = RichTextOriginPrefix + this.changeId_;
	    this.outstandingChanges_[newOrigin] = { origOrigin: origin, attributes: attributes };

	    var cm = this.codeMirror;
	    var from = cm.posFromIndex(start);
	    var to = typeof end === 'number' ? cm.posFromIndex(end) : null;
	    cm.replaceRange(text, from, to, newOrigin);
	  };

	  RichTextCodeMirror.prototype.insertText = function(index, text, attributes, origin) {
	    var cm = this.codeMirror;
	    var cursor = cm.getCursor();
	    var resetCursor = origin == 'RTCMADAPTER' && !cm.somethingSelected() && index == cm.indexFromPos(cursor);
	    this.replaceText(index, null, text, attributes, origin);
	    if (resetCursor) cm.setCursor(cursor);
	  };

	  RichTextCodeMirror.prototype.removeText = function(start, end, origin) {
	    var cm = this.codeMirror;
	    cm.replaceRange("", cm.posFromIndex(start), cm.posFromIndex(end), origin);
	  };

	  RichTextCodeMirror.prototype.insertEntityAtCursor = function(type, info, origin) {
	    var cm = this.codeMirror;
	    var index = cm.indexFromPos(cm.getCursor('head'));
	    this.insertEntityAt(index, type, info, origin);
	  };

	  RichTextCodeMirror.prototype.insertEntityAt = function(index, type, info, origin) {
	    var cm = this.codeMirror;
	    this.insertEntity_(index, new firepad.Entity(type, info), origin);
	  };

	  RichTextCodeMirror.prototype.insertEntity_ = function(index, entity, origin) {
	    this.replaceText(index, null, EntitySentinelCharacter, entity.toAttributes(), origin);
	  };

	  RichTextCodeMirror.prototype.getAttributeSpans = function(start, end) {
	    var spans = [];
	    var annotatedSpans = this.annotationList_.getAnnotatedSpansForSpan(new Span(start, end - start));
	    for(var i  = 0; i < annotatedSpans.length; i++) {
	      spans.push({ length: annotatedSpans[i].length, attributes: annotatedSpans[i].annotation.attributes });
	    }

	    return spans;
	  };

	  RichTextCodeMirror.prototype.end = function() {
	    var lastLine = this.codeMirror.lineCount() - 1;
	    return this.codeMirror.indexFromPos({line: lastLine, ch: this.codeMirror.getLine(lastLine).length});
	  };

	  RichTextCodeMirror.prototype.getRange = function(start, end) {
	    var from = this.codeMirror.posFromIndex(start), to = this.codeMirror.posFromIndex(end);
	    return this.codeMirror.getRange(from, to);
	  };

	  RichTextCodeMirror.prototype.initAnnotationList_ = function() {
	    // Insert empty annotation span for existing content.
	    var end = this.end();
	    if (end !== 0) {
	      this.annotationList_.insertAnnotatedSpan(new Span(0, end), new RichTextAnnotation());
	    }
	  };

	  /**
	   * Updates the nodes of an Annotation.
	   * @param {Array.<OldAnnotatedSpan>} oldNodes The list of nodes to replace.
	   * @param {Array.<NewAnnotatedSpan>} newNodes The new list of nodes.
	   */
	  RichTextCodeMirror.prototype.onAnnotationsChanged_ = function(oldNodes, newNodes) {
	    var marker;

	    var linesToReMark = { };

	    // Update any entities in-place that we can.  This will remove them from the oldNodes/newNodes lists
	    // so we don't remove and recreate them below.
	    this.tryToUpdateEntitiesInPlace(oldNodes, newNodes);

	    for(var i = 0; i < oldNodes.length; i++) {
	      var attributes = oldNodes[i].annotation.attributes;
	      if (ATTR.LINE_SENTINEL in attributes) {
	        linesToReMark[this.codeMirror.posFromIndex(oldNodes[i].pos).line] = true;
	      }
	      marker = oldNodes[i].getAttachedObject();
	      if (marker) {
	        marker.clear();
	      }
	    }

	    for (i = 0; i < newNodes.length; i++) {
	      var annotation = newNodes[i].annotation;
	      var forLine = (ATTR.LINE_SENTINEL in annotation.attributes);
	      var entity = (ATTR.ENTITY_SENTINEL in annotation.attributes);

	      var from = this.codeMirror.posFromIndex(newNodes[i].pos);
	      if (forLine) {
	        linesToReMark[from.line] = true;
	      } else if (entity) {
	        this.markEntity_(newNodes[i]);
	      } else {
	        var className = this.getClassNameForAttributes_(annotation.attributes);
	        if (className !== '') {
	          var to = this.codeMirror.posFromIndex(newNodes[i].pos + newNodes[i].length);
	          marker = this.codeMirror.markText(from, to, { className: className });
	          newNodes[i].attachObject(marker);
	        }
	      }
	    }

	    for(var line in linesToReMark) {
	      this.dirtyLines_.push(this.codeMirror.getLineHandle(Number(line)));
	      this.queueLineMarking_();
	    }
	  };

	  RichTextCodeMirror.prototype.tryToUpdateEntitiesInPlace = function(oldNodes, newNodes) {
	    // Loop over nodes in reverse order so we can easily splice them out as necessary.
	    var oldNodesLen = oldNodes.length;
	    while (oldNodesLen--) {
	      var oldNode = oldNodes[oldNodesLen];
	      var newNodesLen = newNodes.length;
	      while (newNodesLen--) {
	        var newNode = newNodes[newNodesLen];
	        if (oldNode.pos == newNode.pos &&
	            oldNode.length == newNode.length &&
	            oldNode.annotation.attributes['ent'] &&
	            oldNode.annotation.attributes['ent'] == newNode.annotation.attributes['ent']) {
	          var entityType = newNode.annotation.attributes['ent'];
	          if (this.entityManager_.entitySupportsUpdate(entityType)) {
	            // Update it in place and remove the change from oldNodes / newNodes so we don't process it below.
	            oldNodes.splice(oldNodesLen, 1);
	            newNodes.splice(newNodesLen, 1);
	            var marker = oldNode.getAttachedObject();
	            marker.update(newNode.annotation.attributes);
	            newNode.attachObject(marker);
	          }
	        }
	      }
	    }
	  };

	  RichTextCodeMirror.prototype.queueLineMarking_ = function() {
	    if (this.lineMarkTimeout_ != null) return;
	    var self = this;

	    this.lineMarkTimeout_ = setTimeout(function() {
	      self.lineMarkTimeout_ = null;
	      var dirtyLineNumbers = [];
	      for(var i = 0; i < self.dirtyLines_.length; i++) {
	        var lineNum = self.codeMirror.getLineNumber(self.dirtyLines_[i]);
	        dirtyLineNumbers.push(Number(lineNum));
	      }
	      self.dirtyLines_ = [];

	      dirtyLineNumbers.sort(function(a, b) { return a - b; });
	      var lastLineMarked = -1;
	      for(i = 0; i < dirtyLineNumbers.length; i++) {
	        var lineNumber = dirtyLineNumbers[i];
	        if (lineNumber > lastLineMarked) {
	          lastLineMarked = self.markLineSentinelCharactersForChangedLines_(lineNumber, lineNumber);
	        }
	      }
	    }, 0);
	  };

	  RichTextCodeMirror.prototype.addStyleWithCSS_ = function(css) {
	    var head = document.getElementsByTagName('head')[0],
	        style = document.createElement('style');

	    style.type = 'text/css';
	    if (style.styleSheet){
	      style.styleSheet.cssText = css;
	    } else {
	      style.appendChild(document.createTextNode(css));
	    }

	    head.appendChild(style);
	  };

	  RichTextCodeMirror.prototype.getClassNameForAttributes_ = function(attributes) {
	    var globalClassName = '';
	    for (var attr in attributes) {
	      var val = attributes[attr];
	      if (attr === ATTR.LINE_SENTINEL) {
	        firepad.utils.assert(val === true, "LINE_SENTINEL attribute should be true if it exists.");
	      } else {
	        var className = (this.options_['cssPrefix'] || RichTextClassPrefixDefault) + attr;
	        if (val !== true) {
	          // Append "px" to font size if it's missing.
	          // Probably could be removed now as parseHtml automatically adds px when required
	          if (attr === ATTR.FONT_SIZE && typeof val !== "string") {
	            val = val + "px";
	          }

	          var classVal = val.toString().toLowerCase().replace(/[^a-z0-9-_]/g, '-');
	          className += '-' + classVal;
	          if (DynamicStyleAttributes[attr]) {
	            if (!StyleCache_[attr]) StyleCache_[attr] = {};
	            if (!StyleCache_[attr][classVal]) {
	              StyleCache_[attr][classVal] = true;
	              var dynStyle = DynamicStyleAttributes[attr];
	              var css = (typeof dynStyle === 'function') ?
	                  dynStyle(val) :
	                  dynStyle + ": " + val;

	              var selector = (attr == ATTR.LINE_INDENT) ?
	                  'pre.' + className :
	                  '.' + className;

	              this.addStyleWithCSS_(selector + ' { ' + css + ' }');
	            }
	          }
	        }
	        globalClassName = globalClassName + ' ' + className;
	      }
	    }
	    return globalClassName;
	  };

	  RichTextCodeMirror.prototype.markEntity_ = function(annotationNode) {
	    var attributes = annotationNode.annotation.attributes;
	    var entity = firepad.Entity.fromAttributes(attributes);
	    var cm = this.codeMirror;
	    var self = this;

	    var markers = [];
	    for(var i = 0; i < annotationNode.length; i++) {
	      var from = cm.posFromIndex(annotationNode.pos + i);
	      var to = cm.posFromIndex(annotationNode.pos + i + 1);

	      var options = { collapsed: true, atomic: true, inclusiveLeft: false, inclusiveRight: false };

	      var entityHandle = this.createEntityHandle_(entity, annotationNode.pos);

	      var element = this.entityManager_.renderToElement(entity, entityHandle);
	      if (element) {
	        options.replacedWith = element;
	      }
	      var marker = cm.markText(from, to, options);
	      markers.push(marker);
	      entityHandle.setMarker(marker);
	    }

	    annotationNode.attachObject({
	      clear: function() {
	        for(var i = 0; i < markers.length; i++) {
	          markers[i].clear();
	        }
	      },

	      /**
	       * Updates the attributes of all the AnnotationNode entities.
	       * @param {Object.<string, string>} info The full list of new
	       *     attributes to apply.
	       */
	      update: function(info) {
	        var entity = firepad.Entity.fromAttributes(info);
	        for(var i = 0; i < markers.length; i++) {
	          self.entityManager_.updateElement(entity, markers[i].replacedWith);
	        }
	      }
	    });

	    // This probably shouldn't be necessary.  There must be a lurking CodeMirror bug.
	    this.queueRefresh_();
	  };

	  RichTextCodeMirror.prototype.queueRefresh_ = function() {
	    var self = this;
	    if (!this.refreshTimer_) {
	      this.refreshTimer_ = setTimeout(function() {
	        self.codeMirror.refresh();
	        self.refreshTimer_ = null;
	      }, 0);
	    }
	  };

	  RichTextCodeMirror.prototype.createEntityHandle_ = function(entity, location) {
	    var marker = null;
	    var self = this;

	    function find() {
	      if (marker) {
	        var where = marker.find();
	        return where ? self.codeMirror.indexFromPos(where.from) : null;
	      } else {
	        return location;
	      }
	    }

	    function remove() {
	      var at = find();
	      if (at != null) {
	        self.codeMirror.focus();
	        self.removeText(at, at + 1);
	      }
	    }

	    /**
	     * Updates the attributes of an Entity.  Will call .update() if the entity supports it,
	     * else it'll just remove / re-create the entity.
	     * @param {Object.<string, string>} info The full list of new
	     *     attributes to apply.
	     */
	    function replace(info) {
	      var ATTR = firepad.AttributeConstants;
	      var SENTINEL = ATTR.ENTITY_SENTINEL;
	      var PREFIX = SENTINEL + '_';

	      var at = find();

	      self.updateTextAttributes(at, at+1, function(attrs) {
	        for (var member in attrs) {
	          delete attrs[member];
	        }
	        attrs[SENTINEL] = entity.type;

	        for(var attr in info) {
	          attrs[PREFIX + attr] = info[attr];
	        }
	      });
	    }

	    function setMarker(m) {
	      marker = m;
	    }

	    return { find: find, remove: remove, replace: replace,
	             setMarker: setMarker };
	  };

	  RichTextCodeMirror.prototype.lineClassRemover_ = function(lineNum) {
	    var cm = this.codeMirror;
	    var lineHandle = cm.getLineHandle(lineNum);
	    return {
	      clear: function() {
	        // HACK to remove all classes (since CodeMirror treats this as a regex internally).
	        cm.removeLineClass(lineHandle, "text", ".*");
	      }
	    }
	  };

	  RichTextCodeMirror.prototype.emptySelection_ = function() {
	    var start = this.codeMirror.getCursor('start'), end = this.codeMirror.getCursor('end');
	    return (start.line === end.line && start.ch === end.ch);
	  };

	  RichTextCodeMirror.prototype.onCodeMirrorBeforeChange_ = function(cm, change) {
	    // Remove LineSentinelCharacters from incoming input (e.g copy/pasting)
	    if (change.origin === '+input' || change.origin === 'paste') {
	      var newText = [];
	      for(var i = 0; i < change.text.length; i++) {
	        var t = change.text[i];
	        t = t.replace(new RegExp('[' + LineSentinelCharacter + EntitySentinelCharacter + ']', 'g'), '');
	        newText.push(t);
	      }
	      change.update(change.from, change.to, newText);
	    }
	  };

	  function cmpPos (a, b) {
	    return (a.line - b.line) || (a.ch - b.ch);
	  }
	  function posEq (a, b) { return cmpPos(a, b) === 0; }
	  function posLe (a, b) { return cmpPos(a, b) <= 0; }

	  function last (arr) { return arr[arr.length - 1]; }

	  function sumLengths (strArr) {
	    if (strArr.length === 0) { return 0; }
	    var sum = 0;
	    for (var i = 0; i < strArr.length; i++) { sum += strArr[i].length; }
	    return sum + strArr.length - 1;
	  }

	  RichTextCodeMirror.prototype.onCodeMirrorChange_ = function(cm, cmChanges) {
	    // Handle single change objects and linked lists of change objects.
	    if (typeof cmChanges.from === 'object') {
	      var changeArray = [];
	      while (cmChanges) {
	        changeArray.push(cmChanges);
	        cmChanges = cmChanges.next;
	      }
	      cmChanges = changeArray;
	    }

	    var changes = this.convertCoordinateSystemForChanges_(cmChanges);
	    var newChanges = [];

	    for (var i = 0; i < changes.length; i++) {
	      var change = changes[i];
	      var start = change.start, end = change.end, text = change.text, removed = change.removed, origin = change.origin;

	      // When text with multiple sets of attributes on it is removed, we need to split it into separate remove changes.
	      if (removed.length > 0) {
	        var oldAnnotationSpans = this.annotationList_.getAnnotatedSpansForSpan(new Span(start, removed.length));
	        var removedPos = 0;
	        for(var j = 0; j < oldAnnotationSpans.length; j++) {
	          var span = oldAnnotationSpans[j];
	          newChanges.push({ start: start, end: start + span.length, removedAttributes: span.annotation.attributes,
	            removed: removed.substr(removedPos, span.length), attributes: { }, text: "", origin: change.origin });
	          removedPos += span.length;
	        }

	        this.annotationList_.removeSpan(new Span(start, removed.length));
	      }

	      if (text.length > 0) {
	        var attributes;
	        // TODO: Handle 'paste' differently?
	        if (change.origin === '+input' || change.origin === 'paste') {
	          attributes = this.currentAttributes_ || { };
	        } else if (origin in this.outstandingChanges_) {
	          attributes = this.outstandingChanges_[origin].attributes;
	          origin = this.outstandingChanges_[origin].origOrigin;
	          delete this.outstandingChanges_[origin];
	        } else {
	          attributes = {};
	        }

	        this.annotationList_.insertAnnotatedSpan(new Span(start, text.length), new RichTextAnnotation(attributes));

	        newChanges.push({ start: start, end: start, removedAttributes: { }, removed: "", text: text,
	          attributes: attributes, origin: origin });
	      }
	    }

	    this.markLineSentinelCharactersForChanges_(cmChanges);

	    if (newChanges.length > 0) {
	      this.trigger('change', this, newChanges);
	    }
	  };

	  RichTextCodeMirror.prototype.convertCoordinateSystemForChanges_ = function(changes) {
	    // We have to convert the positions in the pre-change coordinate system to indexes.
	    // CodeMirror's `indexFromPos` method does this for the current state of the editor.
	    // We can use the information of a single change object to convert a post-change
	    // coordinate system to a pre-change coordinate system. We can now proceed inductively
	    // to get a pre-change coordinate system for all changes in the linked list.  A
	    // disadvantage of this approach is its complexity `O(n^2)` in the length of the
	    // linked list of changes.

	    var self = this;
	    var indexFromPos = function (pos) {
	      return self.codeMirror.indexFromPos(pos);
	    };

	    function updateIndexFromPos (indexFromPos, change) {
	      return function (pos) {
	        if (posLe(pos, change.from)) { return indexFromPos(pos); }
	        if (posLe(change.to, pos)) {
	          return indexFromPos({
	            line: pos.line + change.text.length - 1 - (change.to.line - change.from.line),
	            ch: (change.to.line < pos.line) ?
	                pos.ch :
	                (change.text.length <= 1) ?
	                    pos.ch - (change.to.ch - change.from.ch) + sumLengths(change.text) :
	                    pos.ch - change.to.ch + last(change.text).length
	          }) + sumLengths(change.removed) - sumLengths(change.text);
	        }
	        if (change.from.line === pos.line) {
	          return indexFromPos(change.from) + pos.ch - change.from.ch;
	        }
	        return indexFromPos(change.from) +
	            sumLengths(change.removed.slice(0, pos.line - change.from.line)) +
	            1 + pos.ch;
	      };
	    }

	    var newChanges = [];
	    for (var i = changes.length - 1; i >= 0; i--) {
	      var change = changes[i];
	      indexFromPos = updateIndexFromPos(indexFromPos, change);

	      var start = indexFromPos(change.from);

	      var removedText = change.removed.join('\n');
	      var text = change.text.join('\n');
	      newChanges.unshift({ start: start, end: start + removedText.length, removed: removedText, text: text,
	        origin: change.origin});
	    }
	    return newChanges;
	  };

	  /**
	   * Detects whether any line sentinel characters were added or removed by the change and if so,
	   * re-marks line sentinel characters on the affected range of lines.
	   * @param changes
	   * @private
	   */
	  RichTextCodeMirror.prototype.markLineSentinelCharactersForChanges_ = function(changes) {
	    // TODO: This doesn't handle multiple changes correctly (overlapping, out-of-oder, etc.).
	    // But In practice, people using firepad for rich-text editing don't batch multiple changes
	    // together, so this isn't quite as bad as it seems.
	    var startLine = Number.MAX_VALUE, endLine = -1;

	    for (var i = 0; i < changes.length; i++) {
	      var change = changes[i];
	      var line = change.from.line, ch = change.from.ch;

	      if (change.removed.length > 1 || change.removed[0].indexOf(LineSentinelCharacter) >= 0) {
	        // We removed 1+ newlines or line sentinel characters.
	        startLine = Math.min(startLine, line);
	        endLine = Math.max(endLine, line);
	      }

	      if (change.text.length > 1) { // 1+ newlines
	        startLine = Math.min(startLine, line);
	        endLine = Math.max(endLine, line + change.text.length - 1);
	      } else if (change.text[0].indexOf(LineSentinelCharacter) >= 0) {
	        startLine = Math.min(startLine, line);
	        endLine = Math.max(endLine, line);
	      }
	    }

	    // HACK: Because the above code doesn't handle multiple changes correctly, endLine might be invalid.  To
	    // avoid crashing, we just cap it at the line count.
	    endLine = Math.min(endLine, this.codeMirror.lineCount() - 1);

	    this.markLineSentinelCharactersForChangedLines_(startLine, endLine);
	  };

	  RichTextCodeMirror.prototype.markLineSentinelCharactersForChangedLines_ = function(startLine, endLine) {
	    // Back up to first list item.
	    if (startLine < Number.MAX_VALUE) {
	      while(startLine > 0 && this.lineIsListItemOrIndented_(startLine-1)) {
	        startLine--;
	      }
	    }

	    // Advance to last list item.
	    if (endLine > -1) {
	      var lineCount = this.codeMirror.lineCount();
	      while (endLine + 1 < lineCount && this.lineIsListItemOrIndented_(endLine+1)) {
	        endLine++;
	      }
	    }

	    // keeps track of the list number at each indent level.
	    var listNumber = [];

	    var cm = this.codeMirror;
	    for(var line = startLine; line <= endLine; line++) {
	      var text = cm.getLine(line);

	      // Remove any existing line classes.
	      var lineHandle = cm.getLineHandle(line);
	      cm.removeLineClass(lineHandle, "text", ".*");

	      if (text.length > 0) {
	        var markIndex = text.indexOf(LineSentinelCharacter);
	        while (markIndex >= 0) {
	          var markStartIndex = markIndex;

	          // Find the end of this series of sentinel characters, and remove any existing markers.
	          while (markIndex < text.length && text[markIndex] === LineSentinelCharacter) {
	            var marks = cm.findMarksAt({ line: line, ch: markIndex });
	            for(var i = 0; i < marks.length; i++) {
	              if (marks[i].isForLineSentinel) {
	                marks[i].clear();
	              }
	            }

	            markIndex++;
	          }

	          this.markLineSentinelCharacters_(line, markStartIndex, markIndex, listNumber);
	          markIndex = text.indexOf(LineSentinelCharacter, markIndex);
	        }
	      } else {
	        // Reset all indents.
	        listNumber = [];
	      }
	    }
	    return endLine;
	  };

	  RichTextCodeMirror.prototype.markLineSentinelCharacters_ = function(line, startIndex, endIndex, listNumber) {
	    var cm = this.codeMirror;
	    // If the mark is at the beginning of the line and it represents a list element, we need to replace it with
	    // the appropriate html element for the list heading.
	    var element = null;
	    var marker = null;
	    var getMarkerLine = function() {
	      var span = marker.find();
	      return span ? span.from.line : null;
	    };

	    if (startIndex === 0) {
	      var attributes = this.getLineAttributes_(line);
	      var listType = attributes[ATTR.LIST_TYPE];
	      var indent = attributes[ATTR.LINE_INDENT] || 0;
	      if (listType && indent === 0) { indent = 1; }
	      while (indent >= listNumber.length) {
	        listNumber.push(1);
	      }
	      if (listType === 'o') {
	        element = this.makeOrderedListElement_(listNumber[indent]);
	        listNumber[indent]++;
	      } else if (listType === 'u') {
	        element = this.makeUnorderedListElement_();
	        listNumber[indent] = 1;
	      } else if (listType === 't') {
	        element = this.makeTodoListElement_(false, getMarkerLine);
	        listNumber[indent] = 1;
	      } else if (listType === 'tc') {
	        element = this.makeTodoListElement_(true, getMarkerLine);
	        listNumber[indent] = 1;
	      }

	      var className = this.getClassNameForAttributes_(attributes);
	      if (className !== '') {
	        this.codeMirror.addLineClass(line, "text", className);
	      }

	      // Reset deeper indents back to 1.
	      listNumber = listNumber.slice(0, indent+1);
	    }

	    // Create a marker to cover this series of sentinel characters.
	    // NOTE: The reason we treat them as a group (one marker for all subsequent sentinel characters instead of
	    // one marker for each sentinel character) is that CodeMirror seems to get angry if we don't.
	    var markerOptions = { inclusiveLeft: true, collapsed: true };
	    if (element) {
	      markerOptions.replacedWith = element;
	    }
	    var marker = cm.markText({line: line, ch: startIndex }, { line: line, ch: endIndex }, markerOptions);
	    // track that it's a line-sentinel character so we can identify it later.
	    marker.isForLineSentinel = true;
	  };

	  RichTextCodeMirror.prototype.makeOrderedListElement_ = function(number) {
	    return utils.elt('div', number + '.', {
	      'class': 'firepad-list-left'
	    });
	  };

	  RichTextCodeMirror.prototype.makeUnorderedListElement_ = function() {
	    return utils.elt('div', '\u2022', {
	      'class': 'firepad-list-left'
	    });
	  };

	  RichTextCodeMirror.prototype.toggleTodo = function(noRemove) {
	    var attribute = ATTR.LIST_TYPE;
	    var currentAttributes = this.getCurrentLineAttributes_();
	    var newValue;
	    if (!(attribute in currentAttributes) || ((currentAttributes[attribute] !== 't') && (currentAttributes[attribute] !== 'tc'))) {
	      newValue = 't';
	    } else if (currentAttributes[attribute] === 't') {
	      newValue = 'tc';
	    } else if (currentAttributes[attribute] === 'tc') {
	      newValue = noRemove ? 't' : false;
	    }
	    this.setLineAttribute(attribute, newValue);
	  };

	  RichTextCodeMirror.prototype.makeTodoListElement_ = function(checked, getMarkerLine) {
	    var params = {
	      'type': "checkbox",
	      'class': 'firepad-todo-left'
	    };
	    if (checked) params['checked'] = true;
	    var el = utils.elt('input', false, params);
	    var self = this;
	    utils.on(el, 'click', utils.stopEventAnd(function(e) {
	      self.codeMirror.setCursor({line: getMarkerLine(), ch: 1});
	      self.toggleTodo(true);
	    }));
	    return el;
	  };

	  RichTextCodeMirror.prototype.lineIsListItemOrIndented_ = function(lineNum) {
	    var attrs = this.getLineAttributes_(lineNum);
	    return ((attrs[ATTR.LIST_TYPE] || false) !== false) ||
	           ((attrs[ATTR.LINE_INDENT] || 0) !== 0);
	  };

	  RichTextCodeMirror.prototype.onCursorActivity_ = function() {
	    var self = this;
	    setTimeout(function() {
	      self.updateCurrentAttributes_();
	    }, 1);
	  };

	  RichTextCodeMirror.prototype.getCurrentAttributes_ = function() {
	    if (!this.currentAttributes_) {
	      this.updateCurrentAttributes_();
	    }
	    return this.currentAttributes_;
	  };

	  RichTextCodeMirror.prototype.updateCurrentAttributes_ = function() {
	    var cm = this.codeMirror;
	    var anchor = cm.indexFromPos(cm.getCursor('anchor')), head = cm.indexFromPos(cm.getCursor('head'));
	    var pos = head;
	    if (anchor > head) { // backwards selection
	      // Advance past any newlines or line sentinels.
	      while(pos < this.end()) {
	        var c = this.getRange(pos, pos+1);
	        if (c !== '\n' && c !== LineSentinelCharacter)
	          break;
	        pos++;
	      }
	      if (pos < this.end())
	        pos++; // since we're going to look at the annotation span to the left to decide what attributes to use.
	    } else {
	      // Back up before any newlines or line sentinels.
	      while(pos > 0) {
	        c = this.getRange(pos-1, pos);
	        if (c !== '\n' && c !== LineSentinelCharacter)
	          break;
	        pos--;
	      }
	    }
	    var spans = this.annotationList_.getAnnotatedSpansForPos(pos);
	    this.currentAttributes_ = {};

	    var attributes = {};
	    // Use the attributes to the left unless they're line attributes (in which case use the ones to the right.
	    if (spans.length > 0 && (!(ATTR.LINE_SENTINEL in spans[0].annotation.attributes))) {
	      attributes = spans[0].annotation.attributes;
	    } else if (spans.length > 1) {
	      firepad.utils.assert(!(ATTR.LINE_SENTINEL in spans[1].annotation.attributes), "Cursor can't be between two line sentinel characters.");
	      attributes = spans[1].annotation.attributes;
	    }
	    for(var attr in attributes) {
	      // Don't copy line or entity attributes.
	      if (attr !== 'l' && attr !== 'lt' && attr !== 'li' && attr.indexOf(ATTR.ENTITY_SENTINEL) !== 0) {
	        this.currentAttributes_[attr] = attributes[attr];
	      }
	    }
	  };

	  RichTextCodeMirror.prototype.getCurrentLineAttributes_ = function() {
	    var cm = this.codeMirror;
	    var anchor = cm.getCursor('anchor'), head = cm.getCursor('head');
	    var line = head.line;
	    // If it's a forward selection and the cursor is at the beginning of a line, use the previous line.
	    if (head.ch === 0 && anchor.line < head.line) {
	      line--;
	    }
	    return this.getLineAttributes_(line);
	  };

	  RichTextCodeMirror.prototype.getLineAttributes_ = function(lineNum) {
	    var attributes = {};
	    var line = this.codeMirror.getLine(lineNum);
	    if (line.length > 0 && line[0] === LineSentinelCharacter) {
	      var lineStartIndex = this.codeMirror.indexFromPos({ line: lineNum, ch: 0 });
	      var spans = this.annotationList_.getAnnotatedSpansForSpan(new Span(lineStartIndex, 1));
	      firepad.utils.assert(spans.length === 1);
	      for(var attr in spans[0].annotation.attributes) {
	        attributes[attr] = spans[0].annotation.attributes[attr];
	      }
	    }
	    return attributes;
	  };

	  RichTextCodeMirror.prototype.clearAnnotations_ = function() {
	    this.annotationList_.updateSpan(new Span(0, this.end()), function(annotation, length) {
	      return new RichTextAnnotation({ });
	    });
	  };

	  RichTextCodeMirror.prototype.newline = function() {
	    var cm = this.codeMirror;
	    var self = this;
	    if (!this.emptySelection_()) {
	      cm.replaceSelection('\n', 'end', '+input');
	    } else {
	      var cursorLine = cm.getCursor('head').line;
	      var lineAttributes = this.getLineAttributes_(cursorLine);
	      var listType = lineAttributes[ATTR.LIST_TYPE];

	      if (listType && cm.getLine(cursorLine).length === 1) {
	        // They hit enter on a line with just a list heading.  Just remove the list heading.
	        this.updateLineAttributes(cursorLine, cursorLine, function(attributes) {
	          delete attributes[ATTR.LIST_TYPE];
	          delete attributes[ATTR.LINE_INDENT];
	        });
	      } else {
	        cm.replaceSelection('\n', 'end', '+input');

	        // Copy line attributes forward.
	        this.updateLineAttributes(cursorLine+1, cursorLine+1, function(attributes) {
	          for(var attr in lineAttributes) {
	            attributes[attr] = lineAttributes[attr];
	          }

	          // Don't mark new todo items as completed.
	          if (listType === 'tc') attributes[ATTR.LIST_TYPE] = 't';
	          self.trigger('newLine', {line: cursorLine+1, attr: attributes});
	        });
	      }
	    }
	  };

	  RichTextCodeMirror.prototype.deleteLeft = function() {
	    var cm = this.codeMirror;
	    var cursorPos = cm.getCursor('head');
	    var lineAttributes = this.getLineAttributes_(cursorPos.line);
	    var listType = lineAttributes[ATTR.LIST_TYPE];
	    var indent = lineAttributes[ATTR.LINE_INDENT];

	    var backspaceAtStartOfLine = this.emptySelection_() && cursorPos.ch === 1;

	    if (backspaceAtStartOfLine && listType) {
	      // They hit backspace at the beginning of a line with a list heading.  Just remove the list heading.
	      this.updateLineAttributes(cursorPos.line, cursorPos.line, function(attributes) {
	        delete attributes[ATTR.LIST_TYPE];
	        delete attributes[ATTR.LINE_INDENT];
	      });
	    } else if (backspaceAtStartOfLine && indent && indent > 0) {
	      this.unindent();
	    } else {
	      cm.deleteH(-1, "char");
	    }
	  };

	  RichTextCodeMirror.prototype.deleteRight = function() {
	    var cm = this.codeMirror;
	    var cursorPos = cm.getCursor('head');

	    var text = cm.getLine(cursorPos.line);
	    var emptyLine = this.areLineSentinelCharacters_(text);
	    var nextLineText = (cursorPos.line + 1 < cm.lineCount()) ? cm.getLine(cursorPos.line + 1) : "";
	    if (this.emptySelection_() && emptyLine && nextLineText[0] === LineSentinelCharacter) {
	      // Delete the empty line but not the line sentinel character on the next line.
	      cm.replaceRange('', { line: cursorPos.line, ch: 0 }, { line: cursorPos.line + 1, ch: 0}, '+input');
	    } else {
	      cm.deleteH(1, "char");
	    }
	  };

	  RichTextCodeMirror.prototype.indent = function() {
	    this.updateLineAttributesForSelection(function(attributes) {
	      var indent = attributes[ATTR.LINE_INDENT];
	      var listType = attributes[ATTR.LIST_TYPE];

	      if (indent) {
	        attributes[ATTR.LINE_INDENT]++;
	      } else if (listType) {
	        // lists are implicitly already indented once.
	        attributes[ATTR.LINE_INDENT] = 2;
	      } else {
	        attributes[ATTR.LINE_INDENT] = 1;
	      }
	    });
	  };

	  RichTextCodeMirror.prototype.unindent = function() {
	    this.updateLineAttributesForSelection(function(attributes) {
	      var indent = attributes[ATTR.LINE_INDENT];

	      if (indent && indent > 1) {
	        attributes[ATTR.LINE_INDENT] = indent - 1;
	      } else {
	        delete attributes[ATTR.LIST_TYPE];
	        delete attributes[ATTR.LINE_INDENT];
	      }
	    });
	  };

	  RichTextCodeMirror.prototype.getText = function() {
	    return this.codeMirror.getValue().replace(new RegExp(LineSentinelCharacter, "g"), '');
	  };

	  RichTextCodeMirror.prototype.areLineSentinelCharacters_ = function(text) {
	    for(var i = 0; i < text.length; i++) {
	      if (text[i] !== LineSentinelCharacter)
	        return false;
	    }
	    return true;
	  };

	  /**
	   * Used for the annotations we store in our AnnotationList.
	   * @param attributes
	   * @constructor
	   */
	  function RichTextAnnotation(attributes) {
	    this.attributes = attributes || { };
	  }

	  RichTextAnnotation.prototype.equals = function(other) {
	    if (!(other instanceof RichTextAnnotation)) {
	      return false;
	    }
	    var attr;
	    for(attr in this.attributes) {
	      if (other.attributes[attr] !== this.attributes[attr]) {
	        return false;
	      }
	    }

	    for(attr in other.attributes) {
	      if (other.attributes[attr] !== this.attributes[attr]) {
	        return false;
	      }
	    }

	    return true;
	  };

	  function emptyAttributes(attributes) {
	    for(var attr in attributes) {
	      return false;
	    }
	    return true;
	  }

	  // Bind a method to an object, so it doesn't matter whether you call
	  // object.method() directly or pass object.method as a reference to another
	  // function.
	  function bind (obj, method) {
	    var fn = obj[method];
	    obj[method] = function () {
	      fn.apply(obj, arguments);
	    };
	  }

	  return RichTextCodeMirror;
	})();

	var firepad = firepad || { };

	// TODO: Can this derive from CodeMirrorAdapter or similar?
	firepad.RichTextCodeMirrorAdapter = (function () {
	  'use strict';

	  var TextOperation = firepad.TextOperation;
	  var WrappedOperation = firepad.WrappedOperation;
	  var Cursor = firepad.Cursor;

	  function RichTextCodeMirrorAdapter (rtcm) {
	    this.rtcm = rtcm;
	    this.cm = rtcm.codeMirror;

	    bind(this, 'onChange');
	    bind(this, 'onAttributesChange');
	    bind(this, 'onCursorActivity');
	    bind(this, 'onFocus');
	    bind(this, 'onBlur');

	    this.rtcm.on('change', this.onChange);
	    this.rtcm.on('attributesChange', this.onAttributesChange);
	    this.cm.on('cursorActivity', this.onCursorActivity);
	    this.cm.on('focus', this.onFocus);
	    this.cm.on('blur', this.onBlur);
	  }

	  // Removes all event listeners from the CodeMirror instance.
	  RichTextCodeMirrorAdapter.prototype.detach = function () {
	    this.rtcm.off('change', this.onChange);
	    this.rtcm.off('attributesChange', this.onAttributesChange);

	    this.cm.off('cursorActivity', this.onCursorActivity);
	    this.cm.off('focus', this.onFocus);
	    this.cm.off('blur', this.onBlur);
	  };

	  function cmpPos (a, b) {
	    if (a.line < b.line) { return -1; }
	    if (a.line > b.line) { return 1; }
	    if (a.ch < b.ch)     { return -1; }
	    if (a.ch > b.ch)     { return 1; }
	    return 0;
	  }
	  function posEq (a, b) { return cmpPos(a, b) === 0; }
	  function posLe (a, b) { return cmpPos(a, b) <= 0; }

	  function codemirrorLength (cm) {
	    var lastLine = cm.lineCount() - 1;
	    return cm.indexFromPos({line: lastLine, ch: cm.getLine(lastLine).length});
	  }

	  // Converts a CodeMirror change object into a TextOperation and its inverse
	  // and returns them as a two-element array.
	  RichTextCodeMirrorAdapter.operationFromCodeMirrorChanges = function (changes, cm) {
	    // Approach: Replay the changes, beginning with the most recent one, and
	    // construct the operation and its inverse. We have to convert the position
	    // in the pre-change coordinate system to an index. We have a method to
	    // convert a position in the coordinate system after all changes to an index,
	    // namely CodeMirror's `indexFromPos` method. We can use the information of
	    // a single change object to convert a post-change coordinate system to a
	    // pre-change coordinate system. We can now proceed inductively to get a
	    // pre-change coordinate system for all changes in the linked list.
	    // A disadvantage of this approach is its complexity `O(n^2)` in the length
	    // of the linked list of changes.

	    var docEndLength = codemirrorLength(cm);
	    var operation    = new TextOperation().retain(docEndLength);
	    var inverse      = new TextOperation().retain(docEndLength);

	    for (var i = changes.length - 1; i >= 0; i--) {
	      var change = changes[i];
	      var fromIndex = change.start;
	      var restLength = docEndLength - fromIndex - change.text.length;

	      operation = new TextOperation()
	          .retain(fromIndex)
	          ['delete'](change.removed.length)
	          .insert(change.text, change.attributes)
	          .retain(restLength)
	          .compose(operation);

	      inverse = inverse.compose(new TextOperation()
	          .retain(fromIndex)
	          ['delete'](change.text.length)
	          .insert(change.removed, change.removedAttributes)
	          .retain(restLength)
	      );

	      docEndLength += change.removed.length - change.text.length;
	    }

	    return [operation, inverse];
	  };

	  // Converts an attributes changed object to an operation and its inverse.
	  RichTextCodeMirrorAdapter.operationFromAttributesChanges = function (changes, cm) {
	    var docEndLength = codemirrorLength(cm);

	    var operation = new TextOperation(), inverse = new TextOperation();
	    var pos = 0;

	    for (var i = 0; i < changes.length; i++) {
	      var change = changes[i];
	      var toRetain = change.start - pos;
	      assert(toRetain >= 0); // changes should be in order and non-overlapping.
	      operation.retain(toRetain);
	      inverse.retain(toRetain);

	      var length = change.end - change.start;
	      operation.retain(length, change.attributes);
	      inverse.retain(length, change.attributesInverse);
	      pos = change.start + length;
	    }

	    operation.retain(docEndLength - pos);
	    inverse.retain(docEndLength - pos);

	    return [operation, inverse];
	  };

	  // Apply an operation to a CodeMirror instance.
	  RichTextCodeMirrorAdapter.applyOperationToCodeMirror = function (operation, rtcm) {

	    // HACK: If there are a lot of operations; hide CodeMirror so that it doesn't re-render constantly.
	    if (operation.ops.length > 10)
	      rtcm.codeMirror.getWrapperElement().setAttribute('style', 'display: none');

	    var ops = operation.ops;
	    var index = 0; // holds the current index into CodeMirror's content
	    for (var i = 0, l = ops.length; i < l; i++) {
	      var op = ops[i];
	      if (op.isRetain()) {
	        if (!emptyAttributes(op.attributes)) {
	          rtcm.updateTextAttributes(index, index + op.chars, function(attributes) {
	            for(var attr in op.attributes) {
	              if (op.attributes[attr] === false) {
	                delete attributes[attr];
	              } else {
	                attributes[attr] = op.attributes[attr];
	              }
	            }
	          }, 'RTCMADAPTER', /*doLineAttributes=*/true);
	        }
	        index += op.chars;
	      } else if (op.isInsert()) {
	        rtcm.insertText(index, op.text, op.attributes, 'RTCMADAPTER');
	        index += op.text.length;
	      } else if (op.isDelete()) {
	        rtcm.removeText(index, index + op.chars, 'RTCMADAPTER');
	      }
	    }

	    if (operation.ops.length > 10) {
	      rtcm.codeMirror.getWrapperElement().setAttribute('style', '');
	      rtcm.codeMirror.refresh();
	    }
	  };

	  RichTextCodeMirrorAdapter.prototype.registerCallbacks = function (cb) {
	    this.callbacks = cb;
	  };

	  RichTextCodeMirrorAdapter.prototype.onChange = function (_, changes) {
	    if (changes[0].origin !== 'RTCMADAPTER') {
	      var pair = RichTextCodeMirrorAdapter.operationFromCodeMirrorChanges(changes, this.cm);
	      this.trigger('change', pair[0], pair[1]);
	    }
	  };

	  RichTextCodeMirrorAdapter.prototype.onAttributesChange = function (_, changes) {
	    if (changes[0].origin !== 'RTCMADAPTER') {
	      var pair = RichTextCodeMirrorAdapter.operationFromAttributesChanges(changes, this.cm);
	      this.trigger('change', pair[0], pair[1]);
	    }
	  };

	  RichTextCodeMirrorAdapter.prototype.onCursorActivity = function () {
	    // We want to push cursor changes to Firebase AFTER edits to the history,
	    // because the cursor coordinates will already be in post-change units.
	    // Sleeping for 1ms ensures that sendCursor happens after sendOperation.
	    var self = this;
	    setTimeout(function() {
	      self.trigger('cursorActivity');
	    }, 1);
	  }

	  RichTextCodeMirrorAdapter.prototype.onFocus = function () {
	    this.trigger('focus');
	  };

	  RichTextCodeMirrorAdapter.prototype.onBlur = function () {
	    if (!this.cm.somethingSelected()) { this.trigger('blur'); }
	  };

	  RichTextCodeMirrorAdapter.prototype.getValue = function () {
	    return this.cm.getValue();
	  };

	  RichTextCodeMirrorAdapter.prototype.getCursor = function () {
	    var cm = this.cm;
	    var cursorPos = cm.getCursor();
	    var position = cm.indexFromPos(cursorPos);
	    var selectionEnd;
	    if (cm.somethingSelected()) {
	      var startPos = cm.getCursor(true);
	      var selectionEndPos = posEq(cursorPos, startPos) ? cm.getCursor(false) : startPos;
	      selectionEnd = cm.indexFromPos(selectionEndPos);
	    } else {
	      selectionEnd = position;
	    }

	    return new Cursor(position, selectionEnd);
	  };

	  RichTextCodeMirrorAdapter.prototype.setCursor = function (cursor) {
	    this.cm.setSelection(
	        this.cm.posFromIndex(cursor.position),
	        this.cm.posFromIndex(cursor.selectionEnd)
	    );
	  };

	  RichTextCodeMirrorAdapter.prototype.addStyleRule = function(css) {
	    if (typeof document === "undefined" || document === null) {
	      return;
	    }
	    if (!this.addedStyleRules) {
	      this.addedStyleRules = {};
	      var styleElement = document.createElement('style');
	      document.documentElement.getElementsByTagName('head')[0].appendChild(styleElement);
	      this.addedStyleSheet = styleElement.sheet;
	    }
	    if (this.addedStyleRules[css]) {
	      return;
	    }
	    this.addedStyleRules[css] = true;
	    return this.addedStyleSheet.insertRule(css, 0);
	  };

	  RichTextCodeMirrorAdapter.prototype.setOtherCursor = function (cursor, color, clientId) {
	    var cursorPos = this.cm.posFromIndex(cursor.position);
	    if (typeof color !== 'string' || !color.match(/^#[a-fA-F0-9]{3,6}$/)) {
	      return;
	    }
	    var end = this.rtcm.end();
	    if (typeof cursor !== 'object' || typeof cursor.position !== 'number' || typeof cursor.selectionEnd !== 'number') {
	      return;
	    }
	    if (cursor.position < 0 || cursor.position > end || cursor.selectionEnd < 0 || cursor.selectionEnd > end) {
	      return;
	    }

	    if (cursor.position === cursor.selectionEnd) {
	      // show cursor
	      var cursorCoords = this.cm.cursorCoords(cursorPos);
	      var cursorEl = document.createElement('span');
	      cursorEl.className = 'other-client';
	      cursorEl.style.borderLeftWidth = '2px';
	      cursorEl.style.borderLeftStyle = 'solid';
	      cursorEl.style.borderLeftColor = color;
	      cursorEl.style.marginLeft = cursorEl.style.marginRight = '-1px';
	      cursorEl.style.height = (cursorCoords.bottom - cursorCoords.top) * 0.9 + 'px';
	      cursorEl.setAttribute('data-clientid', clientId);
	      cursorEl.style.zIndex = 0;

	      return this.cm.setBookmark(cursorPos, { widget: cursorEl, insertLeft: true });
	    } else {
	      // show selection
	      var selectionClassName = 'selection-' + color.replace('#', '');
	      var transparency = 0.4;
	      var rule = '.' + selectionClassName + ' {' +
	        // fallback for browsers w/out rgba (rgb w/ transparency)
	        ' background: ' + hex2rgb(color) + ';\n' +
	        // rule with alpha takes precedence if supported
	        ' background: ' + hex2rgb(color, transparency) + ';' +
	      '}';
	      this.addStyleRule(rule);

	      var fromPos, toPos;
	      if (cursor.selectionEnd > cursor.position) {
	        fromPos = cursorPos;
	        toPos = this.cm.posFromIndex(cursor.selectionEnd);
	      } else {
	        fromPos = this.cm.posFromIndex(cursor.selectionEnd);
	        toPos = cursorPos;
	      }
	      return this.cm.markText(fromPos, toPos, {
	        className: selectionClassName
	      });
	    }
	  };

	  RichTextCodeMirrorAdapter.prototype.trigger = function (event) {
	    var args = Array.prototype.slice.call(arguments, 1);
	    var action = this.callbacks && this.callbacks[event];
	    if (action) { action.apply(this, args); }
	  };

	  RichTextCodeMirrorAdapter.prototype.applyOperation = function (operation) {
	    RichTextCodeMirrorAdapter.applyOperationToCodeMirror(operation, this.rtcm);
	  };

	  RichTextCodeMirrorAdapter.prototype.registerUndo = function (undoFn) {
	    this.cm.undo = undoFn;
	  };

	  RichTextCodeMirrorAdapter.prototype.registerRedo = function (redoFn) {
	    this.cm.redo = redoFn;
	  };

	  RichTextCodeMirrorAdapter.prototype.invertOperation = function(operation) {
	    var pos = 0, cm = this.rtcm.codeMirror, spans, i;
	    var inverse = new TextOperation();
	    for(var opIndex = 0; opIndex < operation.wrapped.ops.length; opIndex++) {
	      var op = operation.wrapped.ops[opIndex];
	      if (op.isRetain()) {
	        if (emptyAttributes(op.attributes)) {
	          inverse.retain(op.chars);
	          pos += op.chars;
	        } else {
	          spans = this.rtcm.getAttributeSpans(pos, pos + op.chars);
	          for(i = 0; i < spans.length; i++) {
	            var inverseAttributes = { };
	            for(var attr in op.attributes) {
	              var opValue = op.attributes[attr];
	              var curValue = spans[i].attributes[attr];

	              if (opValue === false) {
	                if (curValue) {
	                  inverseAttributes[attr] = curValue;
	                }
	              } else if (opValue !== curValue) {
	                inverseAttributes[attr] = curValue || false;
	              }
	            }

	            inverse.retain(spans[i].length, inverseAttributes);
	            pos += spans[i].length;
	          }
	        }
	      } else if (op.isInsert()) {
	        inverse['delete'](op.text.length);
	      } else if (op.isDelete()) {
	        var text = cm.getRange(cm.posFromIndex(pos), cm.posFromIndex(pos + op.chars));

	        spans = this.rtcm.getAttributeSpans(pos, pos + op.chars);
	        var delTextPos = 0;
	        for(i = 0; i < spans.length; i++) {
	          inverse.insert(text.substr(delTextPos, spans[i].length), spans[i].attributes);
	          delTextPos += spans[i].length;
	        }

	        pos += op.chars;
	      }
	    }

	    return new WrappedOperation(inverse, operation.meta.invert());
	  };

	  // Throws an error if the first argument is falsy. Useful for debugging.
	  function assert (b, msg) {
	    if (!b) {
	      throw new Error(msg || "assertion error");
	    }
	  }

	  // Bind a method to an object, so it doesn't matter whether you call
	  // object.method() directly or pass object.method as a reference to another
	  // function.
	  function bind (obj, method) {
	    var fn = obj[method];
	    obj[method] = function () {
	      fn.apply(obj, arguments);
	    };
	  }

	  function emptyAttributes(attrs) {
	    for(var attr in attrs) {
	      return false;
	    }
	    return true;
	  }

	  function hex2rgb (hex, transparency) {
	    if (typeof hex !== 'string') {
	      throw new TypeError('Expected a string');
	    }
	    hex = hex.replace(/^#/, '');
	    if (hex.length === 3) {
	      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
	    }
	    var num = parseInt(hex, 16);
	    var rgb = [num >> 16, num >> 8 & 255, num & 255];
	    var type = 'rgb';
	    if (exists(transparency)) {
	      type = 'rgba';
	      rgb.push(transparency);
	    }
	    // rgb(r, g, b) or rgba(r, g, b, t)
	    return type + '(' + rgb.join(',') + ')';
	  }

	  function exists (val) {
	    return val !== null && val !== undefined;
	  }

	  return RichTextCodeMirrorAdapter;
	}());

	var firepad = firepad || { };

	/**
	 * Immutable object to represent text formatting.  Formatting can be modified by chaining method calls.
	 *
	 * @constructor
	 * @type {Function}
	 */
	firepad.Formatting = (function() {
	  var ATTR = firepad.AttributeConstants;

	  function Formatting(attributes) {
	    // Allow calling without new.
	    if (!(this instanceof Formatting)) { return new Formatting(attributes); }

	    this.attributes = attributes || { };
	  }

	  Formatting.prototype.cloneWithNewAttribute_ = function(attribute, value) {
	    var attributes = { };

	    // Copy existing.
	    for(var attr in this.attributes) {
	      attributes[attr] = this.attributes[attr];
	    }

	    // Add new one.
	    if (value === false) {
	      delete attributes[attribute];
	    } else {
	      attributes[attribute] = value;
	    }

	    return new Formatting(attributes);
	  };

	  Formatting.prototype.bold = function(val) {
	    return this.cloneWithNewAttribute_(ATTR.BOLD, val);
	  };

	  Formatting.prototype.italic = function(val) {
	    return this.cloneWithNewAttribute_(ATTR.ITALIC, val);
	  };

	  Formatting.prototype.underline = function(val) {
	    return this.cloneWithNewAttribute_(ATTR.UNDERLINE, val);
	  };

	  Formatting.prototype.strike = function(val) {
	    return this.cloneWithNewAttribute_(ATTR.STRIKE, val);
	  };

	  Formatting.prototype.font = function(font) {
	    return this.cloneWithNewAttribute_(ATTR.FONT, font);
	  };

	  Formatting.prototype.fontSize = function(size) {
	    return this.cloneWithNewAttribute_(ATTR.FONT_SIZE, size);
	  };

	  Formatting.prototype.color = function(color) {
	    return this.cloneWithNewAttribute_(ATTR.COLOR, color);
	  };

	  Formatting.prototype.backgroundColor = function(color) {
	    return this.cloneWithNewAttribute_(ATTR.BACKGROUND_COLOR, color);
	  };

	  return Formatting;
	})();

	var firepad = firepad || { };

	/**
	 * Object to represent Formatted text.
	 *
	 * @type {Function}
	 */
	firepad.Text = (function() {
	  function Text(text, formatting) {
	    // Allow calling without new.
	    if (!(this instanceof Text)) { return new Text(text, formatting); }

	    this.text = text;
	    this.formatting = formatting || firepad.Formatting();
	  }

	  return Text;
	})();

	var firepad = firepad || { };

	/**
	 * Immutable object to represent line formatting.  Formatting can be modified by chaining method calls.
	 *
	 * @constructor
	 * @type {Function}
	 */
	firepad.LineFormatting = (function() {
	  var ATTR = firepad.AttributeConstants;

	  function LineFormatting(attributes) {
	    // Allow calling without new.
	    if (!(this instanceof LineFormatting)) { return new LineFormatting(attributes); }

	    this.attributes = attributes || { };
	    this.attributes[ATTR.LINE_SENTINEL] = true;
	  }

	  LineFormatting.LIST_TYPE = {
	    NONE: false,
	    ORDERED: 'o',
	    UNORDERED: 'u',
	    TODO: 't',
	    TODOCHECKED: 'tc'
	  };

	  LineFormatting.prototype.cloneWithNewAttribute_ = function(attribute, value) {
	    var attributes = { };

	    // Copy existing.
	    for(var attr in this.attributes) {
	      attributes[attr] = this.attributes[attr];
	    }

	    // Add new one.
	    if (value === false) {
	      delete attributes[attribute];
	    } else {
	      attributes[attribute] = value;
	    }

	    return new LineFormatting(attributes);
	  };

	  LineFormatting.prototype.indent = function(indent) {
	    return this.cloneWithNewAttribute_(ATTR.LINE_INDENT, indent);
	  };

	  LineFormatting.prototype.align = function(align) {
	    return this.cloneWithNewAttribute_(ATTR.LINE_ALIGN, align);
	  };

	  LineFormatting.prototype.listItem = function(val) {
	    firepad.utils.assert(val === false || val === 'u' || val === 'o' || val === 't' || val === 'tc');
	    return this.cloneWithNewAttribute_(ATTR.LIST_TYPE, val);
	  };

	  LineFormatting.prototype.getIndent = function() {
	    return this.attributes[ATTR.LINE_INDENT] || 0;
	  };

	  LineFormatting.prototype.getAlign = function() {
	    return this.attributes[ATTR.LINE_ALIGN] || 0;
	  };

	  LineFormatting.prototype.getListItem = function() {
	    return this.attributes[ATTR.LIST_TYPE] || false;
	  };

	  return LineFormatting;
	})();

	var firepad = firepad || { };

	/**
	 * Object to represent Formatted line.
	 *
	 * @type {Function}
	 */
	firepad.Line = (function() {
	  function Line(textPieces, formatting) {
	    // Allow calling without new.
	    if (!(this instanceof Line)) { return new Line(textPieces, formatting); }

	    if(Object.prototype.toString.call(textPieces) !== '[object Array]') {
	      if (typeof textPieces === 'undefined') {
	        textPieces = [];
	      } else {
	        textPieces = [textPieces];
	      }
	    }

	    this.textPieces = textPieces;
	    this.formatting = formatting || firepad.LineFormatting();
	  }

	  return Line;
	})();

	var firepad = firepad || { };

	/**
	 * Helper to parse html into Firepad-compatible lines / text.
	 * @type {*}
	 */
	firepad.ParseHtml = (function () {
	  var LIST_TYPE = firepad.LineFormatting.LIST_TYPE;

	  /**
	   * Represents the current parse state as an immutable structure.  To create a new ParseState, use
	   * the withXXX methods.
	   *
	   * @param opt_listType
	   * @param opt_lineFormatting
	   * @param opt_textFormatting
	   * @constructor
	   */
	  function ParseState(opt_listType, opt_lineFormatting, opt_textFormatting) {
	    this.listType = opt_listType || LIST_TYPE.UNORDERED;
	    this.lineFormatting = opt_lineFormatting || firepad.LineFormatting();
	    this.textFormatting = opt_textFormatting || firepad.Formatting();
	  }

	  ParseState.prototype.withTextFormatting = function(textFormatting) {
	    return new ParseState(this.listType, this.lineFormatting, textFormatting);
	  };

	  ParseState.prototype.withLineFormatting = function(lineFormatting) {
	    return new ParseState(this.listType, lineFormatting, this.textFormatting);
	  };

	  ParseState.prototype.withListType = function(listType) {
	    return new ParseState(listType, this.lineFormatting, this.textFormatting);
	  };

	  ParseState.prototype.withIncreasedIndent = function() {
	    var lineFormatting = this.lineFormatting.indent(this.lineFormatting.getIndent() + 1);
	    return new ParseState(this.listType, lineFormatting, this.textFormatting);
	  };

	  ParseState.prototype.withAlign = function(align) {
	    var lineFormatting = this.lineFormatting.align(align);
	    return new ParseState(this.listType, lineFormatting, this.textFormatting);
	  };

	  /**
	   * Mutable structure representing the current parse output.
	   * @constructor
	   */
	  function ParseOutput() {
	    this.lines = [ ];
	    this.currentLine = [];
	    this.currentLineListItemType = null;
	  }

	  ParseOutput.prototype.newlineIfNonEmpty = function(state) {
	    this.cleanLine_();
	    if (this.currentLine.length > 0) {
	      this.newline(state);
	    }
	  };

	  ParseOutput.prototype.newlineIfNonEmptyOrListItem = function(state) {
	    this.cleanLine_();
	    if (this.currentLine.length > 0 || this.currentLineListItemType !== null) {
	      this.newline(state);
	    }
	  };

	  ParseOutput.prototype.newline = function(state) {
	    this.cleanLine_();
	    var lineFormatting = state.lineFormatting;
	    if (this.currentLineListItemType !== null) {
	      lineFormatting = lineFormatting.listItem(this.currentLineListItemType);
	      this.currentLineListItemType = null;
	    }

	    this.lines.push(firepad.Line(this.currentLine, lineFormatting));
	    this.currentLine = [];
	  };

	  ParseOutput.prototype.makeListItem = function(type) {
	    this.currentLineListItemType = type;
	  };

	  ParseOutput.prototype.cleanLine_ = function() {
	    // Kinda' a hack, but we remove leading and trailing spaces (since these aren't significant in html) and
	    // replaces nbsp's with normal spaces.
	    if (this.currentLine.length > 0) {
	      var last = this.currentLine.length - 1;
	      this.currentLine[0].text = this.currentLine[0].text.replace(/^ +/, '');
	      this.currentLine[last].text = this.currentLine[last].text.replace(/ +$/g, '');
	      for(var i = 0; i < this.currentLine.length; i++) {
	        this.currentLine[i].text = this.currentLine[i].text.replace(/\u00a0/g, ' ');
	      }
	    }
	    // If after stripping trailing whitespace, there's nothing left, clear currentLine out.
	    if (this.currentLine.length === 1 && this.currentLine[0].text === '') {
	      this.currentLine = [];
	    }
	  };

	  var entityManager_;
	  function parseHtml(html, entityManager) {
	    // Create DIV with HTML (as a convenient way to parse it).
	    var div = (firepad.document || document).createElement('div');
	    div.innerHTML = html;

	    // HACK until I refactor this.
	    entityManager_ = entityManager;

	    var output = new ParseOutput();
	    var state = new ParseState();
	    parseNode(div, state, output);

	    return output.lines;
	  }

	  // Fix IE8.
	  var Node = Node || {
	    ELEMENT_NODE: 1,
	    TEXT_NODE: 3
	  };

	  function parseNode(node, state, output) {
	    // Give entity manager first crack at it.
	    if (node.nodeType === Node.ELEMENT_NODE) {
	      var entity = entityManager_.fromElement(node);
	      if (entity) {
	        output.currentLine.push(new firepad.Text(
	            firepad.sentinelConstants.ENTITY_SENTINEL_CHARACTER,
	            new firepad.Formatting(entity.toAttributes())
	        ));
	        return;
	      }
	    }

	    switch (node.nodeType) {
	      case Node.TEXT_NODE:
	        // This probably isn't exactly right, but mostly works...
	        var text = node.nodeValue.replace(/[ \n\t]+/g, ' ');
	        output.currentLine.push(firepad.Text(text, state.textFormatting));
	        break;
	      case Node.ELEMENT_NODE:
	        var style = node.getAttribute('style') || '';
	        state = parseStyle(state, style);
	        switch (node.nodeName.toLowerCase()) {
	          case 'div':
	          case 'h1':
	          case 'h2':
	          case 'h3':
	          case 'p':
	            output.newlineIfNonEmpty(state);
	            parseChildren(node, state, output);
	            output.newlineIfNonEmpty(state);
	            break;
	          case 'center':
	            state = state.withAlign('center');
	            output.newlineIfNonEmpty(state);
	            parseChildren(node, state.withAlign('center'), output);
	            output.newlineIfNonEmpty(state);
	            break;
	          case 'b':
	          case 'strong':
	            parseChildren(node, state.withTextFormatting(state.textFormatting.bold(true)), output);
	            break;
	          case 'u':
	            parseChildren(node, state.withTextFormatting(state.textFormatting.underline(true)), output);
	            break;
	          case 'i':
	          case 'em':
	            parseChildren(node, state.withTextFormatting(state.textFormatting.italic(true)), output);
	            break;
	          case 's':
	            parseChildren(node, state.withTextFormatting(state.textFormatting.strike(true)), output);
	            break;
	          case 'font':
	            var face = node.getAttribute('face');
	            var color = node.getAttribute('color');
	            var size = parseInt(node.getAttribute('size'));
	            if (face) { state = state.withTextFormatting(state.textFormatting.font(face)); }
	            if (color) { state = state.withTextFormatting(state.textFormatting.color(color)); }
	            if (size) { state = state.withTextFormatting(state.textFormatting.fontSize(size)); }
	            parseChildren(node, state, output);
	            break;
	          case 'br':
	            output.newline(state);
	            break;
	          case 'ul':
	            output.newlineIfNonEmptyOrListItem(state);
	            var listType = node.getAttribute('class') === 'firepad-todo' ? LIST_TYPE.TODO : LIST_TYPE.UNORDERED;
	            parseChildren(node, state.withListType(listType).withIncreasedIndent(), output);
	            output.newlineIfNonEmpty(state);
	            break;
	          case 'ol':
	            output.newlineIfNonEmptyOrListItem(state);
	            parseChildren(node, state.withListType(LIST_TYPE.ORDERED).withIncreasedIndent(), output);
	            output.newlineIfNonEmpty(state);
	            break;
	          case 'li':
	            parseListItem(node, state, output);
	            break;
	          case 'style': // ignore.
	            break;
	          default:
	            parseChildren(node, state, output);
	            break;
	        }
	        break;
	      default:
	        // Ignore other nodes (comments, etc.)
	        break;
	    }
	  }

	  function parseChildren(node, state, output) {
	    if (node.hasChildNodes()) {
	      for(var i = 0; i < node.childNodes.length; i++) {
	        parseNode(node.childNodes[i], state, output);
	      }
	    }
	  }

	  function parseListItem(node, state, output) {
	    // Note: <li> is weird:
	    // * Only the first line in the <li> tag should be a list item (i.e. with a bullet or number next to it).
	    // * <li></li> should create an empty list item line; <li><ol><li></li></ol></li> should create two.

	    output.newlineIfNonEmptyOrListItem(state);

	    var listType = (node.getAttribute('class') === 'firepad-checked') ? LIST_TYPE.TODOCHECKED : state.listType;
	    output.makeListItem(listType);
	    var oldLine = output.currentLine;

	    parseChildren(node, state, output);

	    if (oldLine === output.currentLine || output.currentLine.length > 0) {
	      output.newline(state);
	    }
	  }

	  function parseStyle(state, styleString) {
	    var textFormatting = state.textFormatting;
	    var lineFormatting = state.lineFormatting;
	    var styles = styleString.split(';');
	    for(var i = 0; i < styles.length; i++) {
	      var stylePieces = styles[i].split(':');
	      if (stylePieces.length !== 2)
	        continue;
	      var prop = firepad.utils.trim(stylePieces[0]).toLowerCase();
	      var val = firepad.utils.trim(stylePieces[1]).toLowerCase();
	      switch (prop) {
	        case 'text-decoration':
	          var underline = val.indexOf('underline') >= 0;
	          var strike = val.indexOf('line-through') >= 0;
	          textFormatting = textFormatting.underline(underline).strike(strike);
	          break;
	        case 'font-weight':
	          var bold = (val === 'bold') || parseInt(val) >= 600;
	          textFormatting = textFormatting.bold(bold);
	          break;
	        case 'font-style':
	          var italic = (val === 'italic' || val === 'oblique');
	          textFormatting = textFormatting.italic(italic);
	          break;
	        case 'color':
	          textFormatting = textFormatting.color(val);
	          break;
	        case 'background-color':
	          textFormatting = textFormatting.backgroundColor(val);
	          break;
	        case 'text-align':
	          lineFormatting = lineFormatting.align(val);
	          break;
	        case 'font-size':
	          var size = null;
	          var allowedValues = ['px','pt','%','em','xx-small','x-small','small','medium','large','x-large','xx-large','smaller','larger'];
	          if (firepad.utils.stringEndsWith(val, allowedValues)) {
	            size = val;
	          }
	          else if (parseInt(val)) {
	            size = parseInt(val)+'px';
	          }
	          if (size) {
	            textFormatting = textFormatting.fontSize(size);
	          }
	          break;
	        case 'font-family':
	          var font = firepad.utils.trim(val.split(',')[0]); // get first font.
	          font = font.replace(/['"]/g, ''); // remove quotes.
	          font = font.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase() });
	          textFormatting = textFormatting.font(font);
	          break;
	      }
	    }
	    return state.withLineFormatting(lineFormatting).withTextFormatting(textFormatting);
	  }

	  return parseHtml;
	})();

	var firepad = firepad || { };

	/**
	 * Helper to turn Firebase contents into HMTL.
	 * Takes a doc and an entity manager
	 */
	firepad.SerializeHtml = (function () {

	  var utils      = firepad.utils;
	  var ATTR       = firepad.AttributeConstants;
	  var LIST_TYPE  = firepad.LineFormatting.LIST_TYPE;
	  var TODO_STYLE = '<style>ul.firepad-todo { list-style: none; margin-left: 0; padding-left: 0; } ul.firepad-todo > li { padding-left: 1em; text-indent: -1em; } ul.firepad-todo > li:before { content: "\\2610"; padding-right: 5px; } ul.firepad-todo > li.firepad-checked:before { content: "\\2611"; padding-right: 5px; }</style>\n';

	  function open(listType) {
	    return (listType === LIST_TYPE.ORDERED) ? '<ol>' :
	           (listType === LIST_TYPE.UNORDERED) ? '<ul>' :
	           '<ul class="firepad-todo">';
	  }

	  function close(listType) {
	    return (listType === LIST_TYPE.ORDERED) ? '</ol>' : '</ul>';
	  }

	  function compatibleListType(l1, l2) {
	    return (l1 === l2) ||
	        (l1 === LIST_TYPE.TODO && l2 === LIST_TYPE.TODOCHECKED) ||
	        (l1 === LIST_TYPE.TODOCHECKED && l2 === LIST_TYPE.TODO);
	  }

	  function textToHtml(text) {
	    return text.replace(/&/g, '&amp;')
	        .replace(/"/g, '&quot;')
	        .replace(/'/g, '&#39;')
	        .replace(/</g, '&lt;')
	        .replace(/>/g, '&gt;')
	        .replace(/\u00a0/g, '&nbsp;')
	  }

	  function serializeHtml(doc, entityManager) {
	    var html = '';
	    var newLine = true;
	    var listTypeStack = [];
	    var inListItem = false;
	    var firstLine = true;
	    var emptyLine = true;
	    var i = 0, op = doc.ops[i];
	    var usesTodo = false;
	    while(op) {
	      utils.assert(op.isInsert());
	      var attrs = op.attributes;

	      if (newLine) {
	        newLine = false;

	        var indent = 0, listType = null, lineAlign = 'left';
	        if (ATTR.LINE_SENTINEL in attrs) {
	          indent = attrs[ATTR.LINE_INDENT] || 0;
	          listType = attrs[ATTR.LIST_TYPE] || null;
	          lineAlign = attrs[ATTR.LINE_ALIGN] || 'left';
	        }
	        if (listType) {
	          indent = indent || 1; // lists are automatically indented at least 1.
	        }

	        if (inListItem) {
	          html += '</li>';
	          inListItem = false;
	        } else if (!firstLine) {
	          if (emptyLine) {
	            html += '<br/>';
	          }
	          html += '</div>';
	        }
	        firstLine = false;

	        // Close any extra lists.
	        utils.assert(indent >= 0, "Indent must not be negative.");
	        while (listTypeStack.length > indent ||
	            (indent === listTypeStack.length && listType !== null && !compatibleListType(listType, listTypeStack[listTypeStack.length - 1]))) {
	          html += close(listTypeStack.pop());
	        }

	        // Open any needed lists.
	        while (listTypeStack.length < indent) {
	          var toOpen = listType || LIST_TYPE.UNORDERED; // default to unordered lists for indenting non-list-item lines.
	          usesTodo = listType == LIST_TYPE.TODO || listType == LIST_TYPE.TODOCHECKED || usesTodo;
	          html += open(toOpen);
	          listTypeStack.push(toOpen);
	        }

	        var style = (lineAlign !== 'left') ? ' style="text-align:' + lineAlign + '"': '';
	        if (listType) {
	          var clazz = '';
	          switch (listType)
	          {
	            case LIST_TYPE.TODOCHECKED:
	              clazz = ' class="firepad-checked"';
	              break;
	            case LIST_TYPE.TODO:
	              clazz = ' class="firepad-unchecked"';
	              break;
	          }
	          html += "<li" + clazz + style + ">";
	          inListItem = true;
	        } else {
	          // start line div.
	          html += '<div' + style + '>';
	        }
	        emptyLine = true;
	      }

	      if (ATTR.LINE_SENTINEL in attrs) {
	        op = doc.ops[++i];
	        continue;
	      }

	      if (ATTR.ENTITY_SENTINEL in attrs) {
	        for(var j = 0; j < op.text.length; j++) {
	          var entity = firepad.Entity.fromAttributes(attrs);
	          var element = entityManager.exportToElement(entity);
	          html += element.outerHTML;
	        }

	        op = doc.ops[++i];
	        continue;
	      }

	      var prefix = '', suffix = '';
	      for(var attr in attrs) {
	        var value = attrs[attr];
	        var start, end;
	        if (attr === ATTR.BOLD || attr === ATTR.ITALIC || attr === ATTR.UNDERLINE || attr === ATTR.STRIKE) {
	          utils.assert(value === true);
	          start = end = attr;
	        } else if (attr === ATTR.FONT_SIZE) {
	          start = 'span style="font-size: ' + value;
	          start += (typeof value !== "string" || value.indexOf("px", value.length - 2) === -1) ? 'px"' : '"';
	          end = 'span';
	        } else if (attr === ATTR.FONT) {
	          start = 'span style="font-family: ' + value + '"';
	          end = 'span';
	        } else if (attr === ATTR.COLOR) {
	          start = 'span style="color: ' + value + '"';
	          end = 'span';
	        } else if (attr === ATTR.BACKGROUND_COLOR) {
	          start = 'span style="background-color: ' + value + '"';
	          end = 'span';
	        }
	        else {
	          utils.log(false, "Encountered unknown attribute while rendering html: " + attr);
	        }
	        if (start) prefix += '<' + start + '>';
	        if (end) suffix = '</' + end + '>' + suffix;
	      }

	      var text = op.text;
	      var newLineIndex = text.indexOf('\n');
	      if (newLineIndex >= 0) {
	        newLine = true;
	        if (newLineIndex < text.length - 1) {
	          // split op.
	          op = new firepad.TextOp('insert', text.substr(newLineIndex+1), attrs);
	        } else {
	          op = doc.ops[++i];
	        }
	        text = text.substr(0, newLineIndex);
	      } else {
	        op = doc.ops[++i];
	      }

	      // Replace leading, trailing, and consecutive spaces with nbsp's to make sure they're preserved.
	      text = text.replace(/  +/g, function(str) {
	        return new Array(str.length + 1).join('\u00a0');
	      }).replace(/^ /, '\u00a0').replace(/ $/, '\u00a0');
	      if (text.length > 0) {
	        emptyLine = false;
	      }

	      html += prefix + textToHtml(text) + suffix;
	    }

	    if (inListItem) {
	      html += '</li>';
	    } else if (!firstLine) {
	      if (emptyLine) {
	        html += '&nbsp;';
	      }
	      html += '</div>';
	    }

	    // Close any extra lists.
	    while (listTypeStack.length > 0) {
	      html += close(listTypeStack.pop());
	    }

	    if (usesTodo) {
	      html = TODO_STYLE + html;
	    }

	    return html;
	  }

	  return serializeHtml;
	})();

	var firepad = firepad || { };

	/**
	 * Helper to turn pieces of text into insertable operations
	 */
	firepad.textPiecesToInserts = function(atNewLine, textPieces) {
	  var inserts = [];

	  function insert(string, attributes) {
	    if (string instanceof firepad.Text) {
	      attributes = string.formatting.attributes;
	      string     = string.text;
	    }

	    inserts.push({string: string, attributes: attributes});
	    atNewLine = string[string.length-1] === '\n';
	  }

	  function insertLine(line) {
	    // HACK: We should probably force a newline if there isn't one already.  But due to
	    // the way this is used for inserting HTML, we end up inserting a "line" in the middle
	    // of text, in which case we don't want to actually insert a newline.
	    if (atNewLine) {
	      insert(firepad.sentinelConstants.LINE_SENTINEL_CHARACTER, line.formatting.attributes);
	    }

	    for(var i = 0; i < line.textPieces.length; i++) {
	      insert(line.textPieces[i]);
	    }

	    insert('\n');
	  }

	  for(var i = 0; i < textPieces.length; i++) {
	    if (textPieces[i] instanceof firepad.Line) {
	      insertLine(textPieces[i]);
	    } else {
	      insert(textPieces[i]);
	    }
	  }

	  return inserts;
	}

	var firepad = firepad || { };

	/**
	 * Instance of headless Firepad for use in NodeJS. Supports get/set on text/html.
	 */
	firepad.Headless = (function() {

	  var TextOperation   = firepad.TextOperation;
	  var FirebaseAdapter = firepad.FirebaseAdapter;
	  var EntityManager   = firepad.EntityManager;
	  var ParseHtml       = firepad.ParseHtml;

	  function Headless(refOrPath) {
	    // Allow calling without new.
	    if (!(this instanceof Headless)) { return new Headless(refOrPath); }

	    if (typeof refOrPath === 'string') {
	      if (typeof Firebase !== 'function') {
	        var firebase = __webpack_require__(18);
	      } else {
	        var firebase = Firebase;
	      }
	      var ref = new firebase(refOrPath);
	    } else {
	      var ref = refOrPath;
	    }

	    this.entityManager_  = new EntityManager();

	    this.firebaseAdapter_ = new FirebaseAdapter(ref);
	    this.ready_ = false;
	    this.zombie_ = false;
	  }

	  Headless.prototype.getDocument = function(callback) {
	    var self = this;

	    if (self.ready_) {
	      return callback(self.firebaseAdapter_.getDocument());
	    }

	    self.firebaseAdapter_.on('ready', function() {
	      self.ready_ = true;
	      callback(self.firebaseAdapter_.getDocument());
	    });
	  }

	  Headless.prototype.getText = function(callback) {
	    if (this.zombie_) {
	      throw new Error('You can\'t use a firepad.Headless after calling dispose()!');
	    }

	    this.getDocument(function(doc) {
	      var text = doc.apply('');

	      // Strip out any special characters from Rich Text formatting
	      for (key in firepad.sentinelConstants) {
	        text = text.replace(new RegExp(firepad.sentinelConstants[key], 'g'), '');
	      }
	      callback(text);
	    });
	  }

	  Headless.prototype.setText = function(text, callback) {
	    if (this.zombie_) {
	      throw new Error('You can\'t use a firepad.Headless after calling dispose()!');
	    }

	    var op = TextOperation().insert(text);
	    this.sendOperationWithRetry(op, callback);
	  }

	  Headless.prototype.initializeFakeDom = function(callback) {
	    if (typeof document === 'object' || typeof firepad.document === 'object') {
	      callback();
	    } else {
	      __webpack_require__(43).env('<head></head><body></body>', function(err, window) {
	        if (firepad.document) {
	          // Return if we've already made a jsdom to avoid making more than one
	          // This would be easier with promises but we want to avoid introducing
	          // another dependency for just headless mode.
	          window.close();
	          return callback();
	        }
	        firepad.document = window.document;
	        callback();
	      });
	    }
	  }

	  Headless.prototype.getHtml = function(callback) {
	    var self = this;

	    if (this.zombie_) {
	      throw new Error('You can\'t use a firepad.Headless after calling dispose()!');
	    }

	    self.initializeFakeDom(function() {
	      self.getDocument(function(doc) {
	        callback(firepad.SerializeHtml(doc, self.entityManager_));
	      });
	    });
	  }

	  Headless.prototype.setHtml = function(html, callback) {
	    var self = this;

	    if (this.zombie_) {
	      throw new Error('You can\'t use a firepad.Headless after calling dispose()!');
	    }

	    self.initializeFakeDom(function() {
	      var textPieces = ParseHtml(html, self.entityManager_);
	      var inserts    = firepad.textPiecesToInserts(true, textPieces);
	      var op         = new TextOperation();

	      for (var i = 0; i < inserts.length; i++) {
	        op.insert(inserts[i].string, inserts[i].attributes);
	      }

	      self.sendOperationWithRetry(op, callback);
	    });
	  }

	  Headless.prototype.sendOperationWithRetry = function(operation, callback) {
	    var self = this;

	    self.getDocument(function(doc) {
	      var op = operation.clone()['delete'](doc.targetLength);
	      self.firebaseAdapter_.sendOperation(op, function(err, committed) {
	        if (committed) {
	          if (typeof callback !== "undefined") {
	            callback(null, committed);
	          }
	        } else {
	          self.sendOperationWithRetry(operation, callback);
	        }
	      });
	    });
	  }

	  Headless.prototype.dispose = function() {
	    this.zombie_ = true; // We've been disposed.  No longer valid to do anything.

	    this.firebaseAdapter_.dispose();
	  };

	  return Headless;
	})();

	var firepad = firepad || { };

	firepad.Firepad = (function(global) {
	  if (!firepad.RichTextCodeMirrorAdapter) {
	    throw new Error("Oops! It looks like you're trying to include lib/firepad.js directly.  This is actually one of many source files that make up firepad.  You want dist/firepad.js instead.");
	  }
	  var RichTextCodeMirrorAdapter = firepad.RichTextCodeMirrorAdapter;
	  var RichTextCodeMirror = firepad.RichTextCodeMirror;
	  var RichTextToolbar = firepad.RichTextToolbar;
	  var ACEAdapter = firepad.ACEAdapter;
	  var FirebaseAdapter = firepad.FirebaseAdapter;
	  var EditorClient = firepad.EditorClient;
	  var EntityManager = firepad.EntityManager;
	  var ATTR = firepad.AttributeConstants;
	  var utils = firepad.utils;
	  var LIST_TYPE = firepad.LineFormatting.LIST_TYPE;
	  var CodeMirror = global.CodeMirror;
	  var ace = global.ace;

	  function Firepad(ref, place, options) {
	    if (!(this instanceof Firepad)) { return new Firepad(ref, place, options); }

	    if (!CodeMirror && !ace) {
	      throw new Error('Couldn\'t find CodeMirror or ACE.  Did you forget to include codemirror.js or ace.js?');
	    }

	    this.zombie_ = false;

	    if (CodeMirror && place instanceof CodeMirror) {
	      this.codeMirror_ = this.editor_ = place;
	      var curValue = this.codeMirror_.getValue();
	      if (curValue !== '') {
	        throw new Error("Can't initialize Firepad with a CodeMirror instance that already contains text.");
	      }
	    } else if (ace && place && place.session instanceof ace.EditSession) {
	      this.ace_ = this.editor_ = place;
	      curValue = this.ace_.getValue();
	      if (curValue !== '') {
	        throw new Error("Can't initialize Firepad with an ACE instance that already contains text.");
	      }
	    } else {
	      this.codeMirror_ = this.editor_ = new CodeMirror(place);
	    }

	    var editorWrapper = this.codeMirror_ ? this.codeMirror_.getWrapperElement() : this.ace_.container;
	    this.firepadWrapper_ = utils.elt("div", null, { 'class': 'firepad' });
	    editorWrapper.parentNode.replaceChild(this.firepadWrapper_, editorWrapper);
	    this.firepadWrapper_.appendChild(editorWrapper);

	    // Don't allow drag/drop because it causes issues.  See https://github.com/firebase/firepad/issues/36
	    utils.on(editorWrapper, 'dragstart', utils.stopEvent);

	    // Provide an easy way to get the firepad instance associated with this CodeMirror instance.
	    this.editor_.firepad = this;

	    this.options_ = options || { };

	    if (this.getOption('richTextShortcuts', false)) {
	      if (!CodeMirror.keyMap['richtext']) {
	        this.initializeKeyMap_();
	      }
	      this.codeMirror_.setOption('keyMap', 'richtext');
	      this.firepadWrapper_.className += ' firepad-richtext';
	    }

	    this.imageInsertionUI = this.getOption('imageInsertionUI', true);

	    if (this.getOption('richTextToolbar', false)) {
	      this.addToolbar_();
	      this.firepadWrapper_.className += ' firepad-richtext firepad-with-toolbar';
	    }

	    this.addPoweredByLogo_();

	    // Now that we've mucked with CodeMirror, refresh it.
	    if (this.codeMirror_)
	      this.codeMirror_.refresh();

	    var userId = this.getOption('userId', ref.push().key());
	    var userColor = this.getOption('userColor', colorFromUserId(userId));

	    this.entityManager_ = new EntityManager();

	    this.firebaseAdapter_ = new FirebaseAdapter(ref, userId, userColor);
	    if (this.codeMirror_) {
	      this.richTextCodeMirror_ = new RichTextCodeMirror(this.codeMirror_, this.entityManager_, { cssPrefix: 'firepad-' });
	      this.editorAdapter_ = new RichTextCodeMirrorAdapter(this.richTextCodeMirror_);
	    } else {
	      this.editorAdapter_ = new ACEAdapter(this.ace_);
	    }
	    this.client_ = new EditorClient(this.firebaseAdapter_, this.editorAdapter_);

	    var self = this;
	    this.firebaseAdapter_.on('cursor', function() {
	      self.trigger.apply(self, ['cursor'].concat([].slice.call(arguments)));
	    });

	    if (this.codeMirror_) {
	      this.richTextCodeMirror_.on('newLine', function() {
	        self.trigger.apply(self, ['newLine'].concat([].slice.call(arguments)));
	      });
	    }

	    this.firebaseAdapter_.on('ready', function() {
	      self.ready_ = true;

	      if (this.ace_) {
	        this.editorAdapter_.grabDocumentState();
	      }

	      var defaultText = self.getOption('defaultText', null);
	      if (defaultText && self.isHistoryEmpty()) {
	        self.setText(defaultText);
	      }

	      self.trigger('ready');
	    });

	    this.client_.on('synced', function(isSynced) { self.trigger('synced', isSynced)} );

	    // Hack for IE8 to make font icons work more reliably.
	    // http://stackoverflow.com/questions/9809351/ie8-css-font-face-fonts-only-working-for-before-content-on-over-and-sometimes
	    if (navigator.appName == 'Microsoft Internet Explorer' && navigator.userAgent.match(/MSIE 8\./)) {
	      window.onload = function() {
	        var head = document.getElementsByTagName('head')[0],
	          style = document.createElement('style');
	        style.type = 'text/css';
	        style.styleSheet.cssText = ':before,:after{content:none !important;}';
	        head.appendChild(style);
	        setTimeout(function() {
	          head.removeChild(style);
	        }, 0);
	      };
	    }
	  }
	  utils.makeEventEmitter(Firepad);

	  // For readability, these are the primary "constructors", even though right now they're just aliases for Firepad.
	  Firepad.fromCodeMirror = Firepad;
	  Firepad.fromACE = Firepad;

	  Firepad.prototype.dispose = function() {
	    this.zombie_ = true; // We've been disposed.  No longer valid to do anything.

	    // Unwrap the editor.
	    var editorWrapper = this.codeMirror_ ? this.codeMirror_.getWrapperElement() : this.ace_.container;
	    this.firepadWrapper_.removeChild(editorWrapper);
	    this.firepadWrapper_.parentNode.replaceChild(editorWrapper, this.firepadWrapper_);

	    this.editor_.firepad = null;

	    if (this.codeMirror_ && this.codeMirror_.getOption('keyMap') === 'richtext') {
	      this.codeMirror_.setOption('keyMap', 'default');
	    }

	    this.firebaseAdapter_.dispose();
	    this.editorAdapter_.detach();
	    if (this.richTextCodeMirror_)
	      this.richTextCodeMirror_.detach();
	  };

	  Firepad.prototype.setUserId = function(userId) {
	    this.firebaseAdapter_.setUserId(userId);
	  };

	  Firepad.prototype.setUserColor = function(color) {
	    this.firebaseAdapter_.setColor(color);
	  };

	  Firepad.prototype.getText = function() {
	    this.assertReady_('getText');
	    if (this.codeMirror_)
	      return this.richTextCodeMirror_.getText();
	    else
	      return this.ace_.getSession().getDocument().getValue();
	  };

	  Firepad.prototype.setText = function(textPieces) {
	    this.assertReady_('setText');
	    if (this.ace_) {
	      return this.ace_.getSession().getDocument().setValue(textPieces);
	    } else {
	      // HACK: Hide CodeMirror during setText to prevent lots of extra renders.
	      this.codeMirror_.getWrapperElement().setAttribute('style', 'display: none');
	      this.codeMirror_.setValue("");
	      this.insertText(0, textPieces);
	      this.codeMirror_.getWrapperElement().setAttribute('style', '');
	      this.codeMirror_.refresh();
	    }
	    this.editorAdapter_.setCursor({position: 0, selectionEnd: 0});
	  };

	  Firepad.prototype.insertTextAtCursor = function(textPieces) {
	    this.insertText(this.codeMirror_.indexFromPos(this.codeMirror_.getCursor()), textPieces);
	  };

	  Firepad.prototype.insertText = function(index, textPieces) {
	    utils.assert(!this.ace_, "Not supported for ace yet.");
	    this.assertReady_('insertText');

	    // Wrap it in an array if it's not already.
	    if(Object.prototype.toString.call(textPieces) !== '[object Array]') {
	      textPieces = [textPieces];
	    }

	    // TODO: Batch this all into a single operation.
	    // HACK: We should check if we're actually at the beginning of a line; but checking for index == 0 is sufficient
	    // for the setText() case.
	    var atNewLine = index === 0;
	    var inserts = firepad.textPiecesToInserts(atNewLine, textPieces);

	    for (var i = 0; i < inserts.length; i++) {
	      var string     = inserts[i].string;
	      var attributes = inserts[i].attributes;
	      this.richTextCodeMirror_.insertText(index, string, attributes);
	      index += string.length;
	    }
	  };

	  Firepad.prototype.getOperationForSpan = function(start, end) {
	    var text = this.richTextCodeMirror_.getRange(start, end);
	    var spans = this.richTextCodeMirror_.getAttributeSpans(start, end);
	    var pos = 0;
	    var op = new firepad.TextOperation();
	    for(var i = 0; i < spans.length; i++) {
	      op.insert(text.substr(pos, spans[i].length), spans[i].attributes);
	      pos += spans[i].length;
	    }
	    return op;
	  };

	  Firepad.prototype.getHtml = function() {
	    return this.getHtmlFromRange(null, null);
	  };

	  Firepad.prototype.getHtmlFromSelection = function() {
	    var startPos = this.codeMirror_.getCursor('start'), endPos = this.codeMirror_.getCursor('end');
	    var startIndex = this.codeMirror_.indexFromPos(startPos), endIndex = this.codeMirror_.indexFromPos(endPos);
	    return this.getHtmlFromRange(startIndex, endIndex);
	  };

	  Firepad.prototype.getHtmlFromRange = function(start, end) {
	    this.assertReady_('getHtmlFromRange');
	    var doc = (start != null && end != null) ?
	      this.getOperationForSpan(start, end) :
	      this.getOperationForSpan(0, this.codeMirror_.getValue().length);
	    return firepad.SerializeHtml(doc, this.entityManager_);
	  };

	  Firepad.prototype.insertHtml = function (index, html) {
	    var lines = firepad.ParseHtml(html, this.entityManager_);
	    this.insertText(index, lines);
	  };

	  Firepad.prototype.insertHtmlAtCursor = function (html) {
	    this.insertHtml(this.codeMirror_.indexFromPos(this.codeMirror_.getCursor()), html);
	  };

	  Firepad.prototype.setHtml = function (html) {
	    var lines = firepad.ParseHtml(html, this.entityManager_);
	    this.setText(lines);
	  };

	  Firepad.prototype.isHistoryEmpty = function() {
	    this.assertReady_('isHistoryEmpty');
	    return this.firebaseAdapter_.isHistoryEmpty();
	  };

	  Firepad.prototype.bold = function() {
	    this.richTextCodeMirror_.toggleAttribute(ATTR.BOLD);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.italic = function() {
	    this.richTextCodeMirror_.toggleAttribute(ATTR.ITALIC);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.underline = function() {
	    this.richTextCodeMirror_.toggleAttribute(ATTR.UNDERLINE);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.strike = function() {
	    this.richTextCodeMirror_.toggleAttribute(ATTR.STRIKE);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.fontSize = function(size) {
	    this.richTextCodeMirror_.setAttribute(ATTR.FONT_SIZE, size);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.font = function(font) {
	    this.richTextCodeMirror_.setAttribute(ATTR.FONT, font);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.color = function(color) {
	    this.richTextCodeMirror_.setAttribute(ATTR.COLOR, color);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.highlight = function() {
	    this.richTextCodeMirror_.toggleAttribute(ATTR.BACKGROUND_COLOR, 'rgba(255,255,0,.65)');
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.align = function(alignment) {
	    if (alignment !== 'left' && alignment !== 'center' && alignment !== 'right') {
	      throw new Error('align() must be passed "left", "center", or "right".');
	    }
	    this.richTextCodeMirror_.setLineAttribute(ATTR.LINE_ALIGN, alignment);
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.orderedList = function() {
	    this.richTextCodeMirror_.toggleLineAttribute(ATTR.LIST_TYPE, 'o');
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.unorderedList = function() {
	    this.richTextCodeMirror_.toggleLineAttribute(ATTR.LIST_TYPE, 'u');
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.todo = function() {
	    this.richTextCodeMirror_.toggleTodo();
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.newline = function() {
	    this.richTextCodeMirror_.newline();
	  };

	  Firepad.prototype.deleteLeft = function() {
	    this.richTextCodeMirror_.deleteLeft();
	  };

	  Firepad.prototype.deleteRight = function() {
	    this.richTextCodeMirror_.deleteRight();
	  };

	  Firepad.prototype.indent = function() {
	    this.richTextCodeMirror_.indent();
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.unindent = function() {
	    this.richTextCodeMirror_.unindent();
	    this.codeMirror_.focus();
	  };

	  Firepad.prototype.undo = function() {
	    this.codeMirror_.undo();
	  };

	  Firepad.prototype.redo = function() {
	    this.codeMirror_.redo();
	  };

	  Firepad.prototype.insertEntity = function(type, info, origin) {
	    this.richTextCodeMirror_.insertEntityAtCursor(type, info, origin);
	  };

	  Firepad.prototype.insertEntityAt = function(index, type, info, origin) {
	    this.richTextCodeMirror_.insertEntityAt(index, type, info, origin);
	  };

	  Firepad.prototype.registerEntity = function(type, options) {
	    this.entityManager_.register(type, options);
	  };

	  Firepad.prototype.getOption = function(option, def) {
	    return (option in this.options_) ? this.options_[option] : def;
	  };

	  Firepad.prototype.assertReady_ = function(funcName) {
	    if (!this.ready_) {
	      throw new Error('You must wait for the "ready" event before calling ' + funcName + '.');
	    }
	    if (this.zombie_) {
	      throw new Error('You can\'t use a Firepad after calling dispose()!  [called ' + funcName + ']');
	    }
	  };

	  Firepad.prototype.makeImageDialog_ = function() {
	    this.makeDialog_('img', 'Insert image url');
	  };

	  Firepad.prototype.makeDialog_ = function(id, placeholder) {
	   var self = this;

	   var hideDialog = function() {
	     var dialog = document.getElementById('overlay');
	     dialog.style.visibility = "hidden";
	     self.firepadWrapper_.removeChild(dialog);
	   };

	   var cb = function() {
	     var dialog = document.getElementById('overlay');
	     dialog.style.visibility = "hidden";
	     var src = document.getElementById(id).value;
	     if (src !== null)
	       self.insertEntity(id, { 'src': src });
	     self.firepadWrapper_.removeChild(dialog);
	   };

	   var input = utils.elt('input', null, { 'class':'firepad-dialog-input', 'id':id, 'type':'text', 'placeholder':placeholder, 'autofocus':'autofocus' });

	   var submit = utils.elt('a', 'Submit', { 'class': 'firepad-btn', 'id':'submitbtn' });
	   utils.on(submit, 'click', utils.stopEventAnd(cb));

	   var cancel = utils.elt('a', 'Cancel', { 'class': 'firepad-btn' });
	   utils.on(cancel, 'click', utils.stopEventAnd(hideDialog));

	   var buttonsdiv = utils.elt('div', [submit, cancel], { 'class':'firepad-btn-group' });

	   var div = utils.elt('div', [input, buttonsdiv], { 'class':'firepad-dialog-div' });
	   var dialog = utils.elt('div', [div], { 'class': 'firepad-dialog', id:'overlay' });

	   this.firepadWrapper_.appendChild(dialog);
	  };

	  Firepad.prototype.addToolbar_ = function() {
	    this.toolbar = new RichTextToolbar(this.imageInsertionUI);

	    this.toolbar.on('undo', this.undo, this);
	    this.toolbar.on('redo', this.redo, this);
	    this.toolbar.on('bold', this.bold, this);
	    this.toolbar.on('italic', this.italic, this);
	    this.toolbar.on('underline', this.underline, this);
	    this.toolbar.on('strike', this.strike, this);
	    this.toolbar.on('font-size', this.fontSize, this);
	    this.toolbar.on('font', this.font, this);
	    this.toolbar.on('color', this.color, this);
	    this.toolbar.on('left', function() { this.align('left')}, this);
	    this.toolbar.on('center', function() { this.align('center')}, this);
	    this.toolbar.on('right', function() { this.align('right')}, this);
	    this.toolbar.on('ordered-list', this.orderedList, this);
	    this.toolbar.on('unordered-list', this.unorderedList, this);
	    this.toolbar.on('todo-list', this.todo, this);
	    this.toolbar.on('indent-increase', this.indent, this);
	    this.toolbar.on('indent-decrease', this.unindent, this);
	    this.toolbar.on('insert-image', this.makeImageDialog_, this);

	    this.firepadWrapper_.insertBefore(this.toolbar.element(), this.firepadWrapper_.firstChild);
	  };

	  Firepad.prototype.addPoweredByLogo_ = function() {
	    var poweredBy = utils.elt('a', null, { 'class': 'powered-by-firepad'} );
	    poweredBy.setAttribute('href', 'http://www.firepad.io/');
	    poweredBy.setAttribute('target', '_blank');
	    this.firepadWrapper_.appendChild(poweredBy)
	  };

	  Firepad.prototype.initializeKeyMap_ = function() {
	    function binder(fn) {
	      return function(cm) {
	        // HACK: CodeMirror will often call our key handlers within a cm.operation(), and that
	        // can mess us up (we rely on events being triggered synchronously when we make CodeMirror
	        // edits).  So to escape any cm.operation(), we do a setTimeout.
	        setTimeout(function() {
	          fn.call(cm.firepad);
	        }, 0);
	      }
	    }

	    CodeMirror.keyMap["richtext"] = {
	      "Ctrl-B": binder(this.bold),
	      "Cmd-B": binder(this.bold),
	      "Ctrl-I": binder(this.italic),
	      "Cmd-I": binder(this.italic),
	      "Ctrl-U": binder(this.underline),
	      "Cmd-U": binder(this.underline),
	      "Ctrl-H": binder(this.highlight),
	      "Cmd-H": binder(this.highlight),
	      "Enter": binder(this.newline),
	      "Delete": binder(this.deleteRight),
	      "Backspace": binder(this.deleteLeft),
	      "Tab": binder(this.indent),
	      "Shift-Tab": binder(this.unindent),
	      fallthrough: ['default']
	    };
	  };

	  function colorFromUserId (userId) {
	    var a = 1;
	    for (var i = 0; i < userId.length; i++) {
	      a = 17 * (a+userId.charCodeAt(i)) % 360;
	    }
	    var hue = a/360;

	    return hsl2hex(hue, 1, 0.75);
	  }

	  function rgb2hex (r, g, b) {
	    function digits (n) {
	      var m = Math.round(255*n).toString(16);
	      return m.length === 1 ? '0'+m : m;
	    }
	    return '#' + digits(r) + digits(g) + digits(b);
	  }

	  function hsl2hex (h, s, l) {
	    if (s === 0) { return rgb2hex(l, l, l); }
	    var var2 = l < 0.5 ? l * (1+s) : (l+s) - (s*l);
	    var var1 = 2 * l - var2;
	    var hue2rgb = function (hue) {
	      if (hue < 0) { hue += 1; }
	      if (hue > 1) { hue -= 1; }
	      if (6*hue < 1) { return var1 + (var2-var1)*6*hue; }
	      if (2*hue < 1) { return var2; }
	      if (3*hue < 2) { return var1 + (var2-var1)*6*(2/3 - hue); }
	      return var1;
	    };
	    return rgb2hex(hue2rgb(h+1/3), hue2rgb(h), hue2rgb(h-1/3));
	  }

	  return Firepad;
	})(this);

	// Export Text classes
	firepad.Firepad.Formatting = firepad.Formatting;
	firepad.Firepad.Text = firepad.Text;
	firepad.Firepad.Entity = firepad.Entity;
	firepad.Firepad.LineFormatting = firepad.LineFormatting;
	firepad.Firepad.Line = firepad.Line;
	firepad.Firepad.TextOperation = firepad.TextOperation;
	firepad.Firepad.Headless = firepad.Headless;

	// Export adapters
	firepad.Firepad.RichTextCodeMirrorAdapter = firepad.RichTextCodeMirrorAdapter;
	firepad.Firepad.ACEAdapter = firepad.ACEAdapter;

	return firepad.Firepad; }, this);

/***/ },
/* 73 */
/***/ function(module, exports) {

	exports.availableDocumentFeatures = [
	  'FetchExternalResources',
	  'ProcessExternalResources',
	  'MutationEvents',
	  'SkipExternalResources'
	];

	exports.defaultDocumentFeatures = {
	  "FetchExternalResources": ['script', 'link'/*, 'img', 'css', 'frame'*/],
	  "ProcessExternalResources": ['script'/*, 'frame', 'iframe'*/],
	  "MutationEvents": '2.0',
	  "SkipExternalResources": false
	};

	exports.applyDocumentFeatures = function(doc, features) {
	  var i, maxFeatures = exports.availableDocumentFeatures.length,
	      defaultFeatures = exports.defaultDocumentFeatures,
	      j,
	      k,
	      featureName,
	      featureSource;

	  features = features || {};

	  for (i=0; i<maxFeatures; i++) {
	    featureName = exports.availableDocumentFeatures[i];
	    if (typeof features[featureName] !== 'undefined') {
	      featureSource = features[featureName];
	    // We have to check the lowercase version also because the Document feature
	    // methods convert everything to lowercase.
	    } else if (typeof features[featureName.toLowerCase()] !== 'undefined') {
	      featureSource = features[featureName.toLowerCase()];
	    } else if (defaultFeatures[featureName]) {
	      featureSource = defaultFeatures[featureName];
	    } else {
	      continue;
	    }

	    doc.implementation._removeFeature(featureName);

	    if (typeof featureSource !== 'undefined') {
	      if (featureSource instanceof Array) {
	        k = featureSource.length;
	        for (j=0; j<k; j++) {
	          doc.implementation._addFeature(featureName, featureSource[j]);
	        }
	      } else {
	        doc.implementation._addFeature(featureName, featureSource);
	      }
	    }
	  }
	};


/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var parse5 = __webpack_require__(119);
	var htmlparser2 = __webpack_require__(28);

	function HtmlToDom(parser, parsingMode) {
	  if (!parser) {
	    if (parsingMode === "xml") {
	      parser = htmlparser2;
	    } else {
	      parser = parse5;
	    }
	  }

	  if (parser.DefaultHandler || (parser.Parser && parser.TreeAdapters)) {

	    // Forgiving HTML parser

	    if (parser.DefaultHandler){
	      // fb55/htmlparser2

	      parser.ParseHtml = function(rawHtml) {
	        var handler = new parser.DefaultHandler();
	        // Check if document is XML
	        var isXML = parsingMode === "xml";
	        var parserInstance = new parser.Parser(handler, {
	          xmlMode: isXML,
	          lowerCaseTags: !isXML,
	          lowerCaseAttributeNames: !isXML,
	          decodeEntities: true
	        });

	        parserInstance.includeLocation = false;
	        parserInstance.parseComplete(rawHtml);
	        return handler.dom;
	      };
	    } else if (parser.Parser && parser.TreeAdapters) {
	      parser.ParseHtml = function (rawHtml) {
	        if (parsingMode === 'xml') {
	          throw new Error('Can\'t parse XML with parse5, please use htmlparser2 instead.');
	        }
	        var instance = new parser.Parser(parser.TreeAdapters.htmlparser2);
	        var dom = instance.parse(rawHtml);
	        return dom.children;
	      };
	    }

	    this.appendHtmlToElement = function(html, element) {

	      if (typeof html !== 'string') {
	        html +='';
	      }

	      var parsed = parser.ParseHtml(html);

	      for (var i = 0; i < parsed.length; i++) {
	        setChild(element, parsed[i]);
	      }

	      return element;
	    };
	    this.appendHtmlToDocument = this.appendHtmlToElement;

	    if (parser.Parser && parser.TreeAdapters) {
	      this.appendHtmlToElement = function (html, element) {

	        if (typeof html !== 'string') {
	          html += '';
	        }

	        var instance = new parser.Parser(parser.TreeAdapters.htmlparser2);
	        var parentElement = parser.TreeAdapters.htmlparser2.createElement(element.tagName.toLowerCase(), element.namespaceURI, []);
	        var dom = instance.parseFragment(html, parentElement);
	        var parsed = dom.children;

	        for (var i = 0; i < parsed.length; i++) {
	          setChild(element, parsed[i]);
	        }

	        return element;
	      };
	    }

	  } else if (parser.moduleName == 'HTML5') { /* HTML5 parser */
	    this.appendHtmlToElement = function(html, element) {

	      if (typeof html !== 'string') {
	        html += '';
	      }
	      if (html.length > 0) {
	        if (element.nodeType == 9) {
	          new parser.Parser({document: element}).parse(html);
	        }
	        else {
	          var p = new parser.Parser({document: element.ownerDocument});
	          p.parse_fragment(html, element);
	        }
	      }
	    };
	  } else {
	    this.appendHtmlToElement = function () {
	      console.log('');
	      console.log('###########################################################');
	      console.log('#  WARNING: No compatible HTML parser was given.');
	      console.log('#  Element.innerHTML setter support has been disabled');
	      console.log('#  Element.innerHTML getter support will still function');
	      console.log('###########################################################');
	      console.log('');
	    };
	  }
	};

	// utility function for forgiving parser
	function setChild(parent, node) {

	  var c, newNode, currentDocument = parent._ownerDocument || parent;

	  switch (node.type)
	  {
	    case 'tag':
	    case 'script':
	    case 'style':
	      try {
	        newNode = currentDocument._createElementNoTagNameValidation(node.name);
	        newNode._namespaceURI = node.namespace || "http://www.w3.org/1999/xhtml";
	        if (node.location) {
	          newNode.sourceLocation = node.location;
	          newNode.sourceLocation.file = parent.sourceLocation.file;
	        }
	      } catch (err) {
	        currentDocument.raise('error', 'invalid markup', {
	          exception: err,
	          node : node
	        });

	        return null;
	      }
	    break;

	    case 'root':
	        // If we are in <template> then implicitly create #document-fragment for it's content
	        if(parent.tagName === 'TEMPLATE' && parent._namespaceURI === 'http://www.w3.org/1999/xhtml') {
	            newNode = currentDocument.createDocumentFragment();
	            // Mark fragment as parser-created template content, so it will be accepted by appendChild()
	            newNode._templateContent = true;
	        }
	    break;

	    case 'text':
	      // HTML entities should already be decoded by the parser, so no need to decode them
	      newNode = currentDocument.createTextNode(node.data);
	    break;

	    case 'comment':
	      newNode = currentDocument.createComment(node.data);
	    break;

	    case 'directive':
	      if (node.name[0] === '?' && node.name.toLowerCase() !== '?xml') {
	        var data = node.data.slice(node.name.length + 1, -1);
	        newNode = currentDocument.createProcessingInstruction(node.name.substring(1), data);
	      } else if (node.name.toLowerCase() === '!doctype') {
	        newNode = parseDocType(currentDocument, '<' + node.data + '>');
	      }
	    break;

	    default:
	      return null;
	    break;
	  }

	  if (!newNode)
	    return null;

	  newNode._localName = node.name;

	  if (node.attribs) {
	    for (c in node.attribs) {
	      var prefix = node['x-attribsPrefix'] && node['x-attribsPrefix'][c] ? node['x-attribsPrefix'][c] + ':' : '';
	      // catchin errors here helps with improperly escaped attributes
	      // but properly fixing parent should (can only?) be done in the htmlparser itself
	      try {
	        newNode._setAttributeNoValidation(prefix + c, node.attribs[c]);
	        newNode.attributes[prefix + c]._namespaceURI = node['x-attribsNamespace'][c] || null;
	        newNode.attributes[prefix + c]._prefix = node['x-attribsPrefix'][c] || null;
	        newNode.attributes[prefix + c]._localName = c;
	      } catch(e2) { /* noop */ }
	    }
	  }

	  if (node.children) {
	    for (c = 0; c < node.children.length; c++) {
	      setChild(newNode, node.children[c]);
	    }
	  }

	  try{
	    return parent.appendChild(newNode);
	  }catch(err){
	    currentDocument.raise('error', err.message, {
	          exception: err,
	          node : node
	        });
	    return null;
	  }
	}

	var HTML5_DOCTYPE = /<!doctype html>/i;
	var PUBLIC_DOCTYPE = /<!doctype\s+([^\s]+)\s+public\s+"([^"]+)"\s+"([^"]+)"/i;
	var SYSTEM_DOCTYPE = /<!doctype\s+([^\s]+)\s+system\s+"([^"]+)"/i;

	function parseDocType(doc, html) {
	  if (HTML5_DOCTYPE.test(html)) {
	    return doc.implementation.createDocumentType("html", "", "");
	  }

	  var publicPieces = PUBLIC_DOCTYPE.exec(html);
	  if (publicPieces) {
	    return doc.implementation.createDocumentType(publicPieces[1], publicPieces[2], publicPieces[3]);
	  }

	  var systemPieces = SYSTEM_DOCTYPE.exec(html);
	  if (systemPieces) {
	    return doc.implementation.createDocumentType(systemPieces[1], systemPieces[2], "");
	  }

	  // Shouldn't get here (the parser shouldn't let us know about invalid doctypes), but our logic likely isn't
	  // real-world perfect, so let's fallback.
	  return doc.implementation.createDocumentType("html", "", "");
	}


	exports.HtmlToDom = HtmlToDom;


/***/ },
/* 75 */
/***/ function(module, exports) {

	"use strict";

	exports.NOT_IMPLEMENTED = function (nameForErrorMessage, target) {
	  return function () {
	    if (target === undefined) {
	      target = this;
	    }

	    if (target && target.raise) {
	      target.raise("error", "NOT_IMPLEMENTED: " + nameForErrorMessage);
	    } else if (typeof console !== "undefined" && console.log) {
	      console.log(new Error("Called NOT_IMPLEMENTED without an element to raise on: " + nameForErrorMessage));
	    }
	  };
	};


/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var EventEmitter = __webpack_require__(25).EventEmitter;
	var utils = __webpack_require__(3);

	function VirtualConsole() {
	  // If "error" event has no listeners,
	  // EventEmitter throws an exception
	  this.on("error", function () {});
	}

	utils.inheritFrom(EventEmitter, VirtualConsole, {
	  sendTo: function (anyConsole) {
	    Object.keys(anyConsole).forEach(function (method) {
	      if (typeof anyConsole[method] === "function") {
	        this.on(method, function () {
	          anyConsole[method].apply(anyConsole, arguments);
	        });
	      }
	    }, this);
	  }
	});

	module.exports = VirtualConsole;


/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
	    CSSRule: __webpack_require__(12).CSSRule,
	    MatcherList: __webpack_require__(82).MatcherList
	};
	///CommonJS


	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM.CSSDocumentRule = function CSSDocumentRule() {
	    CSSOM.CSSRule.call(this);
	    this.matcher = new CSSOM.MatcherList;
	    this.cssRules = [];
	};

	CSSOM.CSSDocumentRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSDocumentRule.prototype.constructor = CSSOM.CSSDocumentRule;
	CSSOM.CSSDocumentRule.prototype.type = 10;
	//FIXME
	//CSSOM.CSSDocumentRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSDocumentRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	Object.defineProperty(CSSOM.CSSDocumentRule.prototype, "cssText", {
	  get: function() {
	    var cssTexts = [];
	    for (var i=0, length=this.cssRules.length; i < length; i++) {
	        cssTexts.push(this.cssRules[i].cssText);
	    }
	    return "@-moz-document " + this.matcher.matcherText + " {" + cssTexts.join("") + "}";
	  }
	});


	//.CommonJS
	exports.CSSDocumentRule = CSSOM.CSSDocumentRule;
	///CommonJS


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleDeclaration: __webpack_require__(19).CSSStyleDeclaration,
		CSSRule: __webpack_require__(12).CSSRule
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#css-font-face-rule
	 */
	CSSOM.CSSFontFaceRule = function CSSFontFaceRule() {
		CSSOM.CSSRule.call(this);
		this.style = new CSSOM.CSSStyleDeclaration;
		this.style.parentRule = this;
	};

	CSSOM.CSSFontFaceRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSFontFaceRule.prototype.constructor = CSSOM.CSSFontFaceRule;
	CSSOM.CSSFontFaceRule.prototype.type = 5;
	//FIXME
	//CSSOM.CSSFontFaceRule.prototype.insertRule = CSSStyleSheet.prototype.insertRule;
	//CSSOM.CSSFontFaceRule.prototype.deleteRule = CSSStyleSheet.prototype.deleteRule;

	// http://www.opensource.apple.com/source/WebCore/WebCore-955.66.1/css/WebKitCSSFontFaceRule.cpp
	Object.defineProperty(CSSOM.CSSFontFaceRule.prototype, "cssText", {
	  get: function() {
	    return "@font-face {" + this.style.cssText + "}";
	  }
	});


	//.CommonJS
	exports.CSSFontFaceRule = CSSOM.CSSFontFaceRule;
	///CommonJS


/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSRule: __webpack_require__(12).CSSRule,
		CSSStyleSheet: __webpack_require__(35).CSSStyleSheet,
		MediaList: __webpack_require__(48).MediaList
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#cssimportrule
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSImportRule
	 */
	CSSOM.CSSImportRule = function CSSImportRule() {
		CSSOM.CSSRule.call(this);
		this.href = "";
		this.media = new CSSOM.MediaList;
		this.styleSheet = new CSSOM.CSSStyleSheet;
	};

	CSSOM.CSSImportRule.prototype = new CSSOM.CSSRule;
	CSSOM.CSSImportRule.prototype.constructor = CSSOM.CSSImportRule;
	CSSOM.CSSImportRule.prototype.type = 3;

	Object.defineProperty(CSSOM.CSSImportRule.prototype, "cssText", {
	  get: function() {
	    var mediaText = this.media.mediaText;
	    return "@import url(" + this.href + ")" + (mediaText ? " " + mediaText : "") + ";";
	  },
	  set: function(cssText) {
	    var i = 0;

	    /**
	     * @import url(partial.css) screen, handheld;
	     *        ||               |
	     *        after-import     media
	     *         |
	     *         url
	     */
	    var state = '';

	    var buffer = '';
	    var index;
	    var mediaText = '';
	    for (var character; character = cssText.charAt(i); i++) {

	      switch (character) {
	        case ' ':
	        case '\t':
	        case '\r':
	        case '\n':
	        case '\f':
	          if (state === 'after-import') {
	            state = 'url';
	          } else {
	            buffer += character;
	          }
	          break;

	        case '@':
	          if (!state && cssText.indexOf('@import', i) === i) {
	            state = 'after-import';
	            i += 'import'.length;
	            buffer = '';
	          }
	          break;

	        case 'u':
	          if (state === 'url' && cssText.indexOf('url(', i) === i) {
	            index = cssText.indexOf(')', i + 1);
	            if (index === -1) {
	              throw i + ': ")" not found';
	            }
	            i += 'url('.length;
	            var url = cssText.slice(i, index);
	            if (url[0] === url[url.length - 1]) {
	              if (url[0] === '"' || url[0] === "'") {
	                url = url.slice(1, -1);
	              }
	            }
	            this.href = url;
	            i = index;
	            state = 'media';
	          }
	          break;

	        case '"':
	          if (state === 'url') {
	            index = cssText.indexOf('"', i + 1);
	            if (!index) {
	              throw i + ": '\"' not found";
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;

	        case "'":
	          if (state === 'url') {
	            index = cssText.indexOf("'", i + 1);
	            if (!index) {
	              throw i + ': "\'" not found';
	            }
	            this.href = cssText.slice(i + 1, index);
	            i = index;
	            state = 'media';
	          }
	          break;

	        case ';':
	          if (state === 'media') {
	            if (buffer) {
	              this.media.mediaText = buffer.trim();
	            }
	          }
	          break;

	        default:
	          if (state === 'media') {
	            buffer += character;
	          }
	          break;
	      }
	    }
	  }
	});


	//.CommonJS
	exports.CSSImportRule = CSSOM.CSSImportRule;
	///CommonJS


/***/ },
/* 80 */
/***/ function(module, exports) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
	 *
	 * TODO: add if needed
	 */
	CSSOM.CSSValue = function CSSValue() {
	};

	CSSOM.CSSValue.prototype = {
		constructor: CSSOM.CSSValue,

		// @see: http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSValue
		set cssText(text) {
			var name = this._getConstructorName();

			throw new Exception('DOMException: property "cssText" of "' + name + '" is readonly!');
		},

		get cssText() {
			var name = this._getConstructorName();

			throw new Exception('getter "cssText" of "' + name + '" is not implemented!');
		},

		_getConstructorName: function() {
			var s = this.constructor.toString(),
					c = s.match(/function\s([^\(]+)/),
					name = c[1];

			return name;
		}
	};


	//.CommonJS
	exports.CSSValue = CSSOM.CSSValue;
	///CommonJS


/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSValue: __webpack_require__(80).CSSValue
	};
	///CommonJS


	/**
	 * @constructor
	 * @see http://msdn.microsoft.com/en-us/library/ms537634(v=vs.85).aspx
	 *
	 */
	CSSOM.CSSValueExpression = function CSSValueExpression(token, idx) {
		this._token = token;
		this._idx = idx;
	};

	CSSOM.CSSValueExpression.prototype = new CSSOM.CSSValue;
	CSSOM.CSSValueExpression.prototype.constructor = CSSOM.CSSValueExpression;

	/**
	 * parse css expression() value
	 *
	 * @return {Object}
	 *				 - error:
	 *				 or
	 *				 - idx:
	 *				 - expression:
	 *
	 * Example:
	 *
	 * .selector {
	 *		zoom: expression(documentElement.clientWidth > 1000 ? '1000px' : 'auto');
	 * }
	 */
	CSSOM.CSSValueExpression.prototype.parse = function() {
		var token = this._token,
				idx = this._idx;

		var character = '',
				expression = '',
				error = '',
				info,
				paren = [];


		for (; ; ++idx) {
			character = token.charAt(idx);

			// end of token
			if (character == '') {
				error = 'css expression error: unfinished expression!';
				break;
			}

			switch(character) {
				case '(':
					paren.push(character);
					expression += character;
					break;

				case ')':
					paren.pop(character);
					expression += character;
					break;

				case '/':
					if (info = this._parseJSComment(token, idx)) { // comment?
						if (info.error) {
							error = 'css expression error: unfinished comment in expression!';
						} else {
							idx = info.idx;
							// ignore the comment
						}
					} else if (info = this._parseJSRexExp(token, idx)) { // regexp
						idx = info.idx;
						expression += info.text;
					} else { // other
						expression += character;
					}
					break;

				case "'":
				case '"':
					info = this._parseJSString(token, idx, character);
					if (info) { // string
						idx = info.idx;
						expression += info.text;
					} else {
						expression += character;
					}
					break;

				default:
					expression += character;
					break;
			}

			if (error) {
				break;
			}

			// end of expression
			if (paren.length == 0) {
				break;
			}
		}

		var ret;
		if (error) {
			ret = {
				error: error
			}
		} else {
			ret = {
				idx: idx,
				expression: expression
			}
		}

		return ret;
	};


	/**
	 *
	 * @return {Object|false}
	 *          - idx:
	 *          - text:
	 *          or
	 *          - error:
	 *          or
	 *          false
	 *
	 */
	CSSOM.CSSValueExpression.prototype._parseJSComment = function(token, idx) {
		var nextChar = token.charAt(idx + 1),
				text;

		if (nextChar == '/' || nextChar == '*') {
			var startIdx = idx,
					endIdx,
					commentEndChar;

			if (nextChar == '/') { // line comment
				commentEndChar = '\n';
			} else if (nextChar == '*') { // block comment
				commentEndChar = '*/';
			}

			endIdx = token.indexOf(commentEndChar, startIdx + 1 + 1);
			if (endIdx !== -1) {
				endIdx = endIdx + commentEndChar.length - 1;
				text = token.substring(idx, endIdx + 1);
				return {
					idx: endIdx,
					text: text
				}
			} else {
				error = 'css expression error: unfinished comment in expression!';
				return {
					error: error
				}
			}
		} else {
			return false;
		}
	};


	/**
	 *
	 * @return {Object|false}
	 *					- idx:
	 *					- text:
	 *					or 
	 *					false
	 *
	 */
	CSSOM.CSSValueExpression.prototype._parseJSString = function(token, idx, sep) {
		var endIdx = this._findMatchedIdx(token, idx, sep),
				text;

		if (endIdx === -1) {
			return false;
		} else {
			text = token.substring(idx, endIdx + sep.length);

			return {
				idx: endIdx,
				text: text
			}
		}
	};


	/**
	 * parse regexp in css expression
	 *
	 * @return {Object|false}
	 *				 - idx:
	 *				 - regExp:
	 *				 or 
	 *				 false
	 */

	/*

	all legal RegExp
	 
	/a/
	(/a/)
	[/a/]
	[12, /a/]

	!/a/

	+/a/
	-/a/
	* /a/
	/ /a/
	%/a/

	===/a/
	!==/a/
	==/a/
	!=/a/
	>/a/
	>=/a/
	</a/
	<=/a/

	&/a/
	|/a/
	^/a/
	~/a/
	<</a/
	>>/a/
	>>>/a/

	&&/a/
	||/a/
	?/a/
	=/a/
	,/a/

			delete /a/
					in /a/
	instanceof /a/
				 new /a/
			typeof /a/
				void /a/

	*/
	CSSOM.CSSValueExpression.prototype._parseJSRexExp = function(token, idx) {
		var before = token.substring(0, idx).replace(/\s+$/, ""),
				legalRegx = [
					/^$/,
					/\($/,
					/\[$/,
					/\!$/,
					/\+$/,
					/\-$/,
					/\*$/,
					/\/\s+/,
					/\%$/,
					/\=$/,
					/\>$/,
					/\<$/,
					/\&$/,
					/\|$/,
					/\^$/,
					/\~$/,
					/\?$/,
					/\,$/,
					/delete$/,
					/in$/,
					/instanceof$/,
					/new$/,
					/typeof$/,
					/void$/,
				];

		var isLegal = legalRegx.some(function(reg) {
			return reg.test(before);
		});

		if (!isLegal) {
			return false;
		} else {
			var sep = '/';

			// same logic as string
			return this._parseJSString(token, idx, sep);
		}
	};


	/**
	 *
	 * find next sep(same line) index in `token`
	 *
	 * @return {Number}
	 *
	 */
	CSSOM.CSSValueExpression.prototype._findMatchedIdx = function(token, idx, sep) {
		var startIdx = idx,
				endIdx;

		var NOT_FOUND = -1;

		while(true) {
			endIdx = token.indexOf(sep, startIdx + 1);

			if (endIdx === -1) { // not found
				endIdx = NOT_FOUND;
				break;
			} else {
				var text = token.substring(idx + 1, endIdx),
						matched = text.match(/\\+$/);
				if (!matched || matched[0] % 2 == 0) { // not escaped
					break;
				} else {
					startIdx = endIdx;
				}
			}
		}

		// boundary must be in the same line(js sting or regexp)
		var nextNewLineIdx = token.indexOf('\n', idx + 1);
		if (nextNewLineIdx < endIdx) {
			endIdx = NOT_FOUND;
		}


		return endIdx;
	}




	//.CommonJS
	exports.CSSValueExpression = CSSOM.CSSValueExpression;
	///CommonJS


/***/ },
/* 82 */
/***/ function(module, exports) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS


	/**
	 * @constructor
	 * @see https://developer.mozilla.org/en/CSS/@-moz-document
	 */
	CSSOM.MatcherList = function MatcherList(){
	    this.length = 0;
	};

	CSSOM.MatcherList.prototype = {

	    constructor: CSSOM.MatcherList,

	    /**
	     * @return {string}
	     */
	    get matcherText() {
	        return Array.prototype.join.call(this, ", ");
	    },

	    /**
	     * @param {string} value
	     */
	    set matcherText(value) {
	        // just a temporary solution, actually it may be wrong by just split the value with ',', because a url can include ','.
	        var values = value.split(",");
	        var length = this.length = values.length;
	        for (var i=0; i<length; i++) {
	            this[i] = values[i].trim();
	        }
	    },

	    /**
	     * @param {string} matcher
	     */
	    appendMatcher: function(matcher) {
	        if (Array.prototype.indexOf.call(this, matcher) === -1) {
	            this[this.length] = matcher;
	            this.length++;
	        }
	    },

	    /**
	     * @param {string} matcher
	     */
	    deleteMatcher: function(matcher) {
	        var index = Array.prototype.indexOf.call(this, matcher);
	        if (index !== -1) {
	            Array.prototype.splice.call(this, index, 1);
	        }
	    }

	};


	//.CommonJS
	exports.MatcherList = CSSOM.MatcherList;
	///CommonJS


/***/ },
/* 83 */
/***/ function(module, exports) {

	//.CommonJS
	var CSSOM = {};
	///CommonJS


	/**
	 * @constructor
	 * @see http://dev.w3.org/csswg/cssom/#the-stylesheet-interface
	 */
	CSSOM.StyleSheet = function StyleSheet() {
		this.parentStyleSheet = null;
	};


	//.CommonJS
	exports.StyleSheet = CSSOM.StyleSheet;
	///CommonJS


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.CSSStyleDeclaration = __webpack_require__(19).CSSStyleDeclaration;
	exports.CSSRule = __webpack_require__(12).CSSRule;
	exports.CSSStyleRule = __webpack_require__(34).CSSStyleRule;
	exports.MediaList = __webpack_require__(48).MediaList;
	exports.CSSMediaRule = __webpack_require__(47).CSSMediaRule;
	exports.CSSImportRule = __webpack_require__(79).CSSImportRule;
	exports.CSSFontFaceRule = __webpack_require__(78).CSSFontFaceRule;
	exports.StyleSheet = __webpack_require__(83).StyleSheet;
	exports.CSSStyleSheet = __webpack_require__(35).CSSStyleSheet;
	exports.CSSKeyframesRule = __webpack_require__(46).CSSKeyframesRule;
	exports.CSSKeyframeRule = __webpack_require__(45).CSSKeyframeRule;
	exports.MatcherList = __webpack_require__(82).MatcherList;
	exports.CSSDocumentRule = __webpack_require__(77).CSSDocumentRule;
	exports.CSSValue = __webpack_require__(80).CSSValue;
	exports.CSSValueExpression = __webpack_require__(81).CSSValueExpression;
	exports.parse = __webpack_require__(49).parse;
	exports.clone = __webpack_require__(200).clone;


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/*********************************************************************
	 * This is a fork from the CSS Style Declaration part of
	 * https://github.com/NV/CSSOM
	 ********************************************************************/
	"use strict";
	var CSSOM = __webpack_require__(84);
	var fs = __webpack_require__(38);
	var path = __webpack_require__(14);

	var camelToDashed = __webpack_require__(1).camelToDashed;
	var dashedToCamelCase = __webpack_require__(1).dashedToCamelCase;

	/**
	 * @constructor
	 * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration
	 */
	var CSSStyleDeclaration = function CSSStyleDeclaration(onChangeCallback) {
	    this._values = {};
	    this._importants = {};
	    this._length = 0;
	    this._onChange = onChangeCallback || function () { return; };
	};
	CSSStyleDeclaration.prototype = {
	    constructor: CSSStyleDeclaration,

	    /**
	     *
	     * @param {string} name
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-getPropertyValue
	     * @return {string} the value of the property if it has been explicitly set for this declaration block.
	     * Returns the empty string if the property has not been set.
	     */
	    getPropertyValue: function (name) {
	        if (!this._values.hasOwnProperty(name)) {
	            return "";
	        }
	        return this._values[name].toString();
	    },

	    /**
	     *
	     * @param {string} name
	     * @param {string} value
	     * @param {string} [priority=null] "important" or null
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-setProperty
	     */
	    setProperty: function (name, value, priority) {
	        if (value === undefined) {
	            return;
	        }
	        if (value === null || value === '') {
	            this.removeProperty(name);
	            return;
	        }
	        var camel_case = dashedToCamelCase(name);
	        this[camel_case] = value;
	        this._importants[name] = priority;
	    },
	    _setProperty: function (name, value, priority) {
	        if (value === undefined) {
	            return;
	        }
	        if (value === null || value === '') {
	            this.removeProperty(name);
	            return;
	        }
	        if (this._values[name]) {
	            // Property already exist. Overwrite it.
	            var index = Array.prototype.indexOf.call(this, name);
	            if (index < 0) {
	                this[this._length] = name;
	                this._length++;
	            }
	        } else {
	            // New property.
	            this[this._length] = name;
	            this._length++;
	        }
	        this._values[name] = value;
	        this._importants[name] = priority;
	        this._onChange(this.cssText);
	    },

	    /**
	     *
	     * @param {string} name
	     * @see http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-removeProperty
	     * @return {string} the value of the property if it has been explicitly set for this declaration block.
	     * Returns the empty string if the property has not been set or the property name does not correspond to a known CSS property.
	     */
	    removeProperty: function (name) {
	        if (!this._values.hasOwnProperty(name)) {
	            return "";
	        }

	        var prevValue = this._values[name];
	        delete this._values[name];

	        var index = Array.prototype.indexOf.call(this, name);
	        if (index < 0) {
	            return prevValue;
	        }

	        // That's what WebKit and Opera do
	        Array.prototype.splice.call(this, index, 1);

	        // That's what Firefox does
	        //this[index] = ""

	        this._onChange(this.cssText);
	        return prevValue;
	    },


	    /**
	     *
	     * @param {String} name
	     */
	    getPropertyPriority: function (name) {
	        return this._importants[name] || "";
	    },


	    getPropertyCSSValue: function () {
	        //FIXME
	        return;
	    },

	    /**
	     *   element.style.overflow = "auto"
	     *   element.style.getPropertyShorthand("overflow-x")
	     *   -> "overflow"
	     */
	    getPropertyShorthand: function () {
	        //FIXME
	        return;
	    },

	    isPropertyImplicit: function () {
	        //FIXME
	        return;
	    },

	    /**
	     *   http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSSStyleDeclaration-item
	     */
	    item: function (index) {
	        index = parseInt(index, 10);
	        if (index < 0 || index >= this._length) {
	            return '';
	        }
	        return this[index];
	    }
	};

	Object.defineProperties(CSSStyleDeclaration.prototype, {
	    cssText: {
	        get: function () {
	            var properties = [];
	            var i;
	            var name;
	            var value;
	            var priority;
	            for (i = 0; i < this._length; i++) {
	                name = this[i];
	                value = this.getPropertyValue(name);
	                priority = this.getPropertyPriority(name);
	                if (priority !== '') {
	                    priority = " !" + priority;
	                }
	                properties.push([name, ': ', value, priority, ';'].join(''));
	            }
	            return properties.join(' ');
	        },
	        set: function (value) {
	            var i;
	            this._values = {};
	            Array.prototype.splice.call(this, 0, this._length);
	            this._importants = {};
	            var dummyRule;
	            try {
	                dummyRule = CSSOM.parse('#bogus{' + value + '}').cssRules[0].style;
	            } catch (err) {
	                // malformed css, just return
	                return;
	            }
	            var rule_length = dummyRule.length;
	            var name;
	            for (i = 0; i < rule_length; ++i) {
	                name = dummyRule[i];
	                this.setProperty(dummyRule[i], dummyRule.getPropertyValue(name), dummyRule.getPropertyPriority(name));
	            }
	            this._onChange(this.cssText);
	        },
	        enumerable: true,
	        configurable: true
	    },
	    parentRule: {
	        get: function () { return null; },
	        enumerable: true,
	        configurable: true
	    },
	    length: {
	        get: function () { return this._length; },
	        /**
	         * This deletes indices if the new length is less then the current
	         * length. If the new length is more, it does nothing, the new indices
	         * will be undefined until set.
	         **/
	        set: function (value) {
	            var i;
	            for (i = value; i < this._length; i++) {
	                delete this[i];
	            }
	            this._length = value;
	        },
	        enumerable: true,
	        configurable: true
	    },
	    'float': {
	        get: function () { return this.cssFloat; },
	        set: function (value) {
	            this.cssFloat = value;
	        },
	        enumerable: true,
	        configurable: true
	    }
	});

	__webpack_require__(201)(CSSStyleDeclaration.prototype);

	exports.CSSStyleDeclaration = CSSStyleDeclaration;


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	var isValid = module.exports.isValid = function isValid(v) {
	    return parsers.valueType(v) === parsers.TYPES.KEYWORD &&
	        (v.toLowerCase() === 'scroll' || v.toLowerCase() === 'fixed' || v.toLowerCase() === 'inherit');
	};

	module.exports.definition = {
	    set: function (v) {
	        if (!isValid(v)) {
	            return;
	        }
	        this._setProperty('background-attachment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-attachment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	var parse = function parse(v) {
	    var parsed = parsers.parseColor(v);
	    if (parsed !== undefined) {
	        return parsed;
	    }
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'transparent' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};

	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};

	module.exports.definition = {
	    set: function (v) {
	        var parsed = parse(v);
	        if (parsed === undefined) {
	            return;
	        }
	        this._setProperty('background-color', parsed);
	    },
	    get: function () {
	        return this.getPropertyValue('background-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	var parse = function parse(v) {
	    var parsed = parsers.parseUrl(v);
	    if (parsed !== undefined) {
	        return parsed;
	    }
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'none' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};

	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-image', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	var valid_keywords = ['top', 'center', 'bottom', 'left', 'right'];

	var parse = function parse(v) {
	    var parts = v.split(/\s+/);
	    if (parts.length > 2 || parts.length < 1) {
	        return undefined;
	    }
	    var types = [];
	    parts.forEach(function (part, index) {
	        types[index] = parsers.valueType(part);
	    });
	    if (parts.length === 1) {
	        if (types[0] === parsers.TYPES.LENGTH || types[0] === parsers.TYPES.PERCENT) {
	            return v;
	        }
	        if (types[0] === parsers.TYPES.KEYWORD) {
	            if (valid_keywords.indexOf(v.toLowerCase()) !== -1 || v.toLowerCase() === 'inherit') {
	                return v;
	            }
	        }
	        return undefined;
	    }
	    if ((types[0] === parsers.TYPES.LENGTH || types[0] === parsers.TYPES.PERCENT) &&
	            (types[1] === parsers.TYPES.LENGTH || types[1] === parsers.TYPES.PERCENT)) {
	        return v;
	    }
	    if (types[0] !== parsers.TYPES.KEYWORD || types[1] !== parsers.TYPES.KEYWORD) {
	        return undefined;
	    }
	    if (valid_keywords.indexOf(parts[0]) !== -1 && valid_keywords.indexOf(parts[1]) !== -1) {
	        return v;
	    }
	    return undefined;
	};

	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-position', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	var parse = function parse(v) {
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'repeat' || v.toLowerCase() === 'repeat-x' || v.toLowerCase() === 'repeat-y' || v.toLowerCase() === 'no-repeat' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};

	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-repeat', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = module.exports.isValid = __webpack_require__(20).isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-bottom-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = __webpack_require__(21).isValid;
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            if (v.toLowerCase() === 'none') {
	                v = '';
	                this.removeProperty('border-bottom-width');
	            }
	            this._setProperty('border-bottom-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = module.exports.isValid = __webpack_require__(22).isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-bottom-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = module.exports.isValid = __webpack_require__(20).isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-left-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = __webpack_require__(21).isValid;
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            if (v.toLowerCase() === 'none') {
	                v = '';
	                this.removeProperty('border-left-width');
	            }
	            this._setProperty('border-left-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = module.exports.isValid = __webpack_require__(22).isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-left-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-left-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = module.exports.isValid = __webpack_require__(20).isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-right-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = __webpack_require__(21).isValid;
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            if (v.toLowerCase() === 'none') {
	                v = '';
	                this.removeProperty('border-right-width');
	            }
	            this._setProperty('border-right-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = module.exports.isValid = __webpack_require__(22).isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-right-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-right-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = module.exports.isValid = __webpack_require__(20).isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-top-color', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = __webpack_require__(21).isValid;
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            if (v.toLowerCase() === 'none') {
	                v = '';
	                this.removeProperty('border-top-width');
	            }
	            this._setProperty('border-top-style', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var isValid = __webpack_require__(22).isValid;
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: function (v) {
	        if (isValid(v)) {
	            this._setProperty('border-top-width', v);
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var TYPES = __webpack_require__(1).TYPES;
	var valueType = __webpack_require__(1).valueType;

	var partsRegEx = /\s*,\s*/;
	module.exports.isValid = function isValid(v) {
	    var parts = v.split(partsRegEx);
	    var len = parts.length;
	    var i;
	    var type;
	    for (i = 0; i < len; i++) {
	        type = valueType(parts[i]);
	        if (type === TYPES.STRING || type === TYPES.KEYWORD) {
	            return true;
	        }
	    }
	    return false;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('font-family', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-family');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var TYPES = __webpack_require__(1).TYPES;
	var valueType = __webpack_require__(1).valueType;

	var absoluteSizes = ['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'];
	var relativeSizes = ['larger', 'smaller'];

	module.exports.isValid = function (v) {
	    var type = valueType(v.toLowerCase());
	    return type === TYPES.LENGTH || type === TYPES.PERCENT ||
	        (type === TYPES.KEYWORD && absoluteSizes.indexOf(v.toLowerCase()) !== -1) ||
	        (type === TYPES.KEYWORD && relativeSizes.indexOf(v.toLowerCase()) !== -1);
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('font-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 105 */
/***/ function(module, exports) {

	'use strict';

	var valid_styles = ['normal', 'italic', 'oblique', 'inherit'];

	module.exports.isValid = function (v) {
	    return valid_styles.indexOf(v.toLowerCase()) !== -1;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('font-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 106 */
/***/ function(module, exports) {

	'use strict';

	var valid_variants = ['normal', 'small-caps', 'inherit'];

	module.exports.isValid = function isValid(v) {
	    return valid_variants.indexOf(v.toLowerCase()) !== -1;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('font-variant', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-variant');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 107 */
/***/ function(module, exports) {

	'use strict';

	var valid_weights = ['normal', 'bold', 'bolder', 'lighter', '100', '200', '300', '400', '500', '600', '700', '800', '900', 'inherit'];

	module.exports.isValid = function isValid(v) {
	    return valid_weights.indexOf(v.toLowerCase()) !== -1;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('font-weight', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-weight');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var TYPES = __webpack_require__(1).TYPES;
	var valueType = __webpack_require__(1).valueType;

	module.exports.isValid = function isValid(v) {
	    var type = valueType(v);
	    return (type === TYPES.KEYWORD && (v.toLowerCase() === 'normal') || (v.toLowerCase() === 'inherit')) ||
	        type === TYPES.NUMBER || type === TYPES.LENGTH || type === TYPES.PERCENT;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('line-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('line-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 109 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

	    // See `tools/generate-identifier-regex.js`.
	    ES5Regex = {
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
	    };

	    ES6Regex = {
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	    };

	    function isDecimalDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39;  // 0..9
	    }

	    function isHexDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
	            0x61 <= ch && ch <= 0x66 ||     // a..f
	            0x41 <= ch && ch <= 0x46;       // A..F
	    }

	    function isOctalDigit(ch) {
	        return ch >= 0x30 && ch <= 0x37;  // 0..7
	    }

	    // 7.2 White Space

	    NON_ASCII_WHITESPACES = [
	        0x1680, 0x180E,
	        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
	        0x202F, 0x205F,
	        0x3000,
	        0xFEFF
	    ];

	    function isWhiteSpace(ch) {
	        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
	            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
	    }

	    // 7.3 Line Terminators

	    function isLineTerminator(ch) {
	        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
	    }

	    // 7.6 Identifier Names and Identifiers

	    function fromCodePoint(cp) {
	        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
	        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
	        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
	        return cu1 + cu2;
	    }

	    IDENTIFIER_START = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_START[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    IDENTIFIER_PART = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_PART[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch >= 0x30 && ch <= 0x39 ||  // 0..9
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    function isIdentifierStartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    function isIdentifierStartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    module.exports = {
	        isDecimalDigit: isDecimalDigit,
	        isHexDigit: isHexDigit,
	        isOctalDigit: isOctalDigit,
	        isWhiteSpace: isWhiteSpace,
	        isLineTerminator: isLineTerminator,
	        isIdentifierStartES5: isIdentifierStartES5,
	        isIdentifierPartES5: isIdentifierPartES5,
	        isIdentifierStartES6: isIdentifierStartES6,
	        isIdentifierPartES6: isIdentifierPartES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(13);

	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }

	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };

	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var isDuplicate = this.has(aStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[util.toSetString(aStr)] = idx;
	    }
	  };

	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    return Object.prototype.hasOwnProperty.call(this._set,
	                                                util.toSetString(aStr));
	  };

	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    if (this.has(aStr)) {
	      return this._set[util.toSetString(aStr)];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };

	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };

	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };

	  exports.ArraySet = ArraySet;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var base64 = __webpack_require__(574);

	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011

	  var VLQ_BASE_SHIFT = 5;

	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;

	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;

	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }

	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }

	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;

	    var vlq = toVLQSigned(aValue);

	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);

	    return encoded;
	  };

	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string via the out parameter.
	   */
	  exports.decode = function base64VLQ_decode(aStr, aOutParam) {
	    var i = 0;
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;

	    do {
	      if (i >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }
	      digit = base64.decode(aStr.charAt(i++));
	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);

	    aOutParam.value = fromVLQSigned(result);
	    aOutParam.rest = aStr.slice(i);
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the index of
	    //      the next closest element that is less than that element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element which is less than the one we are searching for, so we
	    //      return -1.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return mid;
	    }
	    else if (cmp > 0) {
	      // aHaystack[mid] is greater than our needle.
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare);
	      }
	      // We did not find an exact match, return the next closest one
	      // (termination case 2).
	      return mid;
	    }
	    else {
	      // aHaystack[mid] is less than our needle.
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare);
	      }
	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (2) or (3) and return the appropriate thing.
	      return aLow < 0 ? -1 : aLow;
	    }
	  }

	  /**
	   * This is an implementation of binary search which will always try and return
	   * the index of next lowest value checked if there is no exact hit. This is
	   * because mappings between original and generated line/col pairs are single
	   * points, and there is an implicit region between each of them, so a miss
	   * just means that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare) {
	    if (aHaystack.length === 0) {
	      return -1;
	    }
	    return recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack, aCompare)
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var base64VLQ = __webpack_require__(111);
	  var util = __webpack_require__(13);
	  var ArraySet = __webpack_require__(110).ArraySet;
	  var MappingList = __webpack_require__(576).MappingList;

	  /**
	   * An instance of the SourceMapGenerator represents a source map which is
	   * being built incrementally. You may pass an object with the following
	   * properties:
	   *
	   *   - file: The filename of the generated source.
	   *   - sourceRoot: A root for all relative URLs in this source map.
	   */
	  function SourceMapGenerator(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util.getArg(aArgs, 'file', null);
	    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	    this._mappings = new MappingList();
	    this._sourcesContents = null;
	  }

	  SourceMapGenerator.prototype._version = 3;

	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  SourceMapGenerator.fromSourceMap =
	    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        var newMapping = {
	          generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }
	        };

	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }

	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };

	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }

	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };

	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  SourceMapGenerator.prototype.addMapping =
	    function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);

	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }

	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }

	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }

	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };

	  /**
	   * Set the source content for a source file.
	   */
	  SourceMapGenerator.prototype.setSourceContent =
	    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }

	      if (aSourceContent != null) {
	        // Add the source content to the _sourcesContents map.
	        // Create a new _sourcesContents map if the property is null.
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        // Remove the source file from the _sourcesContents map.
	        // If the _sourcesContents map is empty, set the property to null.
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };

	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  SourceMapGenerator.prototype.applySourceMap =
	    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      // If aSourceFile is omitted, we will use the file property of the SourceMap
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error(
	            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	            'or the source map\'s "file" property. Both were omitted.'
	          );
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      // Make "sourceFile" relative if an absolute Url is passed.
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      // Applying the SourceMap can add and remove items from the sources and
	      // the names array.
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();

	      // Find mappings for the "sourceFile"
	      this._mappings.unsortedForEach(function (mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          // Check if it can be mapped by the source map, then update the mapping.
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            // Copy mapping
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source)
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }

	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }

	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }

	      }, this);
	      this._sources = newSources;
	      this._names = newNames;

	      // Copy sourcesContents of applied map.
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };

	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  SourceMapGenerator.prototype._validateMapping =
	    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                                aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	          && aGenerated.line > 0 && aGenerated.column >= 0
	          && !aOriginal && !aSource && !aName) {
	        // Case 1.
	        return;
	      }
	      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	               && aGenerated.line > 0 && aGenerated.column >= 0
	               && aOriginal.line > 0 && aOriginal.column >= 0
	               && aSource) {
	        // Cases 2 and 3.
	        return;
	      }
	      else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };

	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  SourceMapGenerator.prototype._serializeMappings =
	    function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;

	      var mappings = this._mappings.toArray();

	      for (var i = 0, len = mappings.length; i < len; i++) {
	        mapping = mappings[i];

	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        }
	        else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositions(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }

	        result += base64VLQ.encode(mapping.generatedColumn
	                                   - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (mapping.source != null) {
	          result += base64VLQ.encode(this._sources.indexOf(mapping.source)
	                                     - previousSource);
	          previousSource = this._sources.indexOf(mapping.source);

	          // lines are stored 0-based in SourceMap spec version 3
	          result += base64VLQ.encode(mapping.originalLine - 1
	                                     - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;

	          result += base64VLQ.encode(mapping.originalColumn
	                                     - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;

	          if (mapping.name != null) {
	            result += base64VLQ.encode(this._names.indexOf(mapping.name)
	                                       - previousName);
	            previousName = this._names.indexOf(mapping.name);
	          }
	        }
	      }

	      return result;
	    };

	  SourceMapGenerator.prototype._generateSourcesContent =
	    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function (source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
	                                                    key)
	          ? this._sourcesContents[key]
	          : null;
	      }, this);
	    };

	  /**
	   * Externalize the source map.
	   */
	  SourceMapGenerator.prototype.toJSON =
	    function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }

	      return map;
	    };

	  /**
	   * Render the source map being generated to a string.
	   */
	  SourceMapGenerator.prototype.toString =
	    function SourceMapGenerator_toString() {
	      return JSON.stringify(this);
	    };

	  exports.SourceMapGenerator = SourceMapGenerator;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	var Tokenizer = __webpack_require__(115);

	/*
		Options:

		xmlMode: Disables the special behavior for script/style tags (false by default)
		lowerCaseAttributeNames: call .toLowerCase for each attribute name (true if xmlMode is `false`)
		lowerCaseTags: call .toLowerCase for each tag name (true if xmlMode is `false`)
	*/

	/*
		Callbacks:

		oncdataend,
		oncdatastart,
		onclosetag,
		oncomment,
		oncommentend,
		onerror,
		onopentag,
		onprocessinginstruction,
		onreset,
		ontext
	*/

	var formTags = {
		input: true,
		option: true,
		optgroup: true,
		select: true,
		button: true,
		datalist: true,
		textarea: true
	};

	var openImpliesClose = {
		tr      : { tr:true, th:true, td:true },
		th      : { th:true },
		td      : { thead:true, th:true, td:true },
		body    : { head:true, link:true, script:true },
		li      : { li:true },
		p       : { p:true },
		h1      : { p:true },
		h2      : { p:true },
		h3      : { p:true },
		h4      : { p:true },
		h5      : { p:true },
		h6      : { p:true },
		select  : formTags,
		input   : formTags,
		output  : formTags,
		button  : formTags,
		datalist: formTags,
		textarea: formTags,
		option  : { option:true },
		optgroup: { optgroup:true }
	};

	var voidElements = {
		__proto__: null,
		area: true,
		base: true,
		basefont: true,
		br: true,
		col: true,
		command: true,
		embed: true,
		frame: true,
		hr: true,
		img: true,
		input: true,
		isindex: true,
		keygen: true,
		link: true,
		meta: true,
		param: true,
		source: true,
		track: true,
		wbr: true,

		//common self closing svg elements
		path: true,
		circle: true,
		ellipse: true,
		line: true,
		rect: true,
		use: true,
		stop: true,
		polyline: true,
		polygon: true
	};

	var re_nameEnd = /\s|\//;

	function Parser(cbs, options){
		this._options = options || {};
		this._cbs = cbs || {};

		this._tagname = "";
		this._attribname = "";
		this._attribvalue = "";
		this._attribs = null;
		this._stack = [];

		this.startIndex = 0;
		this.endIndex = null;

		this._lowerCaseTagNames = "lowerCaseTags" in this._options ?
										!!this._options.lowerCaseTags :
										!this._options.xmlMode;
		this._lowerCaseAttributeNames = "lowerCaseAttributeNames" in this._options ?
										!!this._options.lowerCaseAttributeNames :
										!this._options.xmlMode;
		if(!!this._options.Tokenizer) {
			Tokenizer = this._options.Tokenizer;
		}
		this._tokenizer = new Tokenizer(this._options, this);

		if(this._cbs.onparserinit) this._cbs.onparserinit(this);
	}

	__webpack_require__(10).inherits(Parser, __webpack_require__(25).EventEmitter);

	Parser.prototype._updatePosition = function(initialOffset){
		if(this.endIndex === null){
			if(this._tokenizer._sectionStart <= initialOffset){
				this.startIndex = 0;
			} else {
				this.startIndex = this._tokenizer._sectionStart - initialOffset;
			}
		}
		else this.startIndex = this.endIndex + 1;
		this.endIndex = this._tokenizer.getAbsoluteIndex();
	};

	//Tokenizer event handlers
	Parser.prototype.ontext = function(data){
		this._updatePosition(1);
		this.endIndex--;

		if(this._cbs.ontext) this._cbs.ontext(data);
	};

	Parser.prototype.onopentagname = function(name){
		if(this._lowerCaseTagNames){
			name = name.toLowerCase();
		}

		this._tagname = name;

		if(!this._options.xmlMode && name in openImpliesClose) {
			for(
				var el;
				(el = this._stack[this._stack.length - 1]) in openImpliesClose[name];
				this.onclosetag(el)
			);
		}

		if(this._options.xmlMode || !(name in voidElements)){
			this._stack.push(name);
		}

		if(this._cbs.onopentagname) this._cbs.onopentagname(name);
		if(this._cbs.onopentag) this._attribs = {};
	};

	Parser.prototype.onopentagend = function(){
		this._updatePosition(1);

		if(this._attribs){
			if(this._cbs.onopentag) this._cbs.onopentag(this._tagname, this._attribs);
			this._attribs = null;
		}

		if(!this._options.xmlMode && this._cbs.onclosetag && this._tagname in voidElements){
			this._cbs.onclosetag(this._tagname);
		}

		this._tagname = "";
	};

	Parser.prototype.onclosetag = function(name){
		this._updatePosition(1);

		if(this._lowerCaseTagNames){
			name = name.toLowerCase();
		}

		if(this._stack.length && (!(name in voidElements) || this._options.xmlMode)){
			var pos = this._stack.lastIndexOf(name);
			if(pos !== -1){
				if(this._cbs.onclosetag){
					pos = this._stack.length - pos;
					while(pos--) this._cbs.onclosetag(this._stack.pop());
				}
				else this._stack.length = pos;
			} else if(name === "p" && !this._options.xmlMode){
				this.onopentagname(name);
				this._closeCurrentTag();
			}
		} else if(!this._options.xmlMode && (name === "br" || name === "p")){
			this.onopentagname(name);
			this._closeCurrentTag();
		}
	};

	Parser.prototype.onselfclosingtag = function(){
		if(this._options.xmlMode || this._options.recognizeSelfClosing){
			this._closeCurrentTag();
		} else {
			this.onopentagend();
		}
	};

	Parser.prototype._closeCurrentTag = function(){
		var name = this._tagname;

		this.onopentagend();

		//self-closing tags will be on the top of the stack
		//(cheaper check than in onclosetag)
		if(this._stack[this._stack.length - 1] === name){
			if(this._cbs.onclosetag){
				this._cbs.onclosetag(name);
			}
			this._stack.pop();
		}
	};

	Parser.prototype.onattribname = function(name){
		if(this._lowerCaseAttributeNames){
			name = name.toLowerCase();
		}
		this._attribname = name;
	};

	Parser.prototype.onattribdata = function(value){
		this._attribvalue += value;
	};

	Parser.prototype.onattribend = function(){
		if(this._cbs.onattribute) this._cbs.onattribute(this._attribname, this._attribvalue);
		if(
			this._attribs &&
			!Object.prototype.hasOwnProperty.call(this._attribs, this._attribname)
		){
			this._attribs[this._attribname] = this._attribvalue;
		}
		this._attribname = "";
		this._attribvalue = "";
	};

	Parser.prototype._getInstructionName = function(value){
		var idx = value.search(re_nameEnd),
		    name = idx < 0 ? value : value.substr(0, idx);

		if(this._lowerCaseTagNames){
			name = name.toLowerCase();
		}

		return name;
	};

	Parser.prototype.ondeclaration = function(value){
		if(this._cbs.onprocessinginstruction){
			var name = this._getInstructionName(value);
			this._cbs.onprocessinginstruction("!" + name, "!" + value);
		}
	};

	Parser.prototype.onprocessinginstruction = function(value){
		if(this._cbs.onprocessinginstruction){
			var name = this._getInstructionName(value);
			this._cbs.onprocessinginstruction("?" + name, "?" + value);
		}
	};

	Parser.prototype.oncomment = function(value){
		this._updatePosition(4);

		if(this._cbs.oncomment) this._cbs.oncomment(value);
		if(this._cbs.oncommentend) this._cbs.oncommentend();
	};

	Parser.prototype.oncdata = function(value){
		this._updatePosition(1);

		if(this._options.xmlMode || this._options.recognizeCDATA){
			if(this._cbs.oncdatastart) this._cbs.oncdatastart();
			if(this._cbs.ontext) this._cbs.ontext(value);
			if(this._cbs.oncdataend) this._cbs.oncdataend();
		} else {
			this.oncomment("[CDATA[" + value + "]]");
		}
	};

	Parser.prototype.onerror = function(err){
		if(this._cbs.onerror) this._cbs.onerror(err);
	};

	Parser.prototype.onend = function(){
		if(this._cbs.onclosetag){
			for(
				var i = this._stack.length;
				i > 0;
				this._cbs.onclosetag(this._stack[--i])
			);
		}
		if(this._cbs.onend) this._cbs.onend();
	};


	//Resets the parser to a blank state, ready to parse a new HTML document
	Parser.prototype.reset = function(){
		if(this._cbs.onreset) this._cbs.onreset();
		this._tokenizer.reset();

		this._tagname = "";
		this._attribname = "";
		this._attribs = null;
		this._stack = [];

		if(this._cbs.onparserinit) this._cbs.onparserinit(this);
	};

	//Parses a complete HTML document and pushes it to the handler
	Parser.prototype.parseComplete = function(data){
		this.reset();
		this.end(data);
	};

	Parser.prototype.write = function(chunk){
		this._tokenizer.write(chunk);
	};

	Parser.prototype.end = function(chunk){
		this._tokenizer.end(chunk);
	};

	Parser.prototype.pause = function(){
		this._tokenizer.pause();
	};

	Parser.prototype.resume = function(){
		this._tokenizer.resume();
	};

	//alias for backwards compat
	Parser.prototype.parseChunk = Parser.prototype.write;
	Parser.prototype.done = Parser.prototype.end;

	module.exports = Parser;


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Tokenizer;

	var decodeCodePoint = __webpack_require__(118),
	    entityMap = __webpack_require__(55),
	    legacyMap = __webpack_require__(123),
	    xmlMap    = __webpack_require__(56),

	    i = 0,

	    TEXT                      = i++,
	    BEFORE_TAG_NAME           = i++, //after <
	    IN_TAG_NAME               = i++,
	    IN_SELF_CLOSING_TAG       = i++,
	    BEFORE_CLOSING_TAG_NAME   = i++,
	    IN_CLOSING_TAG_NAME       = i++,
	    AFTER_CLOSING_TAG_NAME    = i++,

	    //attributes
	    BEFORE_ATTRIBUTE_NAME     = i++,
	    IN_ATTRIBUTE_NAME         = i++,
	    AFTER_ATTRIBUTE_NAME      = i++,
	    BEFORE_ATTRIBUTE_VALUE    = i++,
	    IN_ATTRIBUTE_VALUE_DQ     = i++, // "
	    IN_ATTRIBUTE_VALUE_SQ     = i++, // '
	    IN_ATTRIBUTE_VALUE_NQ     = i++,

	    //declarations
	    BEFORE_DECLARATION        = i++, // !
	    IN_DECLARATION            = i++,

	    //processing instructions
	    IN_PROCESSING_INSTRUCTION = i++, // ?

	    //comments
	    BEFORE_COMMENT            = i++,
	    IN_COMMENT                = i++,
	    AFTER_COMMENT_1           = i++,
	    AFTER_COMMENT_2           = i++,

	    //cdata
	    BEFORE_CDATA_1            = i++, // [
	    BEFORE_CDATA_2            = i++, // C
	    BEFORE_CDATA_3            = i++, // D
	    BEFORE_CDATA_4            = i++, // A
	    BEFORE_CDATA_5            = i++, // T
	    BEFORE_CDATA_6            = i++, // A
	    IN_CDATA                  = i++, // [
	    AFTER_CDATA_1             = i++, // ]
	    AFTER_CDATA_2             = i++, // ]

	    //special tags
	    BEFORE_SPECIAL            = i++, //S
	    BEFORE_SPECIAL_END        = i++,   //S

	    BEFORE_SCRIPT_1           = i++, //C
	    BEFORE_SCRIPT_2           = i++, //R
	    BEFORE_SCRIPT_3           = i++, //I
	    BEFORE_SCRIPT_4           = i++, //P
	    BEFORE_SCRIPT_5           = i++, //T
	    AFTER_SCRIPT_1            = i++, //C
	    AFTER_SCRIPT_2            = i++, //R
	    AFTER_SCRIPT_3            = i++, //I
	    AFTER_SCRIPT_4            = i++, //P
	    AFTER_SCRIPT_5            = i++, //T

	    BEFORE_STYLE_1            = i++, //T
	    BEFORE_STYLE_2            = i++, //Y
	    BEFORE_STYLE_3            = i++, //L
	    BEFORE_STYLE_4            = i++, //E
	    AFTER_STYLE_1             = i++, //T
	    AFTER_STYLE_2             = i++, //Y
	    AFTER_STYLE_3             = i++, //L
	    AFTER_STYLE_4             = i++, //E

	    BEFORE_ENTITY             = i++, //&
	    BEFORE_NUMERIC_ENTITY     = i++, //#
	    IN_NAMED_ENTITY           = i++,
	    IN_NUMERIC_ENTITY         = i++,
	    IN_HEX_ENTITY             = i++, //X

	    j = 0,

	    SPECIAL_NONE              = j++,
	    SPECIAL_SCRIPT            = j++,
	    SPECIAL_STYLE             = j++;

	function whitespace(c){
		return c === " " || c === "\n" || c === "\t" || c === "\f" || c === "\r";
	}

	function characterState(char, SUCCESS){
		return function(c){
			if(c === char) this._state = SUCCESS;
		};
	}

	function ifElseState(upper, SUCCESS, FAILURE){
		var lower = upper.toLowerCase();

		if(upper === lower){
			return function(c){
				if(c === lower){
					this._state = SUCCESS;
				} else {
					this._state = FAILURE;
					this._index--;
				}
			};
		} else {
			return function(c){
				if(c === lower || c === upper){
					this._state = SUCCESS;
				} else {
					this._state = FAILURE;
					this._index--;
				}
			};
		}
	}

	function consumeSpecialNameChar(upper, NEXT_STATE){
		var lower = upper.toLowerCase();

		return function(c){
			if(c === lower || c === upper){
				this._state = NEXT_STATE;
			} else {
				this._state = IN_TAG_NAME;
				this._index--; //consume the token again
			}
		};
	}

	function Tokenizer(options, cbs){
		this._state = TEXT;
		this._buffer = "";
		this._sectionStart = 0;
		this._index = 0;
		this._bufferOffset = 0; //chars removed from _buffer
		this._baseState = TEXT;
		this._special = SPECIAL_NONE;
		this._cbs = cbs;
		this._running = true;
		this._ended = false;
		this._xmlMode = !!(options && options.xmlMode);
		this._decodeEntities = !!(options && options.decodeEntities);
	}

	Tokenizer.prototype._stateText = function(c){
		if(c === "<"){
			if(this._index > this._sectionStart){
				this._cbs.ontext(this._getSection());
			}
			this._state = BEFORE_TAG_NAME;
			this._sectionStart = this._index;
		} else if(this._decodeEntities && this._special === SPECIAL_NONE && c === "&"){
			if(this._index > this._sectionStart){
				this._cbs.ontext(this._getSection());
			}
			this._baseState = TEXT;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateBeforeTagName = function(c){
		if(c === "/"){
			this._state = BEFORE_CLOSING_TAG_NAME;
		} else if(c === ">" || this._special !== SPECIAL_NONE || whitespace(c)) {
			this._state = TEXT;
		} else if(c === "!"){
			this._state = BEFORE_DECLARATION;
			this._sectionStart = this._index + 1;
		} else if(c === "?"){
			this._state = IN_PROCESSING_INSTRUCTION;
			this._sectionStart = this._index + 1;
		} else if(c === "<"){
			this._cbs.ontext(this._getSection());
			this._sectionStart = this._index;
		} else {
			this._state = (!this._xmlMode && (c === "s" || c === "S")) ?
							BEFORE_SPECIAL : IN_TAG_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInTagName = function(c){
		if(c === "/" || c === ">" || whitespace(c)){
			this._emitToken("onopentagname");
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateBeforeCloseingTagName = function(c){
		if(whitespace(c));
		else if(c === ">"){
			this._state = TEXT;
		} else if(this._special !== SPECIAL_NONE){
			if(c === "s" || c === "S"){
				this._state = BEFORE_SPECIAL_END;
			} else {
				this._state = TEXT;
				this._index--;
			}
		} else {
			this._state = IN_CLOSING_TAG_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInCloseingTagName = function(c){
		if(c === ">" || whitespace(c)){
			this._emitToken("onclosetag");
			this._state = AFTER_CLOSING_TAG_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateAfterCloseingTagName = function(c){
		//skip everything until ">"
		if(c === ">"){
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		}
	};

	Tokenizer.prototype._stateBeforeAttributeName = function(c){
		if(c === ">"){
			this._cbs.onopentagend();
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(c === "/"){
			this._state = IN_SELF_CLOSING_TAG;
		} else if(!whitespace(c)){
			this._state = IN_ATTRIBUTE_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInSelfClosingTag = function(c){
		if(c === ">"){
			this._cbs.onselfclosingtag();
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(!whitespace(c)){
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateInAttributeName = function(c){
		if(c === "=" || c === "/" || c === ">" || whitespace(c)){
			this._cbs.onattribname(this._getSection());
			this._sectionStart = -1;
			this._state = AFTER_ATTRIBUTE_NAME;
			this._index--;
		}
	};

	Tokenizer.prototype._stateAfterAttributeName = function(c){
		if(c === "="){
			this._state = BEFORE_ATTRIBUTE_VALUE;
		} else if(c === "/" || c === ">"){
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		} else if(!whitespace(c)){
			this._cbs.onattribend();
			this._state = IN_ATTRIBUTE_NAME;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateBeforeAttributeValue = function(c){
		if(c === "\""){
			this._state = IN_ATTRIBUTE_VALUE_DQ;
			this._sectionStart = this._index + 1;
		} else if(c === "'"){
			this._state = IN_ATTRIBUTE_VALUE_SQ;
			this._sectionStart = this._index + 1;
		} else if(!whitespace(c)){
			this._state = IN_ATTRIBUTE_VALUE_NQ;
			this._sectionStart = this._index;
			this._index--; //reconsume token
		}
	};

	Tokenizer.prototype._stateInAttributeValueDoubleQuotes = function(c){
		if(c === "\""){
			this._emitToken("onattribdata");
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
		} else if(this._decodeEntities && c === "&"){
			this._emitToken("onattribdata");
			this._baseState = this._state;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInAttributeValueSingleQuotes = function(c){
		if(c === "'"){
			this._emitToken("onattribdata");
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
		} else if(this._decodeEntities && c === "&"){
			this._emitToken("onattribdata");
			this._baseState = this._state;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateInAttributeValueNoQuotes = function(c){
		if(whitespace(c) || c === ">"){
			this._emitToken("onattribdata");
			this._cbs.onattribend();
			this._state = BEFORE_ATTRIBUTE_NAME;
			this._index--;
		} else if(this._decodeEntities && c === "&"){
			this._emitToken("onattribdata");
			this._baseState = this._state;
			this._state = BEFORE_ENTITY;
			this._sectionStart = this._index;
		}
	};

	Tokenizer.prototype._stateBeforeDeclaration = function(c){
		this._state = c === "[" ? BEFORE_CDATA_1 :
						c === "-" ? BEFORE_COMMENT :
							IN_DECLARATION;
	};

	Tokenizer.prototype._stateInDeclaration = function(c){
		if(c === ">"){
			this._cbs.ondeclaration(this._getSection());
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		}
	};

	Tokenizer.prototype._stateInProcessingInstruction = function(c){
		if(c === ">"){
			this._cbs.onprocessinginstruction(this._getSection());
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		}
	};

	Tokenizer.prototype._stateBeforeComment = function(c){
		if(c === "-"){
			this._state = IN_COMMENT;
			this._sectionStart = this._index + 1;
		} else {
			this._state = IN_DECLARATION;
		}
	};

	Tokenizer.prototype._stateInComment = function(c){
		if(c === "-") this._state = AFTER_COMMENT_1;
	};

	Tokenizer.prototype._stateAfterComment1 = function(c){
		if(c === "-"){
			this._state = AFTER_COMMENT_2;
		} else {
			this._state = IN_COMMENT;
		}
	};

	Tokenizer.prototype._stateAfterComment2 = function(c){
		if(c === ">"){
			//remove 2 trailing chars
			this._cbs.oncomment(this._buffer.substring(this._sectionStart, this._index - 2));
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(c !== "-"){
			this._state = IN_COMMENT;
		}
		// else: stay in AFTER_COMMENT_2 (`--->`)
	};

	Tokenizer.prototype._stateBeforeCdata1 = ifElseState("C", BEFORE_CDATA_2, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata2 = ifElseState("D", BEFORE_CDATA_3, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata3 = ifElseState("A", BEFORE_CDATA_4, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata4 = ifElseState("T", BEFORE_CDATA_5, IN_DECLARATION);
	Tokenizer.prototype._stateBeforeCdata5 = ifElseState("A", BEFORE_CDATA_6, IN_DECLARATION);

	Tokenizer.prototype._stateBeforeCdata6 = function(c){
		if(c === "["){
			this._state = IN_CDATA;
			this._sectionStart = this._index + 1;
		} else {
			this._state = IN_DECLARATION;
			this._index--;
		}
	};

	Tokenizer.prototype._stateInCdata = function(c){
		if(c === "]") this._state = AFTER_CDATA_1;
	};

	Tokenizer.prototype._stateAfterCdata1 = characterState("]", AFTER_CDATA_2);

	Tokenizer.prototype._stateAfterCdata2 = function(c){
		if(c === ">"){
			//remove 2 trailing chars
			this._cbs.oncdata(this._buffer.substring(this._sectionStart, this._index - 2));
			this._state = TEXT;
			this._sectionStart = this._index + 1;
		} else if(c !== "]") {
			this._state = IN_CDATA;
		}
		//else: stay in AFTER_CDATA_2 (`]]]>`)
	};

	Tokenizer.prototype._stateBeforeSpecial = function(c){
		if(c === "c" || c === "C"){
			this._state = BEFORE_SCRIPT_1;
		} else if(c === "t" || c === "T"){
			this._state = BEFORE_STYLE_1;
		} else {
			this._state = IN_TAG_NAME;
			this._index--; //consume the token again
		}
	};

	Tokenizer.prototype._stateBeforeSpecialEnd = function(c){
		if(this._special === SPECIAL_SCRIPT && (c === "c" || c === "C")){
			this._state = AFTER_SCRIPT_1;
		} else if(this._special === SPECIAL_STYLE && (c === "t" || c === "T")){
			this._state = AFTER_STYLE_1;
		}
		else this._state = TEXT;
	};

	Tokenizer.prototype._stateBeforeScript1 = consumeSpecialNameChar("R", BEFORE_SCRIPT_2);
	Tokenizer.prototype._stateBeforeScript2 = consumeSpecialNameChar("I", BEFORE_SCRIPT_3);
	Tokenizer.prototype._stateBeforeScript3 = consumeSpecialNameChar("P", BEFORE_SCRIPT_4);
	Tokenizer.prototype._stateBeforeScript4 = consumeSpecialNameChar("T", BEFORE_SCRIPT_5);

	Tokenizer.prototype._stateBeforeScript5 = function(c){
		if(c === "/" || c === ">" || whitespace(c)){
			this._special = SPECIAL_SCRIPT;
		}
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	};

	Tokenizer.prototype._stateAfterScript1 = ifElseState("R", AFTER_SCRIPT_2, TEXT);
	Tokenizer.prototype._stateAfterScript2 = ifElseState("I", AFTER_SCRIPT_3, TEXT);
	Tokenizer.prototype._stateAfterScript3 = ifElseState("P", AFTER_SCRIPT_4, TEXT);
	Tokenizer.prototype._stateAfterScript4 = ifElseState("T", AFTER_SCRIPT_5, TEXT);

	Tokenizer.prototype._stateAfterScript5 = function(c){
		if(c === ">" || whitespace(c)){
			this._special = SPECIAL_NONE;
			this._state = IN_CLOSING_TAG_NAME;
			this._sectionStart = this._index - 6;
			this._index--; //reconsume the token
		}
		else this._state = TEXT;
	};

	Tokenizer.prototype._stateBeforeStyle1 = consumeSpecialNameChar("Y", BEFORE_STYLE_2);
	Tokenizer.prototype._stateBeforeStyle2 = consumeSpecialNameChar("L", BEFORE_STYLE_3);
	Tokenizer.prototype._stateBeforeStyle3 = consumeSpecialNameChar("E", BEFORE_STYLE_4);

	Tokenizer.prototype._stateBeforeStyle4 = function(c){
		if(c === "/" || c === ">" || whitespace(c)){
			this._special = SPECIAL_STYLE;
		}
		this._state = IN_TAG_NAME;
		this._index--; //consume the token again
	};

	Tokenizer.prototype._stateAfterStyle1 = ifElseState("Y", AFTER_STYLE_2, TEXT);
	Tokenizer.prototype._stateAfterStyle2 = ifElseState("L", AFTER_STYLE_3, TEXT);
	Tokenizer.prototype._stateAfterStyle3 = ifElseState("E", AFTER_STYLE_4, TEXT);

	Tokenizer.prototype._stateAfterStyle4 = function(c){
		if(c === ">" || whitespace(c)){
			this._special = SPECIAL_NONE;
			this._state = IN_CLOSING_TAG_NAME;
			this._sectionStart = this._index - 5;
			this._index--; //reconsume the token
		}
		else this._state = TEXT;
	};

	Tokenizer.prototype._stateBeforeEntity = ifElseState("#", BEFORE_NUMERIC_ENTITY, IN_NAMED_ENTITY);
	Tokenizer.prototype._stateBeforeNumericEntity = ifElseState("X", IN_HEX_ENTITY, IN_NUMERIC_ENTITY);

	//for entities terminated with a semicolon
	Tokenizer.prototype._parseNamedEntityStrict = function(){
		//offset = 1
		if(this._sectionStart + 1 < this._index){
			var entity = this._buffer.substring(this._sectionStart + 1, this._index),
			    map = this._xmlMode ? xmlMap : entityMap;

			if(map.hasOwnProperty(entity)){
				this._emitPartial(map[entity]);
				this._sectionStart = this._index + 1;
			}
		}
	};


	//parses legacy entities (without trailing semicolon)
	Tokenizer.prototype._parseLegacyEntity = function(){
		var start = this._sectionStart + 1,
		    limit = this._index - start;

		if(limit > 6) limit = 6; //the max length of legacy entities is 6

		while(limit >= 2){ //the min length of legacy entities is 2
			var entity = this._buffer.substr(start, limit);

			if(legacyMap.hasOwnProperty(entity)){
				this._emitPartial(legacyMap[entity]);
				this._sectionStart += limit + 1;
				return;
			} else {
				limit--;
			}
		}
	};

	Tokenizer.prototype._stateInNamedEntity = function(c){
		if(c === ";"){
			this._parseNamedEntityStrict();
			if(this._sectionStart + 1 < this._index && !this._xmlMode){
				this._parseLegacyEntity();
			}
			this._state = this._baseState;
		} else if((c < "a" || c > "z") && (c < "A" || c > "Z") && (c < "0" || c > "9")){
			if(this._xmlMode);
			else if(this._sectionStart + 1 === this._index);
			else if(this._baseState !== TEXT){
				if(c !== "="){
					this._parseNamedEntityStrict();
				}
			} else {
				this._parseLegacyEntity();
			}

			this._state = this._baseState;
			this._index--;
		}
	};

	Tokenizer.prototype._decodeNumericEntity = function(offset, base){
		var sectionStart = this._sectionStart + offset;

		if(sectionStart !== this._index){
			//parse entity
			var entity = this._buffer.substring(sectionStart, this._index);
			var parsed = parseInt(entity, base);

			this._emitPartial(decodeCodePoint(parsed));
			this._sectionStart = this._index;
		} else {
			this._sectionStart--;
		}

		this._state = this._baseState;
	};

	Tokenizer.prototype._stateInNumericEntity = function(c){
		if(c === ";"){
			this._decodeNumericEntity(2, 10);
			this._sectionStart++;
		} else if(c < "0" || c > "9"){
			if(!this._xmlMode){
				this._decodeNumericEntity(2, 10);
			} else {
				this._state = this._baseState;
			}
			this._index--;
		}
	};

	Tokenizer.prototype._stateInHexEntity = function(c){
		if(c === ";"){
			this._decodeNumericEntity(3, 16);
			this._sectionStart++;
		} else if((c < "a" || c > "f") && (c < "A" || c > "F") && (c < "0" || c > "9")){
			if(!this._xmlMode){
				this._decodeNumericEntity(3, 16);
			} else {
				this._state = this._baseState;
			}
			this._index--;
		}
	};

	Tokenizer.prototype._cleanup = function (){
		if(this._sectionStart < 0){
			this._buffer = "";
			this._index = 0;
			this._bufferOffset += this._index;
		} else if(this._running){
			if(this._state === TEXT){
				if(this._sectionStart !== this._index){
					this._cbs.ontext(this._buffer.substr(this._sectionStart));
				}
				this._buffer = "";
				this._index = 0;
				this._bufferOffset += this._index;
			} else if(this._sectionStart === this._index){
				//the section just started
				this._buffer = "";
				this._index = 0;
				this._bufferOffset += this._index;
			} else {
				//remove everything unnecessary
				this._buffer = this._buffer.substr(this._sectionStart);
				this._index -= this._sectionStart;
				this._bufferOffset += this._sectionStart;
			}

			this._sectionStart = 0;
		}
	};

	//TODO make events conditional
	Tokenizer.prototype.write = function(chunk){
		if(this._ended) this._cbs.onerror(Error(".write() after done!"));

		this._buffer += chunk;
		this._parse();
	};

	Tokenizer.prototype._parse = function(){
		while(this._index < this._buffer.length && this._running){
			var c = this._buffer.charAt(this._index);
			if(this._state === TEXT) {
				this._stateText(c);
			} else if(this._state === BEFORE_TAG_NAME){
				this._stateBeforeTagName(c);
			} else if(this._state === IN_TAG_NAME) {
				this._stateInTagName(c);
			} else if(this._state === BEFORE_CLOSING_TAG_NAME){
				this._stateBeforeCloseingTagName(c);
			} else if(this._state === IN_CLOSING_TAG_NAME){
				this._stateInCloseingTagName(c);
			} else if(this._state === AFTER_CLOSING_TAG_NAME){
				this._stateAfterCloseingTagName(c);
			} else if(this._state === IN_SELF_CLOSING_TAG){
				this._stateInSelfClosingTag(c);
			}

			/*
			*	attributes
			*/
			else if(this._state === BEFORE_ATTRIBUTE_NAME){
				this._stateBeforeAttributeName(c);
			} else if(this._state === IN_ATTRIBUTE_NAME){
				this._stateInAttributeName(c);
			} else if(this._state === AFTER_ATTRIBUTE_NAME){
				this._stateAfterAttributeName(c);
			} else if(this._state === BEFORE_ATTRIBUTE_VALUE){
				this._stateBeforeAttributeValue(c);
			} else if(this._state === IN_ATTRIBUTE_VALUE_DQ){
				this._stateInAttributeValueDoubleQuotes(c);
			} else if(this._state === IN_ATTRIBUTE_VALUE_SQ){
				this._stateInAttributeValueSingleQuotes(c);
			} else if(this._state === IN_ATTRIBUTE_VALUE_NQ){
				this._stateInAttributeValueNoQuotes(c);
			}

			/*
			*	declarations
			*/
			else if(this._state === BEFORE_DECLARATION){
				this._stateBeforeDeclaration(c);
			} else if(this._state === IN_DECLARATION){
				this._stateInDeclaration(c);
			}

			/*
			*	processing instructions
			*/
			else if(this._state === IN_PROCESSING_INSTRUCTION){
				this._stateInProcessingInstruction(c);
			}

			/*
			*	comments
			*/
			else if(this._state === BEFORE_COMMENT){
				this._stateBeforeComment(c);
			} else if(this._state === IN_COMMENT){
				this._stateInComment(c);
			} else if(this._state === AFTER_COMMENT_1){
				this._stateAfterComment1(c);
			} else if(this._state === AFTER_COMMENT_2){
				this._stateAfterComment2(c);
			}

			/*
			*	cdata
			*/
			else if(this._state === BEFORE_CDATA_1){
				this._stateBeforeCdata1(c);
			} else if(this._state === BEFORE_CDATA_2){
				this._stateBeforeCdata2(c);
			} else if(this._state === BEFORE_CDATA_3){
				this._stateBeforeCdata3(c);
			} else if(this._state === BEFORE_CDATA_4){
				this._stateBeforeCdata4(c);
			} else if(this._state === BEFORE_CDATA_5){
				this._stateBeforeCdata5(c);
			} else if(this._state === BEFORE_CDATA_6){
				this._stateBeforeCdata6(c);
			} else if(this._state === IN_CDATA){
				this._stateInCdata(c);
			} else if(this._state === AFTER_CDATA_1){
				this._stateAfterCdata1(c);
			} else if(this._state === AFTER_CDATA_2){
				this._stateAfterCdata2(c);
			}

			/*
			* special tags
			*/
			else if(this._state === BEFORE_SPECIAL){
				this._stateBeforeSpecial(c);
			} else if(this._state === BEFORE_SPECIAL_END){
				this._stateBeforeSpecialEnd(c);
			}

			/*
			* script
			*/
			else if(this._state === BEFORE_SCRIPT_1){
				this._stateBeforeScript1(c);
			} else if(this._state === BEFORE_SCRIPT_2){
				this._stateBeforeScript2(c);
			} else if(this._state === BEFORE_SCRIPT_3){
				this._stateBeforeScript3(c);
			} else if(this._state === BEFORE_SCRIPT_4){
				this._stateBeforeScript4(c);
			} else if(this._state === BEFORE_SCRIPT_5){
				this._stateBeforeScript5(c);
			}

			else if(this._state === AFTER_SCRIPT_1){
				this._stateAfterScript1(c);
			} else if(this._state === AFTER_SCRIPT_2){
				this._stateAfterScript2(c);
			} else if(this._state === AFTER_SCRIPT_3){
				this._stateAfterScript3(c);
			} else if(this._state === AFTER_SCRIPT_4){
				this._stateAfterScript4(c);
			} else if(this._state === AFTER_SCRIPT_5){
				this._stateAfterScript5(c);
			}

			/*
			* style
			*/
			else if(this._state === BEFORE_STYLE_1){
				this._stateBeforeStyle1(c);
			} else if(this._state === BEFORE_STYLE_2){
				this._stateBeforeStyle2(c);
			} else if(this._state === BEFORE_STYLE_3){
				this._stateBeforeStyle3(c);
			} else if(this._state === BEFORE_STYLE_4){
				this._stateBeforeStyle4(c);
			}

			else if(this._state === AFTER_STYLE_1){
				this._stateAfterStyle1(c);
			} else if(this._state === AFTER_STYLE_2){
				this._stateAfterStyle2(c);
			} else if(this._state === AFTER_STYLE_3){
				this._stateAfterStyle3(c);
			} else if(this._state === AFTER_STYLE_4){
				this._stateAfterStyle4(c);
			}

			/*
			* entities
			*/
			else if(this._state === BEFORE_ENTITY){
				this._stateBeforeEntity(c);
			} else if(this._state === BEFORE_NUMERIC_ENTITY){
				this._stateBeforeNumericEntity(c);
			} else if(this._state === IN_NAMED_ENTITY){
				this._stateInNamedEntity(c);
			} else if(this._state === IN_NUMERIC_ENTITY){
				this._stateInNumericEntity(c);
			} else if(this._state === IN_HEX_ENTITY){
				this._stateInHexEntity(c);
			}

			else {
				this._cbs.onerror(Error("unknown _state"), this._state);
			}

			this._index++;
		}

		this._cleanup();
	};

	Tokenizer.prototype.pause = function(){
		this._running = false;
	};
	Tokenizer.prototype.resume = function(){
		this._running = true;

		if(this._index < this._buffer.length){
			this._parse();
		}
		if(this._ended){
			this._finish();
		}
	};

	Tokenizer.prototype.end = function(chunk){
		if(this._ended) this._cbs.onerror(Error(".end() after done!"));
		if(chunk) this.write(chunk);

		this._ended = true;

		if(this._running) this._finish();
	};

	Tokenizer.prototype._finish = function(){
		//if there is remaining data, emit it in a reasonable way
		if(this._sectionStart < this._index){
			this._handleTrailingData();
		}

		this._cbs.onend();
	};

	Tokenizer.prototype._handleTrailingData = function(){
		var data = this._buffer.substr(this._sectionStart);

		if(this._state === IN_CDATA || this._state === AFTER_CDATA_1 || this._state === AFTER_CDATA_2){
			this._cbs.oncdata(data);
		} else if(this._state === IN_COMMENT || this._state === AFTER_COMMENT_1 || this._state === AFTER_COMMENT_2){
			this._cbs.oncomment(data);
		} else if(this._state === IN_NAMED_ENTITY && !this._xmlMode){
			this._parseLegacyEntity();
			if(this._sectionStart < this._index){
				this._state = this._baseState;
				this._handleTrailingData();
			}
		} else if(this._state === IN_NUMERIC_ENTITY && !this._xmlMode){
			this._decodeNumericEntity(2, 10);
			if(this._sectionStart < this._index){
				this._state = this._baseState;
				this._handleTrailingData();
			}
		} else if(this._state === IN_HEX_ENTITY && !this._xmlMode){
			this._decodeNumericEntity(3, 16);
			if(this._sectionStart < this._index){
				this._state = this._baseState;
				this._handleTrailingData();
			}
		} else if(
			this._state !== IN_TAG_NAME &&
			this._state !== BEFORE_ATTRIBUTE_NAME &&
			this._state !== BEFORE_ATTRIBUTE_VALUE &&
			this._state !== AFTER_ATTRIBUTE_NAME &&
			this._state !== IN_ATTRIBUTE_NAME &&
			this._state !== IN_ATTRIBUTE_VALUE_SQ &&
			this._state !== IN_ATTRIBUTE_VALUE_DQ &&
			this._state !== IN_ATTRIBUTE_VALUE_NQ &&
			this._state !== IN_CLOSING_TAG_NAME
		){
			this._cbs.ontext(data);
		}
		//else, ignore remaining data
		//TODO add a way to remove current tag
	};

	Tokenizer.prototype.reset = function(){
		Tokenizer.call(this, {xmlMode: this._xmlMode, decodeEntities: this._decodeEntities}, this._cbs);
	};

	Tokenizer.prototype.getAbsoluteIndex = function(){
		return this._bufferOffset + this._index;
	};

	Tokenizer.prototype._getSection = function(){
		return this._buffer.substring(this._sectionStart, this._index);
	};

	Tokenizer.prototype._emitToken = function(name){
		this._cbs[name](this._getSection());
		this._sectionStart = -1;
	};

	Tokenizer.prototype._emitPartial = function(value){
		if(this._baseState !== TEXT){
			this._cbs.onattribdata(value); //TODO implement the new event
		} else {
			this._cbs.ontext(value);
		}
	};


/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Stream;

	var Parser = __webpack_require__(114),
	    WritableStream = __webpack_require__(16).Writable || __webpack_require__(699).Writable;

	function Stream(cbs, options){
		var parser = this._parser = new Parser(cbs, options);

		WritableStream.call(this, {decodeStrings: false});

		this.once("finish", function(){
			parser.end();
		});
	}

	__webpack_require__(10).inherits(Stream, WritableStream);

	WritableStream.prototype._write = function(chunk, encoding, cb){
		this._parser.write(chunk);
		cb();
	};

/***/ },
/* 117 */
/***/ function(module, exports) {

	// This object will be used as the prototype for Nodes when creating a
	// DOM-Level-1-compliant structure.
	var NodePrototype = module.exports = {
		get firstChild() {
			var children = this.children;
			return children && children[0] || null;
		},
		get lastChild() {
			var children = this.children;
			return children && children[children.length - 1] || null;
		},
		get nodeType() {
			return nodeTypes[this.type] || nodeTypes.element;
		}
	};

	var domLvl1 = {
		tagName: "name",
		childNodes: "children",
		parentNode: "parent",
		previousSibling: "prev",
		nextSibling: "next",
		nodeValue: "data"
	};

	var nodeTypes = {
		element: 1,
		text: 3,
		cdata: 4,
		comment: 8
	};

	Object.keys(domLvl1).forEach(function(key) {
		var shorthand = domLvl1[key];
		Object.defineProperty(NodePrototype, key, {
			get: function() {
				return this[shorthand] || null;
			},
			set: function(val) {
				this[shorthand] = val;
				return val;
			}
		});
	});


/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	var decodeMap = __webpack_require__(612);

	module.exports = decodeCodePoint;

	// modified version of https://github.com/mathiasbynens/he/blob/master/src/he.js#L94-L119
	function decodeCodePoint(codePoint){

		if((codePoint >= 0xD800 && codePoint <= 0xDFFF) || codePoint > 0x10FFFF){
			return "\uFFFD";
		}

		if(codePoint in decodeMap){
			codePoint = decodeMap[codePoint];
		}

		var output = "";

		if(codePoint > 0xFFFF){
			codePoint -= 0x10000;
			output += String.fromCharCode(codePoint >>> 10 & 0x3FF | 0xD800);
			codePoint = 0xDC00 | codePoint & 0x3FF;
		}

		output += String.fromCharCode(codePoint);
		return output;
	}


/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.Parser = __webpack_require__(122);
	exports.SimpleApiParser = __webpack_require__(600);
	exports.TreeSerializer =
	exports.Serializer = __webpack_require__(599);
	exports.JsDomParser = __webpack_require__(597);

	exports.TreeAdapters = {
	    default: __webpack_require__(54),
	    htmlparser2: __webpack_require__(605)
	};


/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Tokenizer = __webpack_require__(30),
	    HTML = __webpack_require__(23);

	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES,
	    ATTRS = HTML.ATTRS;


	//MIME types
	var MIME_TYPES = {
	    TEXT_HTML: 'text/html',
	    APPLICATION_XML: 'application/xhtml+xml'
	};

	//Attributes
	var DEFINITION_URL_ATTR = 'definitionurl',
	    ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL',
	    SVG_ATTRS_ADJUSTMENT_MAP = {
	        'attributename': 'attributeName',
	        'attributetype': 'attributeType',
	        'basefrequency': 'baseFrequency',
	        'baseprofile': 'baseProfile',
	        'calcmode': 'calcMode',
	        'clippathunits': 'clipPathUnits',
	        'contentscripttype': 'contentScriptType',
	        'contentstyletype': 'contentStyleType',
	        'diffuseconstant': 'diffuseConstant',
	        'edgemode': 'edgeMode',
	        'externalresourcesrequired': 'externalResourcesRequired',
	        'filterres': 'filterRes',
	        'filterunits': 'filterUnits',
	        'glyphref': 'glyphRef',
	        'gradienttransform': 'gradientTransform',
	        'gradientunits': 'gradientUnits',
	        'kernelmatrix': 'kernelMatrix',
	        'kernelunitlength': 'kernelUnitLength',
	        'keypoints': 'keyPoints',
	        'keysplines': 'keySplines',
	        'keytimes': 'keyTimes',
	        'lengthadjust': 'lengthAdjust',
	        'limitingconeangle': 'limitingConeAngle',
	        'markerheight': 'markerHeight',
	        'markerunits': 'markerUnits',
	        'markerwidth': 'markerWidth',
	        'maskcontentunits': 'maskContentUnits',
	        'maskunits': 'maskUnits',
	        'numoctaves': 'numOctaves',
	        'pathlength': 'pathLength',
	        'patterncontentunits': 'patternContentUnits',
	        'patterntransform': 'patternTransform',
	        'patternunits': 'patternUnits',
	        'pointsatx': 'pointsAtX',
	        'pointsaty': 'pointsAtY',
	        'pointsatz': 'pointsAtZ',
	        'preservealpha': 'preserveAlpha',
	        'preserveaspectratio': 'preserveAspectRatio',
	        'primitiveunits': 'primitiveUnits',
	        'refx': 'refX',
	        'refy': 'refY',
	        'repeatcount': 'repeatCount',
	        'repeatdur': 'repeatDur',
	        'requiredextensions': 'requiredExtensions',
	        'requiredfeatures': 'requiredFeatures',
	        'specularconstant': 'specularConstant',
	        'specularexponent': 'specularExponent',
	        'spreadmethod': 'spreadMethod',
	        'startoffset': 'startOffset',
	        'stddeviation': 'stdDeviation',
	        'stitchtiles': 'stitchTiles',
	        'surfacescale': 'surfaceScale',
	        'systemlanguage': 'systemLanguage',
	        'tablevalues': 'tableValues',
	        'targetx': 'targetX',
	        'targety': 'targetY',
	        'textlength': 'textLength',
	        'viewbox': 'viewBox',
	        'viewtarget': 'viewTarget',
	        'xchannelselector': 'xChannelSelector',
	        'ychannelselector': 'yChannelSelector',
	        'zoomandpan': 'zoomAndPan'
	    },
	    XML_ATTRS_ADJUSTMENT_MAP = {
	        'xlink:actuate': {prefix: 'xlink', name: 'actuate', namespace: NS.XLINK},
	        'xlink:arcrole': {prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK},
	        'xlink:href': {prefix: 'xlink', name: 'href', namespace: NS.XLINK},
	        'xlink:role': {prefix: 'xlink', name: 'role', namespace: NS.XLINK},
	        'xlink:show': {prefix: 'xlink', name: 'show', namespace: NS.XLINK},
	        'xlink:title': {prefix: 'xlink', name: 'title', namespace: NS.XLINK},
	        'xlink:type': {prefix: 'xlink', name: 'type', namespace: NS.XLINK},
	        'xml:base': {prefix: 'xml', name: 'base', namespace: NS.XML},
	        'xml:lang': {prefix: 'xml', name: 'lang', namespace: NS.XML},
	        'xml:space': {prefix: 'xml', name: 'space', namespace: NS.XML},
	        'xmlns': {prefix: '', name: 'xmlns', namespace: NS.XMLNS},
	        'xmlns:xlink': {prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS}

	    };

	//SVG tag names adjustment map
	var SVG_TAG_NAMES_ADJUSTMENT_MAP = {
	    'altglyph': 'altGlyph',
	    'altglyphdef': 'altGlyphDef',
	    'altglyphitem': 'altGlyphItem',
	    'animatecolor': 'animateColor',
	    'animatemotion': 'animateMotion',
	    'animatetransform': 'animateTransform',
	    'clippath': 'clipPath',
	    'feblend': 'feBlend',
	    'fecolormatrix': 'feColorMatrix',
	    'fecomponenttransfer': 'feComponentTransfer',
	    'fecomposite': 'feComposite',
	    'feconvolvematrix': 'feConvolveMatrix',
	    'fediffuselighting': 'feDiffuseLighting',
	    'fedisplacementmap': 'feDisplacementMap',
	    'fedistantlight': 'feDistantLight',
	    'feflood': 'feFlood',
	    'fefunca': 'feFuncA',
	    'fefuncb': 'feFuncB',
	    'fefuncg': 'feFuncG',
	    'fefuncr': 'feFuncR',
	    'fegaussianblur': 'feGaussianBlur',
	    'feimage': 'feImage',
	    'femerge': 'feMerge',
	    'femergenode': 'feMergeNode',
	    'femorphology': 'feMorphology',
	    'feoffset': 'feOffset',
	    'fepointlight': 'fePointLight',
	    'fespecularlighting': 'feSpecularLighting',
	    'fespotlight': 'feSpotLight',
	    'fetile': 'feTile',
	    'feturbulence': 'feTurbulence',
	    'foreignobject': 'foreignObject',
	    'glyphref': 'glyphRef',
	    'lineargradient': 'linearGradient',
	    'radialgradient': 'radialGradient',
	    'textpath': 'textPath'
	};

	//Tags that causes exit from foreign content
	var EXITS_FOREIGN_CONTENT = {};

	EXITS_FOREIGN_CONTENT[$.B] = true;
	EXITS_FOREIGN_CONTENT[$.BIG] = true;
	EXITS_FOREIGN_CONTENT[$.BLOCKQUOTE] = true;
	EXITS_FOREIGN_CONTENT[$.BODY] = true;
	EXITS_FOREIGN_CONTENT[$.BR] = true;
	EXITS_FOREIGN_CONTENT[$.CENTER] = true;
	EXITS_FOREIGN_CONTENT[$.CODE] = true;
	EXITS_FOREIGN_CONTENT[$.DD] = true;
	EXITS_FOREIGN_CONTENT[$.DIV] = true;
	EXITS_FOREIGN_CONTENT[$.DL] = true;
	EXITS_FOREIGN_CONTENT[$.DT] = true;
	EXITS_FOREIGN_CONTENT[$.EM] = true;
	EXITS_FOREIGN_CONTENT[$.EMBED] = true;
	EXITS_FOREIGN_CONTENT[$.H1] = true;
	EXITS_FOREIGN_CONTENT[$.H2] = true;
	EXITS_FOREIGN_CONTENT[$.H3] = true;
	EXITS_FOREIGN_CONTENT[$.H4] = true;
	EXITS_FOREIGN_CONTENT[$.H5] = true;
	EXITS_FOREIGN_CONTENT[$.H6] = true;
	EXITS_FOREIGN_CONTENT[$.HEAD] = true;
	EXITS_FOREIGN_CONTENT[$.HR] = true;
	EXITS_FOREIGN_CONTENT[$.I] = true;
	EXITS_FOREIGN_CONTENT[$.IMG] = true;
	EXITS_FOREIGN_CONTENT[$.LI] = true;
	EXITS_FOREIGN_CONTENT[$.LISTING] = true;
	EXITS_FOREIGN_CONTENT[$.MENU] = true;
	EXITS_FOREIGN_CONTENT[$.META] = true;
	EXITS_FOREIGN_CONTENT[$.NOBR] = true;
	EXITS_FOREIGN_CONTENT[$.OL] = true;
	EXITS_FOREIGN_CONTENT[$.P] = true;
	EXITS_FOREIGN_CONTENT[$.PRE] = true;
	EXITS_FOREIGN_CONTENT[$.RUBY] = true;
	EXITS_FOREIGN_CONTENT[$.S] = true;
	EXITS_FOREIGN_CONTENT[$.SMALL] = true;
	EXITS_FOREIGN_CONTENT[$.SPAN] = true;
	EXITS_FOREIGN_CONTENT[$.STRONG] = true;
	EXITS_FOREIGN_CONTENT[$.STRIKE] = true;
	EXITS_FOREIGN_CONTENT[$.SUB] = true;
	EXITS_FOREIGN_CONTENT[$.SUP] = true;
	EXITS_FOREIGN_CONTENT[$.TABLE] = true;
	EXITS_FOREIGN_CONTENT[$.TT] = true;
	EXITS_FOREIGN_CONTENT[$.U] = true;
	EXITS_FOREIGN_CONTENT[$.UL] = true;
	EXITS_FOREIGN_CONTENT[$.VAR] = true;

	//Check exit from foreign content
	exports.causesExit = function (startTagToken) {
	    var tn = startTagToken.tagName;

	    if (tn === $.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null ||
	        Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null ||
	        Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null)) {
	        return true;
	    }

	    return EXITS_FOREIGN_CONTENT[tn];
	};

	//Token adjustments
	exports.adjustTokenMathMLAttrs = function (token) {
	    for (var i = 0; i < token.attrs.length; i++) {
	        if (token.attrs[i].name === DEFINITION_URL_ATTR) {
	            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
	            break;
	        }
	    }
	};

	exports.adjustTokenSVGAttrs = function (token) {
	    for (var i = 0; i < token.attrs.length; i++) {
	        var adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

	        if (adjustedAttrName)
	            token.attrs[i].name = adjustedAttrName;
	    }
	};

	exports.adjustTokenXMLAttrs = function (token) {
	    for (var i = 0; i < token.attrs.length; i++) {
	        var adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

	        if (adjustedAttrEntry) {
	            token.attrs[i].prefix = adjustedAttrEntry.prefix;
	            token.attrs[i].name = adjustedAttrEntry.name;
	            token.attrs[i].namespace = adjustedAttrEntry.namespace;
	        }
	    }
	};

	exports.adjustTokenSVGTagName = function (token) {
	    var adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

	    if (adjustedTagName)
	        token.tagName = adjustedTagName;
	};

	//Integration points
	exports.isMathMLTextIntegrationPoint = function (tn, ns) {
	    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);
	};

	exports.isHtmlIntegrationPoint = function (tn, ns, attrs) {
	    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {
	        for (var i = 0; i < attrs.length; i++) {
	            if (attrs[i].name === ATTRS.ENCODING) {
	                var value = attrs[i].value.toLowerCase();

	                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
	            }
	        }
	    }

	    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);
	};


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var HTML = __webpack_require__(23);

	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES;

	//Element utils

	//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
	//It's faster than using dictionary.
	function isImpliedEndTagRequired(tn) {
	    switch (tn.length) {
	        case 1:
	            return tn === $.P;

	        case 2:
	            return tn === $.RP || tn === $.RT || tn === $.DD || tn === $.DT || tn === $.LI;

	        case 6:
	            return tn === $.OPTION;

	        case 8:
	            return tn === $.OPTGROUP;
	    }

	    return false;
	}

	function isScopingElement(tn, ns) {
	    switch (tn.length) {
	        case 2:
	            if (tn === $.TD || tn === $.TH)
	                return ns === NS.HTML;

	            else if (tn === $.MI || tn === $.MO || tn == $.MN || tn === $.MS)
	                return ns === NS.MATHML;

	            break;

	        case 4:
	            if (tn === $.HTML)
	                return ns === NS.HTML;

	            else if (tn === $.DESC)
	                return ns === NS.SVG;

	            break;

	        case 5:
	            if (tn === $.TABLE)
	                return ns === NS.HTML;

	            else if (tn === $.MTEXT)
	                return ns === NS.MATHML;

	            else if (tn === $.TITLE)
	                return ns === NS.SVG;

	            break;

	        case 6:
	            return (tn === $.APPLET || tn === $.OBJECT) && ns === NS.HTML;

	        case 7:
	            return (tn === $.CAPTION || tn === $.MARQUEE) && ns === NS.HTML;

	        case 8:
	            return tn === $.TEMPLATE && ns === NS.HTML;

	        case 13:
	            return tn === $.FOREIGN_OBJECT && ns === NS.SVG;

	        case 14:
	            return tn === $.ANNOTATION_XML && ns === NS.MATHML;
	    }

	    return false;
	}

	//Stack of open elements
	var OpenElementStack = module.exports = function (document, treeAdapter) {
	    this.stackTop = -1;
	    this.items = [];
	    this.current = document;
	    this.currentTagName = null;
	    this.currentTmplContent = null;
	    this.tmplCount = 0;
	    this.treeAdapter = treeAdapter;
	};

	//Index of element
	OpenElementStack.prototype._indexOf = function (element) {
	    var idx = -1;

	    for (var i = this.stackTop; i >= 0; i--) {
	        if (this.items[i] === element) {
	            idx = i;
	            break;
	        }
	    }
	    return idx;
	};

	//Update current element
	OpenElementStack.prototype._isInTemplate = function () {
	    if (this.currentTagName !== $.TEMPLATE)
	        return false;

	    return this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
	};

	OpenElementStack.prototype._updateCurrentElement = function () {
	    this.current = this.items[this.stackTop];
	    this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);

	    this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getChildNodes(this.current)[0] : null;
	};

	//Mutations
	OpenElementStack.prototype.push = function (element) {
	    this.items[++this.stackTop] = element;
	    this._updateCurrentElement();

	    if (this._isInTemplate())
	        this.tmplCount++;

	};

	OpenElementStack.prototype.pop = function () {
	    this.stackTop--;

	    if (this.tmplCount > 0 && this._isInTemplate())
	        this.tmplCount--;

	    this._updateCurrentElement();
	};

	OpenElementStack.prototype.replace = function (oldElement, newElement) {
	    var idx = this._indexOf(oldElement);
	    this.items[idx] = newElement;

	    if (idx === this.stackTop)
	        this._updateCurrentElement();
	};

	OpenElementStack.prototype.insertAfter = function (referenceElement, newElement) {
	    var insertionIdx = this._indexOf(referenceElement) + 1;

	    this.items.splice(insertionIdx, 0, newElement);

	    if (insertionIdx == ++this.stackTop)
	        this._updateCurrentElement();
	};

	OpenElementStack.prototype.popUntilTagNamePopped = function (tagName) {
	    while (this.stackTop > -1) {
	        var tn = this.currentTagName;

	        this.pop();

	        if (tn === tagName)
	            break;
	    }
	};

	OpenElementStack.prototype.popUntilTemplatePopped = function () {
	    while (this.stackTop > -1) {
	        var tn = this.currentTagName,
	            ns = this.treeAdapter.getNamespaceURI(this.current);

	        this.pop();

	        if (tn === $.TEMPLATE && ns === NS.HTML)
	            break;
	    }
	};

	OpenElementStack.prototype.popUntilElementPopped = function (element) {
	    while (this.stackTop > -1) {
	        var poppedElement = this.current;

	        this.pop();

	        if (poppedElement === element)
	            break;
	    }
	};

	OpenElementStack.prototype.popUntilNumberedHeaderPopped = function () {
	    while (this.stackTop > -1) {
	        var tn = this.currentTagName;

	        this.pop();

	        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	            break;
	    }
	};

	OpenElementStack.prototype.popAllUpToHtmlElement = function () {
	    //NOTE: here we assume that root <html> element is always first in the open element stack, so
	    //we perform this fast stack clean up.
	    this.stackTop = 0;
	    this._updateCurrentElement();
	};

	OpenElementStack.prototype.clearBackToTableContext = function () {
	    while (this.currentTagName !== $.TABLE && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML)
	        this.pop();
	};

	OpenElementStack.prototype.clearBackToTableBodyContext = function () {
	    while (this.currentTagName !== $.TBODY && this.currentTagName !== $.TFOOT &&
	           this.currentTagName !== $.THEAD && this.currentTagName !== $.TEMPLATE &&
	           this.currentTagName !== $.HTML) {
	        this.pop();
	    }
	};

	OpenElementStack.prototype.clearBackToTableRowContext = function () {
	    while (this.currentTagName !== $.TR && this.currentTagName !== $.TEMPLATE && this.currentTagName !== $.HTML)
	        this.pop();
	};

	OpenElementStack.prototype.remove = function (element) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        if (this.items[i] === element) {
	            this.items.splice(i, 1);
	            this.stackTop--;
	            this._updateCurrentElement();
	            break;
	        }
	    }
	};

	//Search
	OpenElementStack.prototype.tryPeekProperlyNestedBodyElement = function () {
	    //Properly nested <body> element (should be second element in stack).
	    var element = this.items[1];
	    return element && this.treeAdapter.getTagName(element) === $.BODY ? element : null;
	};

	OpenElementStack.prototype.contains = function (element) {
	    return this._indexOf(element) > -1;
	};

	OpenElementStack.prototype.getCommonAncestor = function (element) {
	    var elementIdx = this._indexOf(element);

	    return --elementIdx >= 0 ? this.items[elementIdx] : null;
	};

	OpenElementStack.prototype.isRootHtmlElementCurrent = function () {
	    return this.stackTop === 0 && this.currentTagName === $.HTML;
	};

	//Element in scope
	OpenElementStack.prototype.hasInScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]);

	        if (tn === tagName)
	            return true;

	        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

	        if (isScopingElement(tn, ns))
	            return false;
	    }

	    return true;
	};

	OpenElementStack.prototype.hasNumberedHeaderInScope = function () {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]);

	        if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	            return true;

	        if (isScopingElement(tn, this.treeAdapter.getNamespaceURI(this.items[i])))
	            return false;
	    }

	    return true;
	};

	OpenElementStack.prototype.hasInListItemScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]);

	        if (tn === tagName)
	            return true;

	        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

	        if (((tn === $.UL || tn === $.OL) && ns === NS.HTML) || isScopingElement(tn, ns))
	            return false;
	    }

	    return true;
	};

	OpenElementStack.prototype.hasInButtonScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]);

	        if (tn === tagName)
	            return true;

	        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

	        if ((tn === $.BUTTON && ns === NS.HTML) || isScopingElement(tn, ns))
	            return false;
	    }

	    return true;
	};

	OpenElementStack.prototype.hasInTableScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]);

	        if (tn === tagName)
	            return true;

	        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

	        if ((tn === $.TABLE || tn === $.TEMPLATE || tn === $.HTML) && ns === NS.HTML)
	            return false;
	    }

	    return true;
	};

	OpenElementStack.prototype.hasTableBodyContextInTableScope = function () {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]);

	        if (tn === $.TBODY || tn === $.THEAD || tn === $.TFOOT)
	            return true;

	        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

	        if ((tn === $.TABLE || tn === $.HTML) && ns === NS.HTML)
	            return false;
	    }

	    return true;
	};

	OpenElementStack.prototype.hasInSelectScope = function (tagName) {
	    for (var i = this.stackTop; i >= 0; i--) {
	        var tn = this.treeAdapter.getTagName(this.items[i]);

	        if (tn === tagName)
	            return true;

	        var ns = this.treeAdapter.getNamespaceURI(this.items[i]);

	        if (tn !== $.OPTION && tn !== $.OPTGROUP && ns === NS.HTML)
	            return false;
	    }

	    return true;
	};

	//Implied end tags
	OpenElementStack.prototype.generateImpliedEndTags = function () {
	    while (isImpliedEndTagRequired(this.currentTagName))
	        this.pop();
	};

	OpenElementStack.prototype.generateImpliedEndTagsWithExclusion = function (exclusionTagName) {
	    while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName)
	        this.pop();
	};


/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Tokenizer = __webpack_require__(30),
	    OpenElementStack = __webpack_require__(121),
	    FormattingElementList = __webpack_require__(606),
	    LocationInfoMixin = __webpack_require__(607),
	    DefaultTreeAdapter = __webpack_require__(54),
	    Doctype = __webpack_require__(52),
	    ForeignContent = __webpack_require__(120),
	    Utils = __webpack_require__(53),
	    UNICODE = __webpack_require__(36),
	    HTML = __webpack_require__(23);

	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES,
	    ATTRS = HTML.ATTRS;

	//Default options
	var DEFAULT_OPTIONS = {
	    decodeHtmlEntities: true,
	    locationInfo: false
	};

	//Misc constants
	var SEARCHABLE_INDEX_DEFAULT_PROMPT = 'This is a searchable index. Enter search keywords: ',
	    SEARCHABLE_INDEX_INPUT_NAME = 'isindex',
	    HIDDEN_INPUT_TYPE = 'hidden';

	//Adoption agency loops iteration count
	var AA_OUTER_LOOP_ITER = 8,
	    AA_INNER_LOOP_ITER = 3;

	//Insertion modes
	var INITIAL_MODE = 'INITIAL_MODE',
	    BEFORE_HTML_MODE = 'BEFORE_HTML_MODE',
	    BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE',
	    IN_HEAD_MODE = 'IN_HEAD_MODE',
	    AFTER_HEAD_MODE = 'AFTER_HEAD_MODE',
	    IN_BODY_MODE = 'IN_BODY_MODE',
	    TEXT_MODE = 'TEXT_MODE',
	    IN_TABLE_MODE = 'IN_TABLE_MODE',
	    IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE',
	    IN_CAPTION_MODE = 'IN_CAPTION_MODE',
	    IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE',
	    IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE',
	    IN_ROW_MODE = 'IN_ROW_MODE',
	    IN_CELL_MODE = 'IN_CELL_MODE',
	    IN_SELECT_MODE = 'IN_SELECT_MODE',
	    IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE',
	    IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE',
	    AFTER_BODY_MODE = 'AFTER_BODY_MODE',
	    IN_FRAMESET_MODE = 'IN_FRAMESET_MODE',
	    AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE',
	    AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE',
	    AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';

	//Insertion mode reset map
	var INSERTION_MODE_RESET_MAP = {};

	INSERTION_MODE_RESET_MAP[$.TR] = IN_ROW_MODE;
	INSERTION_MODE_RESET_MAP[$.TBODY] =
	INSERTION_MODE_RESET_MAP[$.THEAD] =
	INSERTION_MODE_RESET_MAP[$.TFOOT] = IN_TABLE_BODY_MODE;
	INSERTION_MODE_RESET_MAP[$.CAPTION] = IN_CAPTION_MODE;
	INSERTION_MODE_RESET_MAP[$.COLGROUP] = IN_COLUMN_GROUP_MODE;
	INSERTION_MODE_RESET_MAP[$.TABLE] = IN_TABLE_MODE;
	INSERTION_MODE_RESET_MAP[$.BODY] = IN_BODY_MODE;
	INSERTION_MODE_RESET_MAP[$.FRAMESET] = IN_FRAMESET_MODE;

	//Template insertion mode switch map
	var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {};

	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.CAPTION] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COLGROUP] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TBODY] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TFOOT] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.THEAD] = IN_TABLE_MODE;
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.COL] = IN_COLUMN_GROUP_MODE;
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TR] = IN_TABLE_BODY_MODE;
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TD] =
	TEMPLATE_INSERTION_MODE_SWITCH_MAP[$.TH] = IN_ROW_MODE;

	//Token handlers map for insertion modes
	var _ = {};

	_[INITIAL_MODE] = {};
	_[INITIAL_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[INITIAL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInInitialMode;
	_[INITIAL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
	_[INITIAL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[INITIAL_MODE][Tokenizer.DOCTYPE_TOKEN] = doctypeInInitialMode;
	_[INITIAL_MODE][Tokenizer.START_TAG_TOKEN] =
	_[INITIAL_MODE][Tokenizer.END_TAG_TOKEN] =
	_[INITIAL_MODE][Tokenizer.EOF_TOKEN] = tokenInInitialMode;

	_[BEFORE_HTML_MODE] = {};
	_[BEFORE_HTML_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[BEFORE_HTML_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHtml;
	_[BEFORE_HTML_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
	_[BEFORE_HTML_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[BEFORE_HTML_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[BEFORE_HTML_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHtml;
	_[BEFORE_HTML_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHtml;
	_[BEFORE_HTML_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHtml;

	_[BEFORE_HEAD_MODE] = {};
	_[BEFORE_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[BEFORE_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenBeforeHead;
	_[BEFORE_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = ignoreToken;
	_[BEFORE_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[BEFORE_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[BEFORE_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagBeforeHead;
	_[BEFORE_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagBeforeHead;
	_[BEFORE_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenBeforeHead;

	_[IN_HEAD_MODE] = {};
	_[IN_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInHead;
	_[IN_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagInHead;
	_[IN_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagInHead;
	_[IN_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenInHead;

	_[AFTER_HEAD_MODE] = {};
	_[AFTER_HEAD_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_HEAD_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterHead;
	_[AFTER_HEAD_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[AFTER_HEAD_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[AFTER_HEAD_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_HEAD_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterHead;
	_[AFTER_HEAD_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterHead;
	_[AFTER_HEAD_MODE][Tokenizer.EOF_TOKEN] = tokenAfterHead;

	_[IN_BODY_MODE] = {};
	_[IN_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInBody;
	_[IN_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInBody;
	_[IN_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[TEXT_MODE] = {};
	_[TEXT_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
	_[TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
	_[TEXT_MODE][Tokenizer.START_TAG_TOKEN] = ignoreToken;
	_[TEXT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInText;
	_[TEXT_MODE][Tokenizer.EOF_TOKEN] = eofInText;

	_[IN_TABLE_MODE] = {};
	_[IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
	_[IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTable;
	_[IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTable;
	_[IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_TABLE_TEXT_MODE] = {};
	_[IN_TABLE_TEXT_MODE][Tokenizer.CHARACTER_TOKEN] = characterInTableText;
	_[IN_TABLE_TEXT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_TABLE_TEXT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInTableText;
	_[IN_TABLE_TEXT_MODE][Tokenizer.COMMENT_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.DOCTYPE_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.START_TAG_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.END_TAG_TOKEN] =
	_[IN_TABLE_TEXT_MODE][Tokenizer.EOF_TOKEN] = tokenInTableText;

	_[IN_CAPTION_MODE] = {};
	_[IN_CAPTION_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_CAPTION_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_CAPTION_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_CAPTION_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_CAPTION_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_CAPTION_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCaption;
	_[IN_CAPTION_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCaption;
	_[IN_CAPTION_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_COLUMN_GROUP_MODE] = {};
	_[IN_COLUMN_GROUP_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_COLUMN_GROUP_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenInColumnGroup;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.START_TAG_TOKEN] = startTagInColumnGroup;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.END_TAG_TOKEN] = endTagInColumnGroup;
	_[IN_COLUMN_GROUP_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_TABLE_BODY_MODE] = {};
	_[IN_TABLE_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_TABLE_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[IN_TABLE_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
	_[IN_TABLE_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_TABLE_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_TABLE_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTableBody;
	_[IN_TABLE_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTableBody;
	_[IN_TABLE_BODY_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_ROW_MODE] = {};
	_[IN_ROW_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_ROW_MODE][Tokenizer.NULL_CHARACTER_TOKEN] =
	_[IN_ROW_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = characterInTable;
	_[IN_ROW_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_ROW_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_ROW_MODE][Tokenizer.START_TAG_TOKEN] = startTagInRow;
	_[IN_ROW_MODE][Tokenizer.END_TAG_TOKEN] = endTagInRow;
	_[IN_ROW_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_CELL_MODE] = {};
	_[IN_CELL_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_CELL_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_CELL_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_CELL_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_CELL_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_CELL_MODE][Tokenizer.START_TAG_TOKEN] = startTagInCell;
	_[IN_CELL_MODE][Tokenizer.END_TAG_TOKEN] = endTagInCell;
	_[IN_CELL_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_SELECT_MODE] = {};
	_[IN_SELECT_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_SELECT_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_SELECT_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_SELECT_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelect;
	_[IN_SELECT_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelect;
	_[IN_SELECT_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_SELECT_IN_TABLE_MODE] = {};
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInSelectInTable;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInSelectInTable;
	_[IN_SELECT_IN_TABLE_MODE][Tokenizer.EOF_TOKEN] = eofInBody;

	_[IN_TEMPLATE_MODE] = {};
	_[IN_TEMPLATE_MODE][Tokenizer.CHARACTER_TOKEN] = characterInBody;
	_[IN_TEMPLATE_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_TEMPLATE_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[IN_TEMPLATE_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_TEMPLATE_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_TEMPLATE_MODE][Tokenizer.START_TAG_TOKEN] = startTagInTemplate;
	_[IN_TEMPLATE_MODE][Tokenizer.END_TAG_TOKEN] = endTagInTemplate;
	_[IN_TEMPLATE_MODE][Tokenizer.EOF_TOKEN] = eofInTemplate;

	_[AFTER_BODY_MODE] = {};
	_[AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterBody;
	_[AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToRootHtmlElement;
	_[AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterBody;
	_[AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterBody;
	_[AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

	_[IN_FRAMESET_MODE] = {};
	_[IN_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[IN_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[IN_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[IN_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[IN_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[IN_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagInFrameset;
	_[IN_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagInFrameset;
	_[IN_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

	_[AFTER_FRAMESET_MODE] = {};
	_[AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = insertCharacters;
	_[AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendComment;
	_[AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterFrameset;
	_[AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = endTagAfterFrameset;
	_[AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

	_[AFTER_AFTER_BODY_MODE] = {};
	_[AFTER_AFTER_BODY_MODE][Tokenizer.CHARACTER_TOKEN] = tokenAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = tokenAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.END_TAG_TOKEN] = tokenAfterAfterBody;
	_[AFTER_AFTER_BODY_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

	_[AFTER_AFTER_FRAMESET_MODE] = {};
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.CHARACTER_TOKEN] =
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.NULL_CHARACTER_TOKEN] = ignoreToken;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.WHITESPACE_CHARACTER_TOKEN] = whitespaceCharacterInBody;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.COMMENT_TOKEN] = appendCommentToDocument;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.DOCTYPE_TOKEN] = ignoreToken;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.START_TAG_TOKEN] = startTagAfterAfterFrameset;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.END_TAG_TOKEN] = ignoreToken;
	_[AFTER_AFTER_FRAMESET_MODE][Tokenizer.EOF_TOKEN] = stopParsing;

	//Searchable index building utils (<isindex> tag)
	function getSearchableIndexFormAttrs(isindexStartTagToken) {
	    var indexAction = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.ACTION),
	        attrs = [];

	    if (indexAction !== null) {
	        attrs.push({
	            name: ATTRS.ACTION,
	            value: indexAction
	        });
	    }

	    return attrs;
	}

	function getSearchableIndexLabelText(isindexStartTagToken) {
	    var indexPrompt = Tokenizer.getTokenAttr(isindexStartTagToken, ATTRS.PROMPT);

	    return indexPrompt === null ? SEARCHABLE_INDEX_DEFAULT_PROMPT : indexPrompt;
	}

	function getSearchableIndexInputAttrs(isindexStartTagToken) {
	    var isindexAttrs = isindexStartTagToken.attrs,
	        inputAttrs = [];

	    for (var i = 0; i < isindexAttrs.length; i++) {
	        var name = isindexAttrs[i].name;

	        if (name !== ATTRS.NAME && name !== ATTRS.ACTION && name !== ATTRS.PROMPT)
	            inputAttrs.push(isindexAttrs[i]);
	    }

	    inputAttrs.push({
	        name: ATTRS.NAME,
	        value: SEARCHABLE_INDEX_INPUT_NAME
	    });

	    return inputAttrs;
	}

	//Parser
	var Parser = module.exports = function (treeAdapter, options) {
	    this.treeAdapter = treeAdapter || DefaultTreeAdapter;
	    this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
	    this.scriptHandler = null;

	    if (this.options.locationInfo)
	        LocationInfoMixin.assign(this);
	};

	//API
	Parser.prototype.parse = function (html) {
	    var document = this.treeAdapter.createDocument();

	    this._reset(html, document, null);
	    this._runParsingLoop();

	    return document;
	};

	Parser.prototype.parseFragment = function (html, fragmentContext) {
	    //NOTE: use <template> element as a fragment context if context element was not provided,
	    //so we will parse in "forgiving" manner
	    if (!fragmentContext)
	        fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);

	    //NOTE: create fake element which will be used as 'document' for fragment parsing.
	    //This is important for jsdom there 'document' can't be recreated, therefore
	    //fragment parsing causes messing of the main `document`.
	    var documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

	    this._reset(html, documentMock, fragmentContext);

	    if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE)
	        this._pushTmplInsertionMode(IN_TEMPLATE_MODE);

	    this._initTokenizerForFragmentParsing();
	    this._insertFakeRootElement();
	    this._resetInsertionMode();
	    this._findFormInFragmentContext();
	    this._runParsingLoop();

	    var rootElement = this.treeAdapter.getFirstChild(documentMock),
	        fragment = this.treeAdapter.createDocumentFragment();

	    this._adoptNodes(rootElement, fragment);

	    return fragment;
	};

	//Reset state
	Parser.prototype._reset = function (html, document, fragmentContext) {
	    this.tokenizer = new Tokenizer(html, this.options);

	    this.stopped = false;

	    this.insertionMode = INITIAL_MODE;
	    this.originalInsertionMode = '';

	    this.document = document;
	    this.fragmentContext = fragmentContext;

	    this.headElement = null;
	    this.formElement = null;

	    this.openElements = new OpenElementStack(this.document, this.treeAdapter);
	    this.activeFormattingElements = new FormattingElementList(this.treeAdapter);

	    this.tmplInsertionModeStack = [];
	    this.tmplInsertionModeStackTop = -1;
	    this.currentTmplInsertionMode = null;

	    this.pendingCharacterTokens = [];
	    this.hasNonWhitespacePendingCharacterToken = false;

	    this.framesetOk = true;
	    this.skipNextNewLine = false;
	    this.fosterParentingEnabled = false;
	};

	//Parsing loop
	Parser.prototype._iterateParsingLoop = function () {
	    this._setupTokenizerCDATAMode();

	    var token = this.tokenizer.getNextToken();

	    if (this.skipNextNewLine) {
	        this.skipNextNewLine = false;

	        if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
	            if (token.chars.length === 1)
	                return;

	            token.chars = token.chars.substr(1);
	        }
	    }

	    if (this._shouldProcessTokenInForeignContent(token))
	        this._processTokenInForeignContent(token);

	    else
	        this._processToken(token);
	};

	Parser.prototype._runParsingLoop = function () {
	    while (!this.stopped)
	        this._iterateParsingLoop();
	};

	//Text parsing
	Parser.prototype._setupTokenizerCDATAMode = function () {
	    var current = this._getAdjustedCurrentElement();

	    this.tokenizer.allowCDATA = current && current !== this.document &&
	                                this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&
	                                (!this._isHtmlIntegrationPoint(current)) &&
	                                (!this._isMathMLTextIntegrationPoint(current));
	};

	Parser.prototype._switchToTextParsing = function (currentToken, nextTokenizerState) {
	    this._insertElement(currentToken, NS.HTML);
	    this.tokenizer.state = nextTokenizerState;
	    this.originalInsertionMode = this.insertionMode;
	    this.insertionMode = TEXT_MODE;
	};

	//Fragment parsing
	Parser.prototype._getAdjustedCurrentElement = function () {
	    return this.openElements.stackTop === 0 && this.fragmentContext ?
	           this.fragmentContext :
	           this.openElements.current;
	};

	Parser.prototype._findFormInFragmentContext = function () {
	    var node = this.fragmentContext;

	    do {
	        if (this.treeAdapter.getTagName(node) === $.FORM) {
	            this.formElement = node;
	            break;
	        }

	        node = this.treeAdapter.getParentNode(node);
	    } while (node);
	};

	Parser.prototype._initTokenizerForFragmentParsing = function () {
	    var tn = this.treeAdapter.getTagName(this.fragmentContext);

	    if (tn === $.TITLE || tn === $.TEXTAREA)
	        this.tokenizer.state = Tokenizer.MODE.RCDATA;

	    else if (tn === $.STYLE || tn === $.XMP || tn === $.IFRAME ||
	             tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
	        this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
	    }

	    else if (tn === $.SCRIPT)
	        this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;

	    else if (tn === $.PLAINTEXT)
	        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
	};

	//Tree mutation
	Parser.prototype._setDocumentType = function (token) {
	    this.treeAdapter.setDocumentType(this.document, token.name, token.publicId, token.systemId);
	};

	Parser.prototype._attachElementToTree = function (element) {
	    if (this._shouldFosterParentOnInsertion())
	        this._fosterParentElement(element);

	    else {
	        var parent = this.openElements.currentTmplContent || this.openElements.current;

	        this.treeAdapter.appendChild(parent, element);
	    }
	};

	Parser.prototype._appendElement = function (token, namespaceURI) {
	    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

	    this._attachElementToTree(element);
	};

	Parser.prototype._insertElement = function (token, namespaceURI) {
	    var element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

	    this._attachElementToTree(element);
	    this.openElements.push(element);
	};

	Parser.prototype._insertTemplate = function (token) {
	    var tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs),
	        content = this.treeAdapter.createDocumentFragment();

	    this.treeAdapter.appendChild(tmpl, content);
	    this._attachElementToTree(tmpl);
	    this.openElements.push(tmpl);
	};

	Parser.prototype._insertFakeRootElement = function () {
	    var element = this.treeAdapter.createElement($.HTML, NS.HTML, []);

	    this.treeAdapter.appendChild(this.openElements.current, element);
	    this.openElements.push(element);
	};

	Parser.prototype._appendCommentNode = function (token, parent) {
	    var commentNode = this.treeAdapter.createCommentNode(token.data);

	    this.treeAdapter.appendChild(parent, commentNode);
	};

	Parser.prototype._insertCharacters = function (token) {
	    if (this._shouldFosterParentOnInsertion())
	        this._fosterParentText(token.chars);

	    else {
	        var parent = this.openElements.currentTmplContent || this.openElements.current;

	        this.treeAdapter.insertText(parent, token.chars);
	    }
	};

	Parser.prototype._adoptNodes = function (donor, recipient) {
	    while (true) {
	        var child = this.treeAdapter.getFirstChild(donor);

	        if (!child)
	            break;

	        this.treeAdapter.detachNode(child);
	        this.treeAdapter.appendChild(recipient, child);
	    }
	};

	//Token processing
	Parser.prototype._shouldProcessTokenInForeignContent = function (token) {
	    var current = this._getAdjustedCurrentElement();

	    if (!current || current === this.document)
	        return false;

	    var ns = this.treeAdapter.getNamespaceURI(current);

	    if (ns === NS.HTML)
	        return false;

	    if (this.treeAdapter.getTagName(current) === $.ANNOTATION_XML && ns === NS.MATHML &&
	        token.type === Tokenizer.START_TAG_TOKEN && token.tagName === $.SVG) {
	        return false;
	    }

	    var isCharacterToken = token.type === Tokenizer.CHARACTER_TOKEN ||
	                           token.type === Tokenizer.NULL_CHARACTER_TOKEN ||
	                           token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN,
	        isMathMLTextStartTag = token.type === Tokenizer.START_TAG_TOKEN &&
	                               token.tagName !== $.MGLYPH &&
	                               token.tagName !== $.MALIGNMARK;

	    if ((isMathMLTextStartTag || isCharacterToken) && this._isMathMLTextIntegrationPoint(current))
	        return false;

	    if ((token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isHtmlIntegrationPoint(current))
	        return false;

	    return token.type !== Tokenizer.EOF_TOKEN;
	};

	Parser.prototype._processToken = function (token) {
	    _[this.insertionMode][token.type](this, token);
	};

	Parser.prototype._processTokenInBodyMode = function (token) {
	    _[IN_BODY_MODE][token.type](this, token);
	};

	Parser.prototype._processTokenInForeignContent = function (token) {
	    if (token.type === Tokenizer.CHARACTER_TOKEN)
	        characterInForeignContent(this, token);

	    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN)
	        nullCharacterInForeignContent(this, token);

	    else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN)
	        insertCharacters(this, token);

	    else if (token.type === Tokenizer.COMMENT_TOKEN)
	        appendComment(this, token);

	    else if (token.type === Tokenizer.START_TAG_TOKEN)
	        startTagInForeignContent(this, token);

	    else if (token.type === Tokenizer.END_TAG_TOKEN)
	        endTagInForeignContent(this, token);
	};

	Parser.prototype._processFakeStartTagWithAttrs = function (tagName, attrs) {
	    var fakeToken = this.tokenizer.buildStartTagToken(tagName);

	    fakeToken.attrs = attrs;
	    this._processToken(fakeToken);
	};

	Parser.prototype._processFakeStartTag = function (tagName) {
	    var fakeToken = this.tokenizer.buildStartTagToken(tagName);

	    this._processToken(fakeToken);
	    return fakeToken;
	};

	Parser.prototype._processFakeEndTag = function (tagName) {
	    var fakeToken = this.tokenizer.buildEndTagToken(tagName);

	    this._processToken(fakeToken);
	    return fakeToken;
	};

	//Integration points
	Parser.prototype._isMathMLTextIntegrationPoint = function (element) {
	    var tn = this.treeAdapter.getTagName(element),
	        ns = this.treeAdapter.getNamespaceURI(element);

	    return ForeignContent.isMathMLTextIntegrationPoint(tn, ns);
	};

	Parser.prototype._isHtmlIntegrationPoint = function (element) {
	    var tn = this.treeAdapter.getTagName(element),
	        ns = this.treeAdapter.getNamespaceURI(element),
	        attrs = this.treeAdapter.getAttrList(element);

	    return ForeignContent.isHtmlIntegrationPoint(tn, ns, attrs);
	};

	//Active formatting elements reconstruction
	Parser.prototype._reconstructActiveFormattingElements = function () {
	    var listLength = this.activeFormattingElements.length;

	    if (listLength) {
	        var unopenIdx = listLength,
	            entry = null;

	        do {
	            unopenIdx--;
	            entry = this.activeFormattingElements.entries[unopenIdx];

	            if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
	                unopenIdx++;
	                break;
	            }
	        } while (unopenIdx > 0);

	        for (var i = unopenIdx; i < listLength; i++) {
	            entry = this.activeFormattingElements.entries[i];
	            this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
	            entry.element = this.openElements.current;
	        }
	    }
	};

	//Close elements
	Parser.prototype._closeTableCell = function () {
	    if (this.openElements.hasInTableScope($.TD))
	        this._processFakeEndTag($.TD);

	    else
	        this._processFakeEndTag($.TH);
	};

	Parser.prototype._closePElement = function () {
	    this.openElements.generateImpliedEndTagsWithExclusion($.P);
	    this.openElements.popUntilTagNamePopped($.P);
	};

	//Insertion modes
	Parser.prototype._resetInsertionMode = function () {
	    for (var i = this.openElements.stackTop, last = false; i >= 0; i--) {
	        var element = this.openElements.items[i];

	        if (i === 0) {
	            last = true;

	            if (this.fragmentContext)
	                element = this.fragmentContext;
	        }

	        var tn = this.treeAdapter.getTagName(element),
	            newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

	        if (newInsertionMode) {
	            this.insertionMode = newInsertionMode;
	            break;
	        }

	        else if (!last && (tn === $.TD || tn === $.TH)) {
	            this.insertionMode = IN_CELL_MODE;
	            break;
	        }

	        else if (!last && tn === $.HEAD) {
	            this.insertionMode = IN_HEAD_MODE;
	            break;
	        }

	        else if (tn === $.SELECT) {
	            this._resetInsertionModeForSelect(i);
	            break;
	        }

	        else if (tn === $.TEMPLATE) {
	            this.insertionMode = this.currentTmplInsertionMode;
	            break;
	        }

	        else if (tn === $.HTML) {
	            this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
	            break;
	        }

	        else if (last) {
	            this.insertionMode = IN_BODY_MODE;
	            break;
	        }
	    }
	};

	Parser.prototype._resetInsertionModeForSelect = function (selectIdx) {
	    if (selectIdx > 0) {
	        for (var i = selectIdx - 1; i > 0; i--) {
	            var ancestor = this.openElements.items[i],
	                tn = this.treeAdapter.getTagName(ancestor);

	            if (tn === $.TEMPLATE)
	                break;

	            else if (tn === $.TABLE) {
	                this.insertionMode = IN_SELECT_IN_TABLE_MODE;
	                return;
	            }
	        }
	    }

	    this.insertionMode = IN_SELECT_MODE;
	};

	Parser.prototype._pushTmplInsertionMode = function (mode) {
	    this.tmplInsertionModeStack.push(mode);
	    this.tmplInsertionModeStackTop++;
	    this.currentTmplInsertionMode = mode;
	};

	Parser.prototype._popTmplInsertionMode = function () {
	    this.tmplInsertionModeStack.pop();
	    this.tmplInsertionModeStackTop--;
	    this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
	};

	//Foster parenting
	Parser.prototype._isElementCausesFosterParenting = function (element) {
	    var tn = this.treeAdapter.getTagName(element);

	    return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn == $.THEAD || tn === $.TR;
	};

	Parser.prototype._shouldFosterParentOnInsertion = function () {
	    return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
	};

	Parser.prototype._findFosterParentingLocation = function () {
	    var location = {
	        parent: null,
	        beforeElement: null
	    };

	    for (var i = this.openElements.stackTop; i >= 0; i--) {
	        var openElement = this.openElements.items[i],
	            tn = this.treeAdapter.getTagName(openElement),
	            ns = this.treeAdapter.getNamespaceURI(openElement);

	        if (tn === $.TEMPLATE && ns === NS.HTML) {
	            location.parent = this.treeAdapter.getChildNodes(openElement)[0];
	            break;
	        }

	        else if (tn === $.TABLE) {
	            location.parent = this.treeAdapter.getParentNode(openElement);

	            if (location.parent)
	                location.beforeElement = openElement;
	            else
	                location.parent = this.openElements.items[i - 1];

	            break;
	        }
	    }

	    if (!location.parent)
	        location.parent = this.openElements.items[0];

	    return location;
	};

	Parser.prototype._fosterParentElement = function (element) {
	    var location = this._findFosterParentingLocation();

	    if (location.beforeElement)
	        this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
	    else
	        this.treeAdapter.appendChild(location.parent, element);
	};

	Parser.prototype._fosterParentText = function (chars) {
	    var location = this._findFosterParentingLocation();

	    if (location.beforeElement)
	        this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
	    else
	        this.treeAdapter.insertText(location.parent, chars);
	};

	//Special elements
	Parser.prototype._isSpecialElement = function (element) {
	    var tn = this.treeAdapter.getTagName(element),
	        ns = this.treeAdapter.getNamespaceURI(element);

	    return HTML.SPECIAL_ELEMENTS[ns][tn];
	};

	//Adoption agency algorithm
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
	//------------------------------------------------------------------

	//Steps 5-8 of the algorithm
	function aaObtainFormattingElementEntry(p, token) {
	    var formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

	    if (formattingElementEntry) {
	        if (!p.openElements.contains(formattingElementEntry.element)) {
	            p.activeFormattingElements.removeEntry(formattingElementEntry);
	            formattingElementEntry = null;
	        }

	        else if (!p.openElements.hasInScope(token.tagName))
	            formattingElementEntry = null;
	    }

	    else
	        genericEndTagInBody(p, token);

	    return formattingElementEntry;
	}

	//Steps 9 and 10 of the algorithm
	function aaObtainFurthestBlock(p, formattingElementEntry) {
	    var furthestBlock = null;

	    for (var i = p.openElements.stackTop; i >= 0; i--) {
	        var element = p.openElements.items[i];

	        if (element === formattingElementEntry.element)
	            break;

	        if (p._isSpecialElement(element))
	            furthestBlock = element;
	    }

	    if (!furthestBlock) {
	        p.openElements.popUntilElementPopped(formattingElementEntry.element);
	        p.activeFormattingElements.removeEntry(formattingElementEntry);
	    }

	    return furthestBlock;
	}

	//Step 13 of the algorithm
	function aaInnerLoop(p, furthestBlock, formattingElement) {
	    var element = null,
	        lastElement = furthestBlock,
	        nextElement = p.openElements.getCommonAncestor(furthestBlock);

	    for (var i = 0; i < AA_INNER_LOOP_ITER; i++) {
	        element = nextElement;

	        //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
	        nextElement = p.openElements.getCommonAncestor(element);

	        var elementEntry = p.activeFormattingElements.getElementEntry(element);

	        if (!elementEntry) {
	            p.openElements.remove(element);
	            continue;
	        }

	        if (element === formattingElement)
	            break;

	        element = aaRecreateElementFromEntry(p, elementEntry);

	        if (lastElement === furthestBlock)
	            p.activeFormattingElements.bookmark = elementEntry;

	        p.treeAdapter.detachNode(lastElement);
	        p.treeAdapter.appendChild(element, lastElement);
	        lastElement = element;
	    }

	    return lastElement;
	}

	//Step 13.7 of the algorithm
	function aaRecreateElementFromEntry(p, elementEntry) {
	    var ns = p.treeAdapter.getNamespaceURI(elementEntry.element),
	        newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);

	    p.openElements.replace(elementEntry.element, newElement);
	    elementEntry.element = newElement;

	    return newElement;
	}

	//Step 14 of the algorithm
	function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
	    if (p._isElementCausesFosterParenting(commonAncestor))
	        p._fosterParentElement(lastElement);

	    else {
	        var tn = p.treeAdapter.getTagName(commonAncestor),
	            ns = p.treeAdapter.getNamespaceURI(commonAncestor);

	        if (tn === $.TEMPLATE && ns === NS.HTML)
	            commonAncestor = p.treeAdapter.getChildNodes(commonAncestor)[0];

	        p.treeAdapter.appendChild(commonAncestor, lastElement);
	    }
	}

	//Steps 15-19 of the algorithm
	function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
	    var ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element),
	        token = formattingElementEntry.token,
	        newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

	    p._adoptNodes(furthestBlock, newElement);
	    p.treeAdapter.appendChild(furthestBlock, newElement);

	    p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
	    p.activeFormattingElements.removeEntry(formattingElementEntry);

	    p.openElements.remove(formattingElementEntry.element);
	    p.openElements.insertAfter(furthestBlock, newElement);
	}

	//Algorithm entry point
	function callAdoptionAgency(p, token) {
	    for (var i = 0; i < AA_OUTER_LOOP_ITER; i++) {
	        var formattingElementEntry = aaObtainFormattingElementEntry(p, token, formattingElementEntry);

	        if (!formattingElementEntry)
	            break;

	        var furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

	        if (!furthestBlock)
	            break;

	        p.activeFormattingElements.bookmark = formattingElementEntry;

	        var lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element),
	            commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);

	        p.treeAdapter.detachNode(lastElement);
	        aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
	        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
	    }
	}


	//Generic token handlers
	//------------------------------------------------------------------
	function ignoreToken(p, token) {
	    //NOTE: do nothing =)
	}

	function appendComment(p, token) {
	    p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current)
	}

	function appendCommentToRootHtmlElement(p, token) {
	    p._appendCommentNode(token, p.openElements.items[0]);
	}

	function appendCommentToDocument(p, token) {
	    p._appendCommentNode(token, p.document);
	}

	function insertCharacters(p, token) {
	    p._insertCharacters(token);
	}

	function stopParsing(p, token) {
	    p.stopped = true;
	}

	//12.2.5.4.1 The "initial" insertion mode
	//------------------------------------------------------------------
	function doctypeInInitialMode(p, token) {
	    p._setDocumentType(token);

	    if (token.forceQuirks || Doctype.isQuirks(token.name, token.publicId, token.systemId))
	        p.treeAdapter.setQuirksMode(p.document);

	    p.insertionMode = BEFORE_HTML_MODE;
	}

	function tokenInInitialMode(p, token) {
	    p.treeAdapter.setQuirksMode(p.document);
	    p.insertionMode = BEFORE_HTML_MODE;
	    p._processToken(token);
	}


	//12.2.5.4.2 The "before html" insertion mode
	//------------------------------------------------------------------
	function startTagBeforeHtml(p, token) {
	    if (token.tagName === $.HTML) {
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = BEFORE_HEAD_MODE;
	    }

	    else
	        tokenBeforeHtml(p, token);
	}

	function endTagBeforeHtml(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR)
	        tokenBeforeHtml(p, token);
	}

	function tokenBeforeHtml(p, token) {
	    p._insertFakeRootElement();
	    p.insertionMode = BEFORE_HEAD_MODE;
	    p._processToken(token);
	}


	//12.2.5.4.3 The "before head" insertion mode
	//------------------------------------------------------------------
	function startTagBeforeHead(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.HEAD) {
	        p._insertElement(token, NS.HTML);
	        p.headElement = p.openElements.current;
	        p.insertionMode = IN_HEAD_MODE;
	    }

	    else
	        tokenBeforeHead(p, token);
	}

	function endTagBeforeHead(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR)
	        tokenBeforeHead(p, token);
	}

	function tokenBeforeHead(p, token) {
	    p._processFakeStartTag($.HEAD);
	    p._processToken(token);
	}


	//12.2.5.4.4 The "in head" insertion mode
	//------------------------------------------------------------------
	function startTagInHead(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND ||
	             tn === $.COMMAND || tn === $.LINK || tn === $.META) {
	        p._appendElement(token, NS.HTML);
	    }

	    else if (tn === $.TITLE)
	        p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);

	    //NOTE: here we assume that we always act as an interactive user agent with enabled scripting, so we parse
	    //<noscript> as a rawtext.
	    else if (tn === $.NOSCRIPT || tn === $.NOFRAMES || tn === $.STYLE)
	        p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);

	    else if (tn === $.SCRIPT)
	        p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);

	    else if (tn === $.TEMPLATE) {
	        p._insertTemplate(token, NS.HTML);
	        p.activeFormattingElements.insertMarker();
	        p.framesetOk = false;
	        p.insertionMode = IN_TEMPLATE_MODE;
	        p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
	    }

	    else if (tn !== $.HEAD)
	        tokenInHead(p, token);
	}

	function endTagInHead(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HEAD) {
	        p.openElements.pop();
	        p.insertionMode = AFTER_HEAD_MODE;
	    }

	    else if (tn === $.BODY || tn === $.BR || tn === $.HTML)
	        tokenInHead(p, token);

	    else if (tn === $.TEMPLATE && p.openElements.tmplCount > 0) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTemplatePopped();
	        p.activeFormattingElements.clearToLastMarker();
	        p._popTmplInsertionMode();
	        p._resetInsertionMode();
	    }
	}

	function tokenInHead(p, token) {
	    p._processFakeEndTag($.HEAD);
	    p._processToken(token);
	}


	//12.2.5.4.6 The "after head" insertion mode
	//------------------------------------------------------------------
	function startTagAfterHead(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.BODY) {
	        p._insertElement(token, NS.HTML);
	        p.framesetOk = false;
	        p.insertionMode = IN_BODY_MODE;
	    }

	    else if (tn === $.FRAMESET) {
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_FRAMESET_MODE;
	    }

	    else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
	             tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
	        p.openElements.push(p.headElement);
	        startTagInHead(p, token);
	        p.openElements.remove(p.headElement);
	    }

	    else if (tn !== $.HEAD)
	        tokenAfterHead(p, token);
	}

	function endTagAfterHead(p, token) {
	    var tn = token.tagName;

	    if (tn === $.BODY || tn === $.HTML || tn === $.BR)
	        tokenAfterHead(p, token);

	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);
	}

	function tokenAfterHead(p, token) {
	    p._processFakeStartTag($.BODY);
	    p.framesetOk = true;
	    p._processToken(token);
	}


	//12.2.5.4.7 The "in body" insertion mode
	//------------------------------------------------------------------
	function whitespaceCharacterInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertCharacters(token);
	}

	function characterInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertCharacters(token);
	    p.framesetOk = false;
	}

	function htmlStartTagInBody(p, token) {
	    if (p.openElements.tmplCount === 0)
	        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
	}

	function bodyStartTagInBody(p, token) {
	    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

	    if (bodyElement && p.openElements.tmplCount === 0) {
	        p.framesetOk = false;
	        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
	    }
	}

	function framesetStartTagInBody(p, token) {
	    var bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

	    if (p.framesetOk && bodyElement) {
	        p.treeAdapter.detachNode(bodyElement);
	        p.openElements.popAllUpToHtmlElement();
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_FRAMESET_MODE;
	    }
	}

	function addressStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    p._insertElement(token, NS.HTML);
	}

	function numberedHeaderStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    var tn = p.openElements.currentTagName;

	    if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	        p.openElements.pop();

	    p._insertElement(token, NS.HTML);
	}

	function preStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    p._insertElement(token, NS.HTML);
	    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
	    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
	    p.skipNextNewLine = true;
	    p.framesetOk = false;
	}

	function formStartTagInBody(p, token) {
	    var inTemplate = p.openElements.tmplCount > 0;

	    if (!p.formElement || inTemplate) {
	        if (p.openElements.hasInButtonScope($.P))
	            p._closePElement();

	        p._insertElement(token, NS.HTML);

	        if (!inTemplate)
	            p.formElement = p.openElements.current;
	    }
	}

	function listItemStartTagInBody(p, token) {
	    p.framesetOk = false;

	    for (var i = p.openElements.stackTop; i >= 0; i--) {
	        var element = p.openElements.items[i],
	            tn = p.treeAdapter.getTagName(element);

	        if ((token.tagName === $.LI && tn === $.LI) ||
	            ((token.tagName === $.DD || token.tagName === $.DT) && (tn === $.DD || tn == $.DT))) {
	            p._processFakeEndTag(tn);
	            break;
	        }

	        if (tn !== $.ADDRESS && tn !== $.DIV && tn !== $.P && p._isSpecialElement(element))
	            break;
	    }

	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    p._insertElement(token, NS.HTML);
	}

	function plaintextStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    p._insertElement(token, NS.HTML);
	    p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
	}

	function buttonStartTagInBody(p, token) {
	    if (p.openElements.hasInScope($.BUTTON)) {
	        p._processFakeEndTag($.BUTTON);
	        buttonStartTagInBody(p, token);
	    }

	    else {
	        p._reconstructActiveFormattingElements();
	        p._insertElement(token, NS.HTML);
	        p.framesetOk = false;
	    }
	}

	function aStartTagInBody(p, token) {
	    var activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

	    if (activeElementEntry) {
	        p._processFakeEndTag($.A);
	        p.openElements.remove(activeElementEntry.element);
	        p.activeFormattingElements.removeEntry(activeElementEntry);
	    }

	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}

	function bStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}

	function nobrStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();

	    if (p.openElements.hasInScope($.NOBR)) {
	        p._processFakeEndTag($.NOBR);
	        p._reconstructActiveFormattingElements();
	    }

	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.pushElement(p.openElements.current, token);
	}

	function appletStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.activeFormattingElements.insertMarker();
	    p.framesetOk = false;
	}

	function tableStartTagInBody(p, token) {
	    if (!p.treeAdapter.isQuirksMode(p.document) && p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;
	    p.insertionMode = IN_TABLE_MODE;
	}

	function areaStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._appendElement(token, NS.HTML);
	    p.framesetOk = false;
	}

	function inputStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._appendElement(token, NS.HTML);

	    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

	    if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE)
	        p.framesetOk = false;

	}

	function paramStartTagInBody(p, token) {
	    p._appendElement(token, NS.HTML);
	}

	function hrStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    p._appendElement(token, NS.HTML);
	    p.framesetOk = false;
	}

	function imageStartTagInBody(p, token) {
	    token.tagName = $.IMG;
	    areaStartTagInBody(p, token);
	}

	function isindexStartTagInBody(p, token) {
	    if (!p.formElement || p.openElements.tmplCount > 0) {
	        p._processFakeStartTagWithAttrs($.FORM, getSearchableIndexFormAttrs(token));
	        p._processFakeStartTag($.HR);
	        p._processFakeStartTag($.LABEL);
	        p.treeAdapter.insertText(p.openElements.current, getSearchableIndexLabelText(token));
	        p._processFakeStartTagWithAttrs($.INPUT, getSearchableIndexInputAttrs(token));
	        p._processFakeEndTag($.LABEL);
	        p._processFakeStartTag($.HR);
	        p._processFakeEndTag($.FORM);
	    }
	}

	function textareaStartTagInBody(p, token) {
	    p._insertElement(token, NS.HTML);
	    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
	    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
	    p.skipNextNewLine = true;
	    p.tokenizer.state = Tokenizer.MODE.RCDATA;
	    p.originalInsertionMode = p.insertionMode;
	    p.framesetOk = false;
	    p.insertionMode = TEXT_MODE;
	}

	function xmpStartTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P))
	        p._closePElement();

	    p._reconstructActiveFormattingElements();
	    p.framesetOk = false;
	    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
	}

	function iframeStartTagInBody(p, token) {
	    p.framesetOk = false;
	    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
	}

	//NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
	//<noembed> as a rawtext.
	function noembedStartTagInBody(p, token) {
	    p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
	}

	function selectStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	    p.framesetOk = false;

	    if (p.insertionMode === IN_TABLE_MODE || p.insertionMode === IN_CAPTION_MODE ||
	        p.insertionMode === IN_TABLE_BODY_MODE || p.insertionMode === IN_ROW_MODE ||
	        p.insertionMode === IN_CELL_MODE) {
	        p.insertionMode = IN_SELECT_IN_TABLE_MODE;
	    }

	    else
	        p.insertionMode = IN_SELECT_MODE;
	}

	function optgroupStartTagInBody(p, token) {
	    if (p.openElements.currentTagName === $.OPTION)
	        p._processFakeEndTag($.OPTION);

	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	}

	function rpStartTagInBody(p, token) {
	    if (p.openElements.hasInScope($.RUBY))
	        p.openElements.generateImpliedEndTags();

	    p._insertElement(token, NS.HTML);
	}

	function menuitemStartTagInBody(p, token) {
	    p._appendElement(token, NS.HTML);
	}

	function mathStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();

	    ForeignContent.adjustTokenMathMLAttrs(token);
	    ForeignContent.adjustTokenXMLAttrs(token);

	    if (token.selfClosing)
	        p._appendElement(token, NS.MATHML);
	    else
	        p._insertElement(token, NS.MATHML);
	}

	function svgStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();

	    ForeignContent.adjustTokenSVGAttrs(token);
	    ForeignContent.adjustTokenXMLAttrs(token);

	    if (token.selfClosing)
	        p._appendElement(token, NS.SVG);
	    else
	        p._insertElement(token, NS.SVG);
	}

	function genericStartTagInBody(p, token) {
	    p._reconstructActiveFormattingElements();
	    p._insertElement(token, NS.HTML);
	}

	//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
	//It's faster than using dictionary.
	function startTagInBody(p, token) {
	    var tn = token.tagName;

	    switch (tn.length) {
	        case 1:
	            if (tn === $.I || tn === $.S || tn === $.B || tn === $.U)
	                bStartTagInBody(p, token);

	            else if (tn === $.P)
	                addressStartTagInBody(p, token);

	            else if (tn === $.A)
	                aStartTagInBody(p, token);

	            else
	                genericStartTagInBody(p, token);

	            break;

	        case 2:
	            if (tn === $.DL || tn === $.OL || tn === $.UL)
	                addressStartTagInBody(p, token);

	            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	                numberedHeaderStartTagInBody(p, token);

	            else if (tn === $.LI || tn === $.DD || tn === $.DT)
	                listItemStartTagInBody(p, token);

	            else if (tn === $.EM || tn === $.TT)
	                bStartTagInBody(p, token);

	            else if (tn === $.BR)
	                areaStartTagInBody(p, token);

	            else if (tn === $.HR)
	                hrStartTagInBody(p, token);

	            else if (tn === $.RP || tn === $.RT)
	                rpStartTagInBody(p, token);

	            else if (tn !== $.TH && tn !== $.TD && tn !== $.TR)
	                genericStartTagInBody(p, token);

	            break;

	        case 3:
	            if (tn === $.DIV || tn === $.DIR || tn === $.NAV)
	                addressStartTagInBody(p, token);

	            else if (tn === $.PRE)
	                preStartTagInBody(p, token);

	            else if (tn === $.BIG)
	                bStartTagInBody(p, token);

	            else if (tn === $.IMG || tn === $.WBR)
	                areaStartTagInBody(p, token);

	            else if (tn === $.XMP)
	                xmpStartTagInBody(p, token);

	            else if (tn === $.SVG)
	                svgStartTagInBody(p, token);

	            else if (tn !== $.COL)
	                genericStartTagInBody(p, token);

	            break;

	        case 4:
	            if (tn === $.HTML)
	                htmlStartTagInBody(p, token);

	            else if (tn === $.BASE || tn === $.LINK || tn === $.META)
	                startTagInHead(p, token);

	            else if (tn === $.BODY)
	                bodyStartTagInBody(p, token);

	            else if (tn === $.MAIN || tn === $.MENU)
	                addressStartTagInBody(p, token);

	            else if (tn === $.FORM)
	                formStartTagInBody(p, token);

	            else if (tn === $.CODE || tn === $.FONT)
	                bStartTagInBody(p, token);

	            else if (tn === $.NOBR)
	                nobrStartTagInBody(p, token);

	            else if (tn === $.AREA)
	                areaStartTagInBody(p, token);

	            else if (tn === $.MATH)
	                mathStartTagInBody(p, token);

	            else if (tn !== $.HEAD)
	                genericStartTagInBody(p, token);

	            break;

	        case 5:
	            if (tn === $.STYLE || tn === $.TITLE)
	                startTagInHead(p, token);

	            else if (tn === $.ASIDE)
	                addressStartTagInBody(p, token);

	            else if (tn === $.SMALL)
	                bStartTagInBody(p, token);

	            else if (tn === $.TABLE)
	                tableStartTagInBody(p, token);

	            else if (tn === $.EMBED)
	                areaStartTagInBody(p, token);

	            else if (tn === $.INPUT)
	                inputStartTagInBody(p, token);

	            else if (tn === $.PARAM || tn === $.TRACK)
	                paramStartTagInBody(p, token);

	            else if (tn === $.IMAGE)
	                imageStartTagInBody(p, token);

	            else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD)
	                genericStartTagInBody(p, token);

	            break;

	        case 6:
	            if (tn === $.SCRIPT)
	                startTagInHead(p, token);

	            else if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
	                addressStartTagInBody(p, token);

	            else if (tn === $.BUTTON)
	                buttonStartTagInBody(p, token);

	            else if (tn === $.STRIKE || tn === $.STRONG)
	                bStartTagInBody(p, token);

	            else if (tn === $.APPLET || tn === $.OBJECT)
	                appletStartTagInBody(p, token);

	            else if (tn === $.KEYGEN)
	                areaStartTagInBody(p, token);

	            else if (tn === $.SOURCE)
	                paramStartTagInBody(p, token);

	            else if (tn === $.IFRAME)
	                iframeStartTagInBody(p, token);

	            else if (tn === $.SELECT)
	                selectStartTagInBody(p, token);

	            else if (tn === $.OPTION)
	                optgroupStartTagInBody(p, token);

	            else
	                genericStartTagInBody(p, token);

	            break;

	        case 7:
	            if (tn === $.BGSOUND || tn === $.COMMAND)
	                startTagInHead(p, token);

	            else if (tn === $.DETAILS || tn === $.ADDRESS || tn === $.ARTICLE || tn === $.SECTION || tn === $.SUMMARY)
	                addressStartTagInBody(p, token);

	            else if (tn === $.LISTING)
	                preStartTagInBody(p, token);

	            else if (tn === $.MARQUEE)
	                appletStartTagInBody(p, token);

	            else if (tn === $.ISINDEX)
	                isindexStartTagInBody(p, token);

	            else if (tn === $.NOEMBED)
	                noembedStartTagInBody(p, token);

	            else if (tn !== $.CAPTION)
	                genericStartTagInBody(p, token);

	            break;

	        case 8:
	            if (tn === $.BASEFONT || tn === $.MENUITEM)
	                menuitemStartTagInBody(p, token);

	            else if (tn === $.FRAMESET)
	                framesetStartTagInBody(p, token);

	            else if (tn === $.FIELDSET)
	                addressStartTagInBody(p, token);

	            else if (tn === $.TEXTAREA)
	                textareaStartTagInBody(p, token);

	            else if (tn === $.TEMPLATE)
	                startTagInHead(p, token);

	            else if (tn === $.NOSCRIPT)
	                noembedStartTagInBody(p, token);

	            else if (tn === $.OPTGROUP)
	                optgroupStartTagInBody(p, token);

	            else if (tn !== $.COLGROUP)
	                genericStartTagInBody(p, token);

	            break;

	        case 9:
	            if (tn === $.PLAINTEXT)
	                plaintextStartTagInBody(p, token);

	            else
	                genericStartTagInBody(p, token);

	            break;

	        case 10:
	            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
	                addressStartTagInBody(p, token);

	            else
	                genericStartTagInBody(p, token);

	            break;

	        default:
	            genericStartTagInBody(p, token);
	    }
	}

	function bodyEndTagInBody(p, token) {
	    if (p.openElements.hasInScope($.BODY))
	        p.insertionMode = AFTER_BODY_MODE;

	    else
	        token.ignored = true;
	}

	function htmlEndTagInBody(p, token) {
	    var fakeToken = p._processFakeEndTag($.BODY);

	    if (!fakeToken.ignored)
	        p._processToken(token);
	}

	function addressEndTagInBody(p, token) {
	    var tn = token.tagName;

	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped(tn);
	    }
	}

	function formEndTagInBody(p, token) {
	    var inTemplate = p.openElements.tmplCount > 0,
	        formElement = p.formElement;

	    if (!inTemplate)
	        p.formElement = null;

	    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
	        p.openElements.generateImpliedEndTags();

	        if (inTemplate)
	            p.openElements.popUntilTagNamePopped($.FORM);

	        else
	            p.openElements.remove(formElement);
	    }
	}

	function pEndTagInBody(p, token) {
	    if (p.openElements.hasInButtonScope($.P)) {
	        p.openElements.generateImpliedEndTagsWithExclusion($.P);
	        p.openElements.popUntilTagNamePopped($.P);
	    }

	    else {
	        p._processFakeStartTag($.P);
	        p._processToken(token);
	    }
	}

	function liEndTagInBody(p, token) {
	    if (p.openElements.hasInListItemScope($.LI)) {
	        p.openElements.generateImpliedEndTagsWithExclusion($.LI);
	        p.openElements.popUntilTagNamePopped($.LI);
	    }
	}

	function ddEndTagInBody(p, token) {
	    var tn = token.tagName;

	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTagsWithExclusion(tn);
	        p.openElements.popUntilTagNamePopped(tn);
	    }
	}

	function numberedHeaderEndTagInBody(p, token) {
	    if (p.openElements.hasNumberedHeaderInScope()) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilNumberedHeaderPopped();
	    }
	}

	function appletEndTagInBody(p, token) {
	    var tn = token.tagName;

	    if (p.openElements.hasInScope(tn)) {
	        p.openElements.generateImpliedEndTags();
	        p.openElements.popUntilTagNamePopped(tn);
	        p.activeFormattingElements.clearToLastMarker();
	    }
	}

	function brEndTagInBody(p, token) {
	    p._processFakeStartTag($.BR);
	}

	function genericEndTagInBody(p, token) {
	    var tn = token.tagName;

	    for (var i = p.openElements.stackTop; i > 0; i--) {
	        var element = p.openElements.items[i];

	        if (p.treeAdapter.getTagName(element) === tn) {
	            p.openElements.generateImpliedEndTagsWithExclusion(tn);
	            p.openElements.popUntilElementPopped(element);
	            break;
	        }

	        if (p._isSpecialElement(element))
	            break;
	    }
	}

	//OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
	//It's faster than using dictionary.
	function endTagInBody(p, token) {
	    var tn = token.tagName;

	    switch (tn.length) {
	        case 1:
	            if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn == $.U)
	                callAdoptionAgency(p, token);

	            else if (tn === $.P)
	                pEndTagInBody(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 2:
	            if (tn == $.DL || tn === $.UL || tn === $.OL)
	                addressEndTagInBody(p, token);

	            else if (tn === $.LI)
	                liEndTagInBody(p, token);

	            else if (tn === $.DD || tn === $.DT)
	                ddEndTagInBody(p, token);

	            else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6)
	                numberedHeaderEndTagInBody(p, token);

	            else if (tn === $.BR)
	                brEndTagInBody(p, token);

	            else if (tn === $.EM || tn === $.TT)
	                callAdoptionAgency(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 3:
	            if (tn === $.BIG)
	                callAdoptionAgency(p, token);

	            else if (tn === $.DIR || tn === $.DIV || tn === $.NAV)
	                addressEndTagInBody(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 4:
	            if (tn === $.BODY)
	                bodyEndTagInBody(p, token);

	            else if (tn === $.HTML)
	                htmlEndTagInBody(p, token);

	            else if (tn === $.FORM)
	                formEndTagInBody(p, token);

	            else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR)
	                callAdoptionAgency(p, token);

	            else if (tn === $.MAIN || tn === $.MENU)
	                addressEndTagInBody(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 5:
	            if (tn === $.ASIDE)
	                addressEndTagInBody(p, token);

	            else if (tn === $.SMALL)
	                callAdoptionAgency(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 6:
	            if (tn === $.CENTER || tn === $.FIGURE || tn === $.FOOTER || tn === $.HEADER || tn === $.HGROUP)
	                addressEndTagInBody(p, token);

	            else if (tn === $.APPLET || tn === $.OBJECT)
	                appletEndTagInBody(p, token);

	            else if (tn == $.STRIKE || tn === $.STRONG)
	                callAdoptionAgency(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 7:
	            if (tn === $.ADDRESS || tn === $.ARTICLE || tn === $.DETAILS || tn === $.SECTION || tn === $.SUMMARY)
	                addressEndTagInBody(p, token);

	            else if (tn === $.MARQUEE)
	                appletEndTagInBody(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 8:
	            if (tn === $.FIELDSET)
	                addressEndTagInBody(p, token);

	            else if (tn === $.TEMPLATE)
	                endTagInHead(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        case 10:
	            if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION)
	                addressEndTagInBody(p, token);

	            else
	                genericEndTagInBody(p, token);

	            break;

	        default :
	            genericEndTagInBody(p, token);
	    }
	}

	function eofInBody(p, token) {
	    if (p.tmplInsertionModeStackTop > -1)
	        eofInTemplate(p, token);

	    else
	        p.stopped = true;
	}

	//12.2.5.4.8 The "text" insertion mode
	//------------------------------------------------------------------
	function endTagInText(p, token) {
	    if (!p.fragmentContext && p.scriptHandler && token.tagName === $.SCRIPT)
	        p.scriptHandler(p.document, p.openElements.current);

	    p.openElements.pop();
	    p.insertionMode = p.originalInsertionMode;
	}


	function eofInText(p, token) {
	    p.openElements.pop();
	    p.insertionMode = p.originalInsertionMode;
	    p._processToken(token);
	}


	//12.2.5.4.9 The "in table" insertion mode
	//------------------------------------------------------------------
	function characterInTable(p, token) {
	    var curTn = p.openElements.currentTagName;

	    if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
	        p.pendingCharacterTokens = [];
	        p.hasNonWhitespacePendingCharacterToken = false;
	        p.originalInsertionMode = p.insertionMode;
	        p.insertionMode = IN_TABLE_TEXT_MODE;
	        p._processToken(token);
	    }

	    else
	        tokenInTable(p, token);
	}

	function captionStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p.activeFormattingElements.insertMarker();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = IN_CAPTION_MODE;
	}

	function colgroupStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = IN_COLUMN_GROUP_MODE;
	}

	function colStartTagInTable(p, token) {
	    p._processFakeStartTag($.COLGROUP);
	    p._processToken(token);
	}

	function tbodyStartTagInTable(p, token) {
	    p.openElements.clearBackToTableContext();
	    p._insertElement(token, NS.HTML);
	    p.insertionMode = IN_TABLE_BODY_MODE;
	}

	function tdStartTagInTable(p, token) {
	    p._processFakeStartTag($.TBODY);
	    p._processToken(token);
	}

	function tableStartTagInTable(p, token) {
	    var fakeToken = p._processFakeEndTag($.TABLE);

	    //NOTE: The fake end tag token here can only be ignored in the fragment case.
	    if (!fakeToken.ignored)
	        p._processToken(token);
	}

	function inputStartTagInTable(p, token) {
	    var inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

	    if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE)
	        p._appendElement(token, NS.HTML);

	    else
	        tokenInTable(p, token);
	}

	function formStartTagInTable(p, token) {
	    if (!p.formElement && p.openElements.tmplCount === 0) {
	        p._insertElement(token, NS.HTML);
	        p.formElement = p.openElements.current;
	        p.openElements.pop();
	    }
	}

	function startTagInTable(p, token) {
	    var tn = token.tagName;

	    switch (tn.length) {
	        case 2:
	            if (tn === $.TD || tn === $.TH || tn === $.TR)
	                tdStartTagInTable(p, token);

	            else
	                tokenInTable(p, token);

	            break;

	        case 3:
	            if (tn === $.COL)
	                colStartTagInTable(p, token);

	            else
	                tokenInTable(p, token);

	            break;

	        case 4:
	            if (tn === $.FORM)
	                formStartTagInTable(p, token);

	            else
	                tokenInTable(p, token);

	            break;

	        case 5:
	            if (tn === $.TABLE)
	                tableStartTagInTable(p, token);

	            else if (tn === $.STYLE)
	                startTagInHead(p, token);

	            else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD)
	                tbodyStartTagInTable(p, token);

	            else if (tn === $.INPUT)
	                inputStartTagInTable(p, token);

	            else
	                tokenInTable(p, token);

	            break;

	        case 6:
	            if (tn === $.SCRIPT)
	                startTagInHead(p, token);

	            else
	                tokenInTable(p, token);

	            break;

	        case 7:
	            if (tn === $.CAPTION)
	                captionStartTagInTable(p, token);

	            else
	                tokenInTable(p, token);

	            break;

	        case 8:
	            if (tn === $.COLGROUP)
	                colgroupStartTagInTable(p, token);

	            else if (tn === $.TEMPLATE)
	                startTagInHead(p, token);

	            else
	                tokenInTable(p, token);

	            break;

	        default:
	            tokenInTable(p, token);
	    }

	}

	function endTagInTable(p, token) {
	    var tn = token.tagName;

	    if (tn === $.TABLE) {
	        if (p.openElements.hasInTableScope($.TABLE)) {
	            p.openElements.popUntilTagNamePopped($.TABLE);
	            p._resetInsertionMode();
	        }

	        else
	            token.ignored = true;
	    }

	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);

	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML &&
	             tn !== $.TBODY && tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
	        tokenInTable(p, token);
	    }
	}

	function tokenInTable(p, token) {
	    var savedFosterParentingState = p.fosterParentingEnabled;

	    p.fosterParentingEnabled = true;
	    p._processTokenInBodyMode(token);
	    p.fosterParentingEnabled = savedFosterParentingState;
	}


	//12.2.5.4.10 The "in table text" insertion mode
	//------------------------------------------------------------------
	function whitespaceCharacterInTableText(p, token) {
	    p.pendingCharacterTokens.push(token);
	}

	function characterInTableText(p, token) {
	    p.pendingCharacterTokens.push(token);
	    p.hasNonWhitespacePendingCharacterToken = true;
	}

	function tokenInTableText(p, token) {
	    if (p.hasNonWhitespacePendingCharacterToken) {
	        for (var i = 0; i < p.pendingCharacterTokens.length; i++)
	            tokenInTable(p, p.pendingCharacterTokens[i]);
	    }

	    else {
	        for (var i = 0; i < p.pendingCharacterTokens.length; i++)
	            p._insertCharacters(p.pendingCharacterTokens[i]);
	    }

	    p.insertionMode = p.originalInsertionMode;
	    p._processToken(token);
	}


	//12.2.5.4.11 The "in caption" insertion mode
	//------------------------------------------------------------------
	function startTagInCaption(p, token) {
	    var tn = token.tagName;

	    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
	        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {
	        var fakeToken = p._processFakeEndTag($.CAPTION);

	        //NOTE: The fake end tag token here can only be ignored in the fragment case.
	        if (!fakeToken.ignored)
	            p._processToken(token);
	    }

	    else
	        startTagInBody(p, token);
	}

	function endTagInCaption(p, token) {
	    var tn = token.tagName;

	    if (tn === $.CAPTION) {
	        if (p.openElements.hasInTableScope($.CAPTION)) {
	            p.openElements.generateImpliedEndTags();
	            p.openElements.popUntilTagNamePopped($.CAPTION);
	            p.activeFormattingElements.clearToLastMarker();
	            p.insertionMode = IN_TABLE_MODE;
	        }

	        else
	            token.ignored = true;
	    }

	    else if (tn === $.TABLE) {
	        var fakeToken = p._processFakeEndTag($.CAPTION);

	        //NOTE: The fake end tag token here can only be ignored in the fragment case.
	        if (!fakeToken.ignored)
	            p._processToken(token);
	    }

	    else if (tn !== $.BODY && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML && tn !== $.TBODY &&
	             tn !== $.TD && tn !== $.TFOOT && tn !== $.TH && tn !== $.THEAD && tn !== $.TR) {
	        endTagInBody(p, token);
	    }
	}


	//12.2.5.4.12 The "in column group" insertion mode
	//------------------------------------------------------------------
	function startTagInColumnGroup(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.COL)
	        p._appendElement(token, NS.HTML);

	    else if (tn === $.TEMPLATE)
	        startTagInHead(p, token);

	    else
	        tokenInColumnGroup(p, token);
	}

	function endTagInColumnGroup(p, token) {
	    var tn = token.tagName;

	    if (tn === $.COLGROUP) {
	        if (p.openElements.currentTagName !== $.COLGROUP)
	            token.ignored = true;

	        else {
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_MODE;
	        }
	    }

	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);

	    else if (tn !== $.COL)
	        tokenInColumnGroup(p, token);
	}

	function tokenInColumnGroup(p, token) {
	    var fakeToken = p._processFakeEndTag($.COLGROUP);

	    //NOTE: The fake end tag token here can only be ignored in the fragment case.
	    if (!fakeToken.ignored)
	        p._processToken(token);
	}

	//12.2.5.4.13 The "in table body" insertion mode
	//------------------------------------------------------------------
	function startTagInTableBody(p, token) {
	    var tn = token.tagName;

	    if (tn === $.TR) {
	        p.openElements.clearBackToTableBodyContext();
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_ROW_MODE;
	    }

	    else if (tn === $.TH || tn === $.TD) {
	        p._processFakeStartTag($.TR);
	        p._processToken(token);
	    }

	    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP ||
	             tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {

	        if (p.openElements.hasTableBodyContextInTableScope()) {
	            p.openElements.clearBackToTableBodyContext();
	            p._processFakeEndTag(p.openElements.currentTagName);
	            p._processToken(token);
	        }
	    }

	    else
	        startTagInTable(p, token);
	}

	function endTagInTableBody(p, token) {
	    var tn = token.tagName;

	    if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p.openElements.clearBackToTableBodyContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_MODE;
	        }
	    }

	    else if (tn === $.TABLE) {
	        if (p.openElements.hasTableBodyContextInTableScope()) {
	            p.openElements.clearBackToTableBodyContext();
	            p._processFakeEndTag(p.openElements.currentTagName);
	            p._processToken(token);
	        }
	    }

	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
	             tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR) {
	        endTagInTable(p, token);
	    }
	}

	//12.2.5.4.14 The "in row" insertion mode
	//------------------------------------------------------------------
	function startTagInRow(p, token) {
	    var tn = token.tagName;

	    if (tn === $.TH || tn === $.TD) {
	        p.openElements.clearBackToTableRowContext();
	        p._insertElement(token, NS.HTML);
	        p.insertionMode = IN_CELL_MODE;
	        p.activeFormattingElements.insertMarker();
	    }

	    else if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
	             tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
	        var fakeToken = p._processFakeEndTag($.TR);

	        //NOTE: The fake end tag token here can only be ignored in the fragment case.
	        if (!fakeToken.ignored)
	            p._processToken(token);
	    }

	    else
	        startTagInTable(p, token);
	}

	function endTagInRow(p, token) {
	    var tn = token.tagName;

	    if (tn === $.TR) {
	        if (p.openElements.hasInTableScope($.TR)) {
	            p.openElements.clearBackToTableRowContext();
	            p.openElements.pop();
	            p.insertionMode = IN_TABLE_BODY_MODE;
	        }

	        else
	            token.ignored = true;
	    }

	    else if (tn === $.TABLE) {
	        var fakeToken = p._processFakeEndTag($.TR);

	        //NOTE: The fake end tag token here can only be ignored in the fragment case.
	        if (!fakeToken.ignored)
	            p._processToken(token);
	    }

	    else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p._processFakeEndTag($.TR);
	            p._processToken(token);
	        }
	    }

	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP ||
	             tn !== $.HTML && tn !== $.TD && tn !== $.TH) {
	        endTagInTable(p, token);
	    }
	}


	//12.2.5.4.15 The "in cell" insertion mode
	//------------------------------------------------------------------
	function startTagInCell(p, token) {
	    var tn = token.tagName;

	    if (tn === $.CAPTION || tn === $.COL || tn === $.COLGROUP || tn === $.TBODY ||
	        tn === $.TD || tn === $.TFOOT || tn === $.TH || tn === $.THEAD || tn === $.TR) {

	        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
	            p._closeTableCell();
	            p._processToken(token);
	        }
	    }

	    else
	        startTagInBody(p, token);
	}

	function endTagInCell(p, token) {
	    var tn = token.tagName;

	    if (tn === $.TD || tn === $.TH) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p.openElements.generateImpliedEndTags();
	            p.openElements.popUntilTagNamePopped(tn);
	            p.activeFormattingElements.clearToLastMarker();
	            p.insertionMode = IN_ROW_MODE;
	        }
	    }

	    else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p._closeTableCell();
	            p._processToken(token);
	        }
	    }

	    else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML)
	        endTagInBody(p, token);
	}

	//12.2.5.4.16 The "in select" insertion mode
	//------------------------------------------------------------------
	function startTagInSelect(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.OPTION) {
	        if (p.openElements.currentTagName === $.OPTION)
	            p._processFakeEndTag($.OPTION);

	        p._insertElement(token, NS.HTML);
	    }

	    else if (tn === $.OPTGROUP) {
	        if (p.openElements.currentTagName === $.OPTION)
	            p._processFakeEndTag($.OPTION);

	        if (p.openElements.currentTagName === $.OPTGROUP)
	            p._processFakeEndTag($.OPTGROUP);

	        p._insertElement(token, NS.HTML);
	    }

	    else if (tn === $.SELECT)
	        p._processFakeEndTag($.SELECT);

	    else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA) {
	        if (p.openElements.hasInSelectScope($.SELECT)) {
	            p._processFakeEndTag($.SELECT);
	            p._processToken(token);
	        }
	    }

	    else if (tn === $.SCRIPT || tn === $.TEMPLATE)
	        startTagInHead(p, token);
	}

	function endTagInSelect(p, token) {
	    var tn = token.tagName;

	    if (tn === $.OPTGROUP) {
	        var prevOpenElement = p.openElements.items[p.openElements.stackTop - 1],
	            prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

	        if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP)
	            p._processFakeEndTag($.OPTION);

	        if (p.openElements.currentTagName === $.OPTGROUP)
	            p.openElements.pop();
	    }

	    else if (tn === $.OPTION) {
	        if (p.openElements.currentTagName === $.OPTION)
	            p.openElements.pop();
	    }

	    else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
	        p.openElements.popUntilTagNamePopped($.SELECT);
	        p._resetInsertionMode();
	    }

	    else if (tn === $.TEMPLATE)
	        endTagInHead(p, token);
	}

	//12.2.5.4.17 The "in select in table" insertion mode
	//------------------------------------------------------------------
	function startTagInSelectInTable(p, token) {
	    var tn = token.tagName;

	    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
	        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
	        p._processFakeEndTag($.SELECT);
	        p._processToken(token);
	    }

	    else
	        startTagInSelect(p, token);
	}

	function endTagInSelectInTable(p, token) {
	    var tn = token.tagName;

	    if (tn === $.CAPTION || tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT ||
	        tn === $.THEAD || tn === $.TR || tn === $.TD || tn === $.TH) {
	        if (p.openElements.hasInTableScope(tn)) {
	            p._processFakeEndTag($.SELECT);
	            p._processToken(token);
	        }
	    }

	    else
	        endTagInSelect(p, token);
	}

	//12.2.5.4.18 The "in template" insertion mode
	//------------------------------------------------------------------
	function startTagInTemplate(p, token) {
	    var tn = token.tagName;

	    if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META ||
	        tn === $.NOFRAMES || tn === $.SCRIPT || tn === $.STYLE || tn === $.TEMPLATE || tn === $.TITLE) {
	        startTagInHead(p, token);
	    }

	    else {
	        var newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

	        p._popTmplInsertionMode();
	        p._pushTmplInsertionMode(newInsertionMode);
	        p.insertionMode = newInsertionMode;
	        p._processToken(token);
	    }
	}

	function endTagInTemplate(p, token) {
	    if (token.tagName === $.TEMPLATE)
	        endTagInHead(p, token);
	}

	function eofInTemplate(p, token) {
	    if (p.openElements.tmplCount > 0) {
	        p.openElements.popUntilTemplatePopped();
	        p.activeFormattingElements.clearToLastMarker();
	        p._popTmplInsertionMode();
	        p._resetInsertionMode();
	        p._processToken(token);
	    }

	    else
	        p.stopped = true;
	}


	//12.2.5.4.19 The "after body" insertion mode
	//------------------------------------------------------------------
	function startTagAfterBody(p, token) {
	    if (token.tagName === $.HTML)
	        startTagInBody(p, token);

	    else
	        tokenAfterBody(p, token);
	}

	function endTagAfterBody(p, token) {
	    if (token.tagName === $.HTML) {
	        if (!p.fragmentContext)
	            p.insertionMode = AFTER_AFTER_BODY_MODE;
	    }

	    else
	        tokenAfterBody(p, token);
	}

	function tokenAfterBody(p, token) {
	    p.insertionMode = IN_BODY_MODE;
	    p._processToken(token);
	}

	//12.2.5.4.20 The "in frameset" insertion mode
	//------------------------------------------------------------------
	function startTagInFrameset(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.FRAMESET)
	        p._insertElement(token, NS.HTML);

	    else if (tn === $.FRAME)
	        p._appendElement(token, NS.HTML);

	    else if (tn === $.NOFRAMES)
	        startTagInHead(p, token);
	}

	function endTagInFrameset(p, token) {
	    if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
	        p.openElements.pop();

	        if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET)
	            p.insertionMode = AFTER_FRAMESET_MODE;
	    }
	}

	//12.2.5.4.21 The "after frameset" insertion mode
	//------------------------------------------------------------------
	function startTagAfterFrameset(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.NOFRAMES)
	        startTagInHead(p, token);
	}

	function endTagAfterFrameset(p, token) {
	    if (token.tagName === $.HTML)
	        p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
	}

	//12.2.5.4.22 The "after after body" insertion mode
	//------------------------------------------------------------------
	function startTagAfterAfterBody(p, token) {
	    if (token.tagName === $.HTML)
	        startTagInBody(p, token);

	    else
	        tokenAfterAfterBody(p, token);
	}

	function tokenAfterAfterBody(p, token) {
	    p.insertionMode = IN_BODY_MODE;
	    p._processToken(token);
	}

	//12.2.5.4.23 The "after after frameset" insertion mode
	//------------------------------------------------------------------
	function startTagAfterAfterFrameset(p, token) {
	    var tn = token.tagName;

	    if (tn === $.HTML)
	        startTagInBody(p, token);

	    else if (tn === $.NOFRAMES)
	        startTagInHead(p, token);
	}


	//12.2.5.5 The rules for parsing tokens in foreign content
	//------------------------------------------------------------------
	function nullCharacterInForeignContent(p, token) {
	    token.chars = UNICODE.REPLACEMENT_CHARACTER;
	    p._insertCharacters(token);
	}

	function characterInForeignContent(p, token) {
	    p._insertCharacters(token);
	    p.framesetOk = false;
	}

	function startTagInForeignContent(p, token) {
	    if (ForeignContent.causesExit(token) && !p.fragmentContext) {
	        while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
	               (!p._isMathMLTextIntegrationPoint(p.openElements.current)) &&
	               (!p._isHtmlIntegrationPoint(p.openElements.current))) {
	            p.openElements.pop();
	        }

	        p._processToken(token);
	    }

	    else {
	        var current = p._getAdjustedCurrentElement(),
	            currentNs = p.treeAdapter.getNamespaceURI(current);

	        if (currentNs === NS.MATHML)
	            ForeignContent.adjustTokenMathMLAttrs(token);

	        else if (currentNs === NS.SVG) {
	            ForeignContent.adjustTokenSVGTagName(token);
	            ForeignContent.adjustTokenSVGAttrs(token);
	        }

	        ForeignContent.adjustTokenXMLAttrs(token);

	        if (token.selfClosing)
	            p._appendElement(token, currentNs);
	        else
	            p._insertElement(token, currentNs);
	    }
	}

	function endTagInForeignContent(p, token) {
	    for (var i = p.openElements.stackTop; i > 0; i--) {
	        var element = p.openElements.items[i];

	        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
	            p._processToken(token);
	            break;
	        }

	        if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
	            p.openElements.popUntilElementPopped(element);
	            break;
	        }
	    }
	}


/***/ },
/* 123 */
/***/ function(module, exports) {

	module.exports = {
		"Aacute": "Á",
		"aacute": "á",
		"Acirc": "Â",
		"acirc": "â",
		"acute": "´",
		"AElig": "Æ",
		"aelig": "æ",
		"Agrave": "À",
		"agrave": "à",
		"amp": "&",
		"AMP": "&",
		"Aring": "Å",
		"aring": "å",
		"Atilde": "Ã",
		"atilde": "ã",
		"Auml": "Ä",
		"auml": "ä",
		"brvbar": "¦",
		"Ccedil": "Ç",
		"ccedil": "ç",
		"cedil": "¸",
		"cent": "¢",
		"copy": "©",
		"COPY": "©",
		"curren": "¤",
		"deg": "°",
		"divide": "÷",
		"Eacute": "É",
		"eacute": "é",
		"Ecirc": "Ê",
		"ecirc": "ê",
		"Egrave": "È",
		"egrave": "è",
		"ETH": "Ð",
		"eth": "ð",
		"Euml": "Ë",
		"euml": "ë",
		"frac12": "½",
		"frac14": "¼",
		"frac34": "¾",
		"gt": ">",
		"GT": ">",
		"Iacute": "Í",
		"iacute": "í",
		"Icirc": "Î",
		"icirc": "î",
		"iexcl": "¡",
		"Igrave": "Ì",
		"igrave": "ì",
		"iquest": "¿",
		"Iuml": "Ï",
		"iuml": "ï",
		"laquo": "«",
		"lt": "<",
		"LT": "<",
		"macr": "¯",
		"micro": "µ",
		"middot": "·",
		"nbsp": " ",
		"not": "¬",
		"Ntilde": "Ñ",
		"ntilde": "ñ",
		"Oacute": "Ó",
		"oacute": "ó",
		"Ocirc": "Ô",
		"ocirc": "ô",
		"Ograve": "Ò",
		"ograve": "ò",
		"ordf": "ª",
		"ordm": "º",
		"Oslash": "Ø",
		"oslash": "ø",
		"Otilde": "Õ",
		"otilde": "õ",
		"Ouml": "Ö",
		"ouml": "ö",
		"para": "¶",
		"plusmn": "±",
		"pound": "£",
		"quot": "\"",
		"QUOT": "\"",
		"raquo": "»",
		"reg": "®",
		"REG": "®",
		"sect": "§",
		"shy": "­",
		"sup1": "¹",
		"sup2": "²",
		"sup3": "³",
		"szlig": "ß",
		"THORN": "Þ",
		"thorn": "þ",
		"times": "×",
		"Uacute": "Ú",
		"uacute": "ú",
		"Ucirc": "Û",
		"ucirc": "û",
		"Ugrave": "Ù",
		"ugrave": "ù",
		"uml": "¨",
		"Uuml": "Ü",
		"uuml": "ü",
		"Yacute": "Ý",
		"yacute": "ý",
		"yen": "¥",
		"yuml": "ÿ"
	};

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _config = __webpack_require__(57);

	var _config2 = _interopRequireDefault(_config);

	var _utilsLogger = __webpack_require__(24);

	var _utilsLogger2 = _interopRequireDefault(_utilsLogger);

	var _utilsDom = __webpack_require__(125);

	var _utilsDom2 = _interopRequireDefault(_utilsDom);

	var _utilsRequest = __webpack_require__(127);

	var _utilsRequest2 = _interopRequireDefault(_utilsRequest);

	var _utilsToken = __webpack_require__(128);

	var _utilsToken2 = _interopRequireDefault(_utilsToken);

	var _utilsEnvStorage = __webpack_require__(126);

	var _utilsEnvStorage2 = _interopRequireDefault(_utilsEnvStorage);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _utilsProviderAuth = __webpack_require__(614);

	var _utilsProviderAuth2 = _interopRequireDefault(_utilsProviderAuth);

	var Matter = (function () {
		/** Constructor
	  * @param {String} appName Name of application
	  */

		function Matter(appName, opts) {
			_classCallCheck(this, Matter);

			if (!appName) {
				_utilsLogger2['default'].error({
					description: 'Application name requires to use Matter.',
					func: 'constructor', obj: 'Matter'
				});
				throw new Error('Application name is required to use Matter');
			} else {
				this.name = appName;
			}
			if (opts) {
				this.options = opts;
				if (this.options.logLevel) {
					_config2['default'].logLevel = this.options.logLevel;
					console.warn('log level set', _config2['default'].logLevel);
				}
			}
			this.config = _config2['default'];
			console.warn('config set:', this.config);
		}

		/** Endpoint generation that handles default/provided settings and environment
	  * @return {String} endpoint - endpoint for tessellate application
	  */

		_createClass(Matter, [{
			key: 'signup',

			/** Signup a new user
	   * @param {Object} signupData - Object containing data to use while signing up to application.
	   * @param {String} signupData.username - Username of new user (error will be returned if username is taken)
	   * @param {String} signupData.email - Email of new user (error will be returned if email is already used)
	   * @param {String} signupData.password - Password to be used with account (will be encrypted).
	   * @return {Promise}
	   * @example
	   * //Signup a new user
	   * var signupData = {username: 'testuser1', email:'test@email.com', password: 'testpassword'};
	   * matter.signup(signupData).then(function(signupRes){
	   *  console.log('New user signed up successfully. New account: ', signupRes.account);
	   * }, function(err){
	   *  console.error('Error signing up:', err);
	   * });
	   */
			value: function signup(signupData) {
				_utilsLogger2['default'].log({
					description: 'Signup called.', signupData: signupData,
					func: 'signup', obj: 'Matter'
				});
				if (!signupData || !_lodash2['default'].isObject(signupData) && !_lodash2['default'].isString(signupData)) {
					_utilsLogger2['default'].error({ description: 'Signup information is required to signup.', func: 'signup', obj: 'Matter' });
					return Promise.reject({ message: 'Login data is required to login.' });
				}
				if (_lodash2['default'].isObject(signupData)) {
					return _utilsRequest2['default'].post(this.endpoint + '/signup', signupData).then(function (response) {
						_utilsLogger2['default'].info({
							description: 'Signup successful.',
							signupData: signupData, response: response,
							func: 'signup', obj: 'Matter'
						});
						if (_lodash2['default'].has(response, 'account')) {
							return response.account;
						} else {
							_utilsLogger2['default'].warn({
								description: 'Account was not contained in signup response.',
								signupData: signupData, response: response,
								func: 'signup', obj: 'Matter'
							});
							return response;
						}
					})['catch'](function (errRes) {
						_utilsLogger2['default'].error({
							description: 'Error requesting signup.',
							signupData: signupData, error: errRes,
							func: 'signup', obj: 'Matter'
						});
						return Promise.reject(errRes);
					});
				} else {
					//Handle 3rd Party signups
					var auth = new _utilsProviderAuth2['default']({ provider: signupData, app: this });
					return auth.signup(signupData).then(function (res) {
						_utilsLogger2['default'].info({
							description: 'Provider signup successful.',
							provider: signupData, res: res,
							func: 'signup', obj: 'Matter'
						});
						return Promise.resolve(res);
					});
				}
			}

			/** Login by username/email or external provider
	   * @param {Object} loginData - Object containing data to use while logging in to application.
	   * @param {String} loginData.username - Username of user to login as
	   * @param {String} loginData.email - Email of new user (Optional instead of username)
	   * @param {String} loginData.password - Password to be used with account (will be encrypted).
	   * @return {Promise}
	   * @example
	   * //Login as 'testuser1'
	   * var loginData = {username: 'testuser1', password: 'testpassword'};
	   * matter.login(loginData).then(function(loginRes){
	   *  console.log('New user logged in succesfully. Account: ', loginRes.account);
	   * }, function(err){
	   *  console.error('Error logging in:', err);
	   * });
	   */
		}, {
			key: 'login',
			value: function login(loginData) {
				var _this = this;

				if (!loginData || !_lodash2['default'].isObject(loginData) && !_lodash2['default'].isString(loginData)) {
					_utilsLogger2['default'].error({
						description: 'Username/Email and Password are required to login',
						func: 'login', obj: 'Matter'
					});
					return Promise.reject({ message: 'Login data is required to login.' });
				}
				if (_lodash2['default'].isObject(loginData)) {
					if (!loginData.password || !loginData.username) {
						return Promise.reject({ message: 'Username/Email and Password are required to login' });
					}
					//Username/Email Login
					return _utilsRequest2['default'].put(this.endpoint + '/login', loginData).then(function (response) {
						if (_lodash2['default'].has(response, 'data') && _lodash2['default'].has(response.data, 'status') && response.data.status == 409) {
							_utilsLogger2['default'].warn({
								description: 'Account not found.', response: response,
								func: 'login', obj: 'Matter'
							});
							return Promise.reject(response.data);
						} else {
							_utilsLogger2['default'].info({
								description: 'Successful login.', response: response,
								func: 'login', obj: 'Matter'
							});
							if (_lodash2['default'].has(response, 'token')) {
								_this.token.string = response.token;
							}
							var userAccount = {};
							//Get user data either directly from response or from token
							if (_lodash2['default'].has(response, 'account')) {
								userAccount = response.account;
							} else if (_this.token.data) {
								//TODO: Handle more Auth Provider tokens
								//Check for AuthRocket style token
								_utilsLogger2['default'].log({
									description: 'User data available from token.',
									tokenData: _this.token.data, type: typeof _this.token.data,
									func: 'login', obj: 'Matter'
								});
								if (_this.token.data.un) {
									_utilsLogger2['default'].log({
										description: 'Token is AuthRocket format.',
										func: 'login', obj: 'Matter'
									});
									userAccount = {
										username: _this.token.data.un,
										name: _this.token.data.n || null,
										authrocketId: _this.token.data.uid || null
									};
								} else {
									_utilsLogger2['default'].log({
										description: 'Token is default format.',
										func: 'login', obj: 'Matter'
									});
									//Default token style
									userAccount = _this.token.data;
								}
							} else {
								_utilsLogger2['default'].error({
									description: 'User data not available from response or token.',
									func: 'login', obj: 'Matter'
								});
								userAccount = { token: _this.token.string };
							}
							//Set userdata to local storage
							_this.storage.setItem(_config2['default'].tokenUserDataName, userAccount);
							return userAccount;
						}
					})['catch'](function (errRes) {
						_utilsLogger2['default'].error({
							description: 'Error requesting login.',
							error: errRes, status: errRes.status,
							func: 'login', obj: 'Matter'
						});
						if (errRes.status == 409 || errRes.status == 400) {
							errRes = errRes.response.text;
						}
						return Promise.reject(errRes);
					});
				} else {
					//Provider login
					var auth = new _utilsProviderAuth2['default']({ provider: loginData, app: this });
					return auth.login().then(function (res) {
						_utilsLogger2['default'].info({
							description: 'Provider login successful.',
							provider: loginData, res: res,
							func: 'login', obj: 'Matter'
						});
						return Promise.resolve(res);
					});
				}
			}

			/** Logout
	   * @description Log out of currently logged in user account
	   * @return {Promise}
	   * @example
	   * //Logout of currently logged in account
	   * matter.logout().then(function(loginRes){
	   *  console.log('Logged out successfully');
	   * }, function(err){
	   *  console.error('Error logging out:', err);
	   * });
	   */
		}, {
			key: 'logout',
			value: function logout() {
				var _this2 = this;

				//TODO: Handle logging out of providers
				if (!this.isLoggedIn) {
					_utilsLogger2['default'].warn({
						description: 'No logged in account to log out.',
						func: 'logout', obj: 'Matter'
					});
					return Promise.reject({ message: 'No logged in account to log out.' });
				}
				return _utilsRequest2['default'].put(this.endpoint + '/logout').then(function (response) {
					_utilsLogger2['default'].info({
						description: 'Logout successful.',
						response: response, func: 'logout', obj: 'Matter'
					});
					_this2.currentUser = null;
					_this2.token['delete']();
					return response;
				})['catch'](function (errRes) {
					_utilsLogger2['default'].error({
						description: 'Error requesting log out: ',
						error: errRes, func: 'logout', obj: 'Matter'
					});
					_this2.storage.removeItem(_config2['default'].tokenUserDataName);
					_this2.token['delete']();
					return Promise.reject(errRes);
				});
			}

			/** getCurrentUser
	   * @return {Promise}
	   * @example
	   * //Logout of currently logged in account
	   * matter.getCurrentUser().then(function(currentAccount){
	   *  console.log('Currently logged in account:', currentAccount);
	   * }, function(err){
	   *  console.error('Error logging out:', err);
	   * });
	   */
		}, {
			key: 'getCurrentUser',
			value: function getCurrentUser() {
				var _this3 = this;

				if (this.currentUser) {
					return Promise.resolve(this.currentUser);
				} else {
					if (this.isLoggedIn) {
						return _utilsRequest2['default'].get(this.endpoint + '/user').then(function (response) {
							//TODO: Save user information locally
							_utilsLogger2['default'].log({ description: 'Current User Request responded.', responseData: response, func: 'currentUser', obj: 'Matter' });
							_this3.currentUser = response;
							return response;
						})['catch'](function (errRes) {
							if (errRes.status == 401) {
								_utilsLogger2['default'].warn({ description: 'Called for current user without token.', error: errRes, func: 'currentUser', obj: 'Matter' });
								_utilsToken2['default']['delete']();
								return Promise.resolve(null);
							} else {
								_utilsLogger2['default'].error({ description: 'Error requesting current user.', error: errRes, func: 'currentUser', obj: 'Matter' });
								return Promise.reject(errRes);
							}
						});
					} else {
						return Promise.resolve(null);
					}
				}
			}

			/** updateProfile
	   * @param {Object} updateData - Data to update within profile (only provided data will be modified).
	   * @return {Promise}
	   * @example
	   * //Update current account's profile
	   * matter.updateProfile().then(function(updatedAccount){
	   *  console.log('Currently logged in account:', updatedAccount);
	   * }, function(err){
	   *  console.error('Error updating profile:', err);
	   * });
	   */
		}, {
			key: 'updateProfile',
			value: function updateProfile(updateData) {
				var _this4 = this;

				if (!this.isLoggedIn) {
					_utilsLogger2['default'].error({
						description: 'No current user profile to update.',
						func: 'updateProfile', obj: 'Matter'
					});
					return Promise.reject({ message: 'Must be logged in to update profile.' });
				}
				//Send update request
				return _utilsRequest2['default'].put(this.endpoint + '/user/' + this.token.data.username, updateData).then(function (response) {
					_utilsLogger2['default'].log({
						description: 'Update profile request responded.',
						responseData: response, func: 'updateProfile', obj: 'Matter'
					});
					_this4.currentUser = response;
					return response;
				})['catch'](function (errRes) {
					_utilsLogger2['default'].error({
						description: 'Error requesting current user.',
						error: errRes, func: 'updateProfile', obj: 'Matter'
					});
					return Promise.reject(errRes);
				});
			}

			/** changePassword
	   * @param {Object} updateData - Data to update within profile (only provided data will be modified).
	   * @return {Promise}
	   * @example
	   * //Update current account's profile
	   * matter.changePassword().then(function(updatedAccount){
	   *  console.log('Currently logged in account:', updatedAccount);
	   * }, function(err){
	   *  console.error('Error updating profile:', err);
	   * });
	   */
		}, {
			key: 'changePassword',
			value: function changePassword(updateData) {
				if (!this.isLoggedIn) {
					_utilsLogger2['default'].error({
						description: 'No current user profile for which to change password.',
						func: 'changePassword', obj: 'Matter'
					});
					return Promise.reject({ message: 'Must be logged in to change password.' });
				}
				//Send update request
				return _utilsRequest2['default'].put(this.endpoint + '/user/' + this.token.data.username, updateData).then(function (response) {
					_utilsLogger2['default'].log({
						description: 'Update password request responded.',
						responseData: response, func: 'changePassword', obj: 'Matter'
					});
					return response;
				})['catch'](function (errRes) {
					_utilsLogger2['default'].error({
						description: 'Error requesting password change.',
						error: errRes, func: 'changePassword', obj: 'Matter'
					});
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'recoverPassword',
			value: function recoverPassword() {
				if (!this.isLoggedIn) {
					_utilsLogger2['default'].error({
						description: 'No current user for which to recover password.',
						func: 'recoverPassword', obj: 'Matter'
					});
					return Promise.reject({ message: 'Must be logged in to recover password.' });
				}
				//Send update request
				return _utilsRequest2['default'].post(this.endpoint + '/accounts/' + this.token.data.username + '/recover').then(function (response) {
					_utilsLogger2['default'].log({
						description: 'Recover password request responded.',
						responseData: response, func: 'recoverPassword',
						obj: 'Matter'
					});
					return response;
				})['catch'](function (errRes) {
					_utilsLogger2['default'].error({
						description: 'Error requesting password recovery.',
						error: errRes, func: 'recoverPassword', obj: 'Matter'
					});
					return Promise.reject(errRes);
				});
			}

			/** Get current logged in status
	   * @return {Boolean}
	   * @example
	   * //Check if there is an account currently logged in
	   * if(matter.isLoggedIn){
	   * console.log('There is currently an account logged in.');
	   * } else {
	   * console.warn('There is no account currently logged in.');
	   * }
	   */
		}, {
			key: 'isInGroup',

			/** Check that user is in a single group or in all of a list of groups
	   * @param {Array} checkGroups - List of groups to check for account membership
	   * @return {Boolean}
	   * @example
	   * //Check for group membership
	   * var isBoth = ;
	   * if(matter.isInGroup('admins')){
	   * console.log('Current account is an admin!');
	   * } else {
	   * console.warn('Current account is not an admin.');
	   * }
	   *
	   */
			value: function isInGroup(checkGroups) {
				var _this5 = this;

				if (!this.isLoggedIn) {
					_utilsLogger2['default'].log({
						description: 'No logged in user to check.',
						func: 'isInGroup', obj: 'Matter'
					});
					return false;
				}
				//Check if user is
				if (checkGroups && _lodash2['default'].isString(checkGroups)) {
					var _ret = (function () {
						var groupName = checkGroups;
						//Single role or string list of roles
						var groupsArray = groupName.split(',');
						if (groupsArray.length > 1) {
							//String list of groupts
							_utilsLogger2['default'].info({
								description: 'String list of groups.', list: groupsArray,
								func: 'isInGroup', obj: 'Matter'
							});
							return {
								v: _this5.isInGroups(groupsArray)
							};
						} else {
							//Single group
							var groups = _this5.token.data.groups || [];
							_utilsLogger2['default'].log({
								description: 'Checking if user is in group.',
								group: groupName, userGroups: _this5.token.data.groups,
								func: 'isInGroup', obj: 'Matter'
							});
							return {
								v: _lodash2['default'].any(groups, function (group) {
									return groupName == group.name;
								})
							};
						}
					})();

					if (typeof _ret === 'object') return _ret.v;
				} else if (checkGroups && _lodash2['default'].isArray(checkGroups)) {
					//Array of roles
					//Check that user is in every group
					_utilsLogger2['default'].info({
						description: 'Array of groups.', list: checkGroups,
						func: 'isInGroup', obj: 'Matter'
					});
					return this.isInGroups(checkGroups);
				} else {
					return false;
				}
				//TODO: Handle string and array inputs
			}

			/** Check that user is in all of a list of groups
	   * @param {Array|String} checkGroups - List of groups to check for account membership
	   * @return {Boolean}
	   * @example
	   * //Check for group membership
	   * var isBoth = matter.isInGroups(['admins', 'users']);
	   * if(isBoth){
	   * console.log('Current account is both an admin and a user');
	   * } else {
	   * console.warn('Current account is not both an admin and a user')
	   * }
	   *
	   */
		}, {
			key: 'isInGroups',
			value: function isInGroups(checkGroups) {
				var _this6 = this;

				if (!this.isLoggedIn) {
					_utilsLogger2['default'].log({
						description: 'No logged in user to check.',
						func: 'isInGroups', obj: 'Matter'
					});
					return false;
				}
				//Check if user is in any of the provided groups
				if (checkGroups && _lodash2['default'].isArray(checkGroups)) {
					return _lodash2['default'].every(_lodash2['default'].map(checkGroups, function (group) {
						if (_lodash2['default'].isString(group)) {
							//Group is string
							return _this6.isInGroup(group);
						} else {
							//Group is object
							if (_lodash2['default'].has(group, 'name')) {
								return _this6.isInGroup(group.name);
							} else {
								_utilsLogger2['default'].error({
									description: 'Invalid group object.',
									group: group, func: 'isInGroups', obj: 'Matter'
								});
								return false;
							}
						}
					}), true);
				} else if (checkGroups && _lodash2['default'].isString(checkGroups)) {
					//TODO: Handle spaces within string list
					var groupsArray = checkGroups.split(',');
					if (groupsArray.length > 1) {
						return this.isInGroups(groupsArray);
					}
					return this.isInGroup(groupsArray[0]);
				} else {
					_utilsLogger2['default'].error({
						description: 'Invalid groups list.',
						func: 'isInGroups', obj: 'Matter'
					});
					return false;
				}
			}
		}, {
			key: 'endpoint',
			get: function get() {
				//Handle options
				if (_lodash2['default'].has(this, 'options')) {
					if (this.options.localServer) {
						_config2['default'].envName = 'local';
						_utilsLogger2['default'].log({
							description: 'LocalServer option was set to true. Now server url is local server.',
							url: _config2['default'].serverUrl, func: 'endpoint', obj: 'Matter'
						});
					}
					if (this.options.env) {
						_config2['default'].envName = this.options.env;
						_utilsLogger2['default'].log({
							description: 'Environment set based on provided environment.',
							config: _config2['default'], func: 'endpoint', obj: 'Matter'
						});
					}
				}
				var appEndpoint = _config2['default'].serverUrl + '/apps/' + this.name;
				//Handle tessellate as name
				if (this.name == 'tessellate') {
					//Remove url if host is a tessellate server
					if (typeof window !== 'undefined' && _lodash2['default'].has(window, 'location') && window.location.host.indexOf('tessellate') !== -1) {
						appEndpoint = '';
						_utilsLogger2['default'].info({
							description: 'Host is Tessellate Server, serverUrl simplified!',
							url: appEndpoint, func: 'endpoint', obj: 'Matter'
						});
					} else {
						appEndpoint = _config2['default'].serverUrl;
						_utilsLogger2['default'].info({
							description: 'App is tessellate, serverUrl set as main tessellate server.',
							url: appEndpoint, func: 'endpoint', obj: 'Matter'
						});
					}
				}
				_utilsLogger2['default'].log({
					description: 'Endpoint created.', url: appEndpoint,
					func: 'endpoint', obj: 'Matter'
				});
				return appEndpoint;
			}
		}, {
			key: 'isLoggedIn',
			get: function get() {
				return this.token.string ? true : false;
			}

			/** Save current user (handled automatically by default)
	   * @param {Object} userData - Account data to set for current user
	   * @example
	   * //Save account response to current user
	   * matter.currentUser = {username: 'testuser1', email: 'test@email.com'};
	   * console.log('New current user set:', matter.currentUser);
	   */
		}, {
			key: 'currentUser',
			set: function set(userData) {
				_utilsLogger2['default'].log({
					description: 'Current User set.', user: userData,
					func: 'currentUser', obj: 'Matter'

				});
				this.storage.setItem(_config2['default'].tokenUserDataName, userData);
			},

			/** Get currently logged in user or returns null
	   * @return {Object|null}
	   * @example
	   * //Return account if logged in
	   * if(matter.isLoggedIn){
	   * console.log('Current user account: ', matter.currentUser);
	   * } else {
	   * console.log('No current user. Current user: ', matter.currentUser)
	   * }
	   * matter.currentUser
	   * console.log('New current user set:', matter.currentUser);
	   */
			get: function get() {
				if (this.storage.getItem(_config2['default'].tokenUserDataName)) {
					return this.storage.getItem(_config2['default'].tokenUserDataName);
				} else {
					return null;
				}
			}

			/* Storage Utility
	   *
	   */
		}, {
			key: 'storage',
			get: function get() {
				return _utilsEnvStorage2['default'];
			}

			/** Token Utility
	   */
		}, {
			key: 'token',
			get: function get() {
				return _utilsToken2['default'];
			}

			/** Utils placed in base library
	   */
		}, {
			key: 'utils',
			get: function get() {
				return { logger: _utilsLogger2['default'], request: _utilsRequest2['default'], storage: _utilsEnvStorage2['default'], dom: _utilsDom2['default'] };
			}
		}]);

		return Matter;
	})();

	exports['default'] = Matter;
	module.exports = exports['default'];

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _logger = __webpack_require__(24);

	var _logger2 = _interopRequireDefault(_logger);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var domUtil = {
		/**
	  * @description
	  * Appends given css source to DOM head.
	  *
	  * @param {String} src - url src for css to append
	  *
	  */
		loadCss: function loadCss(src) {
			if (typeof document == 'undefined') {
				_logger2['default'].error({ description: 'Document does not exsist to load assets into.', func: 'loadCss', obj: 'dom' });
				throw new Error('Document object is required to load assets.');
			} else {
				var css = document.createElement('link');
				css.rel = 'stylesheet';
				css.type = 'text/css';
				css.href = src;
				document.getElementsByTagName('head')[0].insertBefore(css, document.getElementsByTagName('head')[0].firstChild);
				_logger2['default'].log({ description: 'CSS was loaded into document.', element: css, func: 'loadCss', obj: 'dom' });
				return css; //Return link element
			}
		},
		/**
	  * @description
	  * Appends given javascript source to DOM head.
	  *
	  * @param {String} src - url src for javascript to append
	  *
	  */
		loadJs: function loadJs(src) {
			if (typeof window == 'undefined' || !_lodash2['default'].has(window, 'document')) {
				_logger2['default'].error({ description: 'Document does not exsist to load assets into.', func: 'loadCss', obj: 'dom' });
				throw new Error('Document object is required to load assets.');
			} else {
				var js = window.document.createElement('script');
				js.src = src;
				js.type = 'text/javascript';
				window.document.getElementsByTagName('head')[0].appendChild(js);
				_logger2['default'].log({ description: 'JS was loaded into document.', element: js, func: 'loadCss', obj: 'dom' });
				return js; //Return script element
			}
		},
		/**
	  * @description
	  * Appends given javascript source to DOM head.
	  *
	  * @param {String} src - url src for javascript to append
	  *
	  */
		asyncLoadJs: function asyncLoadJs(src) {
			if (typeof window == 'undefined' || !_lodash2['default'].has(window, 'document')) {
				_logger2['default'].error({ description: 'Document does not exsist to load assets into.', func: 'loadCss', obj: 'dom' });
				throw new Error('Document object is required to load assets.');
			} else {
				var js = window.document.createElement('script');
				js.src = src;
				js.type = 'text/javascript';
				window.document.getElementsByTagName('head')[0].appendChild(js);
				_logger2['default'].log({ description: 'JS was loaded into document.', element: js, func: 'loadCss', obj: 'dom' });
				return new Promise(function (resolve) {
					window.setTimeout(resolve, 30);
				});
			}
		}
	};
	exports['default'] = domUtil;
	module.exports = exports['default'];

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _logger = __webpack_require__(24);

	var _logger2 = _interopRequireDefault(_logger);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var data = {};

	var storage = Object.defineProperties({
		/**
	  * @description
	  * Safley sets item to session storage.
	  *
	  * @param {String} itemName The items name
	  * @param {String} itemValue The items value
	  *
	  */
		item: function item(itemName, itemValue) {
			return this.setItem(itemName, itemValue);
		},
		/**
	  * @description
	  * Safley sets item to session storage. Alias: item()
	  *
	  * @param {String} itemName The items name
	  * @param {String} itemValue The items value
	  *
	  */
		setItem: function setItem(itemName, itemValue) {
			data[itemName] = itemValue;
			if (this.localExists) {
				//Convert object to string
				if (_lodash2['default'].isObject(itemValue)) {
					itemValue = JSON.stringify(itemValue);
				}
				window.sessionStorage.setItem(itemName, itemValue);
			}
		},
		/**
	  * @description
	  * Safley gets an item from session storage. Alias: item()
	  *
	  * @param {String} itemName The items name
	  * @return {String}
	  *
	  */
		getItem: function getItem(itemName) {
			if (data[itemName]) {
				return data[itemName];
			} else if (this.localExists) {
				var itemStr = window.sessionStorage.getItem(itemName);
				//Check that str is not null before parsing
				if (itemStr) {
					var isObj = false;
					var itemObj = null;
					//Try parsing to object
					try {
						itemObj = JSON.parse(itemStr);
						isObj = true;
					} catch (err) {
						// logger.log({message: 'String could not be parsed.', error: err, func: 'getItem', obj: 'storage'});
						//Parsing failed, this must just be a string
						isObj = false;
					}
					if (isObj) {
						return itemObj;
					}
				}
				return itemStr;
			} else {
				return null;
			}
		},
		/**
	  * @description Safley removes item from session storage.
	  *
	  * @param {String} itemName - The items name
	  *
	  */
		removeItem: function removeItem(itemName) {
			//TODO: Only remove used items
			if (data[itemName]) {
				data[itemName] = null;
			}
			if (this.localExists) {
				try {
					//Clear session storage
					window.sessionStorage.removeItem(itemName);
				} catch (err) {
					_logger2['default'].error({ description: 'Error removing item from session storage', error: err, obj: 'storage', func: 'removeItem' });
				}
			}
		},
		/**
	  * @description
	  * Safley removes item from session storage.
	  *
	  * @param {String} itemName the items name
	  * @param {String} itemValue the items value
	  *
	  */
		clear: function clear() {
			//TODO: Only remove used items
			data = {};
			if (this.localExists) {
				try {
					//Clear session storage
					window.sessionStorage.clear();
				} catch (err) {
					_logger2['default'].warn({
						description: 'Session storage could not be cleared.', error: err
					});
				}
			}
		}
	}, {
		localExists: {
			/** Gets whether or not local storage exists.
	   * @param {String} itemName The items name
	   * @param {String} itemValue The items value
	   * @return {Boolean}
	   *
	   */

			get: function get() {
				var testKey = 'test';
				if (typeof window != 'undefined' && typeof window.sessionStorage != 'undefined') {
					try {
						window.sessionStorage.setItem(testKey, '1');
						window.sessionStorage.removeItem(testKey);
						return true;
					} catch (err) {
						_logger2['default'].error({ description: 'Error saving to session storage', error: err, obj: 'storage', func: 'localExists' });
						return false;
					}
				} else {
					return false;
				}
			},
			configurable: true,
			enumerable: true
		}
	});

	exports['default'] = storage;
	module.exports = exports['default'];

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _logger = __webpack_require__(24);

	var _logger2 = _interopRequireDefault(_logger);

	var _token = __webpack_require__(128);

	var _token2 = _interopRequireDefault(_token);

	var _superagent = __webpack_require__(619);

	var _superagent2 = _interopRequireDefault(_superagent);

	var request = {
		get: function get(endpoint, queryData) {
			var req = _superagent2['default'].get(endpoint);
			if (queryData) {
				req.query(queryData);
			}
			req = addAuthHeader(req);
			return handleResponse(req);
		},
		post: function post(endpoint, data) {
			var req = _superagent2['default'].post(endpoint).send(data);
			req = addAuthHeader(req);
			return handleResponse(req);
		},
		put: function put(endpoint, data) {
			var req = _superagent2['default'].put(endpoint, data);
			req = addAuthHeader(req);
			return handleResponse(req);
		},
		del: function del(endpoint, data) {
			var req = _superagent2['default'].put(endpoint, data);
			req = addAuthHeader(req);
			return handleResponse(req);
		}
	};

	exports['default'] = request;

	function handleResponse(req) {
		return new Promise(function (resolve, reject) {
			req.end(function (err, res) {
				if (!err) {
					// logger.log({description: 'Response:', response:res, func:'handleResponse', file: 'request'});
					return resolve(res.body);
				} else {
					if (err.status == 401) {
						_logger2['default'].warn({ description: 'Unauthorized. You must be signed into make this request.', func: 'handleResponse' });
					}
					if (err && err.response) {
						return reject(err.response.text);
					}
					_logger2['default'].warn({ description: 'Unauthorized. You must be signed into make this request.', error: err, func: 'handleResponse' });
					return reject(err);
				}
			});
		});
	}
	function addAuthHeader(req) {
		if (_token2['default'].string) {
			req = req.set('Authorization', 'Bearer ' + _token2['default'].string);
			// console.info({message: 'Set auth header', func: 'addAuthHeader', file: 'request'});
		}
		return req;
	}
	module.exports = exports['default'];

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _config = __webpack_require__(57);

	var _config2 = _interopRequireDefault(_config);

	var _logger = __webpack_require__(24);

	var _logger2 = _interopRequireDefault(_logger);

	var _envStorage = __webpack_require__(126);

	var _envStorage2 = _interopRequireDefault(_envStorage);

	var _jwtDecode = __webpack_require__(616);

	var _jwtDecode2 = _interopRequireDefault(_jwtDecode);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var token = Object.defineProperties({
		/** Save token data
	  */
		save: function save(tokenStr) {
			this.string = tokenStr;
		},
		/** Delete token data
	  */
		'delete': function _delete() {
			//Remove string token
			_envStorage2['default'].removeItem(_config2['default'].tokenName);
			//Remove user data
			_envStorage2['default'].removeItem(_config2['default'].tokenDataName);
			_logger2['default'].log({
				description: 'Token was removed.',
				func: 'delete', obj: 'token'
			});
		}
	}, {
		string: {
			/** Get string value of token
	   * @return {String}
	   * @example
	   * console.log('String value of current token', token.string);
	   */

			get: function get() {
				return _envStorage2['default'].getItem(_config2['default'].tokenName);
			},

			/** Set token value as a string
	   */
			set: function set(tokenData) {
				var tokenStr = undefined;
				//Handle object being passed
				if (!_lodash2['default'].isString(tokenData)) {
					//Token is included in object
					_logger2['default'].log({
						description: 'Token data is not string.',
						token: tokenData, func: 'string', obj: 'token'
					});
					if (_lodash2['default'].isObject(tokenData) && _lodash2['default'].has(tokenData, 'token')) {
						tokenStr = tokenData.token;
					} else {
						//Input is either not an string or object that contains nessesary info
						_logger2['default'].error({
							description: 'Invalid value set to token.',
							token: tokenData, func: 'string', obj: 'token'
						});
						return;
					}
				} else {
					tokenStr = tokenData;
				}
				_logger2['default'].log({
					description: 'Token was set.', token: tokenData,
					tokenStr: tokenStr, func: 'string', obj: 'token'
				});
				_envStorage2['default'].setItem(_config2['default'].tokenName, tokenStr);
				this.data = (0, _jwtDecode2['default'])(tokenStr);
			},
			configurable: true,
			enumerable: true
		},
		data: {
			/** Get decoded data within token (unencrypted data only)
	   * @return {Object}
	   * @example
	   * console.log('Data of current token:', token.data);
	   */

			get: function get() {
				if (_envStorage2['default'].getItem(_config2['default'].tokenDataName)) {
					return _envStorage2['default'].getItem(_config2['default'].tokenDataName);
				} else {
					return decodeToken(this.string);
				}
			},

			/** Set token data
	   */
			set: function set(tokenData) {
				if (_lodash2['default'].isString(tokenData)) {
					var tokenStr = tokenData;
					tokenData = decodeToken(tokenStr);
					_logger2['default'].info({
						description: 'Token data was set as string. Decoding token.',
						token: tokenStr, tokenData: tokenData, func: 'data', obj: 'token'
					});
				} else {
					_logger2['default'].log({
						description: 'Token data was set.', data: tokenData,
						func: 'data', obj: 'token'
					});
					_envStorage2['default'].setItem(_config2['default'].tokenDataName, tokenData);
				}
			},
			configurable: true,
			enumerable: true
		}
	});

	exports['default'] = token;

	/** Safley decode a JWT string
	 * @private
	 * @return {Object}
	 */
	function decodeToken(tokenStr) {
		var tokenData = undefined;
		if (tokenStr && tokenStr != '') {
			try {
				tokenData = (0, _jwtDecode2['default'])(tokenStr);
			} catch (err) {
				_logger2['default'].error({
					description: 'Error decoding token.', data: tokenData,
					error: err, func: 'decodeToken', file: 'token'
				});
				throw new Error('Invalid token string.');
			}
		}
		return tokenData;
	}
	module.exports = exports['default'];

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	// Convenience file to require the SDK from the root of the repository
	module.exports = __webpack_require__(622);


/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {
	var path = __webpack_require__(14);

	var apiRoot = path.join(__dirname, '..', 'apis');
	var serviceMap = null;
	var serviceIdentifiers = [];
	var serviceNames = [];

	function buildServiceMap() {
	  if (serviceMap !== null) return;

	  // load info file for API metadata
	  serviceMap = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());

	  var prefixMap = {};
	  Object.keys(serviceMap).forEach(function(identifier) {
	    serviceMap[identifier].prefix = serviceMap[identifier].prefix || identifier;
	    prefixMap[serviceMap[identifier].prefix] = identifier;
	  });

	  fs.readdirSync(apiRoot).forEach(function (file) {
	    var match = file.match(/^(.+?)-(\d+-\d+-\d+)\.(normal|min)\.json$/);
	    if (match) {
	      var id = prefixMap[match[1]], version = match[2];
	      if (serviceMap[id]) {
	        serviceMap[id].versions = serviceMap[id].versions || [];
	        if (serviceMap[id].versions.indexOf(version) < 0) {
	          serviceMap[id].versions.push(version);
	        }
	      }
	    }
	  });

	  Object.keys(serviceMap).forEach(function(identifier) {
	    serviceMap[identifier].versions = serviceMap[identifier].versions.sort();
	    serviceIdentifiers.push(identifier);
	    serviceNames.push(serviceMap[identifier].name);
	  });
	}

	function getServices() {
	  buildServiceMap();
	  return serviceIdentifiers;
	}

	function getServiceNames() {
	  buildServiceMap();
	  return serviceNames;
	}

	function serviceVersions(svc) {
	  buildServiceMap();
	  svc = serviceIdentifier(svc);
	  return serviceMap[svc] ? serviceMap[svc].versions : null;
	}

	function serviceName(svc) {
	  buildServiceMap();
	  svc = serviceIdentifier(svc);
	  return serviceMap[svc] ? serviceMap[svc].name : null;
	}

	function serviceFile(svc, version) {
	  buildServiceMap();
	  svc = serviceIdentifier(svc);
	  if (!serviceMap[svc]) return null;

	  var prefix = serviceMap[svc].prefix || svc;
	  var filePath;
	  ['min', 'api', 'normal'].some(function(testSuffix) {
	    filePath = apiRoot + '/' + prefix.toLowerCase() + '-' + version + '.' +
	           testSuffix + '.json';

	    return fs.existsSync(filePath);
	  });
	  return filePath;
	}

	function paginatorsFile(svc, version) {
	  buildServiceMap();
	  svc = serviceIdentifier(svc);
	  if (!serviceMap[svc]) return null;

	  var prefix = serviceMap[svc].prefix || svc;
	  return apiRoot + '/' + prefix + '-' + version + '.paginators.json';
	}

	function waitersFile(svc, version) {
	  buildServiceMap();
	  svc = serviceIdentifier(svc);
	  if (!serviceMap[svc]) return null;

	  var prefix = serviceMap[svc].prefix || svc;
	  return apiRoot + '/' + prefix + '-' + version + '.waiters.json';
	}

	function load(svc, version) {
	  buildServiceMap();
	  svc = serviceIdentifier(svc);
	  if (version === 'latest') version = null;
	  version = version || serviceMap[svc].versions[serviceMap[svc].versions.length - 1];
	  if (!serviceMap[svc]) return null;

	  var api = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());

	  // Try to load paginators
	  if (fs.existsSync(paginatorsFile(svc, version))) {
	    var paginators = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	    api.paginators = paginators.pagination;
	  }

	  // Try to load waiters
	  if (fs.existsSync(waitersFile(svc, version))) {
	    var waiters = !(function webpackMissingModule() { var e = new Error("Cannot find module \".\""); e.code = 'MODULE_NOT_FOUND'; throw e; }());
	    api.waiters = waiters.waiters;
	  }

	  return api;
	}

	function serviceIdentifier(svc) {
	  return svc.toLowerCase();
	}

	module.exports = {
	  serviceVersions: serviceVersions,
	  serviceName: serviceName,
	  serviceIdentifier: serviceIdentifier,
	  serviceFile: serviceFile,
	  load: load
	};

	Object.defineProperty(module.exports, 'services', {
	  enumerable: true, get: getServices
	});

	Object.defineProperty(module.exports, 'serviceNames', {
	  enumerable: true, get: getServiceNames
	});

	/* WEBPACK VAR INJECTION */}.call(exports, "node_modules/aws-sdk/lib"))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Represents your AWS security credentials, specifically the
	 * {accessKeyId}, {secretAccessKey}, and optional {sessionToken}.
	 * Creating a `Credentials` object allows you to pass around your
	 * security information to configuration and service objects.
	 *
	 * Note that this class typically does not need to be constructed manually,
	 * as the {AWS.Config} and {AWS.Service} classes both accept simple
	 * options hashes with the three keys. These structures will be converted
	 * into Credentials objects automatically.
	 *
	 * ## Expiring and Refreshing Credentials
	 *
	 * Occasionally credentials can expire in the middle of a long-running
	 * application. In this case, the SDK will automatically attempt to
	 * refresh the credentials from the storage location if the Credentials
	 * class implements the {refresh} method.
	 *
	 * If you are implementing a credential storage location, you
	 * will want to create a subclass of the `Credentials` class and
	 * override the {refresh} method. This method allows credentials to be
	 * retrieved from the backing store, be it a file system, database, or
	 * some network storage. The method should reset the credential attributes
	 * on the object.
	 *
	 * @!attribute expired
	 *   @return [Boolean] whether the credentials have been expired and
	 *     require a refresh. Used in conjunction with {expireTime}.
	 * @!attribute expireTime
	 *   @return [Date] a time when credentials should be considered expired. Used
	 *     in conjunction with {expired}.
	 * @!attribute accessKeyId
	 *   @return [String] the AWS access key ID
	 * @!attribute secretAccessKey
	 *   @return [String] the AWS secret access key
	 * @!attribute sessionToken
	 *   @return [String] an optional AWS session token
	 */
	AWS.Credentials = AWS.util.inherit({
	  /**
	   * A credentials object can be created using positional arguments or an options
	   * hash.
	   *
	   * @overload AWS.Credentials(accessKeyId, secretAccessKey, sessionToken=null)
	   *   Creates a Credentials object with a given set of credential information
	   *   as positional arguments.
	   *   @param accessKeyId [String] the AWS access key ID
	   *   @param secretAccessKey [String] the AWS secret access key
	   *   @param sessionToken [String] the optional AWS session token
	   *   @example Create a credentials object with AWS credentials
	   *     var creds = new AWS.Credentials('akid', 'secret', 'session');
	   * @overload AWS.Credentials(options)
	   *   Creates a Credentials object with a given set of credential information
	   *   as an options hash.
	   *   @option options accessKeyId [String] the AWS access key ID
	   *   @option options secretAccessKey [String] the AWS secret access key
	   *   @option options sessionToken [String] the optional AWS session token
	   *   @example Create a credentials object with AWS credentials
	   *     var creds = new AWS.Credentials({
	   *       accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'session'
	   *     });
	   */
	  constructor: function Credentials() {
	    // hide secretAccessKey from being displayed with util.inspect
	    AWS.util.hideProperties(this, ['secretAccessKey']);

	    this.expired = false;
	    this.expireTime = null;
	    if (arguments.length === 1 && typeof arguments[0] === 'object') {
	      var creds = arguments[0].credentials || arguments[0];
	      this.accessKeyId = creds.accessKeyId;
	      this.secretAccessKey = creds.secretAccessKey;
	      this.sessionToken = creds.sessionToken;
	    } else {
	      this.accessKeyId = arguments[0];
	      this.secretAccessKey = arguments[1];
	      this.sessionToken = arguments[2];
	    }
	  },

	  /**
	   * @return [Integer] the window size in seconds to attempt refreshhing of
	   *   credentials before the expireTime occurs.
	   */
	  expiryWindow: 15,

	  /**
	   * @return [Boolean] whether the credentials object should call {refresh}
	   * @note Subclasses should override this method to provide custom refresh
	   *   logic.
	   */
	  needsRefresh: function needsRefresh() {
	    var currentTime = AWS.util.date.getDate().getTime();
	    var adjustedTime = new Date(currentTime + this.expiryWindow * 1000);

	    if (this.expireTime && adjustedTime > this.expireTime) {
	      return true;
	    } else {
	      return this.expired || !this.accessKeyId || !this.secretAccessKey;
	    }
	  },

	  /**
	   * Gets the existing credentials, refreshing them if they are not yet loaded
	   * or have expired. Users should call this method before using {refresh},
	   * as this will not attempt to reload credentials when they are already
	   * loaded into the object.
	   *
	   * @callback callback function(err)
	   *   Called when the instance metadata service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   */
	  get: function get(callback) {
	    var self = this;
	    if (this.needsRefresh()) {
	      this.refresh(function(err) {
	        if (!err) self.expired = false; // reset expired flag
	        if (callback) callback(err);
	      });
	    } else if (callback) {
	      callback();
	    }
	  },

	  /**
	   * Refreshes the credentials. Users should call {get} before attempting
	   * to forcibly refresh credentials.
	   *
	   * @callback callback function(err)
	   *   Called when the instance metadata service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @note Subclasses should override this class to reset the
	   *   {accessKeyId}, {secretAccessKey} and optional {sessionToken}
	   *   on the credentials object and then call the callback with
	   *   any error information.
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    this.expired = false;
	    callback();
	  }
	});


/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Creates a credential provider chain that searches for AWS credentials
	 * in a list of credential providers specified by the {providers} property.
	 *
	 * By default, the chain will use the {defaultProviders} to resolve credentials.
	 * These providers will look in the environment using the
	 * {AWS.EnvironmentCredentials} class with the 'AWS' and 'AMAZON' prefixes.
	 *
	 * ## Setting Providers
	 *
	 * Each provider in the {providers} list should be a function that returns
	 * a {AWS.Credentials} object, or a hardcoded credentials object. The function
	 * form allows for delayed execution of the credential construction.
	 *
	 * ## Resolving Credentials from a Chain
	 *
	 * Call {resolve} to return the first valid credential object that can be
	 * loaded by the provider chain.
	 *
	 * For example, to resolve a chain with a custom provider that checks a file
	 * on disk after the set of {defaultProviders}:
	 *
	 * ```javascript
	 * var diskProvider = new AWS.FileSystemCredentials('./creds.json');
	 * var chain = new AWS.CredentialProviderChain();
	 * chain.providers.push(diskProvider);
	 * chain.resolve();
	 * ```
	 *
	 * The above code will return the `diskProvider` object if the
	 * file contains credentials and the `defaultProviders` do not contain
	 * any credential settings.
	 *
	 * @!attribute providers
	 *   @return [Array<AWS.Credentials, Function>]
	 *     a list of credentials objects or functions that return credentials
	 *     objects. If the provider is a function, the function will be
	 *     executed lazily when the provider needs to be checked for valid
	 *     credentials. By default, this object will be set to the
	 *     {defaultProviders}.
	 *   @see defaultProviders
	 */
	AWS.CredentialProviderChain = AWS.util.inherit(AWS.Credentials, {

	  /**
	   * Creates a new CredentialProviderChain with a default set of providers
	   * specified by {defaultProviders}.
	   */
	  constructor: function CredentialProviderChain(providers) {
	    if (providers) {
	      this.providers = providers;
	    } else {
	      this.providers = AWS.CredentialProviderChain.defaultProviders.slice(0);
	    }
	  },

	  /**
	   * Resolves the provider chain by searching for the first set of
	   * credentials in {providers}.
	   *
	   * @callback callback function(err, credentials)
	   *   Called when the provider resolves the chain to a credentials object
	   *   or null if no credentials can be found.
	   *
	   *   @param err [Error] the error object returned if no credentials are
	   *     found.
	   *   @param credentials [AWS.Credentials] the credentials object resolved
	   *     by the provider chain.
	   * @return [AWS.CredentialProviderChain] the provider, for chaining.
	   */
	  resolve: function resolve(callback) {
	    if (this.providers.length === 0) {
	      callback(new Error('No providers'));
	      return this;
	    }

	    var index = 0;
	    var providers = this.providers.slice(0);

	    function resolveNext(err, creds) {
	      if ((!err && creds) || index === providers.length) {
	        callback(err, creds);
	        return;
	      }

	      var provider = providers[index++];
	      if (typeof provider === 'function') {
	        creds = provider.call();
	      } else {
	        creds = provider;
	      }

	      if (creds.get) {
	        creds.get(function(getErr) {
	          resolveNext(getErr, getErr ? null : creds);
	        });
	      } else {
	        resolveNext(null, creds);
	      }
	    }

	    resolveNext();
	    return this;
	  }

	});

	/**
	 * The default set of providers used by a vanilla CredentialProviderChain.
	 */
	AWS.CredentialProviderChain.defaultProviders = [];


/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(2).util;
	var typeOf = __webpack_require__(134).typeOf;

	var DynamoDBSet = util.inherit({

	  constructor: function Set(list, options) {
	    options = options || {};
	    this.initialize(list, options.validate);
	  },

	  initialize: function(list, validate) {
	    var self = this;
	    self.values = [].concat(list);
	    self.detectType();
	    if (validate) {
	      self.validate();
	    }
	  },

	  detectType: function() {
	    var self = this;
	    var value = self.values[0];
	    if (typeOf(value) === 'String') {
	      self.type = 'String';
	    } else if (typeOf(value) === 'Number') {
	      self.type = 'Number';
	    } else if (typeOf(value) === 'Binary') {
	      self.type = 'Binary';
	    } else {
	      throw util.error(new Error(), {
	        code: 'InvalidSetType',
	        message: 'Sets can contain string, number, or binary values'
	      });
	    }
	  },

	  validate: function() {
	    var self = this;
	    var length = self.values.length;
	    var values = self.values;
	    for (var i = 0; i < length; i++) {
	      if (typeOf(values[i]) !== self.type) {
	        throw util.error(new Error(), {
	          code: 'InvalidType',
	          message: self.type + ' Set contains ' + typeOf(values[i]) + ' value'
	        });
	      }
	    }
	  }

	});

	module.exports = DynamoDBSet;


/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(2).util;

	function typeOf(data) {
	  if (data === null && typeof data === 'object') {
	    return 'null';
	  } else if (data !== undefined && isBinary(data)) {
	    return 'Binary';
	  } else if (data !== undefined && data.constructor) {
	    return util.typeName(data.constructor);
	  } else {
	    return 'undefined';
	  }
	}

	function isBinary(data) {
	  var types = [
	    'Buffer', 'File', 'Blob', 'ArrayBuffer', 'DataView',
	    'Int8Array', 'Uint8Array', 'Uint8ClampedArray',
	    'Int16Array', 'Uint16Array', 'Int32Array', 'Uint32Array',
	    'Float32Array', 'Float64Array'
	  ];
	  if (util.isNode()) {
	    var Stream = util.nodeRequire('stream').Stream;
	    if (util.Buffer.isBuffer(data) || data instanceof Stream)
	      return true;
	  } else {
	    for (var i = 0; i < types.length; i++) {
	      if (data !== undefined && data.constructor) {
	        if (util.isType(data, types[i])) return true;
	        if (util.typeName(data.constructor) === types[i]) return true;
	      }
	    }
	  }
	  return false;
	}

	module.exports = {
	  typeOf: typeOf,
	  isBinary: isBinary
	};


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	var Collection = __webpack_require__(136);
	var Operation = __webpack_require__(137);
	var Shape = __webpack_require__(31);
	var Paginator = __webpack_require__(138);
	var ResourceWaiter = __webpack_require__(139);

	var util = __webpack_require__(5);
	var property = util.property;
	var memoizedProperty = util.memoizedProperty;

	function Api(api, options) {
	  api = api || {};
	  options = options || {};
	  options.api = this;

	  api.metadata = api.metadata || {};

	  property(this, 'isApi', true, false);
	  property(this, 'apiVersion', api.metadata.apiVersion);
	  property(this, 'endpointPrefix', api.metadata.endpointPrefix);
	  property(this, 'signingName', api.metadata.signingName);
	  property(this, 'globalEndpoint', api.metadata.globalEndpoint);
	  property(this, 'signatureVersion', api.metadata.signatureVersion);
	  property(this, 'jsonVersion', api.metadata.jsonVersion);
	  property(this, 'targetPrefix', api.metadata.targetPrefix);
	  property(this, 'protocol', api.metadata.protocol);
	  property(this, 'timestampFormat', api.metadata.timestampFormat);
	  property(this, 'xmlNamespaceUri', api.metadata.xmlNamespace);
	  property(this, 'abbreviation', api.metadata.serviceAbbreviation);
	  property(this, 'fullName', api.metadata.serviceFullName);

	  memoizedProperty(this, 'className', function() {
	    var name = api.metadata.serviceAbbreviation || api.metadata.serviceFullName;
	    if (!name) return null;

	    name = name.replace(/^Amazon|AWS\s*|\(.*|\s+|\W+/g, '');
	    if (name === 'ElasticLoadBalancing') name = 'ELB';
	    return name;
	  });

	  property(this, 'operations', new Collection(api.operations, options, function(name, operation) {
	    return new Operation(name, operation, options);
	  }, util.string.lowerFirst));

	  property(this, 'shapes', new Collection(api.shapes, options, function(name, shape) {
	    return Shape.create(shape, options);
	  }));

	  property(this, 'paginators', new Collection(api.paginators, options, function(name, paginator) {
	    return new Paginator(name, paginator, options);
	  }));

	  property(this, 'waiters', new Collection(api.waiters, options, function(name, waiter) {
	    return new ResourceWaiter(name, waiter, options);
	  }, util.string.lowerFirst));

	  if (options.documentation) {
	    property(this, 'documentation', api.documentation);
	    property(this, 'documentationUrl', api.documentationUrl);
	  }
	}

	module.exports = Api;


/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	var memoizedProperty = __webpack_require__(5).memoizedProperty;

	function memoize(name, value, fn, nameTr) {
	  memoizedProperty(this, nameTr(name), function() {
	    return fn(name, value);
	  });
	}

	function Collection(iterable, options, fn, nameTr) {
	  nameTr = nameTr || String;
	  var self = this;

	  for (var id in iterable) {
	    if (iterable.hasOwnProperty(id)) {
	      memoize.call(self, id, iterable[id], fn, nameTr);
	    }
	  }
	}

	module.exports = Collection;


/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	var Shape = __webpack_require__(31);

	var util = __webpack_require__(5);
	var property = util.property;
	var memoizedProperty = util.memoizedProperty;

	function Operation(name, operation, options) {
	  options = options || {};

	  property(this, 'name', operation.name || name);
	  property(this, 'api', options.api, false);

	  operation.http = operation.http || {};
	  property(this, 'httpMethod', operation.http.method || 'POST');
	  property(this, 'httpPath', operation.http.requestUri || '/');

	  memoizedProperty(this, 'input', function() {
	    if (!operation.input) {
	      return new Shape.create({type: 'structure'}, options);
	    }
	    return Shape.create(operation.input, options);
	  });

	  memoizedProperty(this, 'output', function() {
	    if (!operation.output) {
	      return new Shape.create({type: 'structure'}, options);
	    }
	    return Shape.create(operation.output, options);
	  });

	  memoizedProperty(this, 'errors', function() {
	    var list = [];
	    if (!operation.errors) return null;

	    for (var i = 0; i < operation.errors.length; i++) {
	      list.push(Shape.create(operation.errors[i], options));
	    }

	    return list;
	  });

	  memoizedProperty(this, 'paginator', function() {
	    return options.api.paginators[name];
	  });

	  if (options.documentation) {
	    property(this, 'documentation', operation.documentation);
	    property(this, 'documentationUrl', operation.documentationUrl);
	  }
	}

	module.exports = Operation;


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	var property = __webpack_require__(5).property;

	function Paginator(name, paginator) {
	  property(this, 'inputToken', paginator.input_token);
	  property(this, 'limitKey', paginator.limit_key);
	  property(this, 'moreResults', paginator.more_results);
	  property(this, 'outputToken', paginator.output_token);
	  property(this, 'resultKey', paginator.result_key);
	}

	module.exports = Paginator;


/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);
	var property = util.property;

	function ResourceWaiter(name, waiter, options) {
	  options = options || {};

	  function InnerResourceWaiter() {
	    property(this, 'name', name);
	    property(this, 'api', options.api, false);

	    if (waiter.operation) {
	      property(this, 'operation', util.string.lowerFirst(waiter.operation));
	    }

	    var self = this, map = {
	      ignoreErrors: 'ignore_errors',
	      successType: 'success_type',
	      successValue: 'success_value',
	      successPath: 'success_path',
	      acceptorType: 'acceptor_type',
	      acceptorValue: 'acceptor_value',
	      acceptorPath: 'acceptor_path',
	      failureType: 'failure_type',
	      failureValue: 'failure_value',
	      failurePath: 'success_path',
	      interval: 'interval',
	      maxAttempts: 'max_attempts'
	    };
	    Object.keys(map).forEach(function(key) {
	      var value = waiter[map[key]];
	      if (value) property(self, key, value);
	    });
	  }

	  if (options.api) {
	    var proto = null;
	    if (waiter['extends']) {
	      proto = options.api.waiters[waiter['extends']];
	    } else if (name !== '__default__') {
	      proto = options.api.waiters['__default__'];
	    }

	    if (proto) InnerResourceWaiter.prototype = proto;
	  }

	  return new InnerResourceWaiter();
	}

	module.exports = ResourceWaiter;


/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var util = __webpack_require__(5);
	var QueryParamSerializer = __webpack_require__(639);
	var Shape = __webpack_require__(31);

	function buildRequest(req) {
	  var operation = req.service.api.operations[req.operation];
	  var httpRequest = req.httpRequest;
	  httpRequest.headers['Content-Type'] =
	    'application/x-www-form-urlencoded; charset=utf-8';
	  httpRequest.params = {
	    Version: req.service.api.apiVersion,
	    Action: operation.name
	  };

	  // convert the request parameters into a list of query params,
	  // e.g. Deeply.NestedParam.0.Name=value
	  var builder = new QueryParamSerializer();
	  builder.serialize(req.params, operation.input, function(name, value) {
	    httpRequest.params[name] = value;
	  });
	  httpRequest.body = util.queryParamsToString(httpRequest.params);
	}

	function extractError(resp) {
	  var data, body = resp.httpResponse.body.toString();
	  if (body.match('<UnknownOperationException')) {
	    data = {
	      Code: 'UnknownOperation',
	      Message: 'Unknown operation ' + resp.request.operation
	    };
	  } else {
	    data = new AWS.XML.Parser().parse(body);
	  }

	  if (data.requestId && !resp.requestId) resp.requestId = data.requestId;
	  if (data.Errors) data = data.Errors;
	  if (data.Error) data = data.Error;
	  if (data.Code) {
	    resp.error = util.error(new Error(), {
	      code: data.Code,
	      message: data.Message
	    });
	  } else {
	    resp.error = util.error(new Error(), {
	      code: resp.httpResponse.statusCode,
	      message: null
	    });
	  }
	}

	function extractData(resp) {
	  var req = resp.request;
	  var operation = req.service.api.operations[req.operation];
	  var shape = operation.output || {};
	  var origRules = shape;

	  if (origRules.resultWrapper) {
	    var tmp = Shape.create({type: 'structure'});
	    tmp.members[origRules.resultWrapper] = shape;
	    tmp.memberNames = [origRules.resultWrapper];
	    util.property(shape, 'name', shape.resultWrapper);
	    shape = tmp;
	  }

	  var parser = new AWS.XML.Parser();

	  // TODO: Refactor XML Parser to parse RequestId from response.
	  if (shape && shape.members && !shape.members._XAMZRequestId) {
	    var requestIdShape = Shape.create(
	      { type: 'string' },
	      { api: { protocol: 'query' } },
	      'requestId'
	    );
	    shape.members._XAMZRequestId = requestIdShape;
	  }

	  var data = parser.parse(resp.httpResponse.body.toString(), shape);
	  resp.requestId = data._XAMZRequestId || data.requestId;

	  if (data._XAMZRequestId) delete data._XAMZRequestId;

	  if (origRules.resultWrapper) {
	    if (data[origRules.resultWrapper]) {
	      util.update(data, data[origRules.resultWrapper]);
	      delete data[origRules.resultWrapper];
	    }
	  }

	  resp.data = data;
	}

	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};


/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);
	var Rest = __webpack_require__(37);
	var Json = __webpack_require__(61);
	var JsonBuilder = __webpack_require__(59);
	var JsonParser = __webpack_require__(60);

	function populateBody(req) {
	  var builder = new JsonBuilder();
	  var input = req.service.api.operations[req.operation].input;

	  if (input.payload) {
	    var params = {};
	    var payloadShape = input.members[input.payload];
	    params = req.params[input.payload];
	    if (params === undefined) return;

	    if (payloadShape.type === 'structure') {
	      req.httpRequest.body = builder.build(params, payloadShape);
	    } else { // non-JSON payload
	      req.httpRequest.body = params;
	    }
	  } else {
	    req.httpRequest.body = builder.build(req.params, input);
	  }
	}

	function buildRequest(req) {
	  Rest.buildRequest(req);

	  // never send body payload on GET/HEAD/DELETE
	  if (['GET', 'HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {
	    populateBody(req);
	  }
	}

	function extractError(resp) {
	  Json.extractError(resp);
	}

	function extractData(resp) {
	  Rest.extractData(resp);

	  var req = resp.request;
	  var rules = req.service.api.operations[req.operation].output || {};
	  if (rules.payload) {
	    var payloadMember = rules.members[rules.payload];
	    var body = resp.httpResponse.body;
	    if (payloadMember.isStreaming) {
	      resp.data[rules.payload] = body;
	    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {
	      var parser = new JsonParser();
	      resp.data[rules.payload] = parser.parse(body, payloadMember);
	    } else {
	      resp.data[rules.payload] = body.toString();
	    }
	  } else {
	    var data = resp.data;
	    Json.extractData(resp);
	    resp.data = util.merge(data, resp.data);
	  }
	}

	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};


/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var util = __webpack_require__(5);
	var Rest = __webpack_require__(37);

	function populateBody(req) {
	  var input = req.service.api.operations[req.operation].input;
	  var builder = new AWS.XML.Builder();
	  var params = req.params;

	  var payload = input.payload;
	  if (payload) {
	    var payloadMember = input.members[payload];
	    params = params[payload];
	    if (params === undefined) return;

	    if (payloadMember.type === 'structure') {
	      var rootElement = payloadMember.name;
	      req.httpRequest.body = builder.toXML(params, payloadMember, rootElement, true);
	    } else { // non-xml payload
	      req.httpRequest.body = params;
	    }
	  } else {
	    req.httpRequest.body = builder.toXML(params, input, input.name ||
	      input.shape || util.string.upperFirst(req.operation) + 'Request');
	  }
	}

	function buildRequest(req) {
	  Rest.buildRequest(req);

	  // never send body payload on GET/HEAD
	  if (['GET', 'HEAD'].indexOf(req.httpRequest.method) < 0) {
	    populateBody(req);
	  }
	}

	function extractError(resp) {
	  Rest.extractError(resp);

	  var data = new AWS.XML.Parser().parse(resp.httpResponse.body.toString());
	  if (data.Errors) data = data.Errors;
	  if (data.Error) data = data.Error;
	  if (data.Code) {
	    resp.error = util.error(new Error(), {
	      code: data.Code,
	      message: data.Message
	    });
	  } else {
	    resp.error = util.error(new Error(), {
	      code: resp.httpResponse.statusCode,
	      message: null
	    });
	  }
	}

	function extractData(resp) {
	  Rest.extractData(resp);

	  var parser;
	  var req = resp.request;
	  var body = resp.httpResponse.body;
	  var operation = req.service.api.operations[req.operation];
	  var output = operation.output;

	  var payload = output.payload;
	  if (payload) {
	    var payloadMember = output.members[payload];
	    if (payloadMember.isStreaming) {
	      resp.data[payload] = body;
	    } else if (payloadMember.type === 'structure') {
	      parser = new AWS.XML.Parser();
	      resp.data[payload] = parser.parse(body.toString(), payloadMember);
	    } else {
	      resp.data[payload] = body.toString();
	    }
	  } else if (body.length > 0) {
	    parser = new AWS.XML.Parser();
	    var data = parser.parse(body.toString(), output);
	    util.update(resp.data, data);
	  }
	}

	module.exports = {
	  buildRequest: buildRequest,
	  extractError: extractError,
	  extractData: extractData
	};


/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * @api private
	 * @!method on(eventName, callback)
	 *   Registers an event listener callback for the event given by `eventName`.
	 *   Parameters passed to the callback function depend on the individual event
	 *   being triggered. See the event documentation for those parameters.
	 *
	 *   @param eventName [String] the event name to register the listener for
	 *   @param callback [Function] the listener callback function
	 *   @return [AWS.SequentialExecutor] the same object for chaining
	 */
	AWS.SequentialExecutor = AWS.util.inherit({

	  constructor: function SequentialExecutor() {
	    this._events = {};
	  },

	  /**
	   * @api private
	   */
	  listeners: function listeners(eventName) {
	    return this._events[eventName] ? this._events[eventName].slice(0) : [];
	  },

	  on: function on(eventName, listener) {
	    if (this._events[eventName]) {
	      this._events[eventName].push(listener);
	    } else {
	      this._events[eventName] = [listener];
	    }
	    return this;
	  },

	  /**
	   * @api private
	   */
	  onAsync: function onAsync(eventName, listener) {
	    listener._isAsync = true;
	    return this.on(eventName, listener);
	  },

	  removeListener: function removeListener(eventName, listener) {
	    var listeners = this._events[eventName];
	    if (listeners) {
	      var length = listeners.length;
	      var position = -1;
	      for (var i = 0; i < length; ++i) {
	        if (listeners[i] === listener) {
	          position = i;
	        }
	      }
	      if (position > -1) {
	        listeners.splice(position, 1);
	      }
	    }
	    return this;
	  },

	  removeAllListeners: function removeAllListeners(eventName) {
	    if (eventName) {
	      delete this._events[eventName];
	    } else {
	      this._events = {};
	    }
	    return this;
	  },

	  /**
	   * @api private
	   */
	  emit: function emit(eventName, eventArgs, doneCallback) {
	    if (!doneCallback) doneCallback = function() { };
	    var listeners = this.listeners(eventName);
	    var count = listeners.length;
	    this.callListeners(listeners, eventArgs, doneCallback);
	    return count > 0;
	  },

	  /**
	   * @api private
	   */
	  callListeners: function callListeners(listeners, args, doneCallback, prevError) {
	    var self = this;
	    var error = prevError || null;

	    function callNextListener(err) {
	      if (err) {
	        error = AWS.util.error(error || new Error(), err);
	        if (self._haltHandlersOnError) {
	          return doneCallback.call(self, error);
	        }
	      }
	      self.callListeners(listeners, args, doneCallback, error);
	    }

	    while (listeners.length > 0) {
	      var listener = listeners.shift();
	      if (listener._isAsync) { // asynchronous listener
	        listener.apply(self, args.concat([callNextListener]));
	        return; // stop here, callNextListener will continue
	      } else { // synchronous listener
	        try {
	          listener.apply(self, args);
	        } catch (err) {
	          error = AWS.util.error(error || new Error(), err);
	        }
	        if (error && self._haltHandlersOnError) {
	          doneCallback.call(self, error);
	          return;
	        }
	      }
	    }
	    doneCallback.call(self, error);
	  },

	  /**
	   * Adds or copies a set of listeners from another list of
	   * listeners or SequentialExecutor object.
	   *
	   * @param listeners [map<String,Array<Function>>, AWS.SequentialExecutor]
	   *   a list of events and callbacks, or an event emitter object
	   *   containing listeners to add to this emitter object.
	   * @return [AWS.SequentialExecutor] the emitter object, for chaining.
	   * @example Adding listeners from a map of listeners
	   *   emitter.addListeners({
	   *     event1: [function() { ... }, function() { ... }],
	   *     event2: [function() { ... }]
	   *   });
	   *   emitter.emit('event1'); // emitter has event1
	   *   emitter.emit('event2'); // emitter has event2
	   * @example Adding listeners from another emitter object
	   *   var emitter1 = new AWS.SequentialExecutor();
	   *   emitter1.on('event1', function() { ... });
	   *   emitter1.on('event2', function() { ... });
	   *   var emitter2 = new AWS.SequentialExecutor();
	   *   emitter2.addListeners(emitter1);
	   *   emitter2.emit('event1'); // emitter2 has event1
	   *   emitter2.emit('event2'); // emitter2 has event2
	   */
	  addListeners: function addListeners(listeners) {
	    var self = this;

	    // extract listeners if parameter is an SequentialExecutor object
	    if (listeners._events) listeners = listeners._events;

	    AWS.util.each(listeners, function(event, callbacks) {
	      if (typeof callbacks === 'function') callbacks = [callbacks];
	      AWS.util.arrayEach(callbacks, function(callback) {
	        self.on(event, callback);
	      });
	    });

	    return self;
	  },

	  /**
	   * Registers an event with {on} and saves the callback handle function
	   * as a property on the emitter object using a given `name`.
	   *
	   * @param name [String] the property name to set on this object containing
	   *   the callback function handle so that the listener can be removed in
	   *   the future.
	   * @param (see on)
	   * @return (see on)
	   * @example Adding a named listener DATA_CALLBACK
	   *   var listener = function() { doSomething(); };
	   *   emitter.addNamedListener('DATA_CALLBACK', 'data', listener);
	   *
	   *   // the following prints: true
	   *   console.log(emitter.DATA_CALLBACK == listener);
	   */
	  addNamedListener: function addNamedListener(name, eventName, callback) {
	    this[name] = callback;
	    this.addListener(eventName, callback);
	    return this;
	  },

	  /**
	   * @api private
	   */
	  addNamedAsyncListener: function addNamedAsyncListener(name, eventName, callback) {
	    callback._isAsync = true;
	    return this.addNamedListener(name, eventName, callback);
	  },

	  /**
	   * Helper method to add a set of named listeners using
	   * {addNamedListener}. The callback contains a parameter
	   * with a handle to the `addNamedListener` method.
	   *
	   * @callback callback function(add)
	   *   The callback function is called immediately in order to provide
	   *   the `add` function to the block. This simplifies the addition of
	   *   a large group of named listeners.
	   *   @param add [Function] the {addNamedListener} function to call
	   *     when registering listeners.
	   * @example Adding a set of named listeners
	   *   emitter.addNamedListeners(function(add) {
	   *     add('DATA_CALLBACK', 'data', function() { ... });
	   *     add('OTHER', 'otherEvent', function() { ... });
	   *     add('LAST', 'lastEvent', function() { ... });
	   *   });
	   *
	   *   // these properties are now set:
	   *   emitter.DATA_CALLBACK;
	   *   emitter.OTHER;
	   *   emitter.LAST;
	   */
	  addNamedListeners: function addNamedListeners(callback) {
	    var self = this;
	    callback(
	      function() {
	        self.addNamedListener.apply(self, arguments);
	      },
	      function() {
	        self.addNamedAsyncListener.apply(self, arguments);
	      }
	    );
	    return this;
	  }
	});

	/**
	 * {on} is the prefered method.
	 * @api private
	 */
	AWS.SequentialExecutor.prototype.addListener = AWS.SequentialExecutor.prototype.on;

	module.exports = AWS.SequentialExecutor;


/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.APIGateway.prototype, {
	/**
	 * Sets the Accept header to application/json.
	 *
	 * @api private
	 */
	  setAcceptHeader: function setAcceptHeader(req) {
	    var httpRequest = req.httpRequest;
	    httpRequest.headers['Accept'] = 'application/json';
	  },

	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('build', this.setAcceptHeader);
	  }
	});



/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.CloudFront.prototype, {

	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('extractData', AWS.util.hoistPayloadMember);
	  }

	});


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Constructs a service interface object. Each API operation is exposed as a
	 * function on service.
	 *
	 * ### Sending a Request Using CloudSearchDomain
	 *
	 * ```javascript
	 * var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
	 * csd.search(params, function (err, data) {
	 *   if (err) console.log(err, err.stack); // an error occurred
	 *   else     console.log(data);           // successful response
	 * });
	 * ```
	 *
	 * ### Locking the API Version
	 *
	 * In order to ensure that the CloudSearchDomain object uses this specific API,
	 * you can construct the object by passing the `apiVersion` option to the
	 * constructor:
	 *
	 * ```javascript
	 * var csd = new AWS.CloudSearchDomain({
	 *   endpoint: 'my.host.tld',
	 *   apiVersion: '2013-01-01'
	 * });
	 * ```
	 *
	 * You can also set the API version globally in `AWS.config.apiVersions` using
	 * the **cloudsearchdomain** service identifier:
	 *
	 * ```javascript
	 * AWS.config.apiVersions = {
	 *   cloudsearchdomain: '2013-01-01',
	 *   // other service API versions
	 * };
	 *
	 * var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
	 * ```
	 *
	 * @note You *must* provide an `endpoint` configuration parameter when
	 *   constructing this service. See {constructor} for more information.
	 *
	 * @!method constructor(options = {})
	 *   Constructs a service object. This object has one method for each
	 *   API operation.
	 *
	 *   @example Constructing a CloudSearchDomain object
	 *     var csd = new AWS.CloudSearchDomain({endpoint: 'my.host.tld'});
	 *   @note You *must* provide an `endpoint` when constructing this service.
	 *   @option (see AWS.Config.constructor)
	 *
	 * @service cloudsearchdomain
	 * @version 2013-01-01
	 */
	AWS.util.update(AWS.CloudSearchDomain.prototype, {
	  /**
	   * @api private
	   */
	  validateService: function validateService() {
	    if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {
	      var msg = 'AWS.CloudSearchDomain requires an explicit ' +
	                '`endpoint\' configuration option.';
	      throw AWS.util.error(new Error(),
	        {name: 'InvalidEndpoint', message: msg});
	    }
	  },

	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.removeListener('validate',
	      AWS.EventListeners.Core.VALIDATE_CREDENTIALS
	    );
	    request.onAsync('validate', this.validateCredentials);
	    request.addListener('validate', this.updateRegion);
	  },

	  /**
	   * @api private
	   */
	  validateCredentials: function(req, done) {
	    if (!req.service.api.signatureVersion) return done(); // none
	    req.service.config.getCredentials(function(err) {
	      if (err) {
	        req.removeListener('sign', AWS.EventListeners.Core.SIGN);
	      }
	      done();
	    });
	  },

	  /**
	   * @api private
	   */
	  updateRegion: function updateRegion(request) {
	    var endpoint = request.httpRequest.endpoint.hostname;
	    var zones = endpoint.split('.');
	    request.httpRequest.region = zones[1] || request.httpRequest.region;
	  }

	});


/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.CognitoIdentity.prototype, {
	  getOpenIdToken: function getOpenIdToken(params, callback) {
	    return this.makeUnauthenticatedRequest('getOpenIdToken', params, callback);
	  },

	  getId: function getId(params, callback) {
	    return this.makeUnauthenticatedRequest('getId', params, callback);
	  },

	  getCredentialsForIdentity: function getCredentialsForIdentity(params, callback) {
	    return this.makeUnauthenticatedRequest('getCredentialsForIdentity', params, callback);
	  }
	});


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	__webpack_require__(633);

	AWS.util.update(AWS.DynamoDB.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (request.service.config.dynamoDbCrc32) {
	      request.addListener('extractData', this.checkCrc32);
	    }
	  },

	  /**
	   * @api private
	   */
	  checkCrc32: function checkCrc32(resp) {
	    if (!resp.httpResponse.streaming && !resp.request.service.crc32IsValid(resp)) {
	      resp.error = AWS.util.error(new Error(), {
	        code: 'CRC32CheckFailed',
	        message: 'CRC32 integrity check failed',
	        retryable: true
	      });
	    }
	  },

	  /**
	   * @api private
	   */
	  crc32IsValid: function crc32IsValid(resp) {
	    var crc = resp.httpResponse.headers['x-amz-crc32'];
	    if (!crc) return true; // no (valid) CRC32 header
	    return parseInt(crc, 10) === AWS.util.crypto.crc32(resp.httpResponse.body);
	  },

	  /**
	   * @api private
	   */
	  defaultRetryCount: 10,

	  /**
	   * @api private
	   */
	  retryDelays: function retryDelays() {
	    var retryCount = this.numRetries();
	    var delays = [];
	    for (var i = 0; i < retryCount; ++i) {
	      if (i === 0) {
	        delays.push(0);
	      } else {
	        delays.push(50 * Math.pow(2, i - 1));
	      }
	    }
	    return delays;
	  }
	});


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.EC2.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.removeListener('extractError', AWS.EventListeners.Query.EXTRACT_ERROR);
	    request.addListener('extractError', this.extractError);

	    if (request.operation === 'copySnapshot') {
	      request.onAsync('validate', this.buildCopySnapshotPresignedUrl);
	    }
	  },

	  /**
	   * @api private
	   */
	  buildCopySnapshotPresignedUrl: function buildCopySnapshotPresignedUrl(req, done) {
	    if (req.params.PresignedUrl || req._subRequest) {
	      return done();
	    }

	    req.params = AWS.util.copy(req.params);
	    req.params.DestinationRegion = req.service.config.region;

	    var config = AWS.util.copy(req.service.config);
	    delete config.endpoint;
	    config.region = req.params.SourceRegion;
	    var svc = new req.service.constructor(config);
	    var newReq = svc[req.operation](req.params);
	    newReq._subRequest = true;
	    newReq.presign(function(err, url) {
	      if (err) done(err);
	      else {
	        req.params.PresignedUrl = url;
	        done();
	      }
	    });
	  },

	  /**
	   * @api private
	   */
	  extractError: function extractError(resp) {
	    // EC2 nests the error code and message deeper than other AWS Query services.
	    var httpResponse = resp.httpResponse;
	    var data = new AWS.XML.Parser().parse(httpResponse.body.toString() || '');
	    if (data.Errors) {
	      resp.error = AWS.util.error(new Error(), {
	        code: data.Errors.Error.Code,
	        message: data.Errors.Error.Message
	      });
	    } else {
	      resp.error = AWS.util.error(new Error(), {
	        code: httpResponse.statusCode,
	        message: null
	      });
	    }
	    resp.error.requestId = data.RequestID || null;
	  }
	});


/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.Glacier.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (Array.isArray(request._events.validate)) {
	      request._events.validate.unshift(this.validateAccountId);
	    } else {
	      request.on('validate', this.validateAccountId);
	    }
	    request.removeListener('afterBuild',
	      AWS.EventListeners.Core.COMPUTE_SHA256);
	    request.on('build', this.addGlacierApiVersion);
	    request.on('build', this.addTreeHashHeaders);
	  },

	  /**
	   * @api private
	   */
	  validateAccountId: function validateAccountId(request) {
	    if (request.params.accountId !== undefined) return;
	    request.params = AWS.util.copy(request.params);
	    request.params.accountId = '-';
	  },

	  /**
	   * @api private
	   */
	  addGlacierApiVersion: function addGlacierApiVersion(request) {
	    var version = request.service.api.apiVersion;
	    request.httpRequest.headers['x-amz-glacier-version'] = version;
	  },

	  /**
	   * @api private
	   */
	  addTreeHashHeaders: function addTreeHashHeaders(request) {
	    if (request.params.body === undefined) return;

	    var hashes = request.service.computeChecksums(request.params.body);
	    request.httpRequest.headers['X-Amz-Content-Sha256'] = hashes.linearHash;

	    if (!request.httpRequest.headers['x-amz-sha256-tree-hash']) {
	      request.httpRequest.headers['x-amz-sha256-tree-hash'] = hashes.treeHash;
	    }
	  },

	  /**
	   * @!group Computing Checksums
	   */

	  /**
	   * Computes the SHA-256 linear and tree hash checksums for a given
	   * block of Buffer data. Pass the tree hash of the computed checksums
	   * as the checksum input to the {completeMultipartUpload} when performing
	   * a multi-part upload.
	   *
	   * @example Calculate checksum of 5.5MB data chunk
	   *   var glacier = new AWS.Glacier();
	   *   var data = new Buffer(5.5 * 1024 * 1024);
	   *   data.fill('0'); // fill with zeros
	   *   var results = glacier.computeChecksums(data);
	   *   // Result: { linearHash: '68aff0c5a9...', treeHash: '154e26c78f...' }
	   * @param data [Buffer, String] data to calculate the checksum for
	   * @return [map<linearHash:String,treeHash:String>] a map containing
	   *   the linearHash and treeHash properties representing hex based digests
	   *   of the respective checksums.
	   * @see completeMultipartUpload
	   */
	  computeChecksums: function computeChecksums(data) {
	    if (!AWS.util.Buffer.isBuffer(data)) data = new AWS.util.Buffer(data);

	    var mb = 1024 * 1024;
	    var hashes = [];
	    var hash = AWS.util.crypto.createHash('sha256');

	    // build leaf nodes in 1mb chunks
	    for (var i = 0; i < data.length; i += mb) {
	      var chunk = data.slice(i, Math.min(i + mb, data.length));
	      hash.update(chunk);
	      hashes.push(AWS.util.crypto.sha256(chunk));
	    }

	    return {
	      linearHash: hash.digest('hex'),
	      treeHash: this.buildHashTree(hashes)
	    };
	  },

	  /**
	   * @api private
	   */
	  buildHashTree: function buildHashTree(hashes) {
	    // merge leaf nodes
	    while (hashes.length > 1) {
	      var tmpHashes = [];
	      for (var i = 0; i < hashes.length; i += 2) {
	        if (hashes[i + 1]) {
	          var tmpHash = new AWS.util.Buffer(64);
	          tmpHash.write(hashes[i], 0, 32, 'binary');
	          tmpHash.write(hashes[i + 1], 32, 32, 'binary');
	          tmpHashes.push(AWS.util.crypto.sha256(tmpHash));
	        } else {
	          tmpHashes.push(hashes[i]);
	        }
	      }
	      hashes = tmpHashes;
	    }

	    return AWS.util.crypto.toHex(hashes[0]);
	  }
	});


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Constructs a service interface object. Each API operation is exposed as a
	 * function on service.
	 *
	 * ### Sending a Request Using IotData
	 *
	 * ```javascript
	 * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
	 * iotdata.getThingShadow(params, function (err, data) {
	 *   if (err) console.log(err, err.stack); // an error occurred
	 *   else     console.log(data);           // successful response
	 * });
	 * ```
	 *
	 * ### Locking the API Version
	 *
	 * In order to ensure that the IotData object uses this specific API,
	 * you can construct the object by passing the `apiVersion` option to the
	 * constructor:
	 *
	 * ```javascript
	 * var iotdata = new AWS.IotData({
	 *   endpoint: 'my.host.tld',
	 *   apiVersion: '2015-05-28'
	 * });
	 * ```
	 *
	 * You can also set the API version globally in `AWS.config.apiVersions` using
	 * the **iotdata** service identifier:
	 *
	 * ```javascript
	 * AWS.config.apiVersions = {
	 *   iotdata: '2015-05-28',
	 *   // other service API versions
	 * };
	 *
	 * var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
	 * ```
	 *
	 * @note You *must* provide an `endpoint` configuration parameter when
	 *   constructing this service. See {constructor} for more information.
	 *
	 * @!method constructor(options = {})
	 *   Constructs a service object. This object has one method for each
	 *   API operation.
	 *
	 *   @example Constructing a IotData object
	 *     var iotdata = new AWS.IotData({endpoint: 'my.host.tld'});
	 *   @note You *must* provide an `endpoint` when constructing this service.
	 *   @option (see AWS.Config.constructor)
	 *
	 * @service iotdata
	 * @version 2015-05-28
	 */
	AWS.util.update(AWS.IotData.prototype, {
	    /**
	     * @api private
	     */
	    validateService: function validateService() {
	        if (!this.config.endpoint || this.config.endpoint.indexOf('{') >= 0) {
	            var msg = 'AWS.IotData requires an explicit ' +
	                '`endpoint\' configuration option.';
	            throw AWS.util.error(new Error(),
	                {name: 'InvalidEndpoint', message: msg});
	        }
	    },

	    /**
	     * @api private
	     */
	    setupRequestListeners: function setupRequestListeners(request) {
	        request.addListener('validateResponse', this.validateResponseBody)
	    },

	    /**
	     * @api private
	     */
	    validateResponseBody: function validateResponseBody(resp) {
	        var body = resp.httpResponse.body.toString() || '{}';
	        var bodyCheck = body.trim();
	        if (!bodyCheck || bodyCheck.charAt(0) !== '{') {
	            resp.httpResponse.body = '';
	        }
	    }

	});


/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.MachineLearning.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    if (request.operation === 'predict') {
	      request.addListener('build', this.buildEndpoint);
	    }
	  },

	  /**
	   * Updates request endpoint from PredictEndpoint
	   * @api private
	   */
	  buildEndpoint: function buildEndpoint(request) {
	    var url = request.params.PredictEndpoint;
	    if (url) {
	      request.httpRequest.endpoint = new AWS.Endpoint(url);
	    }
	  }

	});


/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.Route53.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.on('build', this.sanitizeUrl);
	  },

	  /**
	   * @api private
	   */
	  sanitizeUrl: function sanitizeUrl(request) {
	    var path = request.httpRequest.path;
	    request.httpRequest.path = path.replace(/\/%2F\w+%2F/, '/');
	  }
	});


/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	// Pull in managed upload extension
	__webpack_require__(644);

	AWS.util.update(AWS.S3.prototype, {
	  /**
	   * @api private
	   */
	  validateService: function validateService() {
	    // default to us-east-1 when no region is provided
	    if (!this.config.region) this.config.region = 'us-east-1';

	    if (!this.config.endpoint && this.config.s3BucketEndpoint) {
	      var msg = 'An endpoint must be provided when configuring ' +
	                '`s3BucketEndpoint` to true.';
	      throw AWS.util.error(new Error(),
	        {name: 'InvalidEndpoint', message: msg});
	    }
	  },

	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('validate', this.validateScheme);
	    request.addListener('validate', this.validateBucketEndpoint);
	    request.addListener('build', this.addContentType);
	    request.addListener('build', this.populateURI);
	    request.addListener('build', this.computeContentMd5);
	    request.addListener('build', this.computeSseCustomerKeyMd5);
	    request.addListener('afterBuild', this.addExpect100Continue);
	    request.removeListener('validate',
	      AWS.EventListeners.Core.VALIDATE_REGION);
	    request.addListener('extractError', this.extractError);
	    request.addListener('extractData', this.extractData);
	    request.addListener('extractData', AWS.util.hoistPayloadMember);
	    request.addListener('beforePresign', this.prepareSignedUrl);
	  },

	  /*
	   * @api private
	   *
	   */
	  validateScheme: function(req) {
	    var params = req.params,
	        scheme = req.httpRequest.endpoint.protocol,
	        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;
	    if (sensitive && scheme !== 'https:') {
	      var msg = 'Cannot send SSE keys over HTTP. Set \'sslEnabled\'' +
	        'to \'true\' in your configuration';
	      throw AWS.util.error(new Error(),
	        { code: 'ConfigError', message: msg });
	    }
	  },

	  /*
	   * @api private
	   *
	   */
	  validateBucketEndpoint: function(req) {
	    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {
	      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';
	      throw AWS.util.error(new Error(),
	        { code: 'ConfigError', message: msg });
	    }
	  },

	  /**
	   * S3 prefers dns-compatible bucket names to be moved from the uri path
	   * to the hostname as a sub-domain.  This is not possible, even for dns-compat
	   * buckets when using SSL and the bucket name contains a dot ('.').  The
	   * ssl wildcard certificate is only 1-level deep.
	   *
	   * @api private
	   */
	  populateURI: function populateURI(req) {
	    var httpRequest = req.httpRequest;
	    var b = req.params.Bucket;

	    if (b) {
	      if (!req.service.pathStyleBucketName(b)) {
	        if (!req.service.config.s3BucketEndpoint) {
	          httpRequest.endpoint.hostname =
	            b + '.' + httpRequest.endpoint.hostname;

	          var port = httpRequest.endpoint.port;
	          if (port !== 80 && port !== 443) {
	            httpRequest.endpoint.host = httpRequest.endpoint.hostname + ':' +
	              httpRequest.endpoint.port;
	          } else {
	            httpRequest.endpoint.host = httpRequest.endpoint.hostname;
	          }
	        }

	        httpRequest.virtualHostedBucket = b; // needed for signing the request
	        httpRequest.path = httpRequest.path.replace(new RegExp('/' + b), '');
	        if (httpRequest.path[0] !== '/') {
	          httpRequest.path = '/' + httpRequest.path;
	        }
	      }
	    }
	  },

	  /**
	   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB
	   * @api private
	   */
	  addExpect100Continue: function addExpect100Continue(req) {
	    var len = req.httpRequest.headers['Content-Length'];
	    if (AWS.util.isNode() && len >= 1024 * 1024) {
	      req.httpRequest.headers['Expect'] = '100-continue';
	    }
	  },

	  /**
	   * Adds a default content type if none is supplied.
	   *
	   * @api private
	   */
	  addContentType: function addContentType(req) {
	    var httpRequest = req.httpRequest;
	    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {
	      // Content-Type is not set in GET/HEAD requests
	      delete httpRequest.headers['Content-Type'];
	      return;
	    }

	    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type
	      httpRequest.headers['Content-Type'] = 'application/octet-stream';
	    }

	    var contentType = httpRequest.headers['Content-Type'];
	    if (AWS.util.isBrowser()) {
	      if (typeof httpRequest.body === 'string' && !contentType.match(/;\s*charset=/)) {
	        var charset = '; charset=UTF-8';
	        httpRequest.headers['Content-Type'] += charset;
	      } else {
	        var replaceFn = function(_, prefix, charsetName) {
	          return prefix + charsetName.toUpperCase();
	        };

	        httpRequest.headers['Content-Type'] =
	          contentType.replace(/(;\s*charset=)(.+)$/, replaceFn);
	      }
	    }
	  },

	  /**
	   * @api private
	   */
	  computableChecksumOperations: {
	    putBucketCors: true,
	    putBucketLifecycle: true,
	    putBucketLifecycleConfiguration: true,
	    putBucketTagging: true,
	    deleteObjects: true
	  },

	  /**
	   * Checks whether checksums should be computed for the request.
	   * If the request requires checksums to be computed, this will always
	   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}
	   * is set.
	   *
	   * @param req [AWS.Request] the request to check against
	   * @return [Boolean] whether to compute checksums for a request.
	   * @api private
	   */
	  willComputeChecksums: function willComputeChecksums(req) {
	    if (this.computableChecksumOperations[req.operation]) return true;
	    if (!this.config.computeChecksums) return false;

	    // TODO: compute checksums for Stream objects
	    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&
	        typeof req.httpRequest.body !== 'string') {
	      return false;
	    }

	    var rules = req.service.api.operations[req.operation].input.members;

	    // V4 signer uses SHA256 signatures so only compute MD5 if it is required
	    if (req.service.getSignerClass(req) === AWS.Signers.V4) {
	      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;
	    }

	    if (rules.ContentMD5 && !req.params.ContentMD5) return true;
	  },

	  /**
	   * A listener that computes the Content-MD5 and sets it in the header.
	   * @see AWS.S3.willComputeChecksums
	   * @api private
	   */
	  computeContentMd5: function computeContentMd5(req) {
	    if (req.service.willComputeChecksums(req)) {
	      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');
	      req.httpRequest.headers['Content-MD5'] = md5;
	    }
	  },

	  /**
	   * @api private
	   */
	  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {
	    var keys = {
	      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',
	      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'
	    };
	    AWS.util.each(keys, function(key, header) {
	      if (req.params[key]) {
	        var value = AWS.util.crypto.md5(req.params[key], 'base64');
	        req.httpRequest.headers[header] = value;
	      }
	    });
	  },

	  /**
	   * Returns true if the bucket name should be left in the URI path for
	   * a request to S3.  This function takes into account the current
	   * endpoint protocol (e.g. http or https).
	   *
	   * @api private
	   */
	  pathStyleBucketName: function pathStyleBucketName(bucketName) {
	    // user can force path style requests via the configuration
	    if (this.config.s3ForcePathStyle) return true;
	    if (this.config.s3BucketEndpoint) return false;

	    if (this.dnsCompatibleBucketName(bucketName)) {
	      return (this.config.sslEnabled && bucketName.match(/\./)) ? true : false;
	    } else {
	      return true; // not dns compatible names must always use path style
	    }
	  },

	  /**
	   * Returns true if the bucket name is DNS compatible.  Buckets created
	   * outside of the classic region MUST be DNS compatible.
	   *
	   * @api private
	   */
	  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {
	    var b = bucketName;
	    var domain = new RegExp(/^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/);
	    var ipAddress = new RegExp(/(\d+\.){3}\d+/);
	    var dots = new RegExp(/\.\./);
	    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;
	  },

	  /**
	   * @return [Boolean] whether response contains an error
	   * @api private
	   */
	  successfulResponse: function successfulResponse(resp) {
	    var req = resp.request;
	    var httpResponse = resp.httpResponse;
	    if (req.operation === 'completeMultipartUpload' &&
	        httpResponse.body.toString().match('<Error>')) {
	      return false;
	    } else {
	      return httpResponse.statusCode < 300;
	    }
	  },

	  /**
	   * @return [Boolean] whether the error can be retried
	   * @api private
	   */
	  retryableError: function retryableError(error, request) {
	    if (request.operation === 'completeMultipartUpload' &&
	        error.statusCode === 200) {
	      return true;
	    } else if (error && error.code === 'RequestTimeout') {
	      return true;
	    } else if (error && error.code === 'AuthorizationHeaderMalformed' &&
	        error.region && error.region != request.httpRequest.region) {
	      request.httpRequest.region = error.region;
	      return true;
	    } else {
	      var _super = AWS.Service.prototype.retryableError;
	      return _super.call(this, error, request);
	    }
	  },

	  /**
	   * Provides a specialized parser for getBucketLocation -- all other
	   * operations are parsed by the super class.
	   *
	   * @api private
	   */
	  extractData: function extractData(resp) {
	    var req = resp.request;
	    if (req.operation === 'getBucketLocation') {
	      var match = resp.httpResponse.body.toString().match(/>(.+)<\/Location/);
	      delete resp.data['_'];
	      if (match) {
	        resp.data.LocationConstraint = match[1];
	      } else {
	        resp.data.LocationConstraint = '';
	      }
	    }
	  },

	  /**
	   * Extracts an error object from the http response.
	   *
	   * @api private
	   */
	  extractError: function extractError(resp) {
	    var codes = {
	      304: 'NotModified',
	      403: 'Forbidden',
	      400: 'BadRequest',
	      404: 'NotFound'
	    };

	    var code = resp.httpResponse.statusCode;
	    var body = resp.httpResponse.body || '';
	    var requestId = resp.requestId;
	    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;
	    if (codes[code] && body.length === 0) {
	      resp.error = AWS.util.error(new Error(), {
	        code: codes[resp.httpResponse.statusCode],
	        message: null
	      });
	    } else {
	      var data = new AWS.XML.Parser().parse(body.toString());
	      resp.error = AWS.util.error(new Error(), {
	        code: data.Code || code,
	        message: data.Message || null,
	        region: data.Region || null
	      });
	    }
	    resp.error.requestId = requestId || null;
	    resp.error.extendedRequestId = extendedRequestId || null;
	  },

	  /**
	   * Get a pre-signed URL for a given operation name.
	   *
	   * @note You must ensure that you have static or previously resolved
	   *   credentials if you call this method synchronously (with no callback),
	   *   otherwise it may not properly sign the request. If you cannot guarantee
	   *   this (you are using an asynchronous credential provider, i.e., EC2
	   *   IAM roles), you should always call this method with an asynchronous
	   *   callback.
	   * @param operation [String] the name of the operation to call
	   * @param params [map] parameters to pass to the operation. See the given
	   *   operation for the expected operation parameters. In addition, you can
	   *   also pass the "Expires" parameter to inform S3 how long the URL should
	   *   work for.
	   * @option params Expires [Integer] (900) the number of seconds to expire
	   *   the pre-signed URL operation in. Defaults to 15 minutes.
	   * @param callback [Function] if a callback is provided, this function will
	   *   pass the URL as the second parameter (after the error parameter) to
	   *   the callback function.
	   * @return [String] if called synchronously (with no callback), returns the
	   *   signed URL.
	   * @return [null] nothing is returned if a callback is provided.
	   * @example Pre-signing a getObject operation (synchronously)
	   *   var params = {Bucket: 'bucket', Key: 'key'};
	   *   var url = s3.getSignedUrl('getObject', params);
	   *   console.log('The URL is', url);
	   * @example Pre-signing a putObject (asynchronously)
	   *   var params = {Bucket: 'bucket', Key: 'key'};
	   *   s3.getSignedUrl('putObject', params, function (err, url) {
	   *     console.log('The URL is', url);
	   *   });
	   * @example Pre-signing a putObject operation with a specific payload
	   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};
	   *   var url = s3.getSignedUrl('putObject', params);
	   *   console.log('The URL is', url);
	   * @example Passing in a 1-minute expiry time for a pre-signed URL
	   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};
	   *   var url = s3.getSignedUrl('getObject', params);
	   *   console.log('The URL is', url); // expires in 60 seconds
	   */
	  getSignedUrl: function getSignedUrl(operation, params, callback) {
	    params = AWS.util.copy(params || {});
	    var expires = params.Expires || 900;
	    delete params.Expires; // we can't validate this
	    var request = this.makeRequest(operation, params);
	    return request.presign(expires, callback);
	  },

	  /**
	   * @api private
	   */
	  prepareSignedUrl: function prepareSignedUrl(request) {
	    request.addListener('validate', request.service.noPresignedContentLength);
	    request.removeListener('build', request.service.addContentType);
	    if (!request.params.Body) {
	      // no Content-MD5/SHA-256 if body is not provided
	      request.removeListener('build', request.service.computeContentMd5);
	    } else {
	      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);
	    }
	  },

	  noPresignedContentLength: function noPresignedContentLength(request) {
	    if (request.params.ContentLength !== undefined) {
	      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',
	        message: 'ContentLength is not supported in pre-signed URLs.'});
	    }
	  },

	  createBucket: function createBucket(params, callback) {
	    // When creating a bucket *outside* the classic region, the location
	    // constraint must be set for the bucket and it must match the endpoint.
	    // This chunk of code will set the location constraint param based
	    // on the region (when possible), but it will not override a passed-in
	    // location constraint.
	    if (!params) params = {};
	    var hostname = this.endpoint.hostname;
	    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {
	      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };
	    }
	    return this.makeRequest('createBucket', params, callback);
	  },

	  /**
	   * @overload upload(params = {}, [options], [callback])
	   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent
	   *   concurrent handling of parts if the payload is large enough. You can
	   *   configure the concurrent queue size by setting `options`.
	   *
	   *   @param (see AWS.S3.putObject)
	   *   @option (see AWS.S3.ManagedUpload.constructor)
	   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call
	   *     `send()` or track progress.
	   *   @example Uploading a stream object
	   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};
	   *     s3.upload(params, function(err, data) {
	   *       console.log(err, data);
	   *     });
	   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb
	   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};
	   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};
	   *     s3.upload(params, options, function(err, data) {
	   *       console.log(err, data);
	   *     });
	   * @callback callback function(err, data)
	   *   @param err [Error] an error or null if no error occurred.
	   *   @param data [map] The response data from the successful upload:
	   *     * `Location` (String) the URL of the uploaded object
	   *     * `ETag` (String) the ETag of the uploaded object
	   *   @see AWS.S3.ManagedUpload
	   */
	  upload: function upload(params, options, callback) {
	    if (typeof options === 'function' && callback === undefined) {
	      callback = options;
	      options = null;
	    }

	    options = options || {};
	    options = AWS.util.merge(options || {}, {service: this, params: params});

	    var uploader = new AWS.S3.ManagedUpload(options);
	    if (typeof callback === 'function') uploader.send(callback);
	    return uploader;
	  }
	});


/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.SQS.prototype, {
	  /**
	   * @api private
	   */
	  setupRequestListeners: function setupRequestListeners(request) {
	    request.addListener('build', this.buildEndpoint);

	    if (request.service.config.computeChecksums) {
	      if (request.operation === 'sendMessage') {
	        request.addListener('extractData', this.verifySendMessageChecksum);
	      } else if (request.operation === 'sendMessageBatch') {
	        request.addListener('extractData', this.verifySendMessageBatchChecksum);
	      } else if (request.operation === 'receiveMessage') {
	        request.addListener('extractData', this.verifyReceiveMessageChecksum);
	      }
	    }
	  },

	  /**
	   * @api private
	   */
	  verifySendMessageChecksum: function verifySendMessageChecksum(response) {
	    if (!response.data) return;

	    var md5 = response.data.MD5OfMessageBody;
	    var body = this.params.MessageBody;
	    var calculatedMd5 = this.service.calculateChecksum(body);
	    if (calculatedMd5 !== md5) {
	      var msg = 'Got "' + response.data.MD5OfMessageBody +
	        '", expecting "' + calculatedMd5 + '".';
	      this.service.throwInvalidChecksumError(response,
	        [response.data.MessageId], msg);
	    }
	  },

	  /**
	   * @api private
	   */
	  verifySendMessageBatchChecksum: function verifySendMessageBatchChecksum(response) {
	    if (!response.data) return;

	    var service = this.service;
	    var entries = {};
	    var errors = [];
	    var messageIds = [];
	    AWS.util.arrayEach(response.data.Successful, function (entry) {
	      entries[entry.Id] = entry;
	    });
	    AWS.util.arrayEach(this.params.Entries, function (entry) {
	      if (entries[entry.Id]) {
	        var md5 = entries[entry.Id].MD5OfMessageBody;
	        var body = entry.MessageBody;
	        if (!service.isChecksumValid(md5, body)) {
	          errors.push(entry.Id);
	          messageIds.push(entries[entry.Id].MessageId);
	        }
	      }
	    });

	    if (errors.length > 0) {
	      service.throwInvalidChecksumError(response, messageIds,
	        'Invalid messages: ' + errors.join(', '));
	    }
	  },

	  /**
	   * @api private
	   */
	  verifyReceiveMessageChecksum: function verifyReceiveMessageChecksum(response) {
	    if (!response.data) return;

	    var service = this.service;
	    var messageIds = [];
	    AWS.util.arrayEach(response.data.Messages, function(message) {
	      var md5 = message.MD5OfBody;
	      var body = message.Body;
	      if (!service.isChecksumValid(md5, body)) {
	        messageIds.push(message.MessageId);
	      }
	    });

	    if (messageIds.length > 0) {
	      service.throwInvalidChecksumError(response, messageIds,
	        'Invalid messages: ' + messageIds.join(', '));
	    }
	  },

	  /**
	   * @api private
	   */
	  throwInvalidChecksumError: function throwInvalidChecksumError(response, ids, message) {
	    response.error = AWS.util.error(new Error(), {
	      retryable: true,
	      code: 'InvalidChecksum',
	      messageIds: ids,
	      message: response.request.operation +
	               ' returned an invalid MD5 response. ' + message
	    });
	  },

	  /**
	   * @api private
	   */
	  isChecksumValid: function isChecksumValid(checksum, data) {
	    return this.calculateChecksum(data) === checksum;
	  },

	  /**
	   * @api private
	   */
	  calculateChecksum: function calculateChecksum(data) {
	    return AWS.util.crypto.md5(data, 'hex');
	  },

	  /**
	   * @api private
	   */
	  buildEndpoint: function buildEndpoint(request) {
	    var url = request.httpRequest.params.QueueUrl;
	    if (url) {
	      request.httpRequest.endpoint = new AWS.Endpoint(url);

	      // signature version 4 requires the region name to be set,
	      // sqs queue urls contain the region name
	      var matches = request.httpRequest.endpoint.host.match(/^sqs\.(.+?)\./);
	      if (matches) request.httpRequest.region = matches[1];
	    }
	  }
	});


/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.update(AWS.STS.prototype, {
	  /**
	   * @overload credentialsFrom(data, credentials = null)
	   *   Creates a credentials object from STS response data containing
	   *   credentials information. Useful for quickly setting AWS credentials.
	   *
	   *   @note This is a low-level utility function. If you want to load temporary
	   *     credentials into your process for subsequent requests to AWS resources,
	   *     you should use {AWS.TemporaryCredentials} instead.
	   *   @param data [map] data retrieved from a call to {getFederatedToken},
	   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.
	   *   @param credentials [AWS.Credentials] an optional credentials object to
	   *     fill instead of creating a new object. Useful when modifying an
	   *     existing credentials object from a refresh call.
	   *   @return [AWS.TemporaryCredentials] the set of temporary credentials
	   *     loaded from a raw STS operation response.
	   *   @example Using credentialsFrom to load global AWS credentials
	   *     var sts = new AWS.STS();
	   *     sts.getSessionToken(function (err, data) {
	   *       if (err) console.log("Error getting credentials");
	   *       else {
	   *         AWS.config.credentials = sts.credentialsFrom(data);
	   *       }
	   *     });
	   *   @see AWS.TemporaryCredentials
	   */
	  credentialsFrom: function credentialsFrom(data, credentials) {
	    if (!data) return null;
	    if (!credentials) credentials = new AWS.TemporaryCredentials();
	    credentials.expired = false;
	    credentials.accessKeyId = data.Credentials.AccessKeyId;
	    credentials.secretAccessKey = data.Credentials.SecretAccessKey;
	    credentials.sessionToken = data.Credentials.SessionToken;
	    credentials.expireTime = data.Credentials.Expiration;
	    return credentials;
	  },

	  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {
	    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);
	  },

	  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {
	    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);
	  }
	});


/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	AWS.util.hideProperties(AWS, ['SimpleWorkflow']);

	/**
	 * @constant
	 * @readonly
	 * Backwards compatibility for access to the {AWS.SWF} service class.
	 */
	AWS.SimpleWorkflow = AWS.SWF;


/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * @api private
	 */
	AWS.Signers.V3 = inherit(AWS.Signers.RequestSigner, {
	  addAuthorization: function addAuthorization(credentials, date) {

	    var datetime = AWS.util.date.rfc822(date);

	    this.request.headers['X-Amz-Date'] = datetime;

	    if (credentials.sessionToken) {
	      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
	    }

	    this.request.headers['X-Amzn-Authorization'] =
	      this.authorization(credentials, datetime);

	  },

	  authorization: function authorization(credentials) {
	    return 'AWS3 ' +
	      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
	      'Algorithm=HmacSHA256,' +
	      'SignedHeaders=' + this.signedHeaders() + ',' +
	      'Signature=' + this.signature(credentials);
	  },

	  signedHeaders: function signedHeaders() {
	    var headers = [];
	    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
	      headers.push(h.toLowerCase());
	    });
	    return headers.sort().join(';');
	  },

	  canonicalHeaders: function canonicalHeaders() {
	    var headers = this.request.headers;
	    var parts = [];
	    AWS.util.arrayEach(this.headersToSign(), function iterator(h) {
	      parts.push(h.toLowerCase().trim() + ':' + String(headers[h]).trim());
	    });
	    return parts.sort().join('\n') + '\n';
	  },

	  headersToSign: function headersToSign() {
	    var headers = [];
	    AWS.util.each(this.request.headers, function iterator(k) {
	      if (k === 'Host' || k === 'Content-Encoding' || k.match(/^X-Amz/i)) {
	        headers.push(k);
	      }
	    });
	    return headers;
	  },

	  signature: function signature(credentials) {
	    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
	  },

	  stringToSign: function stringToSign() {
	    var parts = [];
	    parts.push(this.request.method);
	    parts.push('/');
	    parts.push('');
	    parts.push(this.canonicalHeaders());
	    parts.push(this.request.body);
	    return AWS.util.crypto.sha256(parts.join('\n'));
	  }

	});

	module.exports = AWS.Signers.V3;


/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(672)

	var md5 = toConstructor(__webpack_require__(668))
	var rmd160 = toConstructor(__webpack_require__(670))

	function toConstructor (fn) {
	  return function () {
	    var buffers = []
	    var m= {
	      update: function (data, enc) {
	        if(!Buffer.isBuffer(data)) data = new Buffer(data, enc)
	        buffers.push(data)
	        return this
	      },
	      digest: function (enc) {
	        var buf = Buffer.concat(buffers)
	        var r = fn(buf)
	        buffers = null
	        return enc ? r.toString(enc) : r
	      }
	    }
	    return m
	  }
	}

	module.exports = function (alg) {
	  if('md5' === alg) return new md5()
	  if('rmd160' === alg) return new rmd160()
	  return createHash(alg)
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	module.exports = PassThrough;

	var Transform = __webpack_require__(63);

	/*<replacement>*/
	var util = __webpack_require__(32);
	util.inherits = __webpack_require__(33);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough))
	    return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function(chunk, encoding, cb) {
	  cb(null, chunk);
	};


/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Readable;

	/*<replacement>*/
	var isArray = __webpack_require__(687);
	/*</replacement>*/


	/*<replacement>*/
	var Buffer = __webpack_require__(7).Buffer;
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	var EE = __webpack_require__(25).EventEmitter;

	/*<replacement>*/
	if (!EE.listenerCount) EE.listenerCount = function(emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	var Stream = __webpack_require__(16);

	/*<replacement>*/
	var util = __webpack_require__(32);
	util.inherits = __webpack_require__(33);
	/*</replacement>*/

	var StringDecoder;


	/*<replacement>*/
	var debug = __webpack_require__(701);
	if (debug && debug.debuglog) {
	  debug = debug.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/


	util.inherits(Readable, Stream);

	function ReadableState(options, stream) {
	  var Duplex = __webpack_require__(15);

	  options = options || {};

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = options.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~~this.highWaterMark;

	  this.buffer = [];
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;


	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex)
	    this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder)
	      StringDecoder = __webpack_require__(162).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	function Readable(options) {
	  var Duplex = __webpack_require__(15);

	  if (!(this instanceof Readable))
	    return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function(chunk, encoding) {
	  var state = this._readableState;

	  if (util.isString(chunk) && !state.objectMode) {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = new Buffer(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function(chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (util.isNullOrUndefined(chunk)) {
	    state.reading = false;
	    if (!state.ended)
	      onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var e = new Error('stream.unshift() after end event');
	      stream.emit('error', e);
	    } else {
	      if (state.decoder && !addToFront && !encoding)
	        chunk = state.decoder.write(chunk);

	      if (!addToFront)
	        state.reading = false;

	      // if we want the data now, just emit it.
	      if (state.flowing && state.length === 0 && !state.sync) {
	        stream.emit('data', chunk);
	        stream.read(0);
	      } else {
	        // update the buffer info.
	        state.length += state.objectMode ? 1 : chunk.length;
	        if (addToFront)
	          state.buffer.unshift(chunk);
	        else
	          state.buffer.push(chunk);

	        if (state.needReadable)
	          emitReadable(stream);
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}



	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended &&
	         (state.needReadable ||
	          state.length < state.highWaterMark ||
	          state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function(enc) {
	  if (!StringDecoder)
	    StringDecoder = __webpack_require__(162).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 128MB
	var MAX_HWM = 0x800000;
	function roundUpToNextPowerOf2(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2
	    n--;
	    for (var p = 1; p < 32; p <<= 1) n |= n >> p;
	    n++;
	  }
	  return n;
	}

	function howMuchToRead(n, state) {
	  if (state.length === 0 && state.ended)
	    return 0;

	  if (state.objectMode)
	    return n === 0 ? 0 : 1;

	  if (isNaN(n) || util.isNull(n)) {
	    // only flow one buffer at a time
	    if (state.flowing && state.buffer.length)
	      return state.buffer[0].length;
	    else
	      return state.length;
	  }

	  if (n <= 0)
	    return 0;

	  // If we're asking for more than the target buffer level,
	  // then raise the water mark.  Bump up to the next highest
	  // power of 2, to prevent increasing it excessively in tiny
	  // amounts.
	  if (n > state.highWaterMark)
	    state.highWaterMark = roundUpToNextPowerOf2(n);

	  // don't have that much.  return null, unless we've ended.
	  if (n > state.length) {
	    if (!state.ended) {
	      state.needReadable = true;
	      return 0;
	    } else
	      return state.length;
	  }

	  return n;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function(n) {
	  debug('read', n);
	  var state = this._readableState;
	  var nOrig = n;

	  if (!util.isNumber(n) || n > 0)
	    state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 &&
	      state.needReadable &&
	      (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended)
	      endReadable(this);
	    else
	      emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0)
	      endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  }

	  if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0)
	      state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	  }

	  // If _read pushed data synchronously, then `reading` will be false,
	  // and we need to re-evaluate how much data we can return to the user.
	  if (doRead && !state.reading)
	    n = howMuchToRead(nOrig, state);

	  var ret;
	  if (n > 0)
	    ret = fromList(n, state);
	  else
	    ret = null;

	  if (util.isNull(ret)) {
	    state.needReadable = true;
	    n = 0;
	  }

	  state.length -= n;

	  // If we have nothing in the buffer, then we want to know
	  // as soon as we *do* get something into the buffer.
	  if (state.length === 0 && !state.ended)
	    state.needReadable = true;

	  // If we tried to read() past the EOF, then emit end on the next tick.
	  if (nOrig !== n && state.ended && state.length === 0)
	    endReadable(this);

	  if (!util.isNull(ret))
	    this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!util.isBuffer(chunk) &&
	      !util.isString(chunk) &&
	      !util.isNullOrUndefined(chunk) &&
	      !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}


	function onEofChunk(stream, state) {
	  if (state.decoder && !state.ended) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync)
	      process.nextTick(function() {
	        emitReadable_(stream);
	      });
	    else
	      emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}


	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    process.nextTick(function() {
	      maybeReadMore_(stream, state);
	    });
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended &&
	         state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;
	    else
	      len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function(n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function(dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
	              dest !== process.stdout &&
	              dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted)
	    process.nextTick(endFn);
	  else
	    src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain &&
	        (!dest._writableState || dest._writableState.needDrain))
	      ondrain();
	  }

	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    var ret = dest.write(chunk);
	    if (false === ret) {
	      debug('false write response, pause',
	            src._readableState.awaitDrain);
	      src._readableState.awaitDrain++;
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EE.listenerCount(dest, 'error') === 0)
	      dest.emit('error', er);
	  }
	  // This is a brutally ugly hack to make sure that our error handler
	  // is attached before any userland ones.  NEVER DO THIS.
	  if (!dest._events || !dest._events.error)
	    dest.on('error', onerror);
	  else if (isArray(dest._events.error))
	    dest._events.error.unshift(onerror);
	  else
	    dest._events.error = [onerror, dest._events.error];



	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function() {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain)
	      state.awaitDrain--;
	    if (state.awaitDrain === 0 && EE.listenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}


	Readable.prototype.unpipe = function(dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0)
	    return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes)
	      return this;

	    if (!dest)
	      dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest)
	      dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var i = 0; i < len; i++)
	      dests[i].emit('unpipe', this);
	    return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1)
	    return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1)
	    state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function(ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  // If listening to data, and it has not explicitly been paused,
	  // then call resume to start the flow of data on the next tick.
	  if (ev === 'data' && false !== this._readableState.flowing) {
	    this.resume();
	  }

	  if (ev === 'readable' && this.readable) {
	    var state = this._readableState;
	    if (!state.readableListening) {
	      state.readableListening = true;
	      state.emittedReadable = false;
	      state.needReadable = true;
	      if (!state.reading) {
	        var self = this;
	        process.nextTick(function() {
	          debug('readable nexttick read 0');
	          self.read(0);
	        });
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function() {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    if (!state.reading) {
	      debug('resume read 0');
	      this.read(0);
	    }
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    process.nextTick(function() {
	      resume_(stream, state);
	    });
	  }
	}

	function resume_(stream, state) {
	  state.resumeScheduled = false;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading)
	    stream.read(0);
	}

	Readable.prototype.pause = function() {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  if (state.flowing) {
	    do {
	      var chunk = stream.read();
	    } while (null !== chunk && state.flowing);
	  }
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function(stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function() {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length)
	        self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function(chunk) {
	    debug('wrapped data');
	    if (state.decoder)
	      chunk = state.decoder.write(chunk);
	    if (!chunk || !state.objectMode && !chunk.length)
	      return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (util.isFunction(stream[i]) && util.isUndefined(this[i])) {
	      this[i] = function(method) { return function() {
	        return stream[method].apply(stream, arguments);
	      }}(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function(ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function(n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};



	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	function fromList(n, state) {
	  var list = state.buffer;
	  var length = state.length;
	  var stringMode = !!state.decoder;
	  var objectMode = !!state.objectMode;
	  var ret;

	  // nothing in the list, definitely empty.
	  if (list.length === 0)
	    return null;

	  if (length === 0)
	    ret = null;
	  else if (objectMode)
	    ret = list.shift();
	  else if (!n || n >= length) {
	    // read it all, truncate the array.
	    if (stringMode)
	      ret = list.join('');
	    else
	      ret = Buffer.concat(list, length);
	    list.length = 0;
	  } else {
	    // read just some of it.
	    if (n < list[0].length) {
	      // just take a part of the first list item.
	      // slice is the same for buffers and strings.
	      var buf = list[0];
	      ret = buf.slice(0, n);
	      list[0] = buf.slice(n);
	    } else if (n === list[0].length) {
	      // first list is a perfect match
	      ret = list.shift();
	    } else {
	      // complex case.
	      // we have enough to cover it, but it spans past the first buffer.
	      if (stringMode)
	        ret = '';
	      else
	        ret = new Buffer(n);

	      var c = 0;
	      for (var i = 0, l = list.length; i < l && c < n; i++) {
	        var buf = list[0];
	        var cpy = Math.min(n - c, buf.length);

	        if (stringMode)
	          ret += buf.slice(0, cpy);
	        else
	          buf.copy(ret, c, 0, cpy);

	        if (cpy < buf.length)
	          list[0] = buf.slice(cpy);
	        else
	          list.shift();

	        c += cpy;
	      }
	    }
	  }

	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0)
	    throw new Error('endReadable called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    process.nextTick(function() {
	      // Check that we didn't get one last unshift.
	      if (!state.endEmitted && state.length === 0) {
	        state.endEmitted = true;
	        stream.readable = false;
	        stream.emit('end');
	      }
	    });
	  }
	}

	function forEach (xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf (xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(7).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./apigateway": 144,
		"./apigateway.js": 144,
		"./cloudfront": 145,
		"./cloudfront.js": 145,
		"./cloudsearchdomain": 146,
		"./cloudsearchdomain.js": 146,
		"./cognitoidentity": 147,
		"./cognitoidentity.js": 147,
		"./dynamodb": 148,
		"./dynamodb.js": 148,
		"./ec2": 149,
		"./ec2.js": 149,
		"./glacier": 150,
		"./glacier.js": 150,
		"./iotdata": 151,
		"./iotdata.js": 151,
		"./machinelearning": 152,
		"./machinelearning.js": 152,
		"./route53": 153,
		"./route53.js": 153,
		"./s3": 154,
		"./s3.js": 154,
		"./sqs": 155,
		"./sqs.js": 155,
		"./sts": 156,
		"./sts.js": 156,
		"./swf": 157,
		"./swf.js": 157
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 163;


/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _classesMatter = __webpack_require__(8);

	var _classesMatter2 = _interopRequireDefault(_classesMatter);

	var request = _classesMatter2['default'].utils.request;
	var logger = _classesMatter2['default'].utils.logger;

	//Actions for applications list

	var AppsAction = (function () {
		function AppsAction() {
			_classCallCheck(this, AppsAction);
		}

		_createClass(AppsAction, [{
			key: 'get',

			//Get applications or single application
			value: function get() {
				logger.debug({ description: 'Apps get called.', action: this, func: 'get', obj: 'AppsAction' });
				return request.get(this.appsEndpoint).then(function (response) {
					logger.info({ description: 'Apps data loaded successfully.', response: response, func: 'get', obj: 'AppsAction' });
					//TODO: Return application object
					// return new Application(response);
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error getting apps data.', error: errRes, func: 'get', obj: 'AppsAction' });
					return Promise.reject(errRes);
				});
			}

			//Add an application
		}, {
			key: 'add',
			value: function add(appData) {
				logger.debug({ description: 'Application add called.', appData: appData, func: 'add', obj: 'AppsAction' });
				return _classesMatter2['default'].utils.request.post(this.appsEndpoint, appData).then(function (response) {
					logger.info({ description: 'Application added successfully.', response: response, func: 'add', obj: 'AppsAction' });
					// TODO: Return application object
					// return new Application(response);
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error adding app.', error: errRes, func: 'add', obj: 'AppsAction' });
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'appsEndpoint',

			//Call matter with name and settings
			get: function get() {
				return _classesMatter2['default'].endpoint + '/apps';
			}
		}]);

		return AppsAction;
	})();

	exports['default'] = AppsAction;
	module.exports = exports['default'];

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _classesMatter = __webpack_require__(8);

	var _classesMatter2 = _interopRequireDefault(_classesMatter);

	var logger = _classesMatter2['default'].utils.logger;
	var request = _classesMatter2['default'].utils.request;

	//Actions for templates list

	var TemplatesAction = (function () {
		function TemplatesAction() {
			_classCallCheck(this, TemplatesAction);
		}

		_createClass(TemplatesAction, [{
			key: 'get',

			//Get templates or single application
			value: function get() {
				logger.log({ description: 'Get template called.', func: 'get', obj: 'TemplatesAction' });
				return request.get(this.templatesEndpoint).then(function (response) {
					logger.log({ description: 'Templates loaded.', response: response, func: 'get', obj: 'TemplatesAction' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error getting templates.', error: errRes, func: 'get', obj: 'TemplatesAction' });
					return Promise.reject(errRes);
				});
			}

			//Add an application
		}, {
			key: 'add',
			value: function add(appData) {
				logger.log({ description: 'Add template called.', func: 'add', obj: 'TemplatesAction' });
				return request.post(this.templatesEndpoint, appData).then(function (response) {
					logger.log({ description: 'Templates added successfully.', func: 'add', obj: 'TemplatesAction' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error adding template.', error: errRes, func: 'add', obj: 'TemplatesAction' });
					return Promise.reject(errRes);
				});
			}

			//Search with partial of username
		}, {
			key: 'search',
			value: function search(query) {
				logger.log({ description: 'Search template called.', query: query, func: 'search', obj: 'TemplatesAction' });
				var searchEndpoint = this.templatesEndpoint + '/search/';
				if (query && _lodash2['default'].isString(query)) {
					searchEndpoint += query;
				}
				logger.log({ description: 'Search endpoint created.', endpoint: searchEndpoint, func: 'search', obj: 'TemplatesAction' });
				return request.get(searchEndpoint).then(function (response) {
					logger.log({ description: 'Template(s) found successfully.', response: response, endpoint: searchEndpoint, func: 'search', obj: 'TemplatesAction' });
					return response;
				})['catch'](function (errRes) {
					logger.log({ description: 'Error searching for templates.', query: query, error: errRes, endpoint: searchEndpoint, func: 'search', obj: 'TemplatesAction' });
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'templatesEndpoint',
			get: function get() {
				var endpointArray = [_classesMatter2['default'].endpoint, 'templates'];
				//Check for app groups action
				if (_lodash2['default'].has(this, 'app') && _lodash2['default'].has(this.app, 'name')) {
					// endpointArray.splice(1, 0, 'apps', this.app.name);
					logger.log({ description: 'Templates action is not currently supported for a specific application.', func: 'accountsEndpoint', obj: 'AccountsAction' });
				}
				//Create string from endpointArray
				var endpointStr = endpointArray.join('/');
				logger.log({ description: 'Templates endpoint built.', endpoint: endpointStr, func: 'templatesEndpoint', obj: 'TemplatesAction' });
				return endpointStr;
			}
		}]);

		return TemplatesAction;
	})();

	exports['default'] = TemplatesAction;
	module.exports = exports['default'];

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	//Internal libs and config

	var _config = __webpack_require__(26);

	var _config2 = _interopRequireDefault(_config);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Matter = __webpack_require__(8);

	var _Matter2 = _interopRequireDefault(_Matter);

	//Actions and Classes

	var _actionsGroupsAction = __webpack_require__(67);

	var _actionsGroupsAction2 = _interopRequireDefault(_actionsGroupsAction);

	var _Group2 = __webpack_require__(69);

	var _Group3 = _interopRequireDefault(_Group2);

	var _actionsDirectoriesAction = __webpack_require__(66);

	var _actionsDirectoriesAction2 = _interopRequireDefault(_actionsDirectoriesAction);

	var _Directory2 = __webpack_require__(68);

	var _Directory3 = _interopRequireDefault(_Directory2);

	var _actionsAccountsAction = __webpack_require__(65);

	var _actionsAccountsAction2 = _interopRequireDefault(_actionsAccountsAction);

	var _Account2 = __webpack_require__(41);

	var _Account3 = _interopRequireDefault(_Account2);

	var _Files = __webpack_require__(168);

	var _Files2 = _interopRequireDefault(_Files);

	var _File2 = __webpack_require__(167);

	var _File3 = _interopRequireDefault(_File2);

	//External Libs

	var _firebase = __webpack_require__(18);

	var _firebase2 = _interopRequireDefault(_firebase);

	//Convenience vars
	var request = _Matter2['default'].utils.request;
	var logger = _Matter2['default'].utils.logger;

	/**
	 * Application class.
	 *
	 */

	var Application = (function () {
		function Application(appData) {
			_classCallCheck(this, Application);

			//Setup application data based on input
			if (appData && _lodash2['default'].isObject(appData)) {
				_lodash2['default'].extend(this, appData);
			} else if (appData && _lodash2['default'].isString(appData)) {
				this.name = appData;
			}
			if (_firebase2['default'] && _lodash2['default'].has(_config2['default'], 'fbUrl') && _lodash2['default'].has(this, 'name')) {
				this.fbRef = new _firebase2['default'](_config2['default'].fbUrl + this.name);
			}
			// logger.debug({description: 'Application object created.', application: this, func: 'constructor', obj: 'Application'});
		}

		_createClass(Application, [{
			key: 'get',

			//Get applications or single application
			value: function get() {
				logger.debug({
					description: 'Application get called.', func: 'get', obj: 'Application'
				});
				return request.get(this.appEndpoint).then(function (response) {
					logger.info({
						description: 'Application loaded successfully.', response: response,
						application: new Application(response), func: 'get', obj: 'Application'
					});
					return new Application(response);
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error getting Application.',
						message: errRes.response.text, error: errRes,
						func: 'get', obj: 'Application'
					});
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}

			//Update an application
		}, {
			key: 'update',
			value: function update(appData) {
				logger.debug({
					description: 'Application update called.',
					func: 'update', obj: 'Application'
				});
				return request.put(this.appEndpoint, appData).then(function (response) {
					logger.info({
						description: 'Application updated successfully.',
						response: response, func: 'update', obj: 'Application'
					});
					return new Application(response);
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error updating application.',
						error: errRes, func: 'update', obj: 'Application'
					});
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}
		}, {
			key: 'addStorage',
			value: function addStorage() {
				logger.debug({
					description: 'Application add storage called.', application: this,
					func: 'addStorage', obj: 'Application'
				});
				return request.post(this.appEndpoint + '/storage', {}).then(function (response) {
					logger.info({
						description: 'Storage successfully added to application.',
						response: response, application: new Application(response),
						func: 'addStorage', obj: 'Application'
					});
					return new Application(response);
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error adding storage to application.',
						error: errRes, func: 'addStorage', obj: 'Application'
					});
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}
		}, {
			key: 'applyTemplate',
			value: function applyTemplate() {
				var _this = this;

				logger.error({
					description: 'Applying templates to existing applications is not currently supported.',
					func: 'applyTemplate', obj: 'Application'
				});
				return request.post(this.appEndpoint, {}).then(function (response) {
					logger.info({
						description: 'Template successfully applied to application.',
						response: response, application: _this,
						func: 'applyTemplate', obj: 'Application'
					});
					return new Application(response);
				})['catch'](function (errRes) {
					logger.error({
						description: 'Error applying template to application.',
						error: errRes, application: _this,
						func: 'applyTemplate', obj: 'Application'
					});
					return Promise.reject(errRes.response.text || errRes.response);
				});
			}

			//Files object that contains files methods
		}, {
			key: 'File',
			value: function File(fileData) {
				logger.debug({
					description: 'Applications file action called.',
					fileData: fileData, application: this,
					func: 'file', obj: 'Application'
				});
				return new _File3['default']({ app: this, fileData: fileData });
			}
		}, {
			key: 'User',
			value: function User(userData) {
				logger.debug({
					description: 'Applications user action called.',
					userData: userData, application: this, func: 'user',
					obj: 'Application'
				});
				return new _Account3['default']({ app: this, userData: userData });
			}
		}, {
			key: 'Account',
			value: function Account(userData) {
				logger.debug({
					description: 'Applications account action called.',
					userData: userData, application: this,
					func: 'user', obj: 'Application'
				});
				return new _Account3['default']({ app: this, userData: userData });
			}
		}, {
			key: 'Group',
			value: function Group(groupData) {
				logger.debug({
					description: 'Applications group action called.',
					groupData: groupData, application: this,
					func: 'group', obj: 'Application'
				});
				return new _Group3['default']({ app: this, groupData: groupData });
			}
		}, {
			key: 'Directory',
			value: function Directory(directoryData) {
				logger.debug({
					description: 'Applications directory action called.',
					directoryData: directoryData, application: this,
					func: 'directory', obj: 'Application'
				});
				return new _Directory3['default']({ app: this, directoryData: directoryData });
			}
		}, {
			key: 'appEndpoint',
			get: function get() {
				return _Matter2['default'].endpoint + '/apps/' + this.name;
			}
		}, {
			key: 'Files',
			get: function get() {
				logger.debug({
					description: 'Applications files action called.',
					application: this, func: 'files', obj: 'Application'
				});
				return new _Files2['default']({ app: this });
			}
		}, {
			key: 'Users',
			get: function get() {
				logger.debug({
					description: 'Applications users action called.',
					application: this, func: 'user', obj: 'Application'
				});
				return new _actionsAccountsAction2['default']({ app: this });
			}
		}, {
			key: 'Accounts',
			get: function get() {
				logger.debug({
					description: 'Applications account action called.',
					application: this, func: 'user', obj: 'Application'
				});
				return new _actionsAccountsAction2['default']({ app: this });
			}
		}, {
			key: 'Groups',
			get: function get() {
				logger.debug({
					description: 'Applications groups action called.',
					application: this, func: 'groups', obj: 'Application'
				});
				return new _actionsGroupsAction2['default']({ app: this });
			}
		}, {
			key: 'Directories',
			get: function get() {
				logger.debug({
					description: 'Applications directories action called.',
					application: this, func: 'directories', obj: 'Application'
				});
				return new _actionsDirectoriesAction2['default']({ app: this });
			}
		}]);

		return Application;
	})();

	exports['default'] = Application;
	module.exports = exports['default'];

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _config = __webpack_require__(26);

	var _config2 = _interopRequireDefault(_config);

	var _Matter = __webpack_require__(8);

	var _Matter2 = _interopRequireDefault(_Matter);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _firebase = __webpack_require__(18);

	var _firebase2 = _interopRequireDefault(_firebase);

	var _firepad = __webpack_require__(42);

	var _firepad2 = _interopRequireDefault(_firepad);

	var _awsSdk = __webpack_require__(129);

	var _awsSdk2 = _interopRequireDefault(_awsSdk);

	//Convenience vars
	var logger = _Matter2['default'].utils.logger;

	var File = (function () {
		function File(actionData) {
			_classCallCheck(this, File);

			if (actionData && _lodash2['default'].isObject(actionData) && _lodash2['default'].has(actionData, 'fileData') && _lodash2['default'].has(actionData, 'app')) {
				_lodash2['default'].extend(this, actionData.fileData);
				this.app = actionData.app;
				this.pathArray = this.path.split('/');
				//Get name from data or from pathArray
				this.name = _lodash2['default'].has(actionData.fileData, 'name') ? actionData.fileData.name : this.pathArray[this.pathArray.length - 1];
			} else if (actionData && !_lodash2['default'].isObject(actionData)) {
				logger.error({
					description: 'File data is not an object. File data must be an object that includes path and appName.',
					func: 'constructor', obj: 'File'
				});
				//TODO: Get appName from path data?
				throw new Error('File data must be an object that includes path and appName.');
			} else {
				logger.error({ description: 'File data that includes path and app is needed to create a File action.', func: 'constructor', obj: 'File' });
				throw new Error('File data with path and app is needed to create file action.');
			}
			this.type = 'file';
			logger.debug({ description: 'File object constructed.', file: this, func: 'constructor', obj: 'File' });
		}

		_createClass(File, [{
			key: 'get',
			value: function get() {
				var _this = this;

				if (!this.app || !this.app.frontend) {
					logger.log({
						description: 'Application Frontend data not available. Calling applicaiton get.', func: 'get', obj: 'File'
					});
					return this.app.get().then(function (appData) {
						_this.app = appData;
						logger.log({
							description: 'Application get successful. Getting file.',
							app: appData, func: 'get', obj: 'File'
						});
						return _this.get();
					}, function (err) {
						logger.error({
							description: 'Application Frontend data not available.',
							error: err, func: 'get', obj: 'File'
						});
						return Promise.reject({ message: 'Front end data is required to get file.' });
					});
				} else {
					var _ret = (function () {
						//If AWS Credential do not exist, set them
						if (typeof _awsSdk2['default'].config.credentials == 'undefined' || !_awsSdk2['default'].config.credentials) {
							logger.log({
								description: 'AWS creds do not exist, so they are being set.',
								func: 'publish', obj: 'File'
							});
							setAWSConfig();
						}
						var s3 = new _awsSdk2['default'].S3();
						var getData = {
							Bucket: _this.app.frontend.bucketName,
							Key: _this.path
						};
						//Set contentType from actionData to ContentType parameter of new object
						if (_this.contentType) {
							getData.ContentType = _this.contentType;
						}
						logger.debug({
							description: 'File get params built.', getData: getData,
							file: _this, func: 'get', obj: 'File'
						});
						var finalData = _this;
						return {
							v: new Promise(function (resolve, reject) {
								s3.getObject(getData, function (err, data) {
									//[TODO] Add putting object ACL (make public)
									if (!err) {
										logger.info({
											description: 'File loaded successfully.',
											data: data, func: 'get', obj: 'File'
										});
										if (_lodash2['default'].has(data, 'Body')) {
											logger.info({
												description: 'File has content.',
												content: data.Body.toString(),
												metaData: data.Metadata.toString(),
												func: 'get', obj: 'File'
											});
											finalData.content = data.Body.toString();
											logger.info({
												description: 'File content has been added to file.',
												file: finalData,
												func: 'get', obj: 'File'
											});
											resolve(finalData);
										} else {
											resolve(data);
										}
									} else {
										logger.error({
											description: 'Error loading file from S3.',
											error: err, func: 'get', obj: 'File'
										});
										return reject(err);
									}
								});
							})
						};
					})();

					if (typeof _ret === 'object') return _ret.v;
				}
			}

			//Alias for get
		}, {
			key: 'open',
			value: function open() {
				return this.get();
			}
		}, {
			key: 'publish',
			value: function publish(fileData) {
				var _this2 = this;

				//TODO: Publish file to application
				logger.debug({
					description: 'File publish called.', file: this,
					fileData: fileData, func: 'publish', obj: 'File'
				});
				if (!this.app.frontend) {
					logger.error({
						description: 'Application Frontend data not available. Make sure to call .get().',
						func: 'publish', obj: 'File'
					});
					return Promise.reject({ message: 'Front end data is required to publish file.' });
				} else {
					var _ret2 = (function () {
						if (!_lodash2['default'].has(fileData, ['content', 'path'])) {
							logger.error({
								description: 'File data including path and content required to publish.',
								func: 'publish', obj: 'File'
							});
							return {
								v: Promise.reject({ message: 'File data including path and content required to publish.' })
							};
						}
						var saveParams = {
							Bucket: _this2.app.frontend.bucketName,
							Key: fileData.path,
							Body: fileData.content,
							ACL: 'public-read'
						};
						//Set contentType from fileData to ContentType parameter of new object
						if (_this2.contentType) {
							saveParams.ContentType = _this2.contentType;
						}
						//If AWS Credential do not exist, set them
						if (typeof _awsSdk2['default'].config.credentials == 'undefined' || !_awsSdk2['default'].config.credentials) {
							logger.debug({
								description: 'AWS creds do not exist, so they are being set.',
								func: 'publish', obj: 'File'
							});
							setAWSConfig();
						}
						var s3 = new _awsSdk2['default'].S3();
						logger.debug({
							description: 'File publish params built.',
							saveParams: saveParams, fileData: _this2,
							func: 'publish', obj: 'File'
						});
						return {
							v: new Promise(function (resolve, reject) {
								s3.putObject(saveParams, function (err, data) {
									//[TODO] Add putting object ACL (make public)
									if (!err) {
										logger.log({
											description: 'File saved successfully.',
											response: data, func: 'publish', obj: 'File'
										});
										resolve(data);
									} else {
										logger.error({
											description: 'Error saving file to S3.',
											error: err, func: 'publish', obj: 'File'
										});
										reject(err);
									}
								});
							})
						};
					})();

					if (typeof _ret2 === 'object') return _ret2.v;
				}
			}
		}, {
			key: 'del',
			value: function del() {
				var _this3 = this;

				if (!this.app || !this.app.frontend) {
					logger.log({ description: 'Application Frontend data not available. Calling applicaiton get.', func: 'get', obj: 'File' });
					return this.app.get().then(function (appData) {
						_this3.app = appData;
						logger.log({ description: 'Application get successful. Getting file.', app: appData, func: 'get', obj: 'File' });
						return _this3.get();
					}, function (err) {
						logger.error({ description: 'Application Frontend data not available. Make sure to call .get().', error: err, func: 'get', obj: 'File' });
						return Promise.reject({ message: 'Front end data is required to get file.' });
					});
				} else {
					var _ret3 = (function () {
						//If AWS Credential do not exist, set them
						if (typeof _awsSdk2['default'].config.credentials == 'undefined' || !_awsSdk2['default'].config.credentials) {
							logger.debug({ description: 'AWS creds do not exist, so they are being set.', func: 'publish', obj: 'File' });
							setAWSConfig();
						}
						var s3 = new _awsSdk2['default'].S3();
						var saveParams = {
							Bucket: _this3.app.frontend.bucketName,
							Key: _this3.path
						};
						//Set contentType from actionData to ContentType parameter of new object
						if (_this3.contentType) {
							saveParams.ContentType = _this3.contentType;
						}
						logger.debug({
							description: 'File get params built.',
							saveParams: saveParams, file: _this3,
							func: 'get', obj: 'File'
						});
						return {
							v: new Promise(function (resolve, reject) {
								s3.deleteObject(saveParams, function (err, data) {
									//[TODO] Add putting object ACL (make public)
									if (!err) {
										logger.info({
											description: 'File loaded successfully.',
											fileData: data, func: 'get', obj: 'File'
										});
										if (_lodash2['default'].has(data, 'Body')) {
											logger.info({
												description: 'File has content.',
												fileData: data.Body.toString(), func: 'get', obj: 'File'
											});
											resolve(data.Body.toString());
										} else {
											resolve(data);
										}
									} else {
										logger.error({
											description: 'Error loading file from S3.',
											error: err, func: 'get', obj: 'File'
										});
										return reject(err);
									}
								});
							})
						};
					})();

					if (typeof _ret3 === 'object') return _ret3.v;
				}
			}
		}, {
			key: 'openInFirepad',
			value: function openInFirepad(editor) {
				var _this4 = this;

				//Load file contents from s3
				return new Promise(function (resolve, reject) {
					_this4.get().then(function (file) {
						logger.log({
							description: 'File contents loaded. Opening firepad.',
							editor: editor, file: file,
							func: 'openInFirepad', obj: 'File'
						});
						//Open firepad from ace with file content as default
						var firepad = file.firepadFromAce(editor);
						//Wait for firepad to be ready
						firepad.on('ready', function () {
							resolve(file);
							// firepad.setText()
						});
					}, function (err) {
						logger.error({
							description: 'Valid ace editor instance required to create firepad.',
							func: 'openInFirepad', obj: 'File', editor: editor
						});
						reject(err);
					});
				});
			}
		}, {
			key: 'firepadFromAce',
			value: function firepadFromAce(editor) {
				//TODO:Create new Firepad instance within div
				if (!editor || typeof editor.setTheme !== 'function') {
					logger.error({
						description: 'Valid ace editor instance required to create firepad.',
						func: 'fbRef', obj: 'File', editor: editor
					});
					return;
				}
				if (typeof _firepad2['default'].fromACE !== 'function') {
					logger.error({
						description: 'Firepad does not have fromACE method.',
						firepad: _firepad2['default'], func: 'fbRef', obj: 'File'
					});
					return;
				}
				var settings = {};
				if (this.content) {
					settings.defaultText = this.content;
				}
				if (_Matter2['default'].isLoggedIn && _Matter2['default'].currentUser) {
					settings.userId = _Matter2['default'].currentUser.username || _Matter2['default'].currentUser.name;
				}
				logger.log({
					description: 'Creating firepad from ace.',
					settings: settings, func: 'fbRef', obj: 'File'
				});
				return _firepad2['default'].fromACE(this.fbRef, editor, settings);
			}
		}, {
			key: 'getConnectedUsers',
			value: function getConnectedUsers() {
				var _this5 = this;

				return new Promise(function (resolve, reject) {
					_this5.fbRef.child('users').on('value', function (usersSnap) {
						if (usersSnap.val() === null) {
							resolve([]);
						} else {
							(function () {
								var usersArray = [];
								usersSnap.forEach(function (userSnap) {
									var user = userSnap.val();
									user.username = userSnap.key();
									usersArray.push(user);
								});
								logger.log({
									description: 'Connected users array built.',
									users: usersArray, func: 'connectedUsers', obj: 'File'
								});
								resolve(usersArray);
							})();
						}
					}, function (err) {
						logger.error({
							description: 'Error loading connected users.',
							error: err, func: 'connectedUsers', obj: 'File'
						});
						reject(err);
					});
				});
			}
		}, {
			key: 'getDefaultContent',
			value: function getDefaultContent() {
				//TODO: Fill with default data for matching file type
			}
		}, {
			key: 'fileType',
			get: function get() {
				if (this.ext == 'js') {
					return 'javascript';
				} else {
					return this.ext;
				}
			}
		}, {
			key: 'ext',
			get: function get() {
				var re = /(?:\.([^.]+))?$/;
				return re.exec(this.name)[1];
			}
		}, {
			key: 'safePathArray',
			get: function get() {
				var safeArray = this.pathArray.map(function (loc) {
					//Replace periods with colons and other unsafe chars as --
					return loc.replace(/[.]/g, ':').replace(/[#$\[\]]/g, '--');
				});
				logger.log({
					description: 'Safe path array created.',
					safeArray: safeArray, func: 'safePathArray', obj: 'File'
				});
				return safeArray;
			}
		}, {
			key: 'safePath',
			get: function get() {
				return this.safePathArray.join('/');
			}
		}, {
			key: 'fbUrl',
			get: function get() {
				var url = [_config2['default'].fbUrl, 'files', this.app.name, this.safePath].join('/');
				logger.log({
					description: 'File ref url generated',
					url: url, func: 'fbRef', obj: 'File'
				});
				return url;
			}
		}, {
			key: 'fbRef',
			get: function get() {
				logger.log({
					description: 'Fb ref generatating.',
					url: this.fbUrl, func: 'fbRef', obj: 'File'
				});
				return new _firebase2['default'](this.fbUrl);
			}
		}]);

		return File;
	})();

	exports['default'] = File;

	//------------------ Utility Functions ------------------//

	// AWS Config
	function setAWSConfig() {
		_awsSdk2['default'].config.update({
			credentials: new _awsSdk2['default'].CognitoIdentityCredentials({
				IdentityPoolId: _config2['default'].aws.cognito.poolId
			}),
			region: _config2['default'].aws.region
		});
	}
	module.exports = exports['default'];

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _config = __webpack_require__(26);

	var _config2 = _interopRequireDefault(_config);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var _Matter = __webpack_require__(8);

	var _Matter2 = _interopRequireDefault(_Matter);

	var _awsSdk = __webpack_require__(129);

	var _awsSdk2 = _interopRequireDefault(_awsSdk);

	//Convenience vars
	var logger = _Matter2['default'].utils.logger;

	var Files = (function () {
		function Files(filesData) {
			_classCallCheck(this, Files);

			if (filesData && _lodash2['default'].isObject(filesData) && _lodash2['default'].has(filesData, 'app')) {
				//Data is object containing directory data
				this.app = filesData.app;
			} else if (filesData && _lodash2['default'].isString(filesData)) {
				//Data is string name
				this.app = { name: filesData };
			} else if (filesData && _lodash2['default'].isArray(filesData)) {
				//TODO: Handle an array of files being passed as data
				logger.error({ description: 'Action data object with name is required to start a Files Action.', func: 'constructor', obj: 'Files' });
				throw new Error('Files Data object with application is required to start a Files action.');
			} else {
				logger.error({ description: 'Action data object with name is required to start a Files Action.', func: 'constructor', obj: 'Files' });
				throw new Error('Files Data object with name is required to start a Files action.');
			}
			logger.debug({ description: 'Files object constructed.', func: 'constructor', obj: 'Files' });
		}

		_createClass(Files, [{
			key: 'publish',
			value: function publish() {
				//TODO: Publish all files
			}
		}, {
			key: 'get',
			value: function get() {
				var _this = this;

				if (!this.app.frontend || !this.app.frontend.bucketName) {
					logger.warn({ description: 'Application Frontend data not available. Calling .get().', app: this.app, func: 'get', obj: 'Files' });
					return this.app.get().then(function (applicationData) {
						logger.log({ description: 'Application get returned.', data: applicationData, func: 'get', obj: 'Files' });
						_this.app = applicationData;
						if (_lodash2['default'].has(applicationData, 'frontend')) {
							return _this.get();
						} else {
							logger.error({
								description: 'Application does not have Frontend to get files from.',
								func: 'get', obj: 'Files'
							});
							return Promise.reject({ message: 'Application does not have frontend to get files from.' });
						}
					}, function (err) {
						logger.error({
							description: 'Application Frontend data not available. Make sure to call .get().',
							error: err, func: 'get', obj: 'Files'
						});
						return Promise.reject({ message: 'Bucket name required to get objects' });
					});
				} else {
					var _ret = (function () {
						if (typeof _awsSdk2['default'] == 'undefined') {
							logger.error({
								description: 'AWS is required to load files.',
								func: 'get', obj: 'Files'
							});
							return {
								v: Promise.reject({ message: 'AWS is required to load files.' })
							};
						}
						//If AWS Credential do not exist, set them
						if (typeof _awsSdk2['default'].config.credentials == 'undefined' || !_awsSdk2['default'].config.credentials) {
							// logger.info('AWS creds are being updated to make request');
							setAWSConfig();
						}
						var s3 = new _awsSdk2['default'].S3();
						var listParams = { Bucket: _this.app.frontend.bucketName };
						return {
							v: new Promise(function (resolve, reject) {
								s3.listObjects(listParams, function (err, data) {
									if (!err) {
										logger.info({ description: 'Files list loaded.', filesData: data, func: 'get', obj: 'Files' });
										return resolve(data.Contents);
									} else {
										logger.error({ description: 'Error getting files from S3.', error: err, func: 'get', obj: 'Files' });
										return reject(err);
									}
								});
							})
						};
					})();

					if (typeof _ret === 'object') return _ret.v;
				}
			}
		}, {
			key: 'add',
			value: function add() {
				//TODO: Add a file to files list
			}
		}, {
			key: 'del',
			value: function del() {
				//TODO: Delete a file from files list
			}
		}, {
			key: 'buildStructure',
			value: function buildStructure() {
				logger.debug({ description: 'Build Structure called.', func: 'buildStructure', obj: 'Application' });
				return this.get().then(function (filesArray) {
					var childStruct = childrenStructureFromArray(filesArray);
					//TODO: have child objects have correct classes (file/folder)
					logger.log({ description: 'Child struct from array.', childStructure: childStruct, func: 'buildStructure', obj: 'Application' });
					return childStruct;
				}, function (err) {
					logger.error({ description: 'Error getting application files.', error: err, func: 'buildStructure', obj: 'Application' });
					return Promise.reject({ message: 'Error getting files.', error: err });
				});
			}

			//ALIAS FOR buildStructure
			// get structure() {
			// 	return this.buildStructure();
			// }
		}]);

		return Files;
	})();

	exports['default'] = Files;

	//------------------ Utility Functions ------------------//

	// AWS Config
	function setAWSConfig() {
		_awsSdk2['default'].config.update({
			credentials: new _awsSdk2['default'].CognitoIdentityCredentials({
				IdentityPoolId: _config2['default'].aws.cognito.poolId
			}),
			region: _config2['default'].aws.region
		});
	}
	//Convert from array file structure (from S3) to 'children' structure used in Editor GUI (angular-tree-control)
	//Examples for two files (index.html and /testFolder/file.js):
	//Array structure: [{path:'index.html'}, {path:'testFolder/file.js'}]
	//Children Structure [{type:'folder', name:'testfolder', children:[{path:'testFolder/file.js', name:'file.js', filetype:'javascript', contentType:'application/javascript'}]}]
	function childrenStructureFromArray(fileArray) {
		// logger.log('childStructureFromArray called:', fileArray);
		//Create a object for each file that stores the file in the correct 'children' level
		var mappedStructure = fileArray.map(function (file) {
			return buildStructureObject(file);
		});
		return combineLikeObjs(mappedStructure);
	}
	//Convert file with key into a folder/file children object
	function buildStructureObject(file) {
		var pathArray;
		// console.log('buildStructureObject with:', file);
		if (_lodash2['default'].has(file, 'path')) {
			//Coming from files already having path (structure)
			pathArray = file.path.split('/');
		} else {
			//Coming from aws
			pathArray = file.Key.split('/');
			// console.log('file before pick:', file);
			file = _lodash2['default'].pick(file, 'Key');
			file.path = file.Key;
			file.name = file.Key;
		}
		var currentObj = file;
		if (pathArray.length == 1) {
			currentObj.name = pathArray[0];
			if (!_lodash2['default'].has(currentObj, 'type')) {
				currentObj.type = 'file';
			}
			currentObj.path = pathArray[0];
			return currentObj;
		} else {
			var finalObj = {};
			_lodash2['default'].each(pathArray, function (loc, ind, list) {
				if (ind != list.length - 1) {
					//Not the last loc
					currentObj.name = loc;
					currentObj.path = _lodash2['default'].take(list, ind + 1).join('/');
					currentObj.type = 'folder';
					currentObj.children = [{}];
					//TODO: Find out why this works
					if (ind == 0) {
						finalObj = currentObj;
					}
					currentObj = currentObj.children[0];
				} else {
					currentObj.type = 'file';
					currentObj.name = loc;
					currentObj.path = pathArray.join('/');
					if (file.$id) {
						currentObj.$id = file.$id;
					}
				}
			});
			return finalObj;
		}
	}
	//Recursivley combine children of object's that have the same names
	function combineLikeObjs(mappedArray) {
		var takenNames = [];
		var finishedArray = [];
		_lodash2['default'].each(mappedArray, function (obj) {
			if (takenNames.indexOf(obj.name) == -1) {
				takenNames.push(obj.name);
				finishedArray.push(obj);
			} else {
				var likeObj = _lodash2['default'].findWhere(mappedArray, { name: obj.name });
				//Combine children of like objects
				likeObj.children = _lodash2['default'].union(obj.children, likeObj.children);
				likeObj.children = combineLikeObjs(likeObj.children);
				// logger.log('extended obj:',likeObj);
			}
		});
		return finishedArray;
	}
	module.exports = exports['default'];

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _Matter = __webpack_require__(8);

	var _Matter2 = _interopRequireDefault(_Matter);

	var _lodash = __webpack_require__(6);

	var _lodash2 = _interopRequireDefault(_lodash);

	var request = _Matter2['default'].utils.request;
	var logger = _Matter2['default'].utils.logger;
	//Actions for specific user

	var Template = (function () {
		function Template(templateData) {
			_classCallCheck(this, Template);

			//Call matter with name and settings
			if (templateData && _lodash2['default'].isString(templateData)) {
				this.name = templateData;
			} else {
				logger.error({
					description: 'Template data is required to start a Template action.',
					func: 'constructor', obj: 'Template'
				});
				throw new Error('Template data is required to start a Template action.');
			}
		}

		_createClass(Template, [{
			key: 'get',

			//Get userlications or single userlication
			value: function get() {
				logger.log({ description: 'Get template called.', name: this.name, func: 'get', obj: 'Template' });
				return request.get(this.templateEndpoint).then(function (response) {
					logger.log({ description: 'Get template responded.', response: response, func: 'get', obj: 'Template' });
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error getting template.', error: errRes, func: 'get', obj: 'Template' });
					return Promise.reject(errRes);
				});
			}

			//Update an userlication
		}, {
			key: 'update',
			value: function update(templateData) {
				logger.log({ description: 'Update template called.', templateData: templateData, func: 'update', obj: 'Template' });
				return request.put(this.templateEndpoint, templateData).then(function (response) {
					logger.log({ description: 'Update template responded.', response: response, templateData: templateData, func: 'update', obj: 'Template' });
					//TODO: Return template object
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error updating template.', error: errRes, func: 'update', obj: 'Template' });
					return Promise.reject(errRes);
				});
			}

			//Delete a template
		}, {
			key: 'del',
			value: function del(templateData) {
				logger.log({ description: 'Delete template called.', templateData: templateData, func: 'del', obj: 'Template' });
				return request['delete'](this.endpoint, templateData).then(function (response) {
					logger.log({ description: 'Template deleted successfully.', response: response, func: 'del', obj: 'Template' });
					//TODO: Return template object
					return response;
				})['catch'](function (errRes) {
					logger.error({ description: 'Error deleting template.', error: errRes, func: 'del', obj: 'Template' });
					return Promise.reject(errRes);
				});
			}
		}, {
			key: 'templateEndpoint',
			get: function get() {
				return _Matter2['default'].endpoint + '/templates/' + this.name;
			}
		}]);

		return Template;
	})();

	exports['default'] = Template;
	module.exports = exports['default'];

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {"use strict";

	var URL = __webpack_require__(9);
	var CSSStyleDeclaration = __webpack_require__(85).CSSStyleDeclaration;
	var XMLHttpRequest = __webpack_require__(610).XMLHttpRequest;
	var dom = __webpack_require__(11);
	var NOT_IMPLEMENTED = __webpack_require__(75).NOT_IMPLEMENTED;
	var createFrom = __webpack_require__(3).createFrom;
	var History = __webpack_require__(172);
	var VirtualConsole = __webpack_require__(76);

	var cssSelectorSplitRE = /((?:[^,"']|"[^"]*"|'[^']*')+)/;

	function matchesDontThrow(el, selector) {
	  try {
	    return el.matches(selector);
	  } catch (e) {
	    return false;
	  }
	}

	function startTimer(window, startFn, stopFn, callback, ms) {
	  var res = startFn(callback, ms);
	  window.__timers.push([res, stopFn]);
	  return res;
	}

	function stopTimer(window, id) {
	  if (typeof id === "undefined") {
	    return;
	  }
	  for (var i in window.__timers) {
	    if (window.__timers[i][0] === id) {
	      window.__timers[i][1].call(window, id);
	      window.__timers.splice(i, 1);
	      break;
	    }
	  }
	}

	function stopAllTimers(window) {
	  window.__timers.forEach(function (t) {
	    t[1].call(window, t[0]);
	  });
	  window.__timers = [];
	}

	function Window(document) {
	  this.__timers = [];

	  // TODO: very little of this belongs on the instance; they should be prototype methods instead.

	  var window = this;
	  this._document = document;
	  this.history = new History(this);

	  this.addEventListener = function () {
	    dom.Node.prototype.addEventListener.apply(window, arguments);
	  };
	  this.removeEventListener = function () {
	    dom.Node.prototype.removeEventListener.apply(window, arguments);
	  };
	  this.dispatchEvent = function () {
	    dom.Node.prototype.dispatchEvent.apply(window, arguments);
	  };
	  this.raise = function () {
	    dom.Node.prototype.raise.apply(window.document, arguments);
	  };

	  this.setTimeout = function (fn, ms) { return startTimer(window, setTimeout, clearTimeout, fn, ms); };
	  this.setInterval = function (fn, ms) { return startTimer(window, setInterval, clearInterval, fn, ms); };
	  this.clearInterval = stopTimer.bind(this, window);
	  this.clearTimeout = stopTimer.bind(this, window);
	  this.__stopAllTimers = stopAllTimers.bind(this, window);
	  this.Image = function (width, height) {
	    var element = window._document.createElement("img");
	    element.width = width;
	    element.height = height;
	    return element;
	  };

	  this._virtualConsole = new VirtualConsole();

	  function wrapConsoleMethod(method) {
	    return function () {
	      var args = Array.prototype.slice.call(arguments);
	      window._virtualConsole.emit.apply(window._virtualConsole, [method].concat(args));
	    };
	  }

	  this.console = {
	    assert: wrapConsoleMethod("assert"),
	    clear: wrapConsoleMethod("clear"),
	    count: wrapConsoleMethod("count"),
	    debug: wrapConsoleMethod("debug"),
	    error: wrapConsoleMethod("error"),
	    group: wrapConsoleMethod("group"),
	    groupCollapse: wrapConsoleMethod("groupCollapse"),
	    groupEnd: wrapConsoleMethod("groupEnd"),
	    info: wrapConsoleMethod("info"),
	    log: wrapConsoleMethod("log"),
	    table: wrapConsoleMethod("table"),
	    time: wrapConsoleMethod("time"),
	    timeEnd: wrapConsoleMethod("timeEnd"),
	    trace: wrapConsoleMethod("trace"),
	    warn: wrapConsoleMethod("warn")
	  };

	  this.XMLHttpRequest = function () {
	    var xhr = new XMLHttpRequest();
	    var lastUrl = "";
	    xhr._open = xhr.open;
	    xhr.open = function (method, url, async, user, password) {
	      url = URL.resolve(window.document.URL, url);
	      lastUrl = url;
	      return xhr._open(method, url, async, user, password);
	    };
	    xhr._send = xhr.send;
	    xhr.send = function (data) {
	      if (window.document.cookie) {
	        var cookieDomain = window.document._cookieDomain;
	        var url = URL.parse(lastUrl);
	        var host = url.host.split(":")[0];
	        if (host.indexOf(cookieDomain, host.length - cookieDomain.length) !== -1) {
	          xhr.setDisableHeaderCheck(true);
	          xhr.setRequestHeader("cookie", window.document.cookie);
	          xhr.setDisableHeaderCheck(false);
	        }
	      }
	      return xhr._send(data);
	    };
	    return xhr;
	  };
	}

	Window.prototype = createFrom(dom || null, {
	  constructor: Window,
	  // This implements window.frames.length, since window.frames returns a
	  // self reference to the window object.  This value is incremented in the
	  // HTMLFrameElement init function (see: level2/html.js).
	  _length: 0,
	  get length() {
	    return this._length;
	  },
	  get document() {
	    return this._document;
	  },
	  get location() {
	    return this._document._location;
	  },
	  close: function () {
	    // Recursively close child frame windows, then ourselves.
	    var currentWindow = this;
	    (function windowCleaner(window) {
	      var i;
	      // We could call window.frames.length etc, but window.frames just points
	      // back to window.
	      if (window.length > 0) {
	        for (i = 0; i < window.length; i++) {
	          windowCleaner(window[i]);
	        }
	      }
	      // We"re already in our own window.close().
	      if (window !== currentWindow) {
	        window.close();
	      }
	    })(this);

	    if (this._document) {
	      if (this._document.body) {
	        this._document.body.innerHTML = "";
	      }

	      if (this._document.close) {
	        // We need to empty out the event listener array because
	        // document.close() causes "load" event to re-fire.
	        this._document._listeners = [];
	        this._document.close();
	      }
	      delete this._document;
	    }

	    stopAllTimers(currentWindow);
	    // Clean up the window"s execution context.
	    // dispose() is added by Contextify.
	    this.dispose();
	  },
	  getComputedStyle: function (node) {
	    var s = node.style,
	        cs = new CSSStyleDeclaration(),
	        forEach = Array.prototype.forEach;

	    function setPropertiesFromRule(rule) {
	      if (!rule.selectorText) {
	        return;
	      }

	      var selectors = rule.selectorText.split(cssSelectorSplitRE);
	      var matched = false;
	      selectors.forEach(function (selectorText) {
	        if (selectorText !== "" && selectorText !== "," && !matched && matchesDontThrow(node, selectorText)) {
	          matched = true;
	          forEach.call(rule.style, function (property) {
	            cs.setProperty(property, rule.style.getPropertyValue(property), rule.style.getPropertyPriority(property));
	          });
	        }
	      });
	    }

	    forEach.call(node.ownerDocument.styleSheets, function (sheet) {
	      forEach.call(sheet.cssRules, function (rule) {
	        if (rule.media) {
	          if (Array.prototype.indexOf.call(rule.media, "screen") !== -1) {
	            forEach.call(rule.cssRules, setPropertiesFromRule);
	          }
	        } else {
	          setPropertiesFromRule(rule);
	        }
	      });
	    });

	    forEach.call(s, function (property) {
	      cs.setProperty(property, s.getPropertyValue(property), s.getPropertyPriority(property));
	    });

	    return cs;
	  },

	  // TODO: all of the below data properties should be getters; right now they are shared between Window instances
	  // which is of course bad.
	  navigator: {
	    get userAgent() { return "Node.js (" + process.platform + "; U; rv:" + process.version + ")"; },
	    get appName() { return "Node.js jsDom"; },
	    get platform() { return process.platform; },
	    get appVersion() { return process.version; },
	    noUI: true,
	    get cookieEnabled() { return true; }
	  },

	  name: "nodejs",
	  innerWidth: 1024,
	  innerHeight: 768,
	  outerWidth: 1024,
	  outerHeight: 768,
	  pageXOffset: 0,
	  pageYOffset: 0,
	  screenX: 0,
	  screenY: 0,
	  screenLeft: 0,
	  screenTop: 0,
	  scrollX: 0,
	  scrollY: 0,
	  scrollTop: 0,
	  scrollLeft: 0,
	  alert: NOT_IMPLEMENTED("window.alert"),
	  blur: NOT_IMPLEMENTED("window.blur"),
	  confirm: NOT_IMPLEMENTED("window.confirm"),
	  createPopup: NOT_IMPLEMENTED("window.createPopup"),
	  focus: NOT_IMPLEMENTED("window.focus"),
	  moveBy: NOT_IMPLEMENTED("window.moveBy"),
	  moveTo: NOT_IMPLEMENTED("window.moveTo"),
	  open: NOT_IMPLEMENTED("window.open"),
	  print: NOT_IMPLEMENTED("window.print"),
	  prompt: NOT_IMPLEMENTED("window.prompt"),
	  resizeBy: NOT_IMPLEMENTED("window.resizeBy"),
	  resizeTo: NOT_IMPLEMENTED("window.resizeTo"),
	  scroll: NOT_IMPLEMENTED("window.scroll"),
	  scrollBy: NOT_IMPLEMENTED("window.scrollBy"),
	  scrollTo: NOT_IMPLEMENTED("window.scrollTo"),
	  screen: {
	    width: 0,
	    height: 0
	  },

	  // Note: these will not be necessary for newer Node.js versions, which have
	  // typed arrays in V8 and thus on every global object. (That is, in newer
	  // versions we"ll get `ArrayBuffer` just as automatically as we get
	  // `Array`.) But to support older versions, we explicitly set them here.
	  Int8Array: global.Int8Array,
	  Int16Array: global.Int16Array,
	  Int32Array: global.Int32Array,
	  Float32Array: global.Float32Array,
	  Float64Array: global.Float64Array,
	  Uint8Array: global.Uint8Array,
	  Uint8ClampedArray: global.Uint8ClampedArray,
	  Uint16Array: global.Uint16Array,
	  Uint32Array: global.Uint32Array,
	  ArrayBuffer: global.ArrayBuffer
	});

	module.exports = Window;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), (function() { return this; }())))

/***/ },
/* 171 */
/***/ function(module, exports) {

	//Tree traversing
	exports.getFirstChild = function (node) {
	  return node.childNodes[0];
	};

	exports.getChildNodes = function (node) {
	  return node.childNodes;
	};

	exports.getParentNode = function (node) {
	  return node.parentNode;
	};

	exports.getAttrList = function (node) {
	  return node.attributes;
	};

	//Node data
	exports.getTagName = function (element) {
	  return element.tagName.toLowerCase();
	};

	exports.getNamespaceURI = function (element) {
	  return element.namespaceURI || 'http://www.w3.org/1999/xhtml';
	};

	exports.getTextNodeContent = function (textNode) {
	  return textNode.nodeValue;
	};

	exports.getCommentNodeContent = function (commentNode) {
	  return commentNode.nodeValue;
	};

	exports.getDocumentTypeNodeName = function (doctypeNode) {
	  return doctypeNode.name;
	};

	exports.getDocumentTypeNodePublicId = function (doctypeNode) {
	  return doctypeNode.publicId || null;
	};

	exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
	  return doctypeNode.systemId || null;
	};

	//Node types
	exports.isTextNode = function (node) {
	  return node.nodeName === '#text';
	};

	exports.isCommentNode = function (node) {
	  return node.nodeName === '#comment';
	};

	exports.isDocumentTypeNode = function (node) {
	  return node.nodeType === 10;
	};

	exports.isElementNode = function (node) {
	  return !!node.tagName;
	};


/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";
	var URL = __webpack_require__(9);
	var resolveHref = __webpack_require__(3).resolveHref;

	function StateEntry(data, title, url) {
	  this.data = data;
	  this.title = title;
	  this.url = url;
	}

	module.exports = History;

	function History(window) {
	  this._states = [new StateEntry(null, "", window.location._url.href)];
	  this._index = 0;
	  this._window = window;
	  this._location = window.location;
	}

	History.prototype = {
	  constructor: History,

	  get length() {
	    return this._states.length;
	  },

	  get state() {
	    var state = this._states[this._index];
	    return state ? state.data : null;
	  },

	  back: function () {
	    this.go(-1);
	  },

	  forward: function () {
	    this.go(1);
	  },

	  go: function (delta) {
	    if (typeof delta === "undefined" || delta === 0) {
	      this._location.reload();
	      return;
	    }

	    var newIndex = this._index + delta;

	    if (newIndex < 0 || newIndex >= this.length) {
	      return;
	    }

	    this._index = newIndex;

	    var state = this._states[newIndex];

	    this._applyState(state);
	    this._signalPopstate(state);
	  },

	  pushState: function (data, title, url) {
	    var state = new StateEntry(data, title, url);
	    if (this._index + 1 !== this._states.length) {
	      this._states = this._states.slice(0, this._index + 1);
	    }
	    this._states.push(state);
	    this._applyState(state);
	    this._index++;
	  },

	  replaceState: function (data, title, url) {
	    var state = new StateEntry(data, title, url);
	    this._states[this._index] = state;
	    this._applyState(state);
	  },

	  _applyState: function (state) {
	    this._location._url = URL.parse(resolveHref(this._location._url.href, state.url));
	  },

	  _signalPopstate: function(state) {
	    if (this._window.document) {
	      var ev = this._window.document.createEvent("HTMLEvents");
	      ev.initEvent("popstate", false, false);
	      ev.state = state.data;
	      process.nextTick(function () {
	        this._window.dispatchEvent(ev);
	      }.bind(this));
	    }
	  },

	  toString: function () {
	    return "[object History]";
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 173 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var HtmlToDom     = __webpack_require__(74).HtmlToDom,
	    jsdom         = __webpack_require__(43),
	    defineGetter  = __webpack_require__(3).defineGetter,
	    defineSetter  = __webpack_require__(3).defineSetter,
	    Contextify    = __webpack_require__(175),
	    Window        = __webpack_require__(170);

	function windowAugmentation(document) {
	  var window = createWindow(document);

	  if (document.addEventListener) {
	    if (document.readyState == 'complete') {
	      var ev = document.createEvent('HTMLEvents');
	      ev.initEvent('load', false, false);
	      process.nextTick(function () {
	        window.dispatchEvent(ev);
	      });
	    }
	    else {
	      document.addEventListener('load', function(ev) {
	        window.dispatchEvent(ev);
	      });
	    }
	  }

	  return window;
	};

	function createWindow(document) {
	  var window = new Window(document);

	  Contextify(window);

	  // We need to set up self references using Contextify's getGlobal() so that
	  // the global object identity is correct (window === this).
	  // See Contextify README for more info.
	  var windowGlobal = window.getGlobal();

	  // Set up the window as if it's a top level window.
	  // If it's not, then references will be corrected by frame/iframe code.
	  // Note: window.frames is maintained in the HTMLFrameElement init function.
	  window.window = window.frames
	                = window.self
	                = window.parent
	                = window.top = windowGlobal;

	  return window;
	};

	/**
	 * Augments the given DOM by adding browser-specific properties and methods (BOM).
	 * Returns the augmented DOM.
	 */
	// TODO: this function is HORIBBLE. It modifies the *shared* `dom` variable with document-specific stuff.
	// We call it in `jsdom.jsdom`, i.e. per-document. The checks `if (dom._augment && ...)` just mean that it won't modify
	// the global twice *for the same options*. Bad stuff.
	//
	// None of the properties set here should be on `dom`, really.
	exports.browserAugmentation = function (dom, options) {
	  if (!options) {
	    options = {};
	  }

	  var parser = options.parser;

	  if (dom._augmented && dom._parser === parser && dom._parsingMode === options.parsingMode) {
	    return dom;
	  }

	  dom._parser = parser;
	  dom._parsingMode = options.parsingMode;
	  var htmltodom = new HtmlToDom(parser, options.parsingMode);
	  dom.Document.prototype._htmlToDom = htmltodom;
	  dom.Document.prototype._domImpl = dom.DOMImplementation;

	  defineGetter(dom.Document.prototype, 'parentWindow', function() {
	    if (!this._parentWindow) {
	      this.parentWindow = windowAugmentation(this);
	    }
	    return this._parentWindow;
	  });

	  dom._augmented = true;
	  return dom;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var URL = __webpack_require__(9);
	var resolveHref = __webpack_require__(3).resolveHref;
	var NOT_IMPLEMENTED = __webpack_require__(75).NOT_IMPLEMENTED;

	module.exports = Location;

	function Location(urlString, document) {
	  this._url = URL.parse(urlString);
	  this._document = document;
	}

	Location.prototype = {
	  constructor: Location,
	  reload: function () {
	    NOT_IMPLEMENTED("location.reload", this._document)();
	  },
	  get protocol() { return this._url.protocol || ":"; },
	  get host() { return this._url.host || ""; },
	  get auth() { return this._url.auth; },
	  get hostname() { return this._url.hostname || ""; },
	  get origin() {
	    return ((this._url.protocol !== undefined && this._url.protocol !== null) ?
	              this._url.protocol + "//" :
	              this._url.protocol) +
	        this._url.host || "";
	  },
	  get port() { return this._url.port || ""; },
	  get pathname() { return this._url.pathname || ""; },
	  get href() { return this._url.href; },
	  get hash() { return this._url.hash || ""; },
	  get search() { return this._url.search || ""; },

	  set href(val) {
	    var oldUrl = this._url.href;
	    var oldProtocol = this._url.protocol;
	    var oldHost = this._url.host;
	    var oldPathname = this._url.pathname;
	    var oldHash = this._url.hash || "";

	    this._url = URL.parse(resolveHref(oldUrl, val));
	    var newUrl = this._url.href;
	    var newProtocol = this._url.protocol;
	    var newHost = this._url.host;
	    var newPathname = this._url.pathname;
	    var newHash = this._url.hash || "";

	    if (oldProtocol === newProtocol && oldHost === newHost && oldPathname === newPathname && oldHash !== newHash) {
	      this._signalHashChange(oldUrl, newUrl);
	    } else {
	      NOT_IMPLEMENTED("location.href (no reload)", this._document)();
	    }
	  },

	  set hash(val) {
	    var oldUrl = this._url.href;
	    var oldHash = this._url.hash || "";

	    if (val.lastIndexOf("#", 0) !== 0) {
	      val = "#" + val;
	    }

	    this._url = URL.parse(resolveHref(oldUrl, val));
	    var newUrl = this._url.href;
	    var newHash = this._url.hash || "";

	    if (oldHash !== newHash) {
	      this._signalHashChange(oldUrl, newUrl);
	    }
	  },

	  set search(val) {
	    var oldUrl = this._url.href;
	    var oldHash = this._url.hash || "";
	    if (val.length) {
	      if (val.lastIndexOf("?", 0) !== 0) {
	        val = "?" + val;
	      }
	      this._url = URL.parse(resolveHref(oldUrl, val + oldHash));
	    } else {
	      this._url = URL.parse(oldUrl.replace(/\?([^#]+)/, ""));
	    }
	  },

	  replace: function (val) {
	    this.href = val;
	  },

	  toString: function () {
	    return this._url.href;
	  },

	  _signalHashChange: function (oldUrl, newUrl) {
	    var ev = this._document.createEvent("HTMLEvents");
	    ev.initEvent("hashchange", false, false);
	    ev.oldUrl = oldUrl;
	    ev.newUrl = newUrl;
	    process.nextTick(function () {
	      this._document.parentWindow.dispatchEvent(ev);
	    }.bind(this));
	  }
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var acorn = __webpack_require__(198);
	var findGlobals = __webpack_require__(195);
	var escodegen = __webpack_require__(568);

	module.exports = function (o) {
	  o.getGlobal = function () {
	    return o;
	  };

	  o.run = function (code, filename) {
	    var comments = [], tokens = [];
	    var ast = acorn.parse(code, {
	      ecmaVersion: 6,
	      allowReturnOutsideFunction: true,
	      ranges: true,
	      // collect comments in Esprima's format 
	      onComment: comments,
	      // collect token ranges 
	      onToken: tokens
	    });

	    // make sure we keep comments
	    escodegen.attachComments(ast, comments, tokens);

	    var globals = findGlobals(ast);
	    for (var i = 0; i < globals.length; ++i) {
	      if (globals[i].name === "window") {
	        continue;
	      }

	      var nodes = globals[i].nodes;
	      for (var j = 0; j < nodes.length; ++j) {
	        var type = nodes[j].type;
	        var name = nodes[j].name;
	        nodes[j].type = "MemberExpression";
	        nodes[j].property = {
	          name: name,
	          type: type
	        };
	        nodes[j].computed = false;
	        nodes[j].object = {
	          name: "window",
	          type: "Identifier"
	        };
	      }
	    }

	    code = escodegen.generate(ast, { comment: true });
	    new Function("window", code + "\n//# sourceURL=" + filename).bind(o)(o); // jshint ignore:line
	  };
	};


/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	var core         = __webpack_require__(11);
	var defineGetter = __webpack_require__(3).defineGetter;
	var defineSetter = __webpack_require__(3).defineSetter;
	var memoizeQuery = __webpack_require__(3).memoizeQuery;
	var validateQname = __webpack_require__(27).qname;
	var validateAndExtract = __webpack_require__(27).validateAndExtract;

	core.NamedNodeMap.prototype.getNamedItemNS = function(/* string */ namespaceURI,
	                                                      /* string */ localName)
	{
	  if (this._nsStore[namespaceURI] && this._nsStore[namespaceURI][localName]) {
	    return this._nsStore[namespaceURI][localName];
	  }
	  return null;
	};

	core.NamedNodeMap.prototype.setNamedItemNS = function(/* Node */ arg)
	{
	  if (this._readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }

	  if (this._ownerDocument !== arg.ownerDocument) {
	    throw new core.DOMException(core.WRONG_DOCUMENT_ERR);
	  }

	  if (arg._ownerElement) {
	    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);
	  }

	  // readonly
	  if (this._readonly === true) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }


	  if (!this._nsStore[arg.namespaceURI]) {
	    this._nsStore[arg.namespaceURI] = {};
	  }
	  var existing = null;
	  if (this._nsStore[arg.namespaceURI][arg.localName]) {
	    var existing = this._nsStore[arg.namespaceURI][arg.localName];
	  }

	  this._nsStore[arg.namespaceURI][arg.localName] = arg;

	  arg._ownerDocument = this._ownerDocument;

	  return this.setNamedItem(arg);
	};

	core.NamedNodeMap.prototype.removeNamedItemNS = function(/*string */ namespaceURI,
	                                                         /* string */ localName)
	{

	  if (this.readonly) {
	    throw new core.DOMException(core.NO_MODIFICATION_ALLOWED_ERR);
	  }


	  var parent = this._parentNode,
	      found = null,
	      defaults,
	      clone,
	      defaultEl,
	      defaultAttr;

	  if (this._nsStore[namespaceURI] &&
	      this._nsStore[namespaceURI][localName])
	  {
	    found = this._nsStore[namespaceURI][localName];
	    this.removeNamedItem(found.qualifiedName);
	    delete this._nsStore[namespaceURI][localName];
	  }

	  if (!found) {
	    throw new core.DOMException(core.NOT_FOUND_ERR);
	  }

	  return found;
	};

	core.NamedNodeMap.prototype._map = function(fn) {
	  var ret = [], l = this.length, i = 0, node;
	  for(i; i<l; i++) {
	    node = this.item(i);
	    if (fn && fn(node)) {
	      ret.push(node);
	    }
	  }
	  return ret;
	};

	core.Element.prototype.getAttribute = function(/* string */ name)
	{
	  var attr =  this.getAttributeNode(name);
	  return attr && attr.value;
	};

	core.Element.prototype.getAttributeNode = function(/* string */ name)
	{
	  return this._attributes.$getNoNS(name);
	};

	core.Element.prototype.removeAttribute = function(/* string */ name)
	{
	  return this._attributes.$removeNoNS(name);
	};

	core.Element.prototype.getAttributeNS = function(/* string */ namespaceURI,
	                                                 /* string */ localName)
	{
	  if (namespaceURI === "") {
	    namespaceURI = null;
	  }

	  var attr =  this._attributes.$getNode(namespaceURI, localName);
	  return attr && attr.value;
	};

	core.Element.prototype.setAttribute = function(/* string */ name,
	                                               /* string */ value)
	{
	  this._attributes.$setNoNS(name, value);
	};

	core.Element.prototype._setAttributeNoValidation = function (name, value) {
	  this._attributes.$setNoNS(name, value, true);
	};

	core.Element.prototype.setAttributeNS = function (namespace, name, value) {
	  namespace = namespace !== null ? String(namespace) : namespace;
	  name = String(name);
	  value = String(value);

	  var extracted = validateAndExtract(namespace, name, core);

	  this._attributes.$set(extracted.localName, value, extracted.qualifiedName, extracted.prefix, extracted.namespace);
	};

	core.Element.prototype.removeAttributeNS = function(/* string */ namespaceURI,
	                                                    /* string */ localName)
	{
	  if (namespaceURI === "") {
	    namespaceURI = null;
	  }

	  this._attributes.$remove(namespaceURI, localName);
	};

	core.Element.prototype.getAttributeNodeNS = function(/* string */ namespaceURI,
	                                                     /* string */ localName)
	{
	  if (namespaceURI === "") {
	    namespaceURI = null;
	  }

	  return this._attributes.$getNode(namespaceURI, localName);
	};

	core.Element.prototype.setAttributeNodeNS = function(/* Attr */ newAttr)
	{
	  if (newAttr.ownerElement) {
	    throw new core.DOMException(core.INUSE_ATTRIBUTE_ERR);
	  }

	  return this._attributes.$setNode(newAttr);
	};

	core.Element.prototype.getElementsByTagNameNS = memoizeQuery(function(/* String */ namespaceURI,
	                                                         /* String */ localName)
	{
	  var nsPrefixCache = {};

	  function filterByTagName(child) {
	    var localMatch = child.localName === localName,
	        nsMatch    = child.namespaceURI === namespaceURI;

	    if ((localMatch || localName === "*") &&
	        (nsMatch || namespaceURI === "*"))
	    {
	      if (child.nodeType === child.ELEMENT_NODE) {
	        return true;
	      }
	    }
	    return false;
	  }

	  return new core.NodeList(this.ownerDocument || this,
	                           core.mapper(this, filterByTagName));
	});

	core.Element.prototype.hasAttribute = function(/* string */name)
	{
	  if (!this._attributes) {
	    return false;
	  }

	  // Note: you might think you only need the latter condition. However, it makes a test case fail.
	  // HOWEVER, that test case is for a XML DTD feature called "default attributes" that never was implemented by
	  // browsers, so when we remove default attributes, we should be able to fix this code too.
	  return !!this._attributes.$getNoNS(name) || !!this._attributes.$getNoNS(name.toLowerCase());
	};

	core.Element.prototype.hasAttributeNS = function(/* string */namespaceURI,
	                                                 /* string */localName)
	{
	  if (namespaceURI === "") {
	    namespaceURI = null;
	  }

	  return (this._attributes.getNamedItemNS(namespaceURI, localName) ||
	          this.hasAttribute(localName));
	};

	core.Document.prototype.importNode = function(/* Node */ importedNode,
	                                              /* bool */ deep)
	{
	  if (importedNode && importedNode.nodeType) {
	    if (importedNode.nodeType === this.DOCUMENT_NODE ||
	        importedNode.nodeType === this.DOCUMENT_TYPE_NODE) {
	      throw new core.DOMException(core.NOT_SUPPORTED_ERR);
	    }
	  }

	  var self = this,
	      newNode = importedNode.cloneNode(deep, function(a, b) {
	        b._prefix        = a._prefix;
	        b._namespaceURI  = a._namespaceURI;
	        b._localName     = a._localName;
	      });

	  function lastChance(el) {
	    var attr, defaultEl, i, len;

	    el._ownerDocument = self;
	    if (el.id) {
	      if (!self._ids) {self._ids = {};}
	      if (!self._ids[el.id]) {self._ids[el.id] = [];}
	      self._ids[el.id].push(el);
	    }
	    if (el._attributes) {
	      var drop = [];
	      el._attributes._ownerDocument = self;
	      for (i=0,len=el._attributes.length; i < len; i++) {
	        attr = el._attributes[i];
	        attr._ownerDocument = self;
	      }

	      // Remove obsolete default nodes.
	      for(i = 0; i < drop.length; ++i) {
	        el._attributes.$removeNode(drop[i]);
	      }

	    }
	  }

	  if (deep) {
	    core.visitTree(newNode, lastChance);
	  }
	  else {
	    lastChance(newNode);
	  }

	  return newNode;
	};

	core.Document.prototype.createElementNS = function (namespace, qualifiedName) {
	  namespace = namespace !== null ? String(namespace) : namespace;
	  qualifiedName = String(qualifiedName);

	  var extracted = validateAndExtract(namespace, qualifiedName, core);
	  var element = this.createElement(extracted.localName);
	  element._namespaceURI = extracted.namespace;
	  element._prefix = extracted.prefix;

	  return element;
	};

	core.Document.prototype.createAttributeNS = function (namespace, qualifiedName) {
	  namespace = namespace !== null ? String(namespace) : namespace;
	  qualifiedName = String(qualifiedName);

	  var extracted = validateAndExtract(namespace, qualifiedName, core);
	  attribute = this.createAttribute(extracted.qualifiedName);

	  attribute._namespaceURI = extracted.namespace;
	  attribute._prefix = extracted.prefix;
	  attribute._localName = extracted.localName;
	  attribute._name = extracted.qualifiedName;

	  return attribute;
	};

	core.Document.prototype.getElementsByTagNameNS = function(/* String */ namespaceURI,
	                                                          /* String */ localName)
	{
	  return core.Element.prototype.getElementsByTagNameNS.call(this,
	                                                            namespaceURI,
	                                                            localName);
	};

	core.Document.prototype.getElementById = function(id) {
	  // return the first element
	  return (this._ids && this._ids[id] && this._ids[id].length > 0 ? this._ids[id][0] : null);
	};


/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	/* DOM Level2 Events implemented as described here:
	 *
	 * http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html
	 *
	 */
	var core = __webpack_require__(11),
	    utils = __webpack_require__(3),
	    defineGetter = utils.defineGetter,
	    defineSetter = utils.defineSetter,
	    inheritFrom = utils.inheritFrom;

	core.EventException = function() {
	    if (arguments.length > 0) {
	        this._code = arguments[0];
	    } else {
	        this._code = 0;
	    }
	    if (arguments.length > 1) {
	        this._message = arguments[1];
	    } else {
	        this._message = "Unspecified event type";
	    }
	    Error.call(this, this._message);
	    if (Error.captureStackTrace) {
	        Error.captureStackTrace(this, core.EventException);
	    }
	};
	inheritFrom(Error, core.EventException, {
	  UNSPECIFIED_EVENT_TYPE_ERR : 0,
	  get code() { return this._code;}
	});

	core.Event = function(eventType) {
	    this._eventType = eventType;
	    this._type = null;
	    this._bubbles = null;
	    this._cancelable = null;
	    this._target = null;
	    this._currentTarget = null;
	    this._eventPhase = 0;
	    this._timeStamp = null;
	    this._preventDefault = false;
	    this._stopPropagation = false;
	};
	core.Event.prototype = {
	    initEvent: function(type, bubbles, cancelable) {
	        this._type = type;
	        this._bubbles = bubbles;
	        this._cancelable = cancelable;
	    },
	    preventDefault: function() {
	        if (this._cancelable) {
	            this._preventDefault = true;
	        }
	    },
	    stopPropagation: function() {
	        this._stopPropagation = true;
	    },
	    NONE            : 0,
	    CAPTURING_PHASE : 1,
	    AT_TARGET       : 2,
	    BUBBLING_PHASE  : 3,
	    get eventType() { return this._eventType; },
	    get type() { return this._type; },
	    get bubbles() { return this._bubbles; },
	    get cancelable() { return this._cancelable; },
	    get target() { return this._target; },
	    get currentTarget() { return this._currentTarget; },
	    get eventPhase() { return this._eventPhase; },
	    get timeStamp() { return this._timeStamp; }
	};


	core.UIEvent = function(eventType) {
	    core.Event.call(this, eventType);
	    this.view = null;
	    this.detail = null;
	};
	inheritFrom(core.Event, core.UIEvent, {
	    initUIEvent: function(type, bubbles, cancelable, view, detail) {
	        this.initEvent(type, bubbles, cancelable);
	        this.view = view;
	        this.detail = detail;
	    },
	});


	core.MouseEvent = function(eventType) {
	    core.UIEvent.call(this, eventType);
	    this.screenX = null;
	    this.screenY = null;
	    this.clientX = null;
	    this.clientY = null;
	    this.ctrlKey = null;
	    this.shiftKey = null;
	    this.altKey = null;
	    this.metaKey = null;
	    this.button = null;
	    this.relatedTarget = null;
	};
	inheritFrom(core.UIEvent, core.MouseEvent, {
	    initMouseEvent:   function(type,
	                               bubbles,
	                               cancelable,
	                               view,
	                               detail,
	                               screenX,
	                               screenY,
	                               clientX,
	                               clientY,
	                               ctrlKey,
	                               altKey,
	                               shiftKey,
	                               metaKey,
	                               button,
	                               relatedTarget) {
	        this.initUIEvent(type, bubbles, cancelable, view, detail);
	        this.screenX  = screenX
	        this.screenY  = screenY
	        this.clientX  = clientX
	        this.clientY  = clientY
	        this.ctrlKey  = ctrlKey
	        this.shiftKey  = shiftKey
	        this.altKey  = altKey
	        this.metaKey  = metaKey
	        this.button  = button
	        this.relatedTarget  = relatedTarget
	    }
	});


	core.MutationEvent = function(eventType) {
	    core.Event.call(this, eventType);
	    this.relatedNode = null;
	    this.prevValue = null;
	    this.newValue = null;
	    this.attrName = null;
	    this.attrChange = null;
	};
	inheritFrom(core.Event, core.MutationEvent, {
	    initMutationEvent:   function(type,
	                                  bubbles,
	                                  cancelable,
	                                  relatedNode,
	                                  prevValue,
	                                  newValue,
	                                  attrName,
	                                  attrChange) {
	        this.initEvent(type, bubbles, cancelable);
	        this.relatedNode = relatedNode;
	        this.prevValue = prevValue;
	        this.newValue = newValue;
	        this.attrName = attrName;
	        this.attrChange = attrChange;
	    },
	    MODIFICATION : 1,
	    ADDITION     : 2,
	    REMOVAL      : 3
	});

	core.EventTarget = function() {};

	function getListeners(target, type, capturing) {
	    var listeners = target._listeners
	            && target._listeners[type]
	            && target._listeners[type][capturing] || [];
	    if (!capturing) {
	        var traditionalHandler = target['on' + type];
	        if (traditionalHandler) {
	            var implementation = (target._ownerDocument ? target._ownerDocument.implementation
	                                                        : target.document.implementation);

	            if (implementation._hasFeature('ProcessExternalResources', 'script')) {
	                if (listeners.indexOf(traditionalHandler) < 0) {
	                    listeners.push(traditionalHandler);
	                }
	            }
	        }
	    }
	    return listeners;
	}

	function dispatchPhase(event, iterator) {
	    var target = iterator();

	    while (target && !event._stopPropagation) {
	        if (event._eventPhase === event.CAPTURING_PHASE || event._eventPhase === event.AT_TARGET) {
	            callListeners(event, target, getListeners(target, event._type, true));
	        }
	        if (event._eventPhase === event.AT_TARGET || event._eventPhase === event.BUBBLING_PHASE) {
	            callListeners(event, target, getListeners(target, event._type, false));
	        }
	        target = iterator();
	    }
	}

	function callListeners(event, target, listeners) {
	    var currentListener = listeners.length;
	    while (currentListener--) {
	        event._currentTarget = target;
	        try {
	          listeners[currentListener].call(target, event);
	        } catch (e) {
	          target.raise(
	            'error', "Dispatching event '" + event._type + "' failed",
	            {error: e, event: event}
	          );
	        }
	    }
	}

	function forwardIterator(list) {
	  var i = 0, len = list.length;
	  return function iterator() { return i < len ? list[i++] : null };
	}

	function backwardIterator(list) {
	  var i = list.length;
	  return function iterator() { return i >=0 ? list[--i] : null };
	}

	function singleIterator(obj) {
	  var i = 1;
	  return function iterator() { return i-- ? obj : null };
	}

	core.EventTarget.prototype = {
	    addEventListener: function(type, listener, capturing) {
	        this._listeners = this._listeners || {};
	        var listeners = this._listeners[type] || {};
	        capturing = (capturing === true);
	        var capturingListeners = listeners[capturing] || [];
	        for (var i=0; i < capturingListeners.length; i++) {
	            if (capturingListeners[i] === listener) {
	                return;
	            }
	        }
	        capturingListeners.push(listener);
	        listeners[capturing] = capturingListeners;
	        this._listeners[type] = listeners;
	    },

	    removeEventListener: function(type, listener, capturing) {
	        var listeners  = this._listeners && this._listeners[type];
	        if (!listeners) return;
	        var capturingListeners = listeners[(capturing === true)];
	        if (!capturingListeners) return;
	        for (var i=0; i < capturingListeners.length; i++) {
	            if (capturingListeners[i] === listener) {
	                capturingListeners.splice(i, 1);
	                return;
	            }
	        }
	    },

	    dispatchEvent: function(event) {
	        if (event == null) {
	            throw new core.EventException(0, "Null event");
	        }
	        if (event._type == null || event._type == "") {
	            throw new core.EventException(0, "Uninitialized event");
	        }

	        var targetList = [];

	        event._target = this;

	        //per the spec we gather the list of targets first to ensure
	        //against dom modifications during actual event dispatch
	        var target = this,
	            targetParent = target._parentNode;
	        while (targetParent) {
	            targetList.push(targetParent);
	            target = targetParent;
	            targetParent = target._parentNode;
	        }
	        targetParent = target._parentWindow;
	        if (targetParent) {
	            targetList.push(targetParent);
	        }

	        var iterator = backwardIterator(targetList);

	        event._eventPhase = event.CAPTURING_PHASE;
	        dispatchPhase(event, iterator);

	        iterator = singleIterator(event._target);
	        event._eventPhase = event.AT_TARGET;
	        dispatchPhase(event, iterator);

	        if (event._bubbles) {
	            iterator = forwardIterator(targetList);
	            event._eventPhase = event.BUBBLING_PHASE;
	            dispatchPhase(event, iterator);
	        }

	        event._currentTarget = null;
	        event._eventPhase = event.NONE;

	        return !event._preventDefault;
	    }

	};

	// Reinherit class heirarchy with EventTarget at its root
	inheritFrom(core.EventTarget, core.Node, core.Node.prototype);

	// Node
	inheritFrom(core.Node, core.Attr, core.Attr.prototype);
	inheritFrom(core.Node, core.Document, core.Document.prototype);
	inheritFrom(core.Node, core.DocumentFragment, core.DocumentFragment.prototype);
	inheritFrom(core.Node, core.Element, core.Element.prototype);


	function getDocument(el) {
	  return el.nodeType == core.Node.DOCUMENT_NODE ? el : el._ownerDocument;
	}

	function mutationEventsEnabled(el) {
	  return el.nodeType != core.Node.ATTRIBUTE_NODE &&
	         getDocument(el).implementation._hasFeature('MutationEvents');
	}

	var insertBefore_super = core.Node.prototype.insertBefore;
	core.Node.prototype.insertBefore = function(newChild, refChild) {
	  var ret = insertBefore_super.apply(this, arguments);
	  if (mutationEventsEnabled(this)) {
	    var doc = getDocument(this),
	        ev = doc.createEvent("MutationEvents");

	    ev.initMutationEvent("DOMNodeInserted", true, false, this, null, null, null, null);
	    newChild.dispatchEvent(ev);
	    if (this.nodeType == core.Node.DOCUMENT_NODE || this._attachedToDocument) {
	      ev = doc.createEvent("MutationEvents");
	      ev.initMutationEvent("DOMNodeInsertedIntoDocument", false, false, null, null, null, null, null);
	      core.visitTree(newChild, function(el) {
	        if (el.nodeType == core.Node.ELEMENT_NODE) {
	          el.dispatchEvent(ev);
	          el._attachedToDocument = true;
	        }
	      });
	    }
	  }
	  return ret;
	};

	var removeChild_super = core.Node.prototype.removeChild;
	core.Node.prototype.removeChild = function (oldChild) {
	  if (mutationEventsEnabled(this)) {
	    var doc = getDocument(this),
	        ev = doc.createEvent("MutationEvents");

	    ev.initMutationEvent("DOMNodeRemoved", true, false, this, null, null, null, null);
	    oldChild.dispatchEvent(ev);

	    ev = doc.createEvent("MutationEvents");
	    ev.initMutationEvent("DOMNodeRemovedFromDocument", false, false, null, null, null, null, null);
	    core.visitTree(oldChild, function(el) {
	      if (el.nodeType == core.Node.ELEMENT_NODE) {
	        el.dispatchEvent(ev);
	        el._attachedToDocument = false;
	      }
	    });
	  }
	  return removeChild_super.apply(this, arguments);
	};

	function dispatchAttrEvent(doc, target, prevVal, newVal, attrName, attrChange) {
	  if (!newVal || newVal != prevVal) {
	    var ev = doc.createEvent("MutationEvents");
	    ev.initMutationEvent("DOMAttrModified", true, false, target, prevVal,
	                         newVal, attrName, attrChange);
	    target.dispatchEvent(ev);
	  }
	}

	function attrNodeInterceptor(_super, change) {
	  return function(node) {
	    var target = this._parentNode,
	        prev = _super.apply(this, arguments);

	    if (mutationEventsEnabled(target)) {
	      dispatchAttrEvent(target._ownerDocument,
	                        target,
	                        prev && prev.value || null,
	                        change == 'ADDITION' ? node.value : null,
	                        prev && prev.name || node.name,
	                        core.MutationEvent.prototype[change]);
	    }

	    return prev;
	  };
	}

	function attrInterceptor(_super, ns) {
	  return function(localName, value, _name, _prefix, _namespace) {
	    var target = this._parentNode,
	        namespace = _namespace; // do not reassign parameters when using "arguments" (performance)

	    if (!mutationEventsEnabled(target)) {
	      _super.apply(this, arguments);
	      return;
	    }

	    if (namespace === undefined) {
	        namespace = null;
	    }

	    var prev =
	          ns ? this.$getNode(namespace, localName) : this.$getNoNS(localName);
	    var prevVal = prev && prev.value || null;

	    _super.apply(this, arguments);

	    var node = ns ? this.$getNode(namespace, localName):
	            this.$getNoNS(localName);

	    dispatchAttrEvent(target._ownerDocument,
	                      target,
	                      prevVal,
	                      node.value,
	                      node.name,
	                      core.MutationEvent.prototype.ADDITION);
	  };
	}


	core.AttributeList.prototype.$removeNode = attrNodeInterceptor(core.AttributeList.prototype.$removeNode, 'REMOVAL');
	core.AttributeList.prototype.$setNode = attrNodeInterceptor(core.AttributeList.prototype.$setNode, 'ADDITION');
	core.AttributeList.prototype.$set = attrInterceptor(core.AttributeList.prototype.$set, true);
	core.AttributeList.prototype.$setNoNS = attrInterceptor(core.AttributeList.prototype.$setNoNS, false);

	core.Document.prototype.createEvent = function(eventType) {
	    switch (eventType) {
	        case "MutationEvents": return new core.MutationEvent(eventType);
	        case "UIEvents": return new core.UIEvent(eventType);
	        case "MouseEvents": return new core.MouseEvent(eventType);
	        case "HTMLEvents": return new core.Event(eventType);
	    }
	    return new core.Event(eventType);
	};


/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var core                  = __webpack_require__(11),
	    applyDocumentFeatures = __webpack_require__(73).applyDocumentFeatures,
	    defineGetter          = __webpack_require__(3).defineGetter,
	    defineSetter          = __webpack_require__(3).defineSetter,
	    inheritFrom           = __webpack_require__(3).inheritFrom,
	    resolveHref           = __webpack_require__(3).resolveHref,
	    URL                   = __webpack_require__(9),
	    Path                  = __webpack_require__(14),
	    fs                    = __webpack_require__(38),
	    http                  = __webpack_require__(39),
	    https                 = __webpack_require__(40);

	var isBrowser = Object.prototype.toString.call(process) !== "[object process]";

	// Setup the javascript language processor
	core.languageProcessors = {
	  javascript : __webpack_require__(179).javascript
	};

	core.resourceLoader = {
	  load: function(element, href, callback) {
	    var ownerDoc = element._ownerDocument;
	    var ownerImplementation = ownerDoc.implementation;

	    if (ownerImplementation._hasFeature('FetchExternalResources', element.tagName.toLowerCase())) {
	      var full = this.resolve(ownerDoc, href);
	      var url = URL.parse(full);
	      if (ownerImplementation._hasFeature('SkipExternalResources', full)) {
	        return false;
	      }

	      var cookie = ownerDoc.cookie;
	      var cookieDomain = ownerDoc._cookieDomain;
	      var baseUrl = this.baseUrl(ownerDoc);
	      var enqueued = this.enqueue(element, callback, full);

	      if (typeof ownerDoc._resourceLoader == 'function') {
	        var fetch = this.fetch.bind(this);
	        ownerDoc._resourceLoader.call(null, {
	          url: url,
	          cookie: cookie,
	          cookieDomain: cookieDomain,
	          baseUrl: baseUrl,
	          defaultFetch: function(callback) {
	            fetch(this.url, this.cookie, this.cookieDomain, this.baseUrl, callback);
	          }
	        }, enqueued);
	      } else {
	        this.fetch(url, cookie, cookieDomain, baseUrl, enqueued);
	      }
	    }
	  },
	  enqueue: function(element, callback, filename) {
	    var loader = this,
	        doc    = element.nodeType === core.Node.DOCUMENT_NODE ?
	                 element                :
	                 element._ownerDocument;

	    if (!doc._queue) {
	      return function() {};
	    }

	    return doc._queue.push(function(err, data) {
	      var ev = doc.createEvent('HTMLEvents');

	      if (!err) {
	        try {
	          callback.call(element, data, filename || doc.URL);
	          ev.initEvent('load', false, false);
	        }
	        catch(e) {
	          err = e;
	        }
	      }

	      if (err) {
	        ev.initEvent('error', false, false);
	        ev.error = err;
	      }

	      element.dispatchEvent(ev);
	    });
	  },

	  baseUrl: function(document) {
	    var baseElements = document.getElementsByTagName('base');
	    var baseUrl = document.URL;

	    if (baseElements.length > 0) {
	      var baseHref = baseElements.item(0).href;
	      if (baseHref) {
	        baseUrl = resolveHref(baseUrl, baseHref);
	      }
	    }

	    return baseUrl;
	  },
	  resolve: function(document, href) {
	    // if getAttribute returns null, there is no href
	    // lets resolve to an empty string (nulls are not expected farther up)
	    if (href === null) {
	      return '';
	    }

	    var baseUrl = this.baseUrl(document);

	    return resolveHref(baseUrl, href);
	  },
	  fetch: function(url, cookie, cookieDomain, referrer, callback) {
	    if (url.hostname) {
	      this.download(url, cookie, cookieDomain, referrer, callback);
	    } else {
	      this.readFile(url.pathname, callback);
	    }
	  },
	  download: function(url, cookie, cookieDomain, referrer, callback) {
	    var path    = (url.pathname || '') + (url.search || ''),
	        options = {'method': 'GET', 'host': url.hostname, 'path': path},
	        request;
	    if (url.protocol === 'https:') {
	      options.port = url.port || 443;
	      request = https.request(options);
	    } else {
	      options.port = url.port || 80;
	      request = http.request(options);
	    }

	    // set header; accomodate browserify
	    if (referrer && !isBrowser) {
	        request.setHeader('Referer', referrer);
	    }
	    if (cookie) {
	      var host = url.host.split(':')[0];
	      if (host.indexOf(cookieDomain, host.length - cookieDomain.length) !== -1) {
	        request.setHeader('cookie', cookie);
	      }
	    }

	    request.on('response', function (response) {
	      var data = '';
	      function success () {
	        if ([301, 302, 303, 307].indexOf(response.statusCode) > -1) {
	          var redirect = URL.resolve(url, response.headers["location"]);
	          core.resourceLoader.download(URL.parse(redirect), cookie, cookieDomain, referrer, callback);
	        } else {
	          callback(null, data);
	        }
	      }

	      // Accomodate browserify
	      if (response.setEncoding) {
	        response.setEncoding('utf8');
	      }

	      response.on('data', function (chunk) {
	        data += chunk.toString();
	      });
	      response.on('end', function() {
	        // According to node docs, 'close' can fire after 'end', but not
	        // vice versa.  Remove 'close' listener so we don't call success twice.
	        response.removeAllListeners('close');
	        success();
	      });
	      response.on('close', function (err) {
	        if (err) {
	          callback(err);
	        } else {
	          success();
	        }
	      });
	    });

	    request.on('error', callback);
	    request.end();
	  },
	  readFile: function(url, callback) {
	    fs.readFile(url.replace(/^file:\/\//, "").replace(/^\/([a-z]):\//i, '$1:/').replace(/%20/g, ' '), 'utf8', callback);
	  }
	};

	function define(elementClass, def) {
	  var tagName = def.tagName,
	    tagNames = def.tagNames || (tagName? [tagName] : []),
	    parentClass = def.parentClass || core.HTMLElement,
	    attrs = def.attributes || [],
	    proto = def.proto || {};

	  var elem = core[elementClass] = function(document, name) {
	    parentClass.call(this, document, name || tagName.toUpperCase());
	    if (elem._init) {
	      elem._init.call(this);
	    }
	  };
	  elem._init = def.init;

	  inheritFrom(parentClass, elem, proto);

	  attrs.forEach(function(n) {
	      var prop = n.prop || n,
	        attr = n.attr || prop.toLowerCase();

	      if (!n.prop || n.read !== false) {
	        defineGetter(elem.prototype, prop, function() {
	          var s = this.getAttribute(attr);
	          if (n.type && n.type === 'boolean') {
	            return s !== null;
	          }
	          if (n.type && n.type === 'long') {
	            return +s;
	          }
	          if (typeof n === 'object' && n.normalize) { // see GH-491
	            return n.normalize(s);
	          }
	          if (s === null) {
	            s = '';
	          }
	          return s;
	        });
	      }

	      if (!n.prop || n.write !== false) {
	        defineSetter(elem.prototype, prop, function(val) {
	          if (!val) {
	            this.removeAttribute(attr);
	          }
	          else {
	            var s = val.toString();
	            if (typeof n === 'object' && n.normalize) {
	              s = n.normalize(s);
	            }
	            this.setAttribute(attr, s);
	          }
	        });
	      }
	  });

	  tagNames.forEach(function(tag) {
	    core.Document.prototype._elementBuilders[tag.toLowerCase()] = function(doc, s) {
	      var el = new elem(doc, s);

	      if (def.elementBuilder) {
	        return def.elementBuilder(el, doc, s);
	      }

	      return el;
	    };
	  });
	}



	core.HTMLCollection = function HTMLCollection(element, query) {
	  this._keys = [];
	  core.NodeList.call(this, element, query);
	};
	inheritFrom(core.NodeList, core.HTMLCollection, {
	  namedItem: function(name) {
	    // Try property shortcut; should work in most cases
	    if (Object.prototype.hasOwnProperty.call(this, name)) {
	      return this[name];
	    }

	    var results = this._toArray(),
	        l       = results.length,
	        node,
	        matchingName = null;

	    for (var i=0; i<l; i++) {
	      node = results[i];
	      if (node.getAttribute('id') === name) {
	        return node;
	      } else if (node.getAttribute('name') === name) {
	        matchingName = node;
	      }
	    }
	    return matchingName;
	  },
	  toString: function() {
	    return '[ jsdom HTMLCollection ]: contains ' + this.length + ' items';
	  },
	  _resetTo: function(array) {
	    var i, _this = this;

	    for (i = 0; i < this._keys.length; ++i) {
	      delete this[this._keys[i]];
	    }
	    this._keys = [];

	    core.NodeList.prototype._resetTo.apply(this, arguments);

	    function testAttr(node, attr) {
	      var val = node.getAttribute(attr);
	      if (val && !Object.prototype.hasOwnProperty.call(_this, val)) {
	        _this[val] = node;
	        _this._keys.push(val);
	      }
	    }
	    for (i = 0; i < array.length; ++i) {
	      testAttr(array[i], 'id');
	    }
	    for (i = 0; i < array.length; ++i) {
	      testAttr(array[i], 'name');
	    }
	  }
	});
	Object.defineProperty(core.HTMLCollection.prototype, 'constructor', {
	  value: core.NodeList,
	  writable: true,
	  configurable: true
	});

	core.HTMLOptionsCollection = core.HTMLCollection;

	function closest(e, tagName) {
	  tagName = tagName.toUpperCase();
	  while (e) {
	    if (e.nodeName.toUpperCase() === tagName ||
	        (e.tagName && e.tagName.toUpperCase() === tagName))
	    {
	      return e;
	    }
	    e = e._parentNode;
	  }
	  return null;
	}

	function descendants(e, tagName, recursive) {
	  var owner = recursive ? e._ownerDocument || e : e;
	  return new core.HTMLCollection(owner, core.mapper(e, function(n) {
	    return n.tagName === tagName;
	  }, recursive));
	}

	function firstChild(e, tagName) {
	  if (!e) {
	    return null;
	  }
	  var c = descendants(e, tagName, false);
	  return c.length > 0 ? c[0] : null;
	}

	function ResourceQueue(paused) {
	  this.paused = !!paused;
	}
	ResourceQueue.prototype = {
	  push: function(callback) {
	    var q = this;
	    var item = {
	      prev: q.tail,
	      check: function() {
	        if (!q.paused && !this.prev && this.fired){
	          callback(this.err, this.data);
	          if (this.next) {
	            this.next.prev = null;
	            this.next.check();
	          }else{//q.tail===this
	      q.tail = null;
	    }
	        }
	      }
	    };
	    if (q.tail) {
	      q.tail.next = item;
	    }
	    q.tail = item;
	    return function(err, data) {
	      item.fired = 1;
	      item.err = err;
	      item.data = data;
	      item.check();
	    };
	  },
	  resume: function() {
	    if(!this.paused){
	      return;
	    }
	    this.paused = false;
	    var head = this.tail;
	    while(head && head.prev){
	      head = head.prev;
	    }
	    if(head){
	      head.check();
	    }
	  }
	};

	core.HTMLDocument = function HTMLDocument(options) {
	  core.Document.call(this, options);
	  this._referrer = options.referrer;
	  this._cookie = options.cookie;
	  this._cookieDomain = options.cookieDomain || '127.0.0.1';
	  this._documentRoot = options.documentRoot || Path.dirname(this._URL);
	  this._queue = new ResourceQueue(options.deferClose);
	  this._resourceLoader = options.resourceLoader;
	  this.readyState = 'loading';

	  // Add level2 features
	  this.implementation._addFeature('core'  , '2.0');
	  this.implementation._addFeature('html'  , '2.0');
	  this.implementation._addFeature('xhtml' , '2.0');
	  this.implementation._addFeature('xml'   , '2.0');
	};

	inheritFrom(core.Document, core.HTMLDocument, {
	  _referrer : "",
	  get referrer() {
	    return this._referrer || '';
	  },
	  get domain() {
	    return "";
	  },
	  get images() {
	    return this.getElementsByTagName('IMG');
	  },
	  get applets() {
	    return new core.HTMLCollection(this, core.mapper(this, function(el) {
	      if (el && el.tagName) {
	        var upper = el.tagName.toUpperCase();
	        if (upper === "APPLET") {
	          return true;
	        } else if (upper === "OBJECT" &&
	          el.getElementsByTagName('APPLET').length > 0)
	        {
	          return true;
	        }
	      }
	    }));
	  },
	  get links() {
	    return new core.HTMLCollection(this, core.mapper(this, function(el) {
	      if (el && el.tagName) {
	        var upper = el.tagName.toUpperCase();
	        if (upper === "AREA" || (upper === "A" && el.href)) {
	          return true;
	        }
	      }
	    }));
	  },
	  get forms() {
	    return this.getElementsByTagName('FORM');
	  },
	  get anchors() {
	    return this.getElementsByTagName('A');
	  },
	  open  : function() {
	    this._childNodes = [];
	    this._documentElement = null;
	    this._modified();
	  },
	  close : function() {
	    this._queue.resume();
	    // Set the readyState to 'complete' once all resources are loaded.
	    // As a side-effect the document's load-event will be dispatched.
	    core.resourceLoader.enqueue(this, function() {
	      this.readyState = 'complete';
	      var ev = this.createEvent('HTMLEvents');
	      ev.initEvent('DOMContentLoaded', false, false);
	      this.dispatchEvent(ev);
	    })(null, true);
	  },

	  // document.write is defined in browser/index.js.

	  writeln : function(text) {
	    this.write(text + '\n');
	  },

	  getElementsByName : function(elementName) {
	    return new core.HTMLCollection(this, core.mapper(this, function(el) {
	      return (el.getAttribute && el.getAttribute("name") === elementName);
	    }));
	  },

	  get title() {
	    var head = this.head,
	      title = head ? firstChild(head, 'TITLE') : null;
	    return title ? title.textContent : '';
	  },

	  set title(val) {
	    var title = firstChild(this.head, 'TITLE');
	    if (!title) {
	      title = this.createElement('TITLE');
	      var head = this.head;
	      if (!head) {
	        head = this.createElement('HEAD');
	        this.documentElement.insertBefore(head, this.documentElement.firstChild);
	      }
	      head.appendChild(title);
	    }
	    title.textContent = val;
	  },

	  get head() {
	    return firstChild(this.documentElement, 'HEAD');
	  },

	  set head(unused) { /* noop */ },

	  get body() {
	    var body = firstChild(this.documentElement, 'BODY');
	    if (!body) {
	      body = firstChild(this.documentElement, 'FRAMESET');
	    }
	    return body;
	  },

	  _cookie : "",
	  get cookie() {
	    var cookies = Array.isArray(this._cookie) ?
	      this._cookie :
	      (this._cookie && this._cookie.length > 0 ? [this._cookie] : []);

	    return cookies.map(function (x) {
	      return x.split(';')[0];
	    }).join('; ');
	  },
	  set cookie(val) {
	    if (val == null) return val;
	    var key = val.split('=')[0];
	    var cookies = Array.isArray(this._cookie) ?
	      this._cookie :
	      (this._cookie && this._cookie.length > 0 ? [this._cookie] : []);
	    for (var i = 0; i < cookies.length; i++) {
	      if (cookies[i].lastIndexOf(key + '=', 0) === 0) {
	        cookies[i] = val;
	        key = null;
	        break;
	      }
	    }
	    if (key) {
	      cookies.push(val);
	    }
	    if (cookies.length === 1) {
	      this._cookie = cookies[0];
	    } else {
	      this._cookie = cookies;
	    }
	    return val;
	  }
	});

	define('HTMLElement', {
	  parentClass: core.Element,
	  proto : {
	    // Add default event behavior (click link to navigate, click button to submit
	    // form, etc). We start by wrapping dispatchEvent so we can forward events to
	    // the element's _eventDefault function (only events that did not incur
	    // preventDefault).
	    dispatchEvent : function (event) {
	      var outcome = core.Node.prototype.dispatchEvent.call(this, event)

	      if (!event._preventDefault     &&
	          event.target._eventDefaults[event.type] &&
	          typeof event.target._eventDefaults[event.type] === 'function')
	      {
	        event.target._eventDefaults[event.type](event)
	      }
	      return outcome;
	    },
	    getBoundingClientRect: function () {
	      return {
	        bottom: 0,
	        height: 0,
	        left: 0,
	        right: 0,
	        top: 0,
	        width: 0
	      };
	    },
	    focus : function() {
	      this._ownerDocument.activeElement = this;
	    },
	    blur : function() {
	      this._ownerDocument.activeElement = this._ownerDocument.body;
	    },
	    _eventDefaults : {}
	  },
	  attributes: [
	    'id',
	    'title',
	    'lang',
	    'dir',
	    {prop: 'className', attr: 'class', normalize: function(s) { return s || ''; }}
	  ]
	});

	core.Document.prototype._defaultElementBuilder = function(document, tagName) {
	  return new core.HTMLElement(document, tagName);
	};

	// http://www.whatwg.org/specs/web-apps/current-work/#category-listed
	var listedElements = /button|fieldset|input|keygen|object|select|textarea/i;

	define('HTMLFormElement', {
	  tagName: 'FORM',
	  proto: {
	    _descendantAdded: function(parent, child) {
	      var form = this;
	      core.visitTree(child, function(el) {
	        if (typeof el._changedFormOwner === 'function') {
	          el._changedFormOwner(form);
	        }
	      });

	      core.HTMLElement.prototype._descendantAdded.apply(this, arguments);
	    },
	    _descendantRemoved: function(parent, child) {
	      core.visitTree(child, function(el) {
	        if (typeof el._changedFormOwner === 'function') {
	          el._changedFormOwner(null);
	        }
	      });

	      core.HTMLElement.prototype._descendantRemoved.apply(this, arguments);
	    },
	    get elements() {
	      return new core.HTMLCollection(this._ownerDocument, core.mapper(this, function(e) {
	        return listedElements.test(e.nodeName) ; // TODO exclude <input type="image">
	      }));
	    },
	    get length() {
	      return this.elements.length;
	    },
	    _dispatchSubmitEvent: function() {
	      var ev = this._ownerDocument.createEvent('HTMLEvents');
	      ev.initEvent('submit', true, true);
	      if (!this.dispatchEvent(ev)) {
	        this.submit();
	      };
	    },
	    submit: function() {
	    },
	    reset: function() {
	      this.elements._toArray().forEach(function(el) {
	        if (typeof el._formReset === 'function') {
	          el._formReset();
	        }
	      });
	    }
	  },
	  attributes: [
	    'name',
	    {prop: 'acceptCharset', attr: 'accept-charset'},
	    'action',
	    'enctype',
	    'method',
	    'target'
	  ]
	});

	define('HTMLLinkElement', {
	  tagName: 'LINK',
	  proto: {
	    get href() {
	      return core.resourceLoader.resolve(this._ownerDocument, this.getAttribute('href'));
	    }
	  },
	  attributes: [
	    {prop: 'disabled', type: 'boolean'},
	    'charset',
	    'href',
	    'hreflang',
	    'media',
	    'rel',
	    'rev',
	    'target',
	    'type'
	  ]
	});

	define('HTMLMetaElement', {
	  tagName: 'META',
	  attributes: [
	    'content',
	    {prop: 'httpEquiv', attr: 'http-equiv'},
	    'name',
	    'scheme'
	  ]
	});

	define('HTMLHtmlElement', {
	  tagName: 'HTML',
	  attributes: [
	    'version'
	  ]
	});

	define('HTMLHeadElement', {
	  tagName: 'HEAD',
	  attributes: [
	    'profile'
	  ]
	});

	define('HTMLTitleElement', {
	  tagName: 'TITLE',
	  proto: {
	    get text() {
	      return this.innerHTML;
	    },
	    set text(s) {
	      this.innerHTML = s;
	    }
	  }
	});

	define('HTMLBaseElement', {
	  tagName: 'BASE',
	  attributes: [
	    'href',
	    'target'
	  ]
	});


	//**Deprecated**
	define('HTMLIsIndexElement', {
	  tagName : 'ISINDEX',
	  parentClass : core.Element,
	  proto : {
	    get form() {
	      return closest(this, 'FORM');
	    }
	  },
	  attributes : [
	    'prompt'
	  ]
	});


	define('HTMLStyleElement', {
	  tagName: 'STYLE',
	  attributes: [
	    {prop: 'disabled', type: 'boolean'},
	    'media',
	    'type',
	  ]
	});

	define('HTMLBodyElement', {
	  proto: (function() {
	    var proto = {};
	    // The body element's "traditional" event handlers are proxied to the
	    // window object.
	    // See: http://www.whatwg.org/specs/web-apps/current-work/#the-body-element
	    ['onafterprint', 'onbeforeprint', 'onbeforeunload', 'onblur', 'onerror',
	     'onfocus', 'onhashchange', 'onload', 'onmessage', 'onoffline', 'ononline',
	     'onpagehide', 'onpageshow', 'onpopstate', 'onresize', 'onscroll',
	     'onstorage', 'onunload'].forEach(function (name) {
	      defineSetter(proto, name, function (handler) {
	        this._ownerDocument.parentWindow[name] = handler;
	      });
	      defineGetter(proto, name, function () {
	        return this._ownerDocument.parentWindow[name];
	      });
	    });
	    return proto;
	  })(),
	  tagName: 'BODY',
	  attributes: [
	    'aLink',
	    'background',
	    'bgColor',
	    'link',
	    'text',
	    'vLink'
	  ]
	});

	define('HTMLSelectElement', {
	  tagName: 'SELECT',
	  proto: {
	    _formReset: function() {
	      this.options._toArray().forEach(function(option, i) {
	        option._selectedness = option.defaultSelected;
	        option._dirtyness = false;
	      });
	      this._askedForAReset();
	    },
	    _askedForAReset: function() {
	      if (this.hasAttribute('multiple')) {
	        return;
	      }

	      var options = this.options._toArray();
	      var selected = options.filter(function(option){
	        return option._selectedness;
	      });

	      // size = 1 is default if not multiple
	      if ((!this.size || this.size === 1) && !selected.length) {
	        // select the first option that is not disabled
	        for (var i = 0; i < options.length; ++i) {
	          var option = options[i];
	          var disabled = option.disabled;
	          if (option._parentNode &&
	              option._parentNode.nodeName.toUpperCase() === 'OPTGROUP' &&
	              option._parentNode.disabled) {
	            disabled = true;
	          }

	          if (!disabled) {
	            // (do not set dirty)
	            option._selectedness = true;
	            break;
	          }
	        }
	      } else if (selected.length >= 2) {
	        // select the last selected option
	        selected.forEach(function(option, index) {
	          option._selectedness = index === selected.length - 1;
	        });
	      }
	    },
	    _descendantAdded: function(parent, child) {
	      if (child.nodeType === core.Node.ELEMENT_NODE) {
	        this._askedForAReset();
	      }

	      core.HTMLElement.prototype._descendantAdded.apply(this, arguments);
	    },
	    _descendantRemoved: function(parent, child) {
	      if (child.nodeType === core.Node.ELEMENT_NODE) {
	        this._askedForAReset();
	      }

	      core.HTMLElement.prototype._descendantRemoved.apply(this, arguments);
	    },
	    _attrModified: function(name, value) {
	      if (name === 'multiple' || name === 'size') {
	        this._askedForAReset();
	      }
	      core.HTMLElement.prototype._attrModified.apply(this, arguments);
	    },
	    get options() {
	      return new core.HTMLOptionsCollection(this, core.mapper(this, function(n) {
	        return n.nodeName === 'OPTION';
	      }));
	    },

	    get length() {
	      return this.options.length;
	    },

	    get selectedIndex() {
	      return this.options._toArray().reduceRight(function(prev, option, i) {
	        return option.selected ? i : prev;
	      }, -1);
	    },

	    set selectedIndex(index) {
	      this.options._toArray().forEach(function(option, i) {
	        option.selected = i === index;
	      });
	    },

	    get value() {
	      var i = this.selectedIndex;
	      if (this.options.length && (i === -1)) {
	        i = 0;
	      }
	      if (i === -1) {
	        return '';
	      }
	      return this.options[i].value;
	    },

	    set value(val) {
	      var self = this;
	      this.options._toArray().forEach(function(option) {
	        if (option.value === val) {
	          option.selected = true;
	        } else {
	          if (!self.hasAttribute('multiple')) {
	            // Remove the selected bit from all other options in this group
	            // if the multiple attr is not present on the select
	            option.selected = false;
	          }
	        }
	      });
	    },

	    get form() {
	      return closest(this, 'FORM');
	    },

	    get type() {
	      return this.multiple ? 'select-multiple' : 'select-one';
	    },

	    add: function(opt, before) {
	      if (before) {
	        this.insertBefore(opt, before);
	      }
	      else {
	        this.appendChild(opt);
	      }
	    },

	    remove: function(index) {
	      var opts = this.options._toArray();
	      if (index >= 0 && index < opts.length) {
	        var el = opts[index];
	        el._parentNode.removeChild(el);
	      }
	    }

	  },
	  attributes: [
	    {prop: 'disabled', type: 'boolean'},
	    {prop: 'multiple', type: 'boolean'},
	    'name',
	    {prop: 'size', type: 'long'},
	    {prop: 'tabIndex', type: 'long'},
	  ]
	});

	define('HTMLOptGroupElement', {
	  tagName: 'OPTGROUP',
	  attributes: [
	    {prop: 'disabled', type: 'boolean'},
	    'label'
	  ]
	});

	define('HTMLOptionElement', {
	  tagName: 'OPTION',
	  proto: {
	    // whenever selectedness is set to true, make sure all
	    // other options set selectedness to false
	    _selectedness: false,
	    _dirtyness: false,
	    _removeOtherSelectedness: function() {
	      //Remove the selectedness flag from all other options in this select
	      var select = this._selectNode;

	      if (select && !select.multiple) {
	        var o = select.options;
	        for (var i = 0; i < o.length; i++) {
	          if (o[i] !== this) {
	            o[i]._selectedness = false;
	          }
	        }
	      }
	    },
	    _askForAReset: function() {
	      var select = this._selectNode;
	      if (select) {
	        select._askedForAReset();
	      }
	    },
	    _attrModified: function(name, value) {
	      if (!this._dirtyness && name === 'selected') {
	        this._selectedness = this.defaultSelected;
	        if (this._selectedness) {
	          this._removeOtherSelectedness();
	        }
	        this._askForAReset();
	      }
	      core.HTMLElement.prototype._attrModified.apply(this, arguments);
	    },
	    get _selectNode() {
	      var select = this._parentNode;
	      if (!select) return null;
	      if (select.nodeName.toUpperCase() !== 'SELECT') {
	        select = select._parentNode;
	        if (!select) return null;
	        if (select.nodeName.toUpperCase() !== 'SELECT') return null;
	      }
	      return select;
	    },
	    get form() {
	      return closest(this, 'FORM');
	    },
	    get defaultSelected() {
	      return this.getAttribute('selected') !== null;
	    },
	    set defaultSelected(s) {
	      if (s) this.setAttribute('selected', 'selected');
	      else this.removeAttribute('selected');
	    },
	    get text() {
	      return this.innerHTML;
	    },
	    get value() {
	      return (this.hasAttribute('value')) ? this.getAttribute('value') : this.innerHTML;
	    },
	    set value(val) {
	      this.setAttribute('value', val);
	    },
	    get index() {
	      return closest(this, 'SELECT').options._toArray().indexOf(this);
	    },
	    get selected() {
	      return this._selectedness;
	    },
	    set selected(s) {
	      this._dirtyness = true;
	      this._selectedness = !!s;
	      if (this._selectedness) {
	        this._removeOtherSelectedness();
	      }
	      this._askForAReset();
	    }
	  },
	  attributes: [
	    {prop: 'disabled', type: 'boolean'},
	    'label'
	  ]
	});

	define('HTMLInputElement', {
	  tagName: 'INPUT',
	  init: function() {
	    if (!this.type) {
	      this.type = 'text';
	    }
	  },
	  proto: {
	    _value: null,
	    _dirtyValue: false,
	    _checkedness: false,
	    _dirtyCheckedness: false,
	    _attrModified: function(name, value) {
	      if (!this._dirtyValue && name === 'value') {
	        this._value = this.defaultValue;
	      }
	      if (!this._dirtyCheckedness && name === 'checked') {
	        this._checkedness = this.defaultChecked;
	        if (this._checkedness) {
	          this._removeOtherRadioCheckedness();
	        }
	      }

	      if (name === 'name' || name === 'type') {
	        if (this._checkedness) {
	          this._removeOtherRadioCheckedness();
	        }
	      }

	      core.HTMLElement.prototype._attrModified.apply(this, arguments);
	    },
	    _formReset: function() {
	      this._value = this.defaultValue;
	      this._dirtyValue = false;
	      this._checkedness = this.defaultChecked;
	      this._dirtyCheckedness = false;
	      if (this._checkedness) {
	        this._removeOtherRadioCheckedness();
	      }
	    },
	    _changedFormOwner: function(newForm) {
	      if (this._checkedness) {
	        this._removeOtherRadioCheckedness();
	      }
	    },
	    _removeOtherRadioCheckedness: function() {
	      var root = this._radioButtonGroupRoot;
	      if (!root) {
	        return;
	      }

	      var name = this.name.toLowerCase();
	      var radios = new core.HTMLCollection(this, core.mapper(root, function(el) {
	        return el.type === 'radio' &&
	               el.name &&
	               el.name.toLowerCase() === name &&
	               el._radioButtonGroupRoot === root;
	      }));

	      radios._toArray().forEach(function(radio) {
	        if (radio !== this) {
	          radio._checkedness = false;
	        }
	      }, this);
	    },
	    get _radioButtonGroupRoot() {
	      if (this.type !== 'radio' || !this.name) {
	        return null;
	      }

	      var e = this._parentNode;
	      while (e) {
	        // root node of this home sub tree
	        // or the form element we belong to
	        if (!e._parentNode || e.nodeName.toUpperCase() === 'FORM') {
	          return e;
	        }
	        e = e._parentNode;
	      }
	      return null;
	    },
	    get form() {
	      return closest(this, 'FORM');
	    },
	    get defaultValue() {
	      var val = this.getAttribute('value');
	      return val !== null ? val : "";
	    },
	    set defaultValue(val) {
	      this.setAttribute('value', String(val));
	    },
	    get defaultChecked() {
	      return this.getAttribute('checked') !== null;
	    },
	    set defaultChecked(s) {
	      if (s) this.setAttribute('checked', 'checked');
	      else this.removeAttribute('checked');
	    },
	    get checked() {
	      return this._checkedness;
	    },
	    set checked(checked) {
	      this._checkedness = !!checked;
	      this._dirtyCheckedness = true;
	      if (this._checkedness) {
	        this._removeOtherRadioCheckedness();
	      }
	    },
	    get value() {
	      if (this._value === null) {
	        return '';
	      }
	      return this._value;
	    },
	    set value(val) {
	      this._dirtyValue = true;
	      if (val === null) {
	        this._value = null;
	      } else {
	        this._value = String(val);
	      }
	    },
	    get type() {
	        var type = this.getAttribute('type');
	        return type ? type : 'text';
	    },
	    set type(type) {
	        this.setAttribute('type', type);
	    },
	    select: function() {
	    },

	    _dispatchClickEvent: function() {
	      var event = this._ownerDocument.createEvent("HTMLEvents");
	      event.initEvent("click", true, true);
	      this.dispatchEvent(event);
	    },

	    click: function() {
	      if (this.type === 'checkbox') {
	        this.checked = !this.checked;
	      }
	      else if (this.type === 'radio') {
	        this.checked = true;
	      }
	      else if (this.type === 'submit') {
	        var form = this.form;
	        if (form) {
	          form._dispatchSubmitEvent();
	        }
	      }
	      this._dispatchClickEvent();
	    }
	  },
	  attributes: [
	    'accept',
	    'accessKey',
	    'align',
	    'alt',
	    {prop: 'disabled', type: 'boolean'},
	    {prop: 'maxLength', type: 'long'},
	    'name',
	    {prop: 'readOnly', type: 'boolean'},
	    {prop: 'size', type: 'long'},
	    'src',
	    {prop: 'tabIndex', type: 'long'},
	    {prop: 'type', normalize: function(val) {
	        return val ? val.toLowerCase() : 'text';
	    }},
	    'useMap'
	  ]
	});

	define('HTMLTextAreaElement', {
	  tagName: 'TEXTAREA',
	  proto: {
	    _apiValue: null,
	    _dirtyValue: false,
	    // "raw value" and "value" are not used here because jsdom has no GUI
	    _formReset: function() {
	      this._apiValue = null;
	      this._dirtyValue = false;
	    },
	    get form() {
	      return closest(this, 'FORM');
	    },
	    get defaultValue() {
	      return this.textContent;
	    },
	    set defaultValue(val) {
	      this.textContent = val;
	    },
	    get value() {
	      // The WHATWG specifies that when "textContent" changes, the "raw value"
	      // (just the API value in jsdom) must also be updated.
	      // This slightly different solution has identical results, but is a lot less complex.
	      if (this._dirtyValue) {
	        if (this._apiValue === null) {
	          return '';
	        }
	        return this._apiValue;
	      }

	      var val = this.defaultValue;
	      val = val.replace(/\r\n|\r/g, '\n'); // API value normalizes line breaks per WHATWG
	      return val;
	    },
	    set value(val) {
	      if (val) {
	        val = val.replace(/\r\n|\r/g, '\n'); // API value normalizes line breaks per WHATWG
	      }

	      this._dirtyValue = true;
	      this._apiValue = val;
	    },
	    get textLength() {
	      return this.value.length; // code unit length (16 bit)
	    },
	    get type() {
	      return 'textarea';
	    },
	    select: function() {
	    }
	  },
	  attributes: [
	    'accessKey',
	    {prop: 'cols', type: 'long'},
	    {prop: 'disabled', type: 'boolean'},
	    {prop: 'maxLength', type: 'long'},
	    'name',
	    {prop: 'readOnly', type: 'boolean'},
	    {prop: 'rows', type: 'long'},
	    {prop: 'tabIndex', type: 'long'}
	  ]
	});

	define('HTMLButtonElement', {
	  tagName: 'BUTTON',
	  proto: {
	    get form() {
	      return closest(this, 'FORM');
	    }
	  },
	  attributes: [
	    'accessKey',
	    {prop: 'disabled', type: 'boolean'},
	    'name',
	    {prop: 'tabIndex', type: 'long'},
	    'type',
	    'value'
	  ]
	});

	define('HTMLLabelElement', {
	  tagName: 'LABEL',
	  proto: {
	    get form() {
	      return closest(this, 'FORM');
	    }
	  },
	  attributes: [
	    'accessKey',
	    {prop: 'htmlFor', attr: 'for'}
	  ]
	});

	define('HTMLFieldSetElement', {
	  tagName: 'FIELDSET',
	  proto: {
	    get form() {
	      return closest(this, 'FORM');
	    }
	  }
	});

	define('HTMLLegendElement', {
	  tagName: 'LEGEND',
	  proto: {
	    get form() {
	      return closest(this, 'FORM');
	    }
	  },
	  attributes: [
	    'accessKey',
	    'align'
	  ]
	});

	define('HTMLUListElement', {
	  tagName: 'UL',
	  attributes: [
	    {prop: 'compact', type: 'boolean'},
	    'type'
	  ]
	});

	define('HTMLOListElement', {
	  tagName: 'OL',
	  attributes: [
	    {prop: 'compact', type: 'boolean'},
	    {prop: 'start', type: 'long'},
	    'type'
	  ]
	});

	define('HTMLDListElement', {
	  tagName: 'DL',
	  attributes: [
	    {prop: 'compact', type: 'boolean'}
	  ]
	});

	define('HTMLDirectoryElement', {
	  tagName: 'DIR',
	  attributes: [
	    {prop: 'compact', type: 'boolean'}
	  ]
	});

	define('HTMLMenuElement', {
	  tagName: 'MENU',
	  attributes: [
	    {prop: 'compact', type: 'boolean'}
	  ]
	});

	define('HTMLLIElement', {
	  tagName: 'LI',
	  attributes: [
	    'type',
	    {prop: 'value', type: 'long'}
	  ]
	});

	define('HTMLCanvasElement', {
	  tagName: 'CANVAS',
	  attributes: [
	    'align'
	  ],
	  elementBuilder: function (element) {
	    // require node-canvas and catch the error if it blows up
	    try {
	      var canvas = new (__webpack_require__(698))(0,0);
	      for (var attr in element) {
	        if (!canvas[attr]) {
	          canvas[attr] = element[attr];
	        }
	      }
	      return canvas;
	    } catch (e) {
	      return element;
	    }
	  }
	});

	define('HTMLDivElement', {
	  tagName: 'DIV',
	  attributes: [
	    'align'
	  ],
	  proto: {
	    toString: function() { return '[object HTMLDivElement]'; }
	  }
	});

	define('HTMLParagraphElement', {
	  tagName: 'P',
	  attributes: [
	    'align'
	  ]
	});

	define('HTMLHeadingElement', {
	  tagNames: ['H1','H2','H3','H4','H5','H6'],
	  attributes: [
	    'align'
	  ]
	});

	define('HTMLQuoteElement', {
	  tagNames: ['Q','BLOCKQUOTE'],
	  attributes: [
	    'cite'
	  ]
	});

	define('HTMLPreElement', {
	  tagName: 'PRE',
	  attributes: [
	    {prop: 'width', type: 'long'}
	  ]
	});

	define('HTMLBRElement', {
	  tagName: 'BR',
	  attributes: [
	    'clear'
	  ]
	});

	define('HTMLBaseFontElement', {
	  tagName: 'BASEFONT',
	  attributes: [
	    'color',
	    'face',
	    {prop: 'size', type: 'long'}
	  ]
	});

	define('HTMLFontElement', {
	  tagName: 'FONT',
	  attributes: [
	    'color',
	    'face',
	    'size'
	  ]
	});

	define('HTMLHRElement', {
	  tagName: 'HR',
	  attributes: [
	    'align',
	    {prop: 'noShade', type: 'boolean'},
	    'size',
	    'width'
	  ]
	});

	define('HTMLModElement', {
	  tagNames: ['INS', 'DEL'],
	  attributes: [
	    'cite',
	    'dateTime'
	  ]
	});

	define('HTMLAnchorElement', {
	  tagName: 'A',

	  proto: {
	    get href() {
	      return core.resourceLoader.resolve(this._ownerDocument, this.getAttribute('href'));
	    },
	    get hostname() {
	      return URL.parse(this.href).hostname || '';
	    },
	    get host() {
	      return URL.parse(this.href).host || '';
	    },
	    get origin() {
	      var proto = URL.parse(this.href).protocol;

	      if (proto !== undefined && proto !== null) {
	        proto += '//';
	      }

	      return proto + URL.parse(this.href).host || '';
	    },
	    get port() {
	      return URL.parse(this.href).port || '';
	    },
	    get protocol() {
	      var protocol = URL.parse(this.href).protocol;
	      return (protocol == null) ? ':' : protocol;
	    },
	    get password() {
	      var auth = URL.parse(this.href).auth;
	      return auth.substr(auth.indexOf(':') + 1);
	    },
	    get pathname() {
	      return URL.parse(this.href).pathname || '';
	    },
	    get username() {
	      var auth = URL.parse(this.href).auth;
	      return auth.substr(0, auth.indexOf(':'));
	    },
	    get search() {
	      return URL.parse(this.href).search || '';
	    },
	    get hash() {
	      return URL.parse(this.href).hash || '';
	    }
	  },
	  attributes: [
	    'accessKey',
	    'charset',
	    'coords',
	    {prop: 'href', type: 'string', read: false},
	    'hreflang',
	    'name',
	    'rel',
	    'rev',
	    'shape',
	    {prop: 'tabIndex', type: 'long'},
	    'target',
	    'type'
	  ]
	});

	define('HTMLImageElement', {
	  tagName: 'IMG',
	  proto: {
	    _attrModified: function(name, value, oldVal) {
	      if (name == 'src' && value !== oldVal) {
	        core.resourceLoader.enqueue(this, function() {})();
	      }
	    },
	    get src() {
	      return core.resourceLoader.resolve(this._ownerDocument, this.getAttribute('src'));
	    }
	  },
	  attributes: [
	    'name',
	    'align',
	    'alt',
	    'border',
	    {prop: 'height', type: 'long'},
	    {prop: 'hspace', type: 'long'},
	    {prop: 'isMap', type: 'boolean'},
	    'longDesc',
	    {prop: 'src', type: 'string', read: false},
	    'useMap',
	    {prop: 'vspace', type: 'long'},
	    {prop: 'width', type: 'long'}
	  ]
	});

	define('HTMLObjectElement', {
	  tagName: 'OBJECT',
	  proto: {
	    get form() {
	      return closest(this, 'FORM');
	    },
	    get contentDocument() {
	      return null;
	    }
	  },
	  attributes: [
	    'code',
	    'align',
	    'archive',
	    'border',
	    'codeBase',
	    'codeType',
	    'data',
	    {prop: 'declare', type: 'boolean'},
	    {prop: 'height',  type: 'long'},
	    {prop: 'hspace',  type: 'long'},
	    'name',
	    'standby',
	    {prop: 'tabIndex', type: 'long'},
	    'type',
	    'useMap',
	    {prop: 'vspace', type: 'long'},
	    {prop: 'width', type: 'long'}
	  ]
	});

	define('HTMLParamElement', {
	  tagName: 'PARAM',
	  attributes: [
	    'name',
	    'type',
	    'value',
	    'valueType'
	  ]
	});

	define('HTMLAppletElement', {
	  tagName: 'APPLET',
	  attributes: [
	    'align',
	    'alt',
	    'archive',
	    'code',
	    'codeBase',
	    'height',
	    {prop: 'hspace', type: 'long'},
	    'name',
	    'object',
	    {prop: 'vspace', type: 'long'},
	    'width'
	  ]
	});

	define('HTMLMapElement', {
	  tagName: 'MAP',
	  proto: {
	    get areas() {
	      return this.getElementsByTagName("AREA");
	    }
	  },
	  attributes: [
	    'name'
	  ]
	});

	define('HTMLAreaElement', {
	  tagName: 'AREA',
	  attributes: [
	    'accessKey',
	    'alt',
	    'coords',
	    'href',
	    {prop: 'noHref', type: 'boolean'},
	    'shape',
	    {prop: 'tabIndex', type: 'long'},
	    'target'
	  ]
	});

	define('HTMLScriptElement', {
	  tagName: 'SCRIPT',
	  init: function() {
	    this.addEventListener('DOMNodeInsertedIntoDocument', function() {
	      if (this.src) {
	        core.resourceLoader.load(this, this.src, this._eval);
	      }
	      else {
	        var src = this.sourceLocation || {},
	            filename = src.file || this._ownerDocument.URL;

	        if (src) {
	          filename += ':' + src.line + ':' + src.col;
	        }
	        filename += '<script>';

	        core.resourceLoader.enqueue(this, this._eval, filename)(null, this.text);
	      }
	    });
	  },
	  proto: {
	    _eval: function(text, filename) {
	      if (this._ownerDocument.implementation._hasFeature("ProcessExternalResources", "script") &&
	          this.language                                                                      &&
	          core.languageProcessors[this.language])
	      {
	        this._ownerDocument._writeAfterElement = this;
	        core.languageProcessors[this.language](this, text, filename);
	        delete this._ownerDocument._writeAfterElement;
	      }
	    },
	    get language() {
	      var type = this.type || "text/javascript";
	      return type.split("/").pop().toLowerCase();
	    },
	    get text() {
	      var i=0, children = this._childNodes, l = children.length, ret = [];

	      for (i; i<l; i++) {
	        ret.push(children[i].nodeValue);
	      }

	      return ret.join("");
	    },
	    set text(text) {
	      while (this._childNodes.length) {
	        this.removeChild(this._childNodes[this._childNodes.length-1]);
	      }
	      this.appendChild(this._ownerDocument.createTextNode(text));
	    }
	  },
	  attributes : [
	    {prop: 'defer', 'type': 'boolean'},
	    'htmlFor',
	    'event',
	    'charset',
	    'type',
	    'src'
	  ]
	})

	define('HTMLTableElement', {
	  tagName: 'TABLE',
	  proto: {
	    get caption() {
	      return firstChild(this, 'CAPTION');
	    },
	    get tHead() {
	      return firstChild(this, 'THEAD');
	    },
	    get tFoot() {
	      return firstChild(this, 'TFOOT');
	    },
	    get rows() {
	      if (!this._rows) {
	        var table = this;
	        this._rows = new core.HTMLCollection(this._ownerDocument, function() {
	          var sections = [table.tHead].concat(table.tBodies._toArray(), table.tFoot).filter(function(s) { return !!s });

	          if (sections.length === 0) {
	            return core.mapDOMNodes(table, false, function(el) {
	              return el.tagName === 'TR';
	            });
	          }

	          return sections.reduce(function(prev, s) {
	            return prev.concat(s.rows._toArray());
	          }, []);

	        });
	      }
	      return this._rows;
	    },
	    get tBodies() {
	      if (!this._tBodies) {
	        this._tBodies = descendants(this, 'TBODY', false);
	      }
	      return this._tBodies;
	    },
	    createTHead: function() {
	      var el = this.tHead;
	      if (!el) {
	        el = this._ownerDocument.createElement('THEAD');
	        this.appendChild(el);
	      }
	      return el;
	    },
	    deleteTHead: function() {
	      var el = this.tHead;
	      if (el) {
	        el._parentNode.removeChild(el);
	      }
	    },
	    createTFoot: function() {
	      var el = this.tFoot;
	      if (!el) {
	        el = this._ownerDocument.createElement('TFOOT');
	        this.appendChild(el);
	      }
	      return el;
	    },
	    deleteTFoot: function() {
	      var el = this.tFoot;
	      if (el) {
	        el._parentNode.removeChild(el);
	      }
	    },
	    createCaption: function() {
	      var el = this.caption;
	      if (!el) {
	        el = this._ownerDocument.createElement('CAPTION');
	        this.appendChild(el);
	      }
	      return el;
	    },
	    deleteCaption: function() {
	      var c = this.caption;
	      if (c) {
	        c._parentNode.removeChild(c);
	      }
	    },
	    insertRow: function(index) {
	      var tr = this._ownerDocument.createElement('TR');
	      if (this._childNodes.length === 0) {
	        this.appendChild(this._ownerDocument.createElement('TBODY'));
	      }
	      var rows = this.rows._toArray();
	      if (index < -1 || index > rows.length) {
	        throw new core.DOMException(core.INDEX_SIZE_ERR);
	      }
	      if (index === -1 || (index === 0 && rows.length === 0)) {
	        this.tBodies.item(0).appendChild(tr);
	      }
	      else if (index === rows.length) {
	        var ref = rows[index-1];
	        ref._parentNode.appendChild(tr);
	      }
	      else {
	        var ref = rows[index];
	        ref._parentNode.insertBefore(tr, ref);
	      }
	      return tr;
	    },
	    deleteRow: function(index) {
	      var rows = this.rows._toArray(), l = rows.length;
	      if (index === -1) {
	        index = l-1;
	      }
	      if (index < 0 || index >= l) {
	        throw new core.DOMException(core.INDEX_SIZE_ERR);
	      }
	      var tr = rows[index];
	      tr._parentNode.removeChild(tr);
	    }
	  },
	  attributes: [
	    'align',
	    'bgColor',
	    'border',
	    'cellPadding',
	    'cellSpacing',
	    'frame',
	    'rules',
	    'summary',
	    'width'
	  ]
	});

	define('HTMLTableCaptionElement', {
	  tagName: 'CAPTION',
	  attributes: [
	    'align'
	  ]
	});

	define('HTMLTableColElement', {
	  tagNames: ['COL','COLGROUP'],
	  attributes: [
	    'align',
	    {prop: 'ch', attr: 'char'},
	    {prop: 'chOff', attr: 'charoff'},
	    {prop: 'span', type: 'long'},
	    'vAlign',
	    'width',
	  ]
	});

	define('HTMLTableSectionElement', {
	  tagNames: ['THEAD','TBODY','TFOOT'],
	  proto: {
	    get rows() {
	      if (!this._rows) {
	        this._rows = descendants(this, 'TR', false);
	      }
	      return this._rows;
	    },
	    insertRow: function(index) {
	      var tr = this._ownerDocument.createElement('TR');
	      var rows = this.rows._toArray();
	      if (index < -1 || index > rows.length) {
	        throw new core.DOMException(core.INDEX_SIZE_ERR);
	      }
	      if (index === -1 || index === rows.length) {
	        this.appendChild(tr);
	      }
	      else {
	        var ref = rows[index];
	        this.insertBefore(tr, ref);
	      }
	      return tr;
	    },
	    deleteRow: function(index) {
	      var rows = this.rows._toArray();
	      if (index === -1) {
	        index = rows.length-1;
	      }
	      if (index < 0 || index >= rows.length) {
	        throw new core.DOMException(core.INDEX_SIZE_ERR);
	      }
	      var tr = this.rows[index];
	      this.removeChild(tr);
	    }
	  },
	  attributes: [
	    'align',
	    {prop: 'ch', attr: 'char'},
	    {prop: 'chOff', attr: 'charoff'},
	    {prop: 'span', type: 'long'},
	    'vAlign',
	    'width',
	  ]
	});

	define('HTMLTableRowElement', {
	  tagName: 'TR',
	  proto: {
	    get cells() {
	      if (!this._cells) {
	        this._cells = new core.HTMLCollection(this, core.mapper(this, function(n) {
	          return n.nodeName === 'TD' || n.nodeName === 'TH';
	        }, false));
	      }
	      return this._cells;
	    },
	    get rowIndex() {
	      var table = closest(this, 'TABLE');
	      return table ? table.rows._toArray().indexOf(this) : -1;
	    },

	    get sectionRowIndex() {
	      return this._parentNode.rows._toArray().indexOf(this);
	    },
	    insertCell: function(index) {
	      var td = this._ownerDocument.createElement('TD');
	      var cells = this.cells._toArray();
	      if (index < -1 || index > cells.length) {
	        throw new core.DOMException(core.INDEX_SIZE_ERR);
	      }
	      if (index === -1 || index === cells.length) {
	        this.appendChild(td);
	      }
	      else {
	        var ref = cells[index];
	        this.insertBefore(td, ref);
	      }
	      return td;
	    },
	    deleteCell: function(index) {
	      var cells = this.cells._toArray();
	      if (index === -1) {
	        index = cells.length-1;
	      }
	      if (index < 0 || index >= cells.length) {
	        throw new core.DOMException(core.INDEX_SIZE_ERR);
	      }
	      var td = this.cells[index];
	      this.removeChild(td);
	    }
	  },
	  attributes: [
	    'align',
	    'bgColor',
	    {prop: 'ch', attr: 'char'},
	    {prop: 'chOff', attr: 'charoff'},
	    'vAlign'
	  ]
	});

	define('HTMLTableCellElement', {
	  tagNames: ['TH','TD'],
	  proto: {
	    _headers: null,
	    set headers(h) {
	      if (h === '') {
	        //Handle resetting headers so the dynamic getter returns a query
	        this._headers = null;
	        return;
	      }
	      if (!(h instanceof Array)) {
	        h = [h];
	      }
	      this._headers = h;
	    },
	    get headers() {
	      if (this._headers) {
	        return this._headers.join(' ');
	      }
	      var cellIndex = this.cellIndex,
	          headings  = [],
	          siblings  = this._parentNode.getElementsByTagName(this.tagName);

	      for (var i=0; i<siblings.length; i++) {
	        if (siblings.item(i).cellIndex >= cellIndex) {
	          break;
	        }
	        headings.push(siblings.item(i).id);
	      }
	      this._headers = headings;
	      return headings.join(' ');
	    },
	    get cellIndex() {
	      return closest(this, 'TR').cells._toArray().indexOf(this);
	    }
	  },
	  attributes: [
	    'abbr',
	    'align',
	    'axis',
	    'bgColor',
	    {prop: 'ch', attr: 'char'},
	    {prop: 'chOff', attr: 'charoff'},
	    {prop: 'colSpan', type: 'long'},
	    'height',
	    {prop: 'noWrap', type: 'boolean'},
	    {prop: 'rowSpan', type: 'long'},
	    'scope',
	    'vAlign',
	    'width'
	  ]
	});

	define('HTMLFrameSetElement', {
	  tagName: 'FRAMESET',
	  attributes: [
	    'cols',
	    'rows'
	  ]
	});

	function loadFrame (frame) {
	  if (frame._contentDocument) {
	    // We don't want to access document.parentWindow, since the getter will
	    // cause a new window to be allocated if it doesn't exist.  Probe the
	    // private variable instead.
	    if (frame._contentDocument._parentWindow) {
	      // close calls delete on its document.
	      frame._contentDocument.parentWindow.close();
	    } else {
	      delete frame._contentDocument;
	    }
	  }

	  var src = frame.src.trim() === '' ? 'about:blank' : frame.src;
	  var parentDoc = frame._ownerDocument;

	  // If the URL can't be resolved or the src attribute is missing / blank,
	  // then url should be set to the string "about:blank".
	  // (http://www.whatwg.org/specs/web-apps/current-work/#the-iframe-element)
	  var url = core.resourceLoader.resolve(parentDoc, src);
	  var contentDoc = frame._contentDocument = new core.HTMLDocument({
	    parsingMode: 'html',
	    url: url,
	    documentRoot: Path.dirname(url)
	  });
	  applyDocumentFeatures(contentDoc, parentDoc.implementation._features);

	  var parent = parentDoc.parentWindow;
	  var contentWindow = contentDoc.parentWindow;
	  contentWindow.parent = parent;
	  contentWindow.top = parent.top;

	  // Handle about:blank with a simulated load of an empty document.
	  if(url === 'about:blank') {
	    core.resourceLoader.enqueue(frame, function() {
	      contentDoc.write();
	      contentDoc.close();
	    })();
	  } else {
	    core.resourceLoader.load(frame, url, function(html, filename) {
	      contentDoc.write(html);
	      contentDoc.close();
	    });
	  }
	}

	define('HTMLFrameElement', {
	  tagName: 'FRAME',
	  init : function () {
	    // Set up the frames array.  window.frames really just returns a reference
	    // to the window object, so the frames array is just implemented as indexes
	    // on the window.
	    var parent = this._ownerDocument.parentWindow;
	    var frameID = parent._length++;
	    var self = this;
	    defineGetter(parent, frameID, function () {
	      return self.contentWindow;
	    });

	    // The contentDocument/contentWindow shouldn't be created until the frame
	    // is inserted:
	    // "When an iframe element is first inserted into a document, the user
	    //  agent must create a nested browsing context, and then process the
	    //  iframe attributes for the first time."
	    //  (http://www.whatwg.org/specs/web-apps/current-work/#the-iframe-element)
	    this._initInsertListener = function () {
	      loadFrame(self);
	    };
	    this.addEventListener('DOMNodeInsertedIntoDocument', this._initInsertListener, false);
	  },
	  proto: {
	    _attrModified: function(name, value, oldVal) {
	      core.HTMLElement.prototype._attrModified.call(this, name, value, oldVal);
	      var self = this;
	      if (name === 'name') {
	        // Remove named frame access.
	        if (oldVal) {
	          this._ownerDocument.parentWindow._frame(oldVal);
	        }
	        // Set up named frame access.
	        if (value) {
	          this._ownerDocument.parentWindow._frame(value, this);
	        }
	      } else if (name === 'src') {
	        // Page we don't fetch the page until the node is inserted. This at
	        // least seems to be the way Chrome does it.
	        if (!this._attachedToDocument) {
	          if (!this._waitingOnInsert) {
	            // First, remove the listener added in 'init'.
	            this.removeEventListener('DOMNodeInsertedIntoDocument',
	                                     this._initInsertListener, false)

	            // If we aren't already waiting on an insert, add a listener.
	            // This guards against src being set multiple times before the frame
	            // is inserted into the document - we don't want to register multiple
	            // callbacks.
	            this.addEventListener('DOMNodeInsertedIntoDocument', function loader () {
	              self.removeEventListener('DOMNodeInsertedIntoDocument', loader, false);
	              this._waitingOnInsert = false;
	              loadFrame(self);
	            }, false);
	            this._waitingOnInsert = true;
	          }
	        } else {
	          loadFrame(self);
	        }
	      }
	    },
	    _contentDocument : null,
	    get contentDocument() {
	      if (this._contentDocument == null) {
	        this._contentDocument = new core.HTMLDocument({ parsingMode: "html" });
	      }
	      return this._contentDocument;
	    },
	    get contentWindow() {
	      return this.contentDocument.parentWindow;
	    }
	  },
	  attributes: [
	    'frameBorder',
	    'longDesc',
	    'marginHeight',
	    'marginWidth',
	    'name',
	    {prop: 'noResize', type: 'boolean'},
	    'scrolling',
	    {prop: 'src', type: 'string', write: false}
	  ]
	});

	define('HTMLIFrameElement', {
	  tagName: 'IFRAME',
	  parentClass: core.HTMLFrameElement,
	  attributes: [
	    'align',
	    'frameBorder',
	    'height',
	    'longDesc',
	    'marginHeight',
	    'marginWidth',
	    'name',
	    'scrolling',
	    'src',
	    'width'
	  ]
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 179 */
/***/ function(module, exports) {

	exports.javascript = function(element, code, filename) {
	  var doc = element.ownerDocument, window = doc && doc.parentWindow;
	  if (window) {
	    try {
	      window.run(code, filename);
	    } catch (e) {
	      element.raise(
	        'error', 'Running ' + filename + ' failed.',
	        {error: e, filename: filename}
	      );
	    }
	  }
	};


/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	var core = __webpack_require__(11),
	    utils = __webpack_require__(3),
	    defineGetter = utils.defineGetter,
	    defineSetter = utils.defineSetter,
	    inheritFrom = utils.inheritFrom,
	    cssom = __webpack_require__(84),
	    cssstyle = __webpack_require__(85),
	    assert = __webpack_require__(661);

	// What works now:
	// - Accessing the rules defined in individual stylesheets
	// - Modifications to style content attribute are reflected in style property
	// - Modifications to style property are reflected in style content attribute
	// TODO
	// - Modifications to style element's textContent are reflected in sheet property.
	// - Modifications to style element's sheet property are reflected in textContent.
	// - Modifications to link.href property are reflected in sheet property.
	// - Less-used features of link: disabled
	// - Less-used features of style: disabled, scoped, title
	// - CSSOM-View
	//   - getComputedStyle(): requires default stylesheet, cascading, inheritance,
	//     filtering by @media (screen? print?), layout for widths/heights
	// - Load events are not in the specs, but apparently some browsers
	//   implement something. Should onload only fire after all @imports have been
	//   loaded, or only the primary sheet?

	core.StyleSheet = cssom.StyleSheet;
	core.MediaList = cssom.MediaList;
	core.CSSStyleSheet = cssom.CSSStyleSheet;
	core.CSSRule = cssom.CSSRule;
	core.CSSStyleRule = cssom.CSSStyleRule;
	core.CSSMediaRule = cssom.CSSMediaRule;
	core.CSSImportRule = cssom.CSSImportRule;
	core.CSSStyleDeclaration = cssstyle.CSSStyleDeclaration;

	// Relavant specs
	// http://www.w3.org/TR/DOM-Level-2-Style (2000)
	// http://www.w3.org/TR/cssom-view/ (2008)
	// http://dev.w3.org/csswg/cssom/ (2010) Meant to replace DOM Level 2 Style
	// http://www.whatwg.org/specs/web-apps/current-work/multipage/ HTML5, of course
	// http://dev.w3.org/csswg/css-style-attr/  not sure what's new here

	// Objects that aren't in cssom library but should be:
	//   CSSRuleList  (cssom just uses array)
	//   CSSFontFaceRule
	//   CSSPageRule

	// These rules don't really make sense to implement, so CSSOM draft makes them
	// obsolete.
	//   CSSCharsetRule
	//   CSSUnknownRule

	// These objects are considered obsolete by CSSOM draft, although modern
	// browsers implement them.
	//   CSSValue
	//   CSSPrimitiveValue
	//   CSSValueList
	//   RGBColor
	//   Rect
	//   Counter

	// StyleSheetList -
	// http://www.w3.org/TR/DOM-Level-2-Style/stylesheets.html#StyleSheets-StyleSheetList
	// added a push method to help manage the length
	core.StyleSheetList = function() {
	  this._length = 0;
	};
	core.StyleSheetList.prototype = {
	  item: function (i) {
	    return this[i];
	  },
	  push: function (sheet) {
	    this[this._length] = sheet;
	    this._length++;
	  },
	  get length() {
	    return this._length;
	  }
	};

	defineGetter(core.Document.prototype, 'styleSheets', function() {
	  if (!this._styleSheets) {
	    this._styleSheets = new core.StyleSheetList();
	  }
	  // TODO: each style and link element should register its sheet on creation
	  // and remove it on removal.
	  return this._styleSheets;
	});


	/**
	 * @this {core.HTMLLinkElement|core.HTMLStyleElement}
	 * @param {string} url
	 * @param {cssom.CSSStyleSheet} sheet
	 * @see http://dev.w3.org/csswg/cssom/#requirements-on-user-agents-implementing0
	 */
	function fetchStylesheet(url, sheet) {
	  core.resourceLoader.load(this, url, function(data, filename) {
	    // TODO: abort if the content-type is not text/css, and the document is
	    // in strict mode
	    sheet.href = core.resourceLoader.resolve(this.ownerDocument, url);
	    evaluateStylesheet.call(this, data, sheet, url);
	  });
	}
	/**
	 * @this {core.HTMLLinkElement|core.HTMLStyleElement}
	 * @param {string} data
	 * @param {cssom.CSSStyleSheet} sheet
	 * @param {string} baseUrl
	 */
	function evaluateStylesheet(data, sheet, baseUrl) {
	  // this is the element
	  var newStyleSheet = cssom.parse(data);
	  var spliceArgs = newStyleSheet.cssRules;
	  spliceArgs.unshift(0, sheet.cssRules.length);
	  Array.prototype.splice.apply(sheet.cssRules, spliceArgs);
	  scanForImportRules.call(this, sheet.cssRules, baseUrl);
	  this.ownerDocument.styleSheets.push(sheet);
	}
	/**
	 * @this {core.HTMLLinkElement|core.HTMLStyleElement}
	 * @param {cssom.CSSStyleSheet} sheet
	 * @param {string} baseUrl
	 */
	function scanForImportRules(cssRules, baseUrl) {
	  if (!cssRules) return;
	  for (var i = 0; i < cssRules.length; ++i) {
	    if (cssRules[i].cssRules) {
	      // @media rule: keep searching inside it.
	      scanForImportRules.call(this, cssRules[i].cssRules, baseUrl);
	    } else if (cssRules[i].href) {
	      // @import rule: fetch the resource and evaluate it.
	      // See http://dev.w3.org/csswg/cssom/#css-import-rule
	      //     If loading of the style sheet fails its cssRules list is simply
	      //     empty. I.e. an @import rule always has an associated style sheet.
	      fetchStylesheet.call(this, cssRules[i].href, this.sheet);
	    }
	  }
	}

	/**
	 * @param {string} data
	 * @param {cssstyle.CSSStyleDeclaration} style
	 */
	function evaluateStyleAttribute(data) {
	  // this is the element.

	}

	/**
	 * Subclass of core.Attr that reflects the current cssText.
	 */
	function StyleAttr(node, value) {
	  this._node = node;
	  core.Attr.call(this, node.ownerDocument, 'style');
	  if (!this._node._ignoreValueOfStyleAttr) {
	    this.nodeValue = value;
	  }
	}
	inheritFrom(core.Attr, StyleAttr, {
	  get nodeValue() {
	    if (typeof this._node._style === 'string') {
	      return this._node._style;
	    } else {
	      return this._node.style.cssText;
	    }
	  },
	  set nodeValue(value) {
	    this._node._style = value;
	  }
	});

	var $setNode_super = core.AttributeList.prototype.$setNode;
	/**
	 * Overwrite core.AttrNodeMap#setNamedItem to create a StyleAttr instance
	 * instead of a core.Attr if the name equals 'style'.
	 */
	core.AttributeList.prototype.$setNode = function(attr) {
	  if (attr.name == 'style') {
	    attr = new StyleAttr(this._parentNode, attr.nodeValue);
	  }
	  return $setNode_super.call(this, attr);
	};

	/**
	 * Lazily create a CSSStyleDeclaration.
	 */
	defineGetter(core.HTMLElement.prototype, 'style', function() {
	  if (typeof this._style === 'string') {
	    // currently, cssom's parse doesn't really work if you pass in
	    // {state: 'name'}, so instead we just build a dummy sheet.
	    var styleSheet = cssom.parse('dummy{' + this._style + '}');
	    this._style = new cssstyle.CSSStyleDeclaration();
	    if (styleSheet.cssRules.length > 0 && styleSheet.cssRules[0].style) {
	      var newStyle = styleSheet.cssRules[0].style;
	      for (var i = 0; i < newStyle.length; ++i) {
	        var prop = newStyle[i];
	        this._style.setProperty(
	            prop,
	            newStyle.getPropertyValue(prop),
	            newStyle.getPropertyPriority(prop));
	      }
	    }
	  }
	  if (!this._style) {
	    this._style = new cssstyle.CSSStyleDeclaration();

	  }
	  if (!this.getAttributeNode('style')) {
	    // Tell the StyleAttr constructor to not overwrite this._style
	    this._ignoreValueOfStyleAttr = true;
	    this.setAttribute('style');
	    this._ignoreValueOfStyleAttr = false;
	  }
	  return this._style;
	});

	assert.equal(undefined, core.HTMLLinkElement._init);
	core.HTMLLinkElement._init = function() {
	  this.addEventListener('DOMNodeInsertedIntoDocument', function() {
	    if (!/(?:[ \t\n\r\f]|^)stylesheet(?:[ \t\n\r\f]|$)/i.test(this.rel)) {
	      // rel is a space-separated list of tokens, and the original rel types
	      // are case-insensitive.
	      return;
	    }
	    if (this.href) {
	      fetchStylesheet.call(this, this.href, this.sheet);
	    }
	  });
	  this.addEventListener('DOMNodeRemovedFromDocument', function() {
	  });
	};
	/**
	 * @this {HTMLStyleElement|HTMLLinkElement}
	 */
	var getOrCreateSheet = function() {
	  if (!this._cssStyleSheet) {
	    this._cssStyleSheet = new cssom.CSSStyleSheet();
	  }
	  return this._cssStyleSheet;
	};
	defineGetter(core.HTMLLinkElement.prototype, 'sheet', getOrCreateSheet);

	assert.equal(undefined, core.HTMLStyleElement._init);
	core.HTMLStyleElement._init = function() {
	  //console.log('init style')
	  this.addEventListener('DOMNodeInsertedIntoDocument', function() {
	    //console.log('style inserted')
	    //console.log('sheet: ', this.sheet);
	    if (this.type && this.type !== 'text/css') {
	      //console.log('bad type: ' + this.type)
	      return;
	    }
	    var content = '';
	    this._childNodes.forEach(function (child) {
	      if (child.nodeType === child.TEXT_NODE) { // text node
	        content += child.nodeValue;
	      }
	    });
	    evaluateStylesheet.call(this, content, this.sheet, this._ownerDocument.URL);
	  });
	};
	defineGetter(core.HTMLStyleElement.prototype, 'sheet', getOrCreateSheet);


/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	var core          = __webpack_require__(11),
	    defineGetter  = __webpack_require__(3).defineGetter,
	    defineSetter  = __webpack_require__(3).defineSetter,
	    HtmlToDom     = __webpack_require__(74).HtmlToDom,
	    domToHtml     = __webpack_require__(44).domToHtml;

	/*
	  valuetype DOMString sequence<unsigned short>;
	  typedef   unsigned long long DOMTimeStamp;
	  typedef   any DOMUserData;
	  typedef   Object DOMObject;

	*/
	// ExceptionCode
	core.VALIDATION_ERR                 = 16;
	core.TYPE_MISMATCH_ERR              = 17;

	/*
	  // Introduced in DOM Level 3:
	  interface NameList {
	    DOMString          getName(in unsigned long index);
	    DOMString          getNamespaceURI(in unsigned long index);
	    readonly attribute unsigned long   length;
	    boolean            contains(in DOMString str);
	    boolean            containsNS(in DOMString namespaceURI,
	                                  in DOMString name);
	  };

	  // Introduced in DOM Level 3:
	  interface DOMImplementationList {
	    DOMImplementation  item(in unsigned long index);
	    readonly attribute unsigned long   length;
	  };

	  // Introduced in DOM Level 3:
	  interface DOMImplementationSource {
	    DOMImplementation  getDOMImplementation(in DOMString features);
	    DOMImplementationList getDOMImplementationList(in DOMString features);
	  };
	*/


	core.DOMImplementation.prototype.getFeature = function(feature, version)  {

	};

	/*
	  interface Node {
	    // Modified in DOM Level 3:
	    Node               insertBefore(in Node newChild,
	                                    in Node refChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               replaceChild(in Node newChild,
	                                    in Node oldChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               removeChild(in Node oldChild)
	                                        raises(DOMException);
	    // Modified in DOM Level 3:
	    Node               appendChild(in Node newChild)
	                                        raises(DOMException);
	    boolean            hasChildNodes();
	    Node               cloneNode(in boolean deep);
	    // Modified in DOM Level 3:
	    void               normalize();
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       baseURI;
	*/

	// Compare Document Position
	var DOCUMENT_POSITION_DISCONNECTED = core.Node.DOCUMENT_POSITION_DISCONNECTED =
	                                     core.Node.prototype.DOCUMENT_POSITION_DISCONNECTED = 0x01;

	var DOCUMENT_POSITION_PRECEDING    = core.Node.DOCUMENT_POSITION_PRECEDING =
	                                     core.Node.prototype.DOCUMENT_POSITION_PRECEDING    = 0x02;

	var DOCUMENT_POSITION_FOLLOWING    = core.Node.DOCUMENT_POSITION_FOLLOWING =
	                                     core.Node.prototype.DOCUMENT_POSITION_FOLLOWING    = 0x04;

	var DOCUMENT_POSITION_CONTAINS     = core.Node.DOCUMENT_POSITION_CONTAINS =
	                                     core.Node.prototype.DOCUMENT_POSITION_CONTAINS     = 0x08;

	var DOCUMENT_POSITION_CONTAINED_BY = core.Node.DOCUMENT_POSITION_CONTAINED_BY =
	                                     core.Node.prototype.DOCUMENT_POSITION_CONTAINED_BY = 0x10;

	var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = core.Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC =
	                                                core.Node.prototype.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 0x20;

	var DOCUMENT_TYPE_NODE = core.Node.prototype.DOCUMENT_TYPE_NODE;

	core.Node.prototype.compareDocumentPosition = function compareDocumentPosition( otherNode ) {
	  if( !(otherNode instanceof core.Node) ) {
	    throw Error("Comparing position against non-Node values is not allowed")
	  }
	  var thisOwner, otherOwner;

	  if( this.nodeType === this.DOCUMENT_NODE)
	    thisOwner = this
	  else
	    thisOwner = this.ownerDocument

	  if( otherNode.nodeType === this.DOCUMENT_NODE)
	    otherOwner = otherNode
	  else
	    otherOwner = otherNode.ownerDocument

	  if( this === otherNode ) return 0
	  if( this === otherNode.ownerDocument ) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	  if( this.ownerDocument === otherNode ) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	  if( thisOwner !== otherOwner ) return DOCUMENT_POSITION_DISCONNECTED

	  // Text nodes for attributes does not have a _parentNode. So we need to find them as attribute child.
	  if( this.nodeType === this.ATTRIBUTE_NODE && this._childNodes && this._childNodes.indexOf(otherNode) !== -1)
	    return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY

	  if( otherNode.nodeType === this.ATTRIBUTE_NODE && otherNode._childNodes && otherNode._childNodes.indexOf(this) !== -1)
	    return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS

	  var point = this
	  var parents = [ ]
	  var previous = null
	  while( point ) {
	    if( point == otherNode ) return DOCUMENT_POSITION_PRECEDING + DOCUMENT_POSITION_CONTAINS
	    parents.push( point )
	    point = point._parentNode
	  }
	  point = otherNode
	  previous = null
	  while( point ) {
	    if( point == this ) return DOCUMENT_POSITION_FOLLOWING + DOCUMENT_POSITION_CONTAINED_BY
	    var location_index = parents.indexOf( point )
	    if( location_index !== -1) {
	     var smallest_common_ancestor = parents[ location_index ]
	     var this_index = smallest_common_ancestor._childNodes.indexOf( parents[location_index - 1] )
	     var other_index = smallest_common_ancestor._childNodes.indexOf( previous )
	     if( this_index > other_index ) {
	           return DOCUMENT_POSITION_PRECEDING
	     }
	     else {
	       return DOCUMENT_POSITION_FOLLOWING
	     }
	    }
	    previous = point
	    point = point._parentNode
	  }
	  return DOCUMENT_POSITION_DISCONNECTED
	};

	// @see http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-textContent
	defineGetter(core.Node.prototype, 'textContent', function() {
	  switch (this.nodeType) {
	    case this.COMMENT_NODE:
	    case this.CDATA_SECTION_NODE:
	    case this.PROCESSING_INSTRUCTION_NODE:
	    case this.TEXT_NODE:
	      return this.nodeValue;

	    case this.ATTRIBUTE_NODE:
	    case this.DOCUMENT_FRAGMENT_NODE:
	    case this.ELEMENT_NODE:
	      var out = '';
	      for (var i = 0 ; i < this._childNodes.length ; ++i) {
	        if (this._childNodes[i].nodeType !== this.COMMENT_NODE &&
	            this._childNodes[i].nodeType !== this.PROCESSING_INSTRUCTION_NODE) {
	          out += this._childNodes[i].textContent || '';
	        }
	      }
	      return out;

	    default:
	      return null;
	  }
	});

	defineSetter(core.Node.prototype, 'textContent', function(txt) {
	  switch (this.nodeType) {
	    case this.COMMENT_NODE:
	    case this.CDATA_SECTION_NODE:
	    case this.PROCESSING_INSTRUCTION_NODE:
	    case this.TEXT_NODE:
	      return this.nodeValue = String(txt);
	  }

	  for (var i = this._childNodes.length; --i >=0;) {
	    this.removeChild(this._childNodes[i]);
	  }
	  if (txt !== "" && txt != null) {
	    this.appendChild(this._ownerDocument.createTextNode(txt));
	  }
	  return txt;
	});

	/*
	    // Introduced in DOM Level 3:
	    DOMString          lookupPrefix(in DOMString namespaceURI);
	    // Introduced in DOM Level 3:
	    boolean            isDefaultNamespace(in DOMString namespaceURI);
	    // Introduced in DOM Level 3:
	    DOMString          lookupNamespaceURI(in DOMString prefix);
	    // Introduced in DOM Level 3:
	    DOMObject          getFeature(in DOMString feature,
	                                  in DOMString version);
	*/
	// Introduced in DOM Level 3:
	core.Node.prototype.setUserData = function(key, data, handler) {
	  var r = this[key] || null;
	  this[key] = data;
	  return(r);
	};

	// Introduced in DOM Level 3:
	core.Node.prototype.getUserData = function(key) {
	  var r = this[key] || null;
	  return(r);
	};
	/*
	  interface NodeList {
	    Node               item(in unsigned long index);
	    readonly attribute unsigned long   length;
	  };

	  interface NamedNodeMap {
	    Node               getNamedItem(in DOMString name);
	    Node               setNamedItem(in Node arg)
	                                        raises(DOMException);
	    Node               removeNamedItem(in DOMString name)
	                                        raises(DOMException);
	    Node               item(in unsigned long index);
	    readonly attribute unsigned long   length;
	    // Introduced in DOM Level 2:
	    Node               getNamedItemNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Node               setNamedItemNS(in Node arg)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Node               removeNamedItemNS(in DOMString namespaceURI,
	                                         in DOMString localName)
	                                        raises(DOMException);
	  };

	  interface CharacterData : Node {
	             attribute DOMString       data;
	                                        // raises(DOMException) on setting
	                                        // raises(DOMException) on retrieval

	    readonly attribute unsigned long   length;
	    DOMString          substringData(in unsigned long offset,
	                                     in unsigned long count)
	                                        raises(DOMException);
	    void               appendData(in DOMString arg)
	                                        raises(DOMException);
	    void               insertData(in unsigned long offset,
	                                  in DOMString arg)
	                                        raises(DOMException);
	    void               deleteData(in unsigned long offset,
	                                  in unsigned long count)
	                                        raises(DOMException);
	    void               replaceData(in unsigned long offset,
	                                   in unsigned long count,
	                                   in DOMString arg)
	                                        raises(DOMException);
	  };

	  interface Attr : Node {
	    readonly attribute DOMString       name;
	    readonly attribute boolean         specified;
	             attribute DOMString       value;
	                                        // raises(DOMException) on setting

	    // Introduced in DOM Level 2:
	    readonly attribute Element         ownerElement;
	    // Introduced in DOM Level 3:
	    readonly attribute TypeInfo        schemaTypeInfo;

	*/
	    // Introduced in DOM Level 3:
	defineGetter(core.Attr.prototype, 'isId', function() {
	  return (this.name.toLowerCase() === 'id');
	});
	/*
	  };

	  interface Element : Node {
	    readonly attribute DOMString       tagName;
	    DOMString          getAttribute(in DOMString name);
	    void               setAttribute(in DOMString name,
	                                    in DOMString value)
	                                        raises(DOMException);
	    void               removeAttribute(in DOMString name)
	                                        raises(DOMException);
	    Attr               getAttributeNode(in DOMString name);
	    Attr               setAttributeNode(in Attr newAttr)
	                                        raises(DOMException);
	    Attr               removeAttributeNode(in Attr oldAttr)
	                                        raises(DOMException);
	    NodeList           getElementsByTagName(in DOMString name);
	    // Introduced in DOM Level 2:
	    DOMString          getAttributeNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    void               setAttributeNS(in DOMString namespaceURI,
	                                      in DOMString qualifiedName,
	                                      in DOMString value)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    void               removeAttributeNS(in DOMString namespaceURI,
	                                         in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               getAttributeNodeNS(in DOMString namespaceURI,
	                                          in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               setAttributeNodeNS(in Attr newAttr)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,
	                                              in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    boolean            hasAttribute(in DOMString name);
	    // Introduced in DOM Level 2:
	    boolean            hasAttributeNS(in DOMString namespaceURI,
	                                      in DOMString localName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute TypeInfo        schemaTypeInfo;
	    // Introduced in DOM Level 3:
	    void               setIdAttribute(in DOMString name,
	                                      in boolean isId)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    void               setIdAttributeNS(in DOMString namespaceURI,
	                                        in DOMString localName,
	                                        in boolean isId)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    void               setIdAttributeNode(in Attr idAttr,
	                                          in boolean isId)
	                                        raises(DOMException);
	  };

	  interface Text : CharacterData {
	    Text               splitText(in unsigned long offset)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute boolean         isElementContentWhitespace;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       wholeText;
	    // Introduced in DOM Level 3:
	    Text               replaceWholeText(in DOMString content)
	                                        raises(DOMException);
	  };

	  interface Comment : CharacterData {
	  };

	  // Introduced in DOM Level 3:
	  interface TypeInfo {
	    readonly attribute DOMString       typeName;
	    readonly attribute DOMString       typeNamespace;

	    // DerivationMethods
	    const unsigned long       DERIVATION_RESTRICTION         = 0x00000001;
	    const unsigned long       DERIVATION_EXTENSION           = 0x00000002;
	    const unsigned long       DERIVATION_UNION               = 0x00000004;
	    const unsigned long       DERIVATION_LIST                = 0x00000008;

	    boolean            isDerivedFrom(in DOMString typeNamespaceArg,
	                                     in DOMString typeNameArg,
	                                     in unsigned long derivationMethod);
	  };
	*/
	// Introduced in DOM Level 3:
	core.UserDataHandler = function() {};
	core.UserDataHandler.prototype.NODE_CLONED   = 1;
	core.UserDataHandler.prototype.NODE_IMPORTED = 2;
	core.UserDataHandler.prototype.NODE_DELETED  = 3;
	core.UserDataHandler.prototype.NODE_RENAMED  = 4;
	core.UserDataHandler.prototype.NODE_ADOPTED  = 5;
	core.UserDataHandler.prototype.handle = function(operation, key, data, src, dst) {};

	// Introduced in DOM Level 3:
	core.DOMError = function(severity, message, type, relatedException, relatedData, location) {
	  this._severity         = severity;
	  this._message          = message;
	  this._type             = type;
	  this._relatedException = relatedException;
	  this._relatedData      = relatedData;
	  this._location         = location;
	};
	core.DOMError.prototype = {};
	core.DOMError.prototype.SEVERITY_WARNING     = 1;
	core.DOMError.prototype.SEVERITY_ERROR       = 2;
	core.DOMError.prototype.SEVERITY_FATAL_ERROR = 3;
	defineGetter(core.DOMError.prototype, 'severity', function() {
	  return this._severity;
	});
	defineGetter(core.DOMError.prototype, 'message', function() {
	  return this._message;
	});
	defineGetter(core.DOMError.prototype, 'type', function() {
	  return this._type;
	});
	defineGetter(core.DOMError.prototype, 'relatedException', function() {
	  return this._relatedException;
	});
	defineGetter(core.DOMError.prototype, 'relatedData', function() {
	  return this._relatedData;
	});
	defineGetter(core.DOMError.prototype, 'location', function() {
	  return this._location;
	});

	/*
	  // Introduced in DOM Level 3:
	  interface DOMErrorHandler {
	    boolean            handleError(in DOMError error);
	  };

	  // Introduced in DOM Level 3:
	  interface DOMLocator {
	    readonly attribute long            lineNumber;
	    readonly attribute long            columnNumber;
	    readonly attribute long            byteOffset;
	    readonly attribute long            utf16Offset;
	    readonly attribute Node            relatedNode;
	    readonly attribute DOMString       uri;
	  };
	*/

	// Introduced in DOM Level 3:
	core.DOMConfiguration = function(){
	  var possibleParameterNames = {
	    'canonical-form': [false, true], // extra rules for true
	    'cdata-sections': [true, false],
	    'check-character-normalization': [false, true],
	    'comments': [true, false],
	    'datatype-normalization': [false, true],
	    'element-content-whitespace': [true, false],
	    'entities': [true, false],
	    // 'error-handler': [],
	    'infoset': [undefined, true, false], // extra rules for true
	    'namespaces': [true, false],
	    'namespace-declarations': [true, false], // only checked if namespaces is true
	    'normalize-characters': [false, true],
	    // 'schema-location': [],
	    // 'schema-type': [],
	    'split-cdata-sections': [true, false],
	    'validate': [false, true],
	    'validate-if-schema': [false, true],
	    'well-formed': [true, false]
	  }
	};

	core.DOMConfiguration.prototype = {
	  setParameter: function(name, value) {},
	  getParameter: function(name) {},
	  canSetParameter: function(name, value) {},
	  parameterNames: function() {}
	};

	//core.Document.prototype._domConfig = new core.DOMConfiguration();
	defineGetter(core.Document.prototype, 'domConfig', function() {
	  return this._domConfig || new core.DOMConfiguration();;
	});

	// Introduced in DOM Level 3:
	core.DOMStringList = function() {};

	core.DOMStringList.prototype = {
	  item: function() {},
	  length: function() {},
	  contains: function() {}
	};


	/*
	  interface CDATASection : Text {
	  };

	  interface DocumentType : Node {
	    readonly attribute DOMString       name;
	    readonly attribute NamedNodeMap    entities;
	    readonly attribute NamedNodeMap    notations;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       publicId;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       systemId;
	    // Introduced in DOM Level 2:
	    readonly attribute DOMString       internalSubset;
	  };

	  interface Notation : Node {
	    readonly attribute DOMString       publicId;
	    readonly attribute DOMString       systemId;
	  };

	  interface Entity : Node {
	    readonly attribute DOMString       publicId;
	    readonly attribute DOMString       systemId;
	    readonly attribute DOMString       notationName;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       inputEncoding;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlEncoding;
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlVersion;
	  };

	  interface EntityReference : Node {
	  };

	  interface ProcessingInstruction : Node {
	    readonly attribute DOMString       target;
	             attribute DOMString       data;
	                                        // raises(DOMException) on setting

	  };

	  interface DocumentFragment : Node {
	  };

	  interface Document : Node {
	    // Modified in DOM Level 3:
	    readonly attribute DocumentType    doctype;
	    readonly attribute DOMImplementation implementation;
	    readonly attribute Element         documentElement;
	    Element            createElement(in DOMString tagName)
	                                        raises(DOMException);
	    DocumentFragment   createDocumentFragment();
	    Text               createTextNode(in DOMString data);
	    Comment            createComment(in DOMString data);
	    CDATASection       createCDATASection(in DOMString data)
	                                        raises(DOMException);
	    ProcessingInstruction createProcessingInstruction(in DOMString target,
	                                                      in DOMString data)
	                                        raises(DOMException);
	    Attr               createAttribute(in DOMString name)
	                                        raises(DOMException);
	    EntityReference    createEntityReference(in DOMString name)
	                                        raises(DOMException);
	    NodeList           getElementsByTagName(in DOMString tagname);
	    // Introduced in DOM Level 2:
	    Node               importNode(in Node importedNode,
	                                  in boolean deep)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Element            createElementNS(in DOMString namespaceURI,
	                                       in DOMString qualifiedName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    Attr               createAttributeNS(in DOMString namespaceURI,
	                                         in DOMString qualifiedName)
	                                        raises(DOMException);
	    // Introduced in DOM Level 2:
	    NodeList           getElementsByTagNameNS(in DOMString namespaceURI,
	                                              in DOMString localName);
	    // Introduced in DOM Level 2:
	    Element            getElementById(in DOMString elementId);
	*/
	/*
	    // Introduced in DOM Level 3:
	    readonly attribute DOMString       xmlEncoding;
	    // Introduced in DOM Level 3:
	             attribute boolean         xmlStandalone;
	                                        // raises(DOMException) on setting

	    // Introduced in DOM Level 3:
	             attribute DOMString       xmlVersion;
	                                        // raises(DOMException) on setting

	    // Introduced in DOM Level 3:
	             attribute boolean         strictErrorChecking;
	    // Introduced in DOM Level 3:
	             attribute DOMString       documentURI;
	    // Introduced in DOM Level 3:
	    Node               adoptNode(in Node source)
	                                        raises(DOMException);
	    // Introduced in DOM Level 3:
	    readonly attribute DOMConfiguration domConfig;
	    // Introduced in DOM Level 3:
	    void               normalizeDocument();
	    // Introduced in DOM Level 3:
	    Node               renameNode(in Node n,
	                                  in DOMString namespaceURI,
	                                  in DOMString qualifiedName)
	                                        raises(DOMException);
	  };
	};

	#endif // _DOM_IDL_
	*/


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	// w3c Load/Save functionality: http://www.w3.org/TR/2004/REC-DOM-Level-3-LS-20040407/

	var core = __webpack_require__(11);
	var createFrom = __webpack_require__(3).createFrom;

	var ls = {};

	// TODO: what is this?
	//typedef dom::DOMConfiguration DOMConfiguration;

	ls.LSException = function LSException(code) {
	  this.code = code;
	};

	ls.LSException.prototype = {
	  // LSExceptionCode
	  PARSE_ERR                       : 81,
	  SERIALIZE_ERR                   : 82
	};

	ls.DOMImplementationLS = function DOMImplementationLS() {

	};

	var DOMImplementationExtension = {

	  // DOMImplementationLSMode
	  MODE_SYNCHRONOUS  : 1,
	  MODE_ASYNCHRONOUS : 2,

	  // raises(dom::DOMException);
	  createLSParser : function(/* int */ mode, /* string */ schemaType) {
	    return new ls.LSParser(mode, schemaType);
	  },

	  createLSSerializer : function() {
	    return new ls.LSSerializer();
	  },

	  createLSInput : function() {
	    return new ls.LSInput();
	  },

	  createLSOutput : function() {
	    return new ls.LSOutput();
	  }
	};

	Object.keys(DOMImplementationExtension).forEach(function(k, v) {
	  core.DOMImplementation.prototype[k] = DOMImplementationExtension[k];
	});

	ls.DOMImplementationLS.prototype = DOMImplementationExtension;

	core.Document.getFeature = function() {
	  return DOMImplementationExtension;
	};

	ls.LSParser = function LSParser() {
	  this._domConfig = new core.DOMConfiguration();
	};
	ls.LSParser.prototype = {
	  get domConfig() { return this._domConfig; },
	  get filter() { return this._filter || null; },
	  set filter(value) { this._filter = value; },
	  get async() { return this._async; },
	  get busy() { return this._busy; },

	  // raises(dom::DOMException, LSException);
	  parse : function (/* LSInput */ input) {
	    var doc = new core.Document();
	    doc._inputEncoding = 'UTF-16';
	    return doc;
	  },

	  // raises(dom::DOMException, LSException);
	  parseURI : function(/* string */ uri) {
	    return new core.Document();
	  },

	  // ACTION_TYPES
	  ACTION_APPEND_AS_CHILDREN       : 1,
	  ACTION_REPLACE_CHILDREN         : 2,
	  ACTION_INSERT_BEFORE            : 3,
	  ACTION_INSERT_AFTER             : 4,
	  ACTION_REPLACE                  : 5,

	  // @returns Node
	  // @raises DOMException, LSException
	  parseWithContext                : function(/* LSInput */ input, /* Node */ contextArg, /* int */ action) {
	    return new core.Node();
	  },

	  abort                           : function() {
	    // TODO: implement
	  }
	};

	ls.LSInput = function LSInput() {};
	ls.LSInput.prototype = {
	  get characterStream() { return this._characterStream || null; },
	  set characterStream(value) { this._characterStream = value; },
	  get byteStream() { return this._byteStream || null; },
	  set byteStream(value) { this._byteStream = value; },
	  get stringData() { return this._stringData || null; },
	  set stringData(value) { this._stringData = value; },
	  get systemId() { return this._systemId || null; },
	  set systemId(value) { this._systemId = value; },
	  get publicId() { return this._publicId || null; },
	  set publicId(value) { this._publicId = value; },
	  get baseURI() { return this._baseURI || null; },
	  set baseURI(value) { this._baseURI = value; },
	  get encoding() { return this._encoding || null; },
	  set encoding(value) { this._encoding = value; },
	  get certifiedText() { return this._certifiedText || null; },
	  set certifiedText(value) { this._certifiedText = value; },
	};

	ls.LSResourceResolver = function LSResourceResolver() {};

	// @returns LSInput
	ls.LSResourceResolver.prototype.resolveResource = function(type, namespaceURI, publicId, systemId, baseURI) {
	  return new ls.LSInput();
	};

	ls.LSParserFilter = function LSParserFilter() {};
	ls.LSParserFilter.prototype = {

	  // Constants returned by startElement and acceptNode
	  FILTER_ACCEPT                   : 1,
	  FILTER_REJECT                   : 2,
	  FILTER_SKIP                     : 3,
	  FILTER_INTERRUPT                : 4,

	  get whatToShow() { return this._whatToShow; },

	  // @returns int
	  startElement : function(/* Element */ elementArg) {
	    return 0;
	  },

	  // @returns int
	  acceptNode : function(/* Node */ nodeArg) {
	    return nodeArg;
	  }
	};

	ls.LSSerializer = function LSSerializer() {
	  this._domConfig = new core.DOMConfiguration();
	};
	ls.LSSerializer.prototype = {
	  get domConfig() { return this._domConfig; },
	  get newLine() { return this._newLine || null; },
	  set newLine(value) { this._newLine = value; },
	  get filter() { return this._filter || null; },
	  set filter(value) { this._filter = value; },

	  // @returns boolean
	  // @raises LSException
	  write : function(/* Node */ nodeArg, /* LSOutput */ destination) {
	   return true;
	  },

	  // @returns boolean
	  // @raises LSException
	  writeToURI : function(/* Node */ nodeArg, /* string */ uri) {
	   return true;
	  },

	  // @returns string
	  // @raises DOMException, LSException
	  writeToString : function(/* Node */ nodeArg) {
	    return "";
	  }
	};

	ls.LSOutput = function LSOutput() {};
	ls.LSOutput.prototype = {
	  get characterStream() { return this._characterStream || null; },
	  set characterStream(value) { this._characterStream = value; },
	  get byteStream() { return this._byteStream || null; },
	  set byteStream(value) { this._byteStream = value; },
	  get systemId() { return this._systemId || null; },
	  set systemId(value) { this._systemId = value; },
	  get encoding() { return this._encoding || null; },
	  set encoding(value) { this._encoding = value; },
	};

	ls.LSProgressEvent = function LSProgressEvent() {};
	ls.LSProgressEvent.prototype = createFrom(core.Event, {
	  constructor: ls.LSProgressEvent,
	  get input() { return this._input; },
	  get position() { return this._position; },
	  get totalSize() { return this._totalSize; },
	});

	ls.LSLoadEvent = function LSLoadEvent() {};
	ls.LSLoadEvent.prototype = createFrom(core.Event, {
	  get newDocument() { return this._newDocument; },
	  get input() { return this._input; },
	});


	// TODO: do traversal
	ls.LSSerializerFilter = function LSSerializerFilter() {};
	ls.LSSerializerFilter.prototype = {
	  get whatToShow() { return this._whatToShow; },
	};

	// ls.LSSerializerFilter.prototype.__proto__ = level2.traversal.NodeFiler;



/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	/** Here is yet another implementation of XPath 1.0 in Javascript.
	 *
	 * My goal was to make it relatively compact, but as I fixed all the axis bugs
	 * the axes became more and more complicated. :-(.
	 *
	 * I have not implemented namespaces or case-sensitive axes for XML yet.
	 *
	 * How to test it in Chrome: You can make a Chrome extension that replaces
	 * the WebKit XPath parser with this one. But it takes a bit of effort to
	 * get around isolated world and same-origin restrictions:
	 * manifest.json:
	    {
	      "name": "XPathTest",
	      "version": "0.1",
	      "content_scripts": [{
	        "matches": ["http://localhost/*"],  // or wildcard host
	        "js": ["xpath.js", "injection.js"],
	        "all_frames": true, "run_at": "document_start"
	      }]
	    }
	 * injection.js:
	    // goal: give my xpath object to the website's JS context.
	    var script = document.createElement('script');
	    script.textContent =
	        "document.addEventListener('xpathextend', function(e) {\n" +
	        "  console.log('extending document with xpath...');\n" +
	        "  e.detail(window);" +
	        "});";
	    document.documentElement.appendChild(script);
	    document.documentElement.removeChild(script);
	    var evt = document.createEvent('CustomEvent');
	    evt.initCustomEvent('xpathextend', true, true, this.xpath.extend);
	    document.dispatchEvent(evt);
	 */
	(function() {
	  var xpath;
	  var core;
	  if (true) {
	    xpath = exports; // the tests go through this
	    core = __webpack_require__(11);
	  } else {
	    xpath = {};
	    core = this;
	  }


	  /***************************************************************************
	   *                            Tokenization                                 *
	   ***************************************************************************/
	  /**
	   * The XPath lexer is basically a single regular expression, along with
	   * some helper functions to pop different types.
	   */
	  var Stream = xpath.Stream = function Stream(str) {
	    this.original = this.str = str;
	    this.peeked = null;
	    // TODO: not really needed, but supposedly tokenizer also disambiguates
	    // a * b vs. node test *
	    this.prev = null;  // for debugging
	    this.prevprev = null;
	  }
	  Stream.prototype = {
	    peek: function() {
	      if (this.peeked) return this.peeked;
	      var m = this.re.exec(this.str);
	      if (!m) return null;
	      this.str = this.str.substr(m[0].length);
	      return this.peeked = m[1];
	    },
	    /** Peek 2 tokens ahead. */
	    peek2: function() {
	      this.peek();  // make sure this.peeked is set
	      var m = this.re.exec(this.str);
	      if (!m) return null;
	      return m[1];
	    },
	    pop: function() {
	      var r = this.peek();
	      this.peeked = null;
	      this.prevprev = this.prev;
	      this.prev = r;
	      return r;
	    },
	    trypop: function(tokens) {
	      var tok = this.peek();
	      if (tok === tokens) return this.pop();
	      if (Array.isArray(tokens)) {
	        for (var i = 0; i < tokens.length; ++i) {
	          var t = tokens[i];
	          if (t == tok) return this.pop();;
	        }
	      }
	    },
	    trypopfuncname: function() {
	      var tok = this.peek();
	      if (!this.isQnameRe.test(tok))
	        return null;
	      switch (tok) {
	        case 'comment': case 'text': case 'processing-instruction': case 'node':
	          return null;
	      }
	      if ('(' != this.peek2()) return null;
	      return this.pop();
	    },
	    trypopaxisname: function() {
	      var tok = this.peek();
	      switch (tok) {
	        case 'ancestor': case 'ancestor-or-self': case 'attribute':
	        case 'child': case 'descendant': case 'descendant-or-self':
	        case 'following': case 'following-sibling': case 'namespace':
	        case 'parent': case 'preceding': case 'preceding-sibling': case 'self':
	          if ('::' == this.peek2()) return this.pop();
	      }
	      return null;
	    },
	    trypopnametest: function() {
	      var tok = this.peek();
	      if ('*' === tok || this.startsWithNcNameRe.test(tok)) return this.pop();
	      return null;
	    },
	    trypopliteral: function() {
	      var tok = this.peek();
	      if (null == tok) return null;
	      var first = tok.charAt(0);
	      var last = tok.charAt(tok.length - 1);
	      if ('"' === first && '"' === last ||
	          "'" === first && "'" === last) {
	        this.pop();
	        return tok.substr(1, tok.length - 2);
	      }
	    },
	    trypopnumber: function() {
	      var tok = this.peek();
	      if (this.isNumberRe.test(tok)) return parseFloat(this.pop());
	      else return null;
	    },
	    trypopvarref: function() {
	      var tok = this.peek();
	      if (null == tok) return null;
	      if ('$' === tok.charAt(0)) return this.pop().substr(1);
	      else return null;
	    },
	    position: function() {
	      return this.original.length - this.str.length;
	    }
	  };
	  (function() {
	    // http://www.w3.org/TR/REC-xml-names/#NT-NCName
	    var nameStartCharsExceptColon =
	        'A-Z_a-z\xc0-\xd6\xd8-\xf6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF' +
	        '\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF' +
	        '\uFDF0-\uFFFD';  // JS doesn't support [#x10000-#xEFFFF]
	    var nameCharExceptColon = nameStartCharsExceptColon +
	        '\\-\\.0-9\xb7\u0300-\u036F\u203F-\u2040';
	    var ncNameChars = '[' + nameStartCharsExceptColon +
	        '][' + nameCharExceptColon + ']*'
	    // http://www.w3.org/TR/REC-xml-names/#NT-QName
	    var qNameChars = ncNameChars + '(?::' + ncNameChars + ')?';
	    var otherChars = '\\.\\.|[\\(\\)\\[\\].@,]|::';  // .. must come before [.]
	    var operatorChars =
	        'and|or|mod|div|' +
	        '//|!=|<=|>=|[*/|+\\-=<>]';  // //, !=, <=, >= before individual ones.
	    var literal = '"[^"]*"|' + "'[^']*'";
	    var numberChars = '[0-9]+(?:\\.[0-9]*)?|\\.[0-9]+';
	    var variableReference = '\\$' + qNameChars;
	    var nameTestChars = '\\*|' + ncNameChars + ':\\*|' + qNameChars;
	    var optionalSpace = '[ \t\r\n]*';  // stricter than regexp \s.
	    var nodeType = 'comment|text|processing-instruction|node';
	    var re = new RegExp(
	        // numberChars before otherChars so that leading-decimal doesn't become .
	        '^' + optionalSpace + '(' + numberChars + '|' + otherChars + '|' +
	        nameTestChars + '|' + operatorChars + '|' + literal + '|' +
	        variableReference + ')'
	        // operatorName | nodeType | functionName | axisName are lumped into
	        // qName for now; we'll check them on pop.
	    );
	    Stream.prototype.re = re;
	    Stream.prototype.startsWithNcNameRe = new RegExp('^' + ncNameChars);
	    Stream.prototype.isQnameRe = new RegExp('^' + qNameChars + '$');
	    Stream.prototype.isNumberRe = new RegExp('^' + numberChars + '$');
	  })();

	  /***************************************************************************
	   *                               Parsing                                   *
	   ***************************************************************************/
	  var parse = xpath.parse = function parse(stream, a) {
	    var r = orExpr(stream,a);
	    var x, unparsed = [];
	    while (x = stream.pop()) {
	      unparsed.push(x);
	    }
	    if (unparsed.length)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Unparsed tokens: ' + unparsed.join(' '));
	    return r;
	  }

	  /**
	   * binaryL  ::= subExpr
	   *            | binaryL op subExpr
	   * so a op b op c becomes ((a op b) op c)
	   */
	  function binaryL(subExpr, stream, a, ops) {
	    var lhs = subExpr(stream, a);
	    if (lhs == null) return null;
	    var op;
	    while (op = stream.trypop(ops)) {
	      var rhs = subExpr(stream, a);
	      if (rhs == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected something after ' + op);
	      lhs = a.node(op, lhs, rhs);
	    }
	    return lhs;
	  }
	  /**
	   * Too bad this is never used. If they made a ** operator (raise to power),
	   ( we would use it.
	   * binaryR  ::= subExpr
	   *            | subExpr op binaryR
	   * so a op b op c becomes (a op (b op c))
	   */
	  function binaryR(subExpr, stream, a, ops) {
	    var lhs = subExpr(stream, a);
	    if (lhs == null) return null;
	    var op = stream.trypop(ops);
	    if (op) {
	      var rhs = binaryR(stream, a);
	      if (rhs == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected something after ' + op);
	      return a.node(op, lhs, rhs);
	    } else {
	      return lhs;// TODO
	    }
	  }
	  /** [1] LocationPath::= RelativeLocationPath | AbsoluteLocationPath
	   * e.g. a, a/b, //a/b
	   */
	  function locationPath(stream, a) {
	    return absoluteLocationPath(stream, a) ||
	           relativeLocationPath(null, stream, a);
	  }
	  /** [2] AbsoluteLocationPath::= '/' RelativeLocationPath? | AbbreviatedAbsoluteLocationPath
	   *  [10] AbbreviatedAbsoluteLocationPath::= '//' RelativeLocationPath
	   */
	  function absoluteLocationPath(stream, a) {
	    var op = stream.peek();
	    if ('/' === op || '//' === op) {
	      var lhs = a.node('Root');
	      return relativeLocationPath(lhs, stream, a, true);
	    } else {
	      return null;
	    }
	  }
	  /** [3] RelativeLocationPath::= Step | RelativeLocationPath '/' Step |
	   *                            | AbbreviatedRelativeLocationPath
	   *  [11] AbbreviatedRelativeLocationPath::= RelativeLocationPath '//' Step
	   * e.g. p/a, etc.
	   */
	  function relativeLocationPath(lhs, stream, a, isOnlyRootOk) {
	    if (null == lhs) {
	      lhs = step(stream, a);
	      if (null == lhs) return lhs;
	    }
	    var op;
	    while (op = stream.trypop(['/', '//'])) {
	      if ('//' === op) {
	        lhs = a.node('/', lhs,
	                     a.node('Axis', 'descendant-or-self', 'node', undefined));
	      }
	      var rhs = step(stream, a);
	      if (null == rhs && '/' === op && isOnlyRootOk) return lhs;
	      else isOnlyRootOk = false;
	      if (null == rhs)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected step after ' + op);
	      lhs = a.node('/', lhs, rhs);
	    }
	    return lhs;
	  }
	  /** [4] Step::= AxisSpecifier NodeTest Predicate* | AbbreviatedStep
	   *  [12] AbbreviatedStep::= '.' | '..'
	   * e.g. @href, self::p, p, a[@href], ., ..
	   */
	  function step(stream, a) {
	    var abbrStep = stream.trypop(['.', '..']);
	    if ('.' === abbrStep)  // A location step of . is short for self::node().
	      return a.node('Axis', 'self', 'node');
	    if ('..' === abbrStep)  // A location step of .. is short for parent::node()
	      return a.node('Axis', 'parent', 'node');

	    var axis = axisSpecifier(stream, a);
	    var nodeType = nodeTypeTest(stream, a);
	    var nodeName;
	    if (null == nodeType) nodeName = nodeNameTest(stream, a);
	    if (null == axis && null == nodeType && null == nodeName) return null;
	    if (null == nodeType && null == nodeName)
	        throw new XPathException(
	            XPathException.INVALID_EXPRESSION_ERR,
	            'Position ' + stream.position() +
	            ': Expected nodeTest after axisSpecifier ' + axis);
	    if (null == axis) axis = 'child';
	    if (null == nodeType) {
	      // When there's only a node name, then the node type is forced to be the
	      // principal node type of the axis.
	      // see http://www.w3.org/TR/xpath/#dt-principal-node-type
	      if ('attribute' === axis) nodeType = 'attribute';
	      else if ('namespace' === axis) nodeType = 'namespace';
	      else nodeType = 'element';
	    }
	    var lhs = a.node('Axis', axis, nodeType, nodeName);
	    var pred;
	    while (null != (pred = predicate(lhs, stream, a))) {
	      lhs = pred;
	    }
	    return lhs;
	  }
	  /** [5] AxisSpecifier::= AxisName '::' | AbbreviatedAxisSpecifier
	   *  [6] AxisName::= 'ancestor' | 'ancestor-or-self' | 'attribute' | 'child'
	   *                | 'descendant' | 'descendant-or-self' | 'following'
	   *                | 'following-sibling' | 'namespace' | 'parent' |
	   *                | 'preceding' | 'preceding-sibling' | 'self'
	   *  [13] AbbreviatedAxisSpecifier::= '@'?
	   */
	  function axisSpecifier(stream, a) {
	    var attr = stream.trypop('@');
	    if (null != attr) return 'attribute';
	    var axisName = stream.trypopaxisname();
	    if (null != axisName) {
	      var coloncolon = stream.trypop('::');
	      if (null == coloncolon)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Should not happen. Should be ::.');
	      return axisName;
	    }
	  }
	  /** [7] NodeTest::= NameTest | NodeType '(' ')' | 'processing-instruction' '(' Literal ')'
	   *  [38] NodeType::= 'comment' | 'text' | 'processing-instruction' | 'node'
	   * I've split nodeTypeTest from nodeNameTest for convenience.
	   */
	  function nodeTypeTest(stream, a) {
	    if ('(' !== stream.peek2()) {
	      return null;
	    }
	    var type = stream.trypop(['comment', 'text', 'processing-instruction', 'node']);
	    if (null != type) {
	      if (null == stream.trypop('('))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Should not happen.');
	      var param = undefined;
	      if (type == 'processing-instruction') {
	        param = stream.trypopliteral();
	      }
	      if (null == stream.trypop(')'))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected close parens.');
	      return type
	    }
	  }
	  function nodeNameTest(stream, a) {
	    var name = stream.trypopnametest();
	    if (name != null) return name;
	    else return null;
	  }
	  /** [8] Predicate::= '[' PredicateExpr ']'
	   *  [9] PredicateExpr::= Expr
	   */
	  function predicate(lhs, stream, a) {
	    if (null == stream.trypop('[')) return null;
	    var expr = orExpr(stream, a);
	    if (null == expr)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected expression after [');
	    if (null == stream.trypop(']'))
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected ] after expression.');
	    return a.node('Predicate', lhs, expr);
	  }
	  /** [14] Expr::= OrExpr
	   */
	  /** [15] PrimaryExpr::= VariableReference | '(' Expr ')' | Literal | Number | FunctionCall
	   * e.g. $x,  (3+4),  "hi",  32,  f(x)
	   */
	  function primaryExpr(stream, a) {
	    var x = stream.trypopliteral();
	    if (null == x)
	      x = stream.trypopnumber();
	    if (null != x) {
	      return x;
	    }
	    var varRef = stream.trypopvarref();
	    if (null != varRef) return a.node('VariableReference', varRef);
	    var funCall = functionCall(stream, a);
	    if (null != funCall) {
	      return funCall;
	    }
	    if (stream.trypop('(')) {
	      var e = orExpr(stream, a);
	      if (null == e)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected expression after (.');
	      if (null == stream.trypop(')'))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected ) after expression.');
	      return e;
	    }
	    return null;
	  }
	  /** [16] FunctionCall::= FunctionName '(' ( Argument ( ',' Argument )* )? ')'
	   *  [17] Argument::= Expr
	   */
	  function functionCall(stream, a) {
	    var name = stream.trypopfuncname(stream, a);
	    if (null == name) return null;
	    if (null == stream.trypop('('))
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Position ' + stream.position() +
	                               ': Expected ( ) after function name.');
	    var params = [];
	    var first = true;
	    while (null == stream.trypop(')')) {
	      if (!first && null == stream.trypop(','))
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected , between arguments of the function.');
	      first = false;
	      var param = orExpr(stream, a);
	      if (param == null)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected expression as argument of function.');
	      params.push(param);
	    }
	    return a.node('FunctionCall', name, params);
	  }

	  /** [18] UnionExpr::= PathExpr | UnionExpr '|' PathExpr
	   */
	  function unionExpr(stream, a) { return binaryL(pathExpr, stream, a, '|'); }
	  /** [19] PathExpr ::= LocationPath
	   *                  | FilterExpr
	   *                  | FilterExpr '/' RelativeLocationPath
	   *                  | FilterExpr '//' RelativeLocationPath
	   * Unlike most other nodes, this one always generates a node because
	   * at this point all reverse nodesets must turn into a forward nodeset
	   */
	  function pathExpr(stream, a) {
	    // We have to do FilterExpr before LocationPath because otherwise
	    // LocationPath will eat up the name from a function call.
	    var filter = filterExpr(stream, a);
	    if (null == filter) {
	      var loc = locationPath(stream, a);
	      if (null == loc) {
	        throw new Error
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': The expression shouldn\'t be empty...');
	      }
	      return a.node('PathExpr', loc);
	    }
	    var rel = relativeLocationPath(filter, stream, a, false);
	    if (filter === rel) return rel;
	    else return a.node('PathExpr', rel);
	  }
	  /** [20] FilterExpr::= PrimaryExpr | FilterExpr Predicate
	   * aka. FilterExpr ::= PrimaryExpr Predicate*
	   */
	  function filterExpr(stream, a) {
	    var primary = primaryExpr(stream, a);
	    if (primary == null) return null;
	    var pred, lhs = primary;
	    while (null != (pred = predicate(lhs, stream, a))) {
	      lhs = pred;
	    }
	    return lhs;
	  }

	  /** [21] OrExpr::= AndExpr | OrExpr 'or' AndExpr
	   */
	  function orExpr(stream, a) {
	    var orig = (stream.peeked || '') + stream.str
	    var r = binaryL(andExpr, stream, a, 'or');
	    var now = (stream.peeked || '') + stream.str;
	    return r;
	  }
	  /** [22] AndExpr::= EqualityExpr | AndExpr 'and' EqualityExpr
	   */
	  function andExpr(stream, a) { return binaryL(equalityExpr, stream, a, 'and'); }
	  /** [23] EqualityExpr::= RelationalExpr | EqualityExpr '=' RelationalExpr
	   *                     | EqualityExpr '!=' RelationalExpr
	   */
	  function equalityExpr(stream, a) { return binaryL(relationalExpr, stream, a, ['=','!=']); }
	  /** [24] RelationalExpr::= AdditiveExpr | RelationalExpr '<' AdditiveExpr
	   *                       | RelationalExpr '>' AdditiveExpr
	   *                       | RelationalExpr '<=' AdditiveExpr
	   *                       | RelationalExpr '>=' AdditiveExpr
	   */
	  function relationalExpr(stream, a) { return binaryL(additiveExpr, stream, a, ['<','>','<=','>=']); }
	  /** [25] AdditiveExpr::= MultiplicativeExpr
	   *                     | AdditiveExpr '+' MultiplicativeExpr
	   *                     | AdditiveExpr '-' MultiplicativeExpr
	   */
	  function additiveExpr(stream, a) { return binaryL(multiplicativeExpr, stream, a, ['+','-']); }
	  /** [26] MultiplicativeExpr::= UnaryExpr
	   *                           | MultiplicativeExpr MultiplyOperator UnaryExpr
	   *                           | MultiplicativeExpr 'div' UnaryExpr
	   *                           | MultiplicativeExpr 'mod' UnaryExpr
	   */
	  function multiplicativeExpr(stream, a) { return binaryL(unaryExpr, stream, a, ['*','div','mod']); }
	  /** [27] UnaryExpr::= UnionExpr | '-' UnaryExpr
	   */
	  function unaryExpr(stream, a) {
	    if (stream.trypop('-')) {
	      var e = unaryExpr(stream, a);
	      if (null == e)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Expected unary expression after -');
	      return a.node('UnaryMinus', e);
	    }
	    else return unionExpr(stream, a);
	  }
	  var astFactory = {
	    node: function() {return Array.prototype.slice.call(arguments);}
	  };


	  /***************************************************************************
	   *                            Optimizations (TODO)                         *
	   ***************************************************************************/
	  /**
	   * Some things I've been considering:
	   * 1) a//b becomes a/descendant::b if there's no predicate that uses
	   *    position() or last()
	   * 2) axis[pred]: when pred doesn't use position, evaluate it just once per
	   *    node in the node-set rather than once per (node, position, last).
	   * For more optimizations, look up Gecko's optimizer:
	   * http://mxr.mozilla.org/mozilla-central/source/content/xslt/src/xpath/txXPathOptimizer.cpp
	   */
	  // TODO
	  function optimize(ast) {
	  }

	  /***************************************************************************
	   *                           Evaluation: axes                              *
	   ***************************************************************************/

	  /**
	   * Data types: For string, number, boolean, we just use Javascript types.
	   * Node-sets have the form
	   *    {nodes: [node, ...]}
	   * or {nodes: [node, ...], pos: [[1], [2], ...], lasts: [[1], [2], ...]}
	   *
	   * Most of the time, only the node is used and the position information is
	   * discarded. But if you use a predicate, we need to try every value of
	   * position and last in case the predicate calls position() or last().
	   */

	  /**
	   * The NodeMultiSet is a helper class to help generate
	   * {nodes:[], pos:[], lasts:[]} structures. It is useful for the
	   * descendant, descendant-or-self, following-sibling, and
	   * preceding-sibling axes for which we can use a stack to organize things.
	   */
	  function NodeMultiSet(isReverseAxis) {
	    this.nodes = [];
	    this.pos = [];
	    this.lasts = [];
	    this.nextPos = [];
	    this.seriesIndexes = [];  // index within nodes that each series begins.
	    this.isReverseAxis = isReverseAxis;
	    this._pushToNodes = isReverseAxis ? Array.prototype.unshift : Array.prototype.push;
	  }
	  NodeMultiSet.prototype = {
	    pushSeries: function pushSeries() {
	      this.nextPos.push(1);
	      this.seriesIndexes.push(this.nodes.length);
	    },
	    popSeries: function popSeries() {
	      console.assert(0 < this.nextPos.length, this.nextPos);
	      var last = this.nextPos.pop() - 1,
	          indexInPos = this.nextPos.length,
	          seriesBeginIndex = this.seriesIndexes.pop(),
	          seriesEndIndex = this.nodes.length;
	      for (var i = seriesBeginIndex; i < seriesEndIndex; ++i) {
	        console.assert(indexInPos < this.lasts[i].length);
	        console.assert(undefined === this.lasts[i][indexInPos]);
	        this.lasts[i][indexInPos] = last;
	      }
	    },
	    finalize: function() {
	      if (null == this.nextPos) return this;
	      console.assert(0 === this.nextPos.length);
	      for (var i = 0; i < this.lasts.length; ++i) {
	        for (var j = 0; j < this.lasts[i].length; ++j) {
	          console.assert(null != this.lasts[i][j], i + ',' + j + ':' + JSON.stringify(this.lasts));
	        }
	      }
	      this.pushSeries = this.popSeries = this.addNode = function() {
	        throw new Error('Already finalized.');
	      };
	      return this;
	    },
	    addNode: function addNode(node) {
	      console.assert(node);
	      this._pushToNodes.call(this.nodes, node)
	      this._pushToNodes.call(this.pos, this.nextPos.slice());
	      this._pushToNodes.call(this.lasts, new Array(this.nextPos.length));
	      for (var i = 0; i < this.nextPos.length; ++i) this.nextPos[i]++;
	    },
	    simplify: function() {
	      this.finalize();
	      return {nodes:this.nodes, pos:this.pos, lasts:this.lasts};
	    }
	  };
	  function eachContext(nodeMultiSet) {
	    var r = [];
	    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {
	      var node = nodeMultiSet.nodes[i];
	      if (!nodeMultiSet.pos) {
	        r.push({nodes:[node], pos: [[i + 1]], lasts: [[nodeMultiSet.nodes.length]]});
	      } else {
	        for (var j = 0; j < nodeMultiSet.pos[i].length; ++j) {
	          r.push({nodes:[node], pos: [[nodeMultiSet.pos[i][j]]], lasts: [[nodeMultiSet.lasts[i][j]]]});
	        }
	      }
	    }
	    return r;
	  }
	  /** Matcher used in the axes.
	   */
	  function NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase) {
	    this.nodeTypeNum = nodeTypeNum;
	    this.nodeName = nodeName;
	    this.shouldLowerCase = shouldLowerCase;
	    this.nodeNameTest =
	      null == nodeName ? this._alwaysTrue :
	      shouldLowerCase ? this._nodeNameLowerCaseEquals :
	      this._nodeNameEquals;
	  }
	  NodeMatcher.prototype = {
	    matches: function matches(node) {
	      return (0 === this.nodeTypeNum || node.nodeType === this.nodeTypeNum) &&
	          this.nodeNameTest(node.nodeName);
	    },
	    _alwaysTrue: function(name) {return true;},
	    _nodeNameEquals: function _nodeNameEquals(name) {
	      return this.nodeName === name;
	    },
	    _nodeNameLowerCaseEquals: function _nodeNameLowerCaseEquals(name) {
	      return this.nodeName === name.toLowerCase();
	    }
	  };

	  function followingSiblingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, shift, peek, followingNode, andSelf, isReverseAxis) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(isReverseAxis);
	    while (0 < nodeList.length) {  // can be if for following, preceding
	      var node = shift.call(nodeList);
	      console.assert(node != null);
	      node = followingNode(node);
	      nodeMultiSet.pushSeries();
	      var numPushed = 1;
	      while (null != node) {
	        if (! andSelf && matcher.matches(node))
	          nodeMultiSet.addNode(node);
	        if (node === peek.call(nodeList)) {
	          shift.call(nodeList);
	          nodeMultiSet.pushSeries();
	          numPushed++;
	        }
	        if (andSelf && matcher.matches(node))
	          nodeMultiSet.addNode(node);
	        node = followingNode(node);
	      }
	      while (0 < numPushed--)
	        nodeMultiSet.popSeries();
	    }
	    return nodeMultiSet;
	  }

	  /** Returns the next non-descendant node in document order.
	   * This is the first node in following::node(), if node is the context.
	   */
	  function followingNonDescendantNode(node) {
	    if (node.ownerElement) {
	      if (node.ownerElement.firstChild)
	        return node.ownerElement.firstChild;
	      node = node.ownerElement;
	    }
	    do {
	      if (node.nextSibling) return node.nextSibling;
	    } while (node = node.parentNode);
	    return null;
	  }

	  /** Returns the next node in a document-order depth-first search.
	   * See the definition of document order[1]:
	   *   1) element
	   *   2) namespace nodes
	   *   3) attributes
	   *   4) children
	   *   [1]: http://www.w3.org/TR/xpath/#dt-document-order
	   */
	  function followingNode(node) {
	    if (node.ownerElement)  // attributes: following node of element.
	      node = node.ownerElement;
	    if (null != node.firstChild)
	      return node.firstChild;
	    do {
	      if (null != node.nextSibling) {
	        return node.nextSibling;
	      }
	      node = node.parentNode;
	    } while (node);
	    return null;
	  }
	  /** Returns the previous node in document order (excluding attributes
	   * and namespace nodes).
	   */
	  function precedingNode(node) {
	    if (node.ownerElement)
	      return node.ownerElement;
	    if (null != node.previousSibling) {
	      node = node.previousSibling;
	      while (null != node.lastChild) {
	        node = node.lastChild;
	      }
	      return node;
	    }
	    if (null != node.parentNode) {
	      return node.parentNode;
	    }
	    return null;
	  }
	  /** This axis is inefficient if there are many nodes in the nodeList.
	   * But I think it's a pretty useless axis so it's ok. */
	  function followingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(false);
	    var cursor = nodeList[0];
	    var unorderedFollowingStarts = [];
	    for (var i = 0; i < nodeList.length; i++) {
	      var node = nodeList[i];
	      var start = followingNonDescendantNode(node);
	      if (start)
	        unorderedFollowingStarts.push(start);
	    }
	    if (0 === unorderedFollowingStarts.length)
	      return {nodes:[]};
	    var pos = [], nextPos = [];
	    var started = 0;
	    while (cursor = followingNode(cursor)) {
	      for (var i = unorderedFollowingStarts.length - 1; i >= 0; i--){
	        if (cursor === unorderedFollowingStarts[i]) {
	          nodeMultiSet.pushSeries();
	          unorderedFollowingStarts.splice(i,i+1);
	          started++;
	        }
	      }
	      if (started && matcher.matches(cursor)) {
	        nodeMultiSet.addNode(cursor);
	      }
	    }
	    console.assert(0 === unorderedFollowingStarts.length);
	    for (var i = 0; i < started; i++)
	      nodeMultiSet.popSeries();
	    return nodeMultiSet.finalize();
	  }
	  function precedingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var cursor = nodeList.pop();
	    if (null == cursor) return {nodes:{}};
	    var r = {nodes:[], pos:[], lasts:[]};
	    var nextParents = [cursor.parentNode || cursor.ownerElement], nextPos = [1];
	    while (cursor = precedingNode(cursor)) {
	      if (cursor === nodeList[nodeList.length - 1]) {
	        nextParents.push(nodeList.pop());
	        nextPos.push(1);
	      }
	      var matches = matcher.matches(cursor);
	      var pos, someoneUsed = false;
	      if (matches)
	        pos = nextPos.slice();

	      for (var i = 0; i < nextParents.length; ++i) {
	        if (cursor === nextParents[i]) {
	          nextParents[i] = cursor.parentNode || cursor.ownerElement;
	          if (matches) {
	            pos[i] = null;
	          }
	        } else {
	          if (matches) {
	            pos[i] = nextPos[i]++;
	            someoneUsed = true;
	          }
	        }
	      }
	      if (someoneUsed) {
	        r.nodes.unshift(cursor);
	        r.pos.unshift(pos);
	      }
	    }
	    for (var i = 0; i < r.pos.length; ++i) {
	      var lasts = [];
	      r.lasts.push(lasts);
	      for (var j = r.pos[i].length - 1; j >= 0; j--) {
	        if (null == r.pos[i][j]) {
	          r.pos[i].splice(j, j+1);
	        } else {
	          lasts.unshift(nextPos[j] - 1);
	        }
	      }
	    }
	    return r;
	  }

	  /** node-set, axis -> node-set */
	  function descendantDfs(nodeMultiSet, node, remaining, matcher, andSelf, attrIndices, attrNodes) {
	    while (0 < remaining.length && null != remaining[0].ownerElement) {
	      var attr = remaining.shift();
	      if (andSelf && matcher.matches(attr)) {
	        attrNodes.push(attr);
	        attrIndices.push(nodeMultiSet.nodes.length);
	      }
	    }
	    if (null != node && !andSelf) {
	      if (matcher.matches(node))
	        nodeMultiSet.addNode(node);
	    }
	    var pushed = false;
	    if (null == node) {
	      if (0 === remaining.length) return;
	      node = remaining.shift();
	      nodeMultiSet.pushSeries();
	      pushed = true;
	    } else if (0 < remaining.length && node === remaining[0]) {
	      nodeMultiSet.pushSeries();
	      pushed = true;
	      remaining.shift();
	    }
	    if (andSelf) {
	      if (matcher.matches(node))
	        nodeMultiSet.addNode(node);
	    }
	    // TODO: use optimization. Also try element.getElementsByTagName
	    // var nodeList = 1 === nodeTypeNum && null != node.children ? node.children : node.childNodes;
	    var nodeList = node.childNodes;
	    for (var j = 0; j < nodeList.length; ++j) {
	      var child = nodeList[j];
	      descendantDfs(nodeMultiSet, child, remaining, matcher, andSelf, attrIndices, attrNodes);
	    }
	    if (pushed) {
	      nodeMultiSet.popSeries();
	    }
	  }
	  function descenantHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, andSelf) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var nodeMultiSet = new NodeMultiSet(false);
	    var attrIndices = [], attrNodes = [];
	    while (0 < nodeList.length) {
	      // var node = nodeList.shift();
	      descendantDfs(nodeMultiSet, null, nodeList, matcher, andSelf, attrIndices, attrNodes);
	    }
	    nodeMultiSet.finalize();
	    for (var i = attrNodes.length-1; i >= 0; --i) {
	      nodeMultiSet.nodes.splice(attrIndices[i], attrIndices[i], attrNodes[i]);
	      nodeMultiSet.pos.splice(attrIndices[i], attrIndices[i], [1]);
	      nodeMultiSet.lasts.splice(attrIndices[i], attrIndices[i], [1]);
	    }
	    return nodeMultiSet;
	  }
	  /**
	   */
	  function ancestorHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, andSelf) {
	    var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	    var ancestors = []; // array of non-empty arrays of matching ancestors
	    for (var i = 0; i < nodeList.length; ++i) {
	      var node = nodeList[i];
	      var isFirst = true;
	      var a = [];
	      while (null != node) {
	        if (!isFirst || andSelf) {
	          if (matcher.matches(node))
	            a.push(node);
	        }
	        isFirst = false;
	        node = node.parentNode || node.ownerElement;
	      }
	      if (0 < a.length)
	        ancestors.push(a);
	    }
	    var lasts = [];
	    for (var i = 0; i < ancestors.length; ++i) lasts.push(ancestors[i].length);
	    var nodeMultiSet = new NodeMultiSet(true);
	    var newCtx = {nodes:[], pos:[], lasts:[]};
	    while (0 < ancestors.length) {
	      var pos = [ancestors[0].length];
	      var last = [lasts[0]];
	      var node = ancestors[0].pop();
	      for (var i = ancestors.length - 1; i > 0; --i) {
	        if (node === ancestors[i][ancestors[i].length - 1]) {
	          pos.push(ancestors[i].length);
	          last.push(lasts[i]);
	          ancestors[i].pop();
	          if (0 === ancestors[i].length) {
	            ancestors.splice(i, i+1);
	            lasts.splice(i, i+1);
	          }
	        }
	      }
	      if (0 === ancestors[0].length) {
	        ancestors.shift();
	        lasts.shift();
	      }
	      newCtx.nodes.push(node);
	      newCtx.pos.push(pos);
	      newCtx.lasts.push(last);
	    }
	    return newCtx;
	  }
	  /** Helper function for sortDocumentOrder. Returns a list of indices, from the
	   * node to the root, of positions within parent.
	   * For convenience, the node is the first element of the array.
	   */
	  function addressVector(node) {
	    var r = [node];
	    if (null != node.ownerElement) {
	      node = node.ownerElement;
	      r.push(-1);
	    }
	    while (null != node) {
	      var i = 0;
	      while (null != node.previousSibling) {
	        node = node.previousSibling;
	        i++;
	      }
	      r.push(i);
	      node = node.parentNode
	    }
	    return r;
	  }
	  function addressComparator(a, b) {
	    var minlen = Math.min(a.length - 1, b.length - 1),  // not including [0]=node
	        alen = a.length,
	        blen = b.length;
	    if (a[0] === b[0]) return 0;
	    var c;
	    for (var i = 0; i < minlen; ++i) {
	      c = a[alen - i - 1] - b[blen - i - 1];
	      if (0 !== c)
	        break;
	    }
	    if (null == c || 0 === c) {
	      // All equal until one of the nodes. The longer one is the descendant.
	      c = alen - blen;
	    }
	    if (0 === c)
	      c = a.nodeName - b.nodeName;
	    if (0 === c)
	      c = 1;
	    return c;
	  }
	  var sortUniqDocumentOrder = xpath.sortUniqDocumentOrder = function(nodes) {
	    var a = [];
	    for (var i = 0; i < nodes.length; i++) {
	      var node = nodes[i];
	      var v = addressVector(node);
	      a.push(v);
	    }
	    a.sort(addressComparator);
	    var b = [];
	    for (var i = 0; i < a.length; i++) {
	      if (0 < i && a[i][0] === a[i - 1][0])
	        continue;
	      b.push(a[i][0]);
	    }
	    return b;
	  }
	  /** Sort node multiset. Does not do any de-duping. */
	  function sortNodeMultiSet(nodeMultiSet) {
	    var a = [];
	    for (var i = 0; i < nodeMultiSet.nodes.length; i++) {
	      var v = addressVector(nodeMultiSet.nodes[i]);
	      a.push({v:v, n:nodeMultiSet.nodes[i],
	              p:nodeMultiSet.pos[i], l:nodeMultiSet.lasts[i]});
	    }
	    a.sort(compare);
	    var r = {nodes:[], pos:[], lasts:[]};
	    for (var i = 0; i < a.length; ++i) {
	      r.nodes.push(a[i].n);
	      r.pos.push(a[i].p);
	      r.lasts.push(a[i].l);
	    }
	    function compare(x, y) {
	      return addressComparator(x.v, y.v);
	    }
	    return r;
	  }
	  /** Returns an array containing all the ancestors down to a node.
	   * The array starts with document.
	   */
	  function nodeAndAncestors(node) {
	    var ancestors = [node];
	    var p = node;
	    while (p = p.parentNode || p.ownerElement) {
	      ancestors.unshift(p);
	    }
	    return ancestors;
	  }
	  function compareSiblings(a, b) {
	    if (a === b) return 0;
	    var c = a;
	    while (c = c.previousSibling) {
	      if (c === b)
	        return 1;  // b < a
	    }
	    c = b;
	    while (c = c.previousSibling) {
	      if (c === a)
	        return -1;  // a < b
	    }
	    throw new Error('a and b are not siblings: ' + xpath.stringifyObject(a) + ' vs ' + xpath.stringifyObject(b));
	  }
	  /** The merge in merge-sort.*/
	  function mergeNodeLists(x, y) {
	    var a, b, aanc, banc, r = [];
	    if ('object' !== typeof x)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Invalid LHS for | operator ' +
	                               '(expected node-set): ' + x);
	    if ('object' !== typeof y)
	      throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                               'Invalid LHS for | operator ' +
	                               '(expected node-set): ' + y);
	    while (true) {
	      if (null == a) {
	        a = x.shift();
	        if (null != a)
	          aanc = addressVector(a);
	      }
	      if (null == b) {
	        b = y.shift();
	        if (null != b)
	          banc = addressVector(b);
	      }
	      if (null == a || null == b) break;
	      var c = addressComparator(aanc, banc);
	      if (c < 0) {
	        r.push(a);
	        a = null;
	        aanc = null;
	      } else if (c > 0) {
	        r.push(b);
	        b = null;
	        banc = null;
	      } else if (a.nodeName < b.nodeName) {  // attributes
	        r.push(a);
	        a = null;
	        aanc = null;
	      } else if (a.nodeName > b.nodeName) {  // attributes
	        r.push(b);
	        b = null;
	        banc = null;
	      } else if (a !== b) {
	        // choose b arbitrarily
	        r.push(b);
	        b = null;
	        banc = null;
	      } else {
	        console.assert(a === b, c);
	        // just skip b without pushing it.
	        b = null;
	        banc = null;
	      }
	    }
	    while (a) {
	      r.push(a);
	      a = x.shift();
	    }
	    while (b) {
	      r.push(b);
	      b = y.shift();
	    }
	    return r;
	  }
	  function comparisonHelper(test, x, y, isNumericComparison) {
	    var coersion;
	    if (isNumericComparison)
	      coersion = fn.number;
	    else coersion =
	      'boolean' === typeof x || 'boolean' === typeof y ? fn['boolean'] :
	      'number' === typeof x || 'number' === typeof y ? fn.number :
	      fn.string;
	    if ('object' === typeof x && 'object' === typeof y) {
	      var aMap = {};
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var xi = coersion({nodes:[x.nodes[i]]});
	        for (var j = 0; j < y.nodes.length; ++j) {
	          var yj = coersion({nodes:[y.nodes[j]]});
	          if (test(xi, yj)) return true;
	        }
	      }
	      return false;
	    } else if ('object' === typeof x && x.nodes && x.nodes.length) {
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var xi = coersion({nodes:[x.nodes[i]]}), yc = coersion(y);
	        if (test(xi, yc))
	          return true;
	      }
	      return false;
	    } else if ('object' === typeof y && x.nodes && x.nodes.length) {
	      for (var i = 0; i < x.nodes.length; ++i) {
	        var yi = coersion({nodes:[y.nodes[i]]}), xc = coersion(x);
	        if (test(xc, yi))
	          return true;
	      }
	      return false;
	    } else {
	      var xc = coersion(x), yc = coersion(y);
	      return test(xc, yc);
	    }
	  }
	  var axes = xpath.axes = {
	    'ancestor':
	      function ancestor(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return ancestorHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, false);
	      },
	    'ancestor-or-self':
	      function ancestorOrSelf(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return ancestorHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, true);
	      },
	    'attribute':
	      function attribute(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        // TODO: figure out whether positions should be undefined here.
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodeMultiSet = new NodeMultiSet(false);
	        if (null != nodeName) {
	          // TODO: with namespace
	          for (var i = 0; i < nodeList.length; ++i) {
	            var node = nodeList[i];
	            if (null == node.getAttributeNode)
	              continue;  // only Element has .getAttributeNode
	            var attr = node.getAttributeNode(nodeName);
	            if (null != attr && matcher.matches(attr)) {
	              nodeMultiSet.pushSeries();
	              nodeMultiSet.addNode(attr);
	              nodeMultiSet.popSeries();
	            }
	          }
	        } else {
	          for (var i = 0; i < nodeList.length; ++i) {
	            var node = nodeList[i];
	            if (null != node.attributes) {
	              nodeMultiSet.pushSeries();
	              for (var j = 0; j < node.attributes.length; j++) {  // all nodes have .attributes
	                var attr = node.attributes[j];
	                if (matcher.matches(attr))  // TODO: I think this check is unnecessary
	                  nodeMultiSet.addNode(attr);
	              }
	              nodeMultiSet.popSeries();
	            }
	          }
	        }
	        return nodeMultiSet.finalize();
	      },
	    'child':
	      function child(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodeMultiSet = new NodeMultiSet(false);
	        for (var i = 0; i < nodeList.length; ++i) {
	          var n = nodeList[i];
	          if (n.ownerElement)  // skip attribute nodes' text child.
	            continue;
	          if (n.childNodes) {
	            nodeMultiSet.pushSeries();
	            var childList = 1 === nodeTypeNum && null != n.children ?
	                n.children : n.childNodes;
	            for (var j = 0; j < childList.length; ++j) {
	              var child = childList[j];
	              if (matcher.matches(child)) {
	                nodeMultiSet.addNode(child);
	              }
	              // don't have to do de-duping because children have parent,
	              // which are current context.
	            }
	            nodeMultiSet.popSeries();
	          }
	        }
	        nodeMultiSet.finalize();
	        return sortNodeMultiSet(nodeMultiSet);
	      },
	    'descendant':
	      function descenant(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return descenantHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, false);
	      },
	    'descendant-or-self':
	      function descenantOrSelf(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return descenantHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase, true);
	      },
	    'following':
	      function following(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingHelper(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	      },
	    'following-sibling':
	      function followingSibling(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingSiblingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase,
	          Array.prototype.shift, function() {return this[0];},
	          function(node) {return node.nextSibling;});
	      },
	    'namespace':
	      function namespace(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        // TODO
	      },
	    'parent':
	      function parent(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        var nodes = [], pos = [];
	        for (var i = 0; i < nodeList.length; ++i) {
	          var parent = nodeList[i].parentNode || nodeList[i].ownerElement;
	          if (null == parent)
	            continue;
	          if (!matcher.matches(parent))
	            continue;
	          if (nodes.length > 0 && parent === nodes[nodes.length-1])
	            continue;
	          nodes.push(parent);
	          pos.push([1]);
	        }
	        return {nodes:nodes, pos:pos, lasts:pos};
	      },
	    'preceding':
	      function preceding(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return precedingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	      },
	    'preceding-sibling':
	      function precedingSibling(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        return followingSiblingHelper(
	          nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase,
	          Array.prototype.pop, function() {return this[this.length-1];},
	          function(node) {return node.previousSibling},
	          false, true);
	      },
	    'self':
	      function self(nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase) {
	        var nodes = [], pos = [];
	        var matcher = new NodeMatcher(nodeTypeNum, nodeName, shouldLowerCase);
	        for (var i = 0; i < nodeList.length; ++i) {
	          if (matcher.matches(nodeList[i])) {
	            nodes.push(nodeList[i]);
	            pos.push([1]);
	          }
	        }
	        return {nodes: nodes, pos: pos, lasts: pos}
	      }
	  };

	  /***************************************************************************
	   *                         Evaluation: functions                           *
	   ***************************************************************************/
	  var fn = {
	    'number': function number(optObject) {
	      if ('number' === typeof optObject)
	        return optObject;
	      if ('string' === typeof optObject)
	        return parseFloat(optObject);  // note: parseFloat(' ') -> NaN, unlike +' ' -> 0.
	      if ('boolean' === typeof optObject)
	        return +optObject;
	      return fn.number(fn.string.call(this, optObject));  // for node-sets
	    },
	    'string': function string(optObject) {
	      if (null == optObject)
	        return fn.string(this);
	      if ('string' === typeof optObject || 'boolean' === typeof optObject ||
	          'number' === typeof optObject)
	        return '' + optObject;
	      if (0 == optObject.nodes.length) return '';
	      if (null != optObject.nodes[0].textContent)
	        return optObject.nodes[0].textContent;
	      return optObject.nodes[0].nodeValue;
	    },
	    'boolean': function booleanVal(x) {
	      return 'object' === typeof x ? x.nodes.length > 0 : !!x;
	    },
	    'last': function last() {
	      console.assert(Array.isArray(this.pos));
	      console.assert(Array.isArray(this.lasts));
	      console.assert(1 === this.pos.length);
	      console.assert(1 === this.lasts.length);
	      console.assert(1 === this.lasts[0].length);
	      return this.lasts[0][0];
	    },
	    'position': function position() {
	      console.assert(Array.isArray(this.pos));
	      console.assert(Array.isArray(this.lasts));
	      console.assert(1 === this.pos.length);
	      console.assert(1 === this.lasts.length);
	      console.assert(1 === this.pos[0].length);
	      return this.pos[0][0];
	    },
	    'count': function count(nodeSet) {
	      if ('object' !== typeof nodeSet)
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Position ' + stream.position() +
	                                 ': Function count(node-set) ' +
	                                 'got wrong argument type: ' + nodeSet);
	      return nodeSet.nodes.length;
	    },
	    'id': function id(object) {
	      var r = {nodes: []};
	      var doc = this.nodes[0].ownerDocument || this.nodes[0];
	      console.assert(doc);
	      var ids;
	      if ('object' === typeof object) {
	        // for node-sets, map id over each node value.
	        ids = [];
	        for (var i = 0; i < object.nodes.length; ++i) {
	          var idNode = object.nodes[i];
	          var idsString = fn.string({nodes:[idNode]});
	          var a = idsString.split(/[ \t\r\n]+/g);
	          Array.prototype.push.apply(ids, a);
	        }
	      } else {
	        var idsString = fn.string(object);
	        var a = idsString.split(/[ \t\r\n]+/g);
	        ids = a;
	      }
	      for (var i = 0; i < ids.length; ++i) {
	        var id = ids[i];
	        if (0 === id.length)
	          continue;
	        var node = doc.getElementById(id);
	        if (null != node)
	          r.nodes.push(node);
	      }
	      r.nodes = sortUniqDocumentOrder(r.nodes);
	      return r;
	    },
	    'local-name': function(nodeSet) {
	      if (null == nodeSet)
	        return fn.name(this);
	      if (null == nodeSet.nodes) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'argument to name() must be a node-set. got ' + nodeSet);
	      }
	      // TODO: namespaced version
	      return nodeSet.nodes[0].nodeName.toLowerCase();  // TODO: no toLowerCase for xml
	    },
	    'namespace-uri': function(nodeSet) {
	      // TODO
	      throw new Error('not implemented yet');
	    },
	    'name': function(nodeSet) {
	      if (null == nodeSet)
	        return fn.name(this);
	      if (null == nodeSet.nodes) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'argument to name() must be a node-set. got ' + nodeSet);
	      }
	      return nodeSet.nodes[0].nodeName.toLowerCase();  // TODO: no toLowerCase for xml
	    },
	    'concat': function concat(x) {
	      var l = [];
	      for (var i = 0; i < arguments.length; ++i) {
	        l.push(fn.string(arguments[i]));
	      }
	      return l.join('');
	    },
	    'starts-with': function startsWith(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      return as.substr(0, bs.length) === bs;
	    },
	    'contains': function contains(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return false;
	      return true;
	    },
	    'substring-before': function substringBefore(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return '';
	      return as.substr(0, i);
	    },
	    'substring-after': function substringBefore(a, b) {
	      var as = fn.string(a), bs = fn.string(b);
	      var i = as.indexOf(bs);
	      if (-1 === i) return '';
	      return as.substr(i + bs.length);
	    },
	    'substring': function substring(string, start, optEnd) {
	      if (null == string || null == start) {
	        throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                 'Must be at least 2 arguments to string()');
	      }
	      var sString = fn.string(string),
	          iStart = fn.round(start),
	          iEnd = optEnd == null ? null : fn.round(optEnd);
	      // Note that xpath string positions user 1-based index
	      if (iEnd == null)
	        return sString.substr(iStart - 1);
	      else
	        return sString.substr(iStart - 1, iEnd);
	    },
	    'string-length': function stringLength(optString) {
	      return fn.string.call(this, optString).length;
	    },
	    'normalize-space': function normalizeSpace(optString) {
	      var s = fn.string.call(this, optString);
	      return s.replace(/[ \t\r\n]+/g, ' ').replace(/^ | $/g, '');
	    },
	    'translate': function translate(string, from, to) {
	      var sString = fn.string.call(this, string),
	          sFrom = fn.string(from),
	          sTo = fn.string(to);
	      var eachCharRe = [];
	      var map = {};
	      for (var i = 0; i < sFrom.length; ++i) {
	        var c = sFrom.charAt(i);
	        map[c] = sTo.charAt(i);  // returns '' if beyond length of sTo.
	        // copied from goog.string.regExpEscape in the Closure library.
	        eachCharRe.push(
	          c.replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1').
	            replace(/\x08/g, '\\x08'));
	      }
	      var re = new RegExp(eachCharRe.join('|'), 'g');
	      return sString.replace(re, function(c) {return map[c];});
	    },
	    /// Boolean functions
	    'not': function not(x) {
	      var bx = fn['boolean'](x);
	      return !bx;
	    },
	    'true': function trueVal() { return true; },
	    'false': function falseVal() { return false; },
	    // TODO
	    'lang': function lang(string) { throw new Error('Not implemented');},
	    'sum': function sum(optNodeSet) {
	      if (null == optNodeSet) return fn.sum(this);
	      // for node-sets, map id over each node value.
	      var sum = 0;
	      for (var i = 0; i < optNodeSet.nodes.length; ++i) {
	        var node = optNodeSet.nodes[i];
	        var x = fn.number({nodes:[node]});
	        sum += x;
	      }
	      return sum;
	    },
	    'floor': function floor(number) {
	      return Math.floor(fn.number(number));
	    },
	    'ceiling': function ceiling(number) {
	      return Math.ceil(fn.number(number));
	    },
	    'round': function round(number) {
	      return Math.round(fn.number(number));
	    }
	  };
	  /***************************************************************************
	   *                         Evaluation: operators                           *
	   ***************************************************************************/
	  var more = {
	    UnaryMinus: function(x) { return -fn.number(x); },
	    '+': function(x, y) { return fn.number(x) + fn.number(y); },
	    '-': function(x, y) { return fn.number(x) - fn.number(y); },
	    '*': function(x, y) { return fn.number(x) * fn.number(y); },
	    'div': function(x, y) { return fn.number(x) / fn.number(y); },
	    'mod': function(x, y) { return fn.number(x) % fn.number(y); },
	    '<': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) < fn.number(y);}, x, y, true);
	    },
	    '<=': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) <= fn.number(y);}, x, y, true);
	    },
	    '>':  function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) > fn.number(y);}, x, y, true);
	    },
	    '>=': function(x, y) {
	      return comparisonHelper(function(x, y) { return fn.number(x) >= fn.number(y);}, x, y, true);
	    },
	    'and': function(x, y) { return fn['boolean'](x) && fn['boolean'](y); },
	    'or': function(x, y) { return fn['boolean'](x) || fn['boolean'](y); },
	    '|': function(x, y) { return {nodes: mergeNodeLists(x.nodes, y.nodes)}; },
	    '=': function(x, y) {
	      // optimization for two node-sets case: avoid n^2 comparisons.
	      if ('object' === typeof x && 'object' === typeof y) {
	        var aMap = {};
	        for (var i = 0; i < x.nodes.length; ++i) {
	          var s = fn.string({nodes:[x.nodes[i]]});
	          aMap[s] = true;
	        }
	        for (var i = 0; i < y.nodes.length; ++i) {
	          var s = fn.string({nodes:[y.nodes[i]]});
	          if (aMap[s]) return true;
	        }
	        return false;
	      } else {
	        return comparisonHelper(function(x, y) {return x === y;}, x, y);
	      }
	    },
	    '!=': function(x, y) {
	      // optimization for two node-sets case: avoid n^2 comparisons.
	      if ('object' === typeof x && 'object' === typeof y) {
	        if (0 === x.nodes.length || 0 === y.nodes.length) return false;
	        var aMap = {};
	        for (var i = 0; i < x.nodes.length; ++i) {
	          var s = fn.string({nodes:[x.nodes[i]]});
	          aMap[s] = true;
	        }
	        for (var i = 0; i < y.nodes.length; ++i) {
	          var s = fn.string({nodes:[y.nodes[i]]});
	          if (!aMap[s]) return true;
	        }
	        return false;
	      } else {
	        return comparisonHelper(function(x, y) {return x !== y;}, x, y);
	      }
	    }
	  };
	  var nodeTypes = xpath.nodeTypes = {
	    'node': 0,
	    'attribute': 2,
	    'comment': 8, // this.doc.COMMENT_NODE,
	    'text': 3, // this.doc.TEXT_NODE,
	    'processing-instruction': 7, // this.doc.PROCESSING_INSTRUCTION_NODE,
	    'element': 1  //this.doc.ELEMENT_NODE
	  };
	  /** For debugging and unit tests: returnjs a stringified version of the
	   * argument. */
	  var stringifyObject = xpath.stringifyObject = function stringifyObject(ctx) {
	    var seenKey = 'seen' + Math.floor(Math.random()*1000000000);
	    return JSON.stringify(helper(ctx));

	    function helper(ctx) {
	      if (Array.isArray(ctx)) {
	        return ctx.map(function(x) {return helper(x);});
	      }
	      if ('object' !== typeof ctx) return ctx;
	      if (null == ctx) return ctx;
	    //  if (ctx.toString) return ctx.toString();
	      if (null != ctx.outerHTML) return ctx.outerHTML;
	      if (null != ctx.nodeValue) return ctx.nodeName + '=' + ctx.nodeValue;
	      if (ctx[seenKey]) return '[circular]';
	      ctx[seenKey] = true;
	      var nicer = {};
	      for (var key in ctx) {
	        if (seenKey === key)
	          continue;
	        try {
	          nicer[key] = helper(ctx[key]);
	        } catch (e) {
	          nicer[key] = '[exception: ' + e.message + ']';
	        }
	      }
	      delete ctx[seenKey];
	      return nicer;
	    }
	  }
	  var Evaluator = xpath.Evaluator = function Evaluator(doc) {
	    this.doc = doc;
	  }
	  Evaluator.prototype = {
	    val: function val(ast, ctx) {
	      console.assert(ctx.nodes);

	      if ('number' === typeof ast || 'string' === typeof ast) return ast;
	      if (more[ast[0]]) {
	        var evaluatedParams = [];
	        for (var i = 1; i < ast.length; ++i) {
	          evaluatedParams.push(this.val(ast[i], ctx));
	        }
	        var r = more[ast[0]].apply(ctx, evaluatedParams);
	        return r;
	      }
	      switch (ast[0]) {
	        case 'Root': return {nodes: [this.doc]};
	        case 'FunctionCall':
	          var functionName = ast[1], functionParams = ast[2];
	          if (null == fn[functionName])
	            throw new XPathException(XPathException.INVALID_EXPRESSION_ERR,
	                                     'Unknown function: ' + functionName);
	          var evaluatedParams = [];
	          for (var i = 0; i < functionParams.length; ++i) {
	            evaluatedParams.push(this.val(functionParams[i], ctx));
	          }
	          var r = fn[functionName].apply(ctx, evaluatedParams);
	          return r;
	        case 'Predicate':
	          var lhs = this.val(ast[1], ctx);
	          var ret = {nodes: []};
	          var contexts = eachContext(lhs);
	          for (var i = 0; i < contexts.length; ++i) {
	            var singleNodeSet = contexts[i];
	            var rhs = this.val(ast[2], singleNodeSet);
	            var success;
	            if ('number' === typeof rhs) {
	              success = rhs === singleNodeSet.pos[0][0];
	            } else {
	              success = fn['boolean'](rhs);
	            }
	            if (success) {
	              var node = singleNodeSet.nodes[0];
	              ret.nodes.push(node);
	              // skip over all the rest of the same node.
	              while (i+1 < contexts.length && node === contexts[i+1].nodes[0]) {
	                i++;
	              }
	            }
	          }
	          return ret;
	        case 'PathExpr':
	          // turn the path into an expressoin; i.e., remove the position
	          // information of the last axis.
	          var x = this.val(ast[1], ctx);
	          // Make the nodeset a forward-direction-only one.
	          if (x.finalize) {  // it is a NodeMultiSet
	            for (var i = 0; i < x.nodes.length; ++i) {
	              console.assert(null != x.nodes[i].nodeType);
	            }
	            return {nodes: x.nodes};
	          } else {
	            return x;
	          }
	        case '/':
	          // TODO: don't generate '/' nodes, just Axis nodes.
	          var lhs = this.val(ast[1], ctx);
	          console.assert(null != lhs);
	          var r = this.val(ast[2], lhs);
	          console.assert(null != r);
	          return r;
	        case 'Axis':
	          // All the axis tests from Step. We only get AxisSpecifier NodeTest,
	          // not the predicate (which is applied later)
	          var axis = ast[1],
	              nodeType = ast[2],
	              nodeTypeNum = nodeTypes[nodeType],
	              shouldLowerCase = true,  // TODO: give option
	              nodeName = ast[3] && shouldLowerCase ? ast[3].toLowerCase() : ast[3];
	          nodeName = nodeName === '*' ? null : nodeName;
	          if ('object' !== typeof ctx) return {nodes:[], pos:[]};
	          var nodeList = ctx.nodes.slice();  // TODO: is copy needed?
	          var r = axes[axis](nodeList  /*destructive!*/, nodeTypeNum, nodeName, shouldLowerCase);
	          return r;
	      }
	    }
	  };
	  var evaluate = xpath.evaluate = function evaluate(expr, doc, context) {
	    //var astFactory = new AstEvaluatorFactory(doc, context);
	    var stream = new Stream(expr);
	    var ast = parse(stream, astFactory);
	    var val = new Evaluator(doc).val(ast, {nodes: [context]});
	    return val;
	  }

	  /***************************************************************************
	   *                           DOM interface                                 *
	   ***************************************************************************/
	  var XPathException = xpath.XPathException = function XPathException(code, message) {
	    var e = new Error(message);
	    e.name = 'XPathException';
	    e.code = code;
	    return e;
	  }
	  XPathException.INVALID_EXPRESSION_ERR = 51;
	  XPathException.TYPE_ERR = 52;


	  var XPathEvaluator = xpath.XPathEvaluator = function XPathEvaluator() {}
	  XPathEvaluator.prototype = {
	    createExpression: function(expression, resolver) {
	      return new XPathExpression(expression, resolver);
	    },
	    createNSResolver: function(nodeResolver) {
	      // TODO
	    },
	    evaluate: function evaluate(expression, contextNode, resolver, type, result) {
	      var expr = new XPathExpression(expression, resolver);
	      return expr.evaluate(contextNode, type, result);
	    }
	  };


	  var XPathExpression = xpath.XPathExpression = function XPathExpression(expression, resolver, optDoc) {
	    var stream = new Stream(expression);
	    this._ast = parse(stream, astFactory);
	    this._doc = optDoc;
	  }
	  XPathExpression.prototype = {
	    evaluate: function evaluate(contextNode, type, result) {
	      if (null == contextNode.nodeType)
	        throw new Error('bad argument (expected context node): ' + contextNode);
	      var doc = contextNode.ownerDocument || contextNode;
	      if (null != this._doc && this._doc !== doc) {
	        throw new core.DOMException(
	            core.WRONG_DOCUMENT_ERR,
	            'The document must be the same as the context node\'s document.');
	      }
	      var evaluator = new Evaluator(doc);
	      var value = evaluator.val(this._ast, {nodes: [contextNode]});
	      if (XPathResult.NUMBER_TYPE === type)
	        value = fn.number(value);
	      else if (XPathResult.STRING_TYPE === type)
	        value = fn.string(value);
	      else if (XPathResult.BOOLEAN_TYPE === type)
	        value = fn['boolean'](value);
	      else if (XPathResult.ANY_TYPE !== type &&
	               XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== type &&
	               XPathResult.ORDERED_NODE_ITERATOR_TYPE !== type &&
	               XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== type &&
	               XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== type &&
	               XPathResult.ANY_UNORDERED_NODE_TYPE !== type &&
	               XPathResult.FIRST_ORDERED_NODE_TYPE !== type)
	        throw new core.DOMException(
	            core.NOT_SUPPORTED_ERR,
	            'You must provide an XPath result type (0=any).');
	      else if (XPathResult.ANY_TYPE !== type &&
	               'object' !== typeof value)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'Value should be a node-set: ' + value);
	      return new XPathResult(doc, value, type);
	    }
	  }

	  var XPathResult = xpath.XPathResult = function XPathResult(doc, value, resultType) {
	    this._value = value;
	    this._resultType = resultType;
	    this._i = 0;
	    this._invalidated = false;
	    if (this.resultType === XPathResult.UNORDERED_NODE_ITERATOR_TYPE ||
	        this.resultType === XPathResult.ORDERED_NODE_ITERATOR_TYPE) {
	      doc.addEventListener('DOMSubtreeModified', invalidate, true);
	      var self = this;
	      function invalidate() {
	        self._invalidated = true;
	        doc.removeEventListener('DOMSubtreeModified', invalidate, true);
	      }
	    }
	  }
	  XPathResult.ANY_TYPE = 0;
	  XPathResult.NUMBER_TYPE = 1;
	  XPathResult.STRING_TYPE = 2;
	  XPathResult.BOOLEAN_TYPE = 3;
	  XPathResult.UNORDERED_NODE_ITERATOR_TYPE = 4;
	  XPathResult.ORDERED_NODE_ITERATOR_TYPE = 5;
	  XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE = 6;
	  XPathResult.ORDERED_NODE_SNAPSHOT_TYPE = 7;
	  XPathResult.ANY_UNORDERED_NODE_TYPE = 8;
	  XPathResult.FIRST_ORDERED_NODE_TYPE = 9;
	  var proto = {
	    // XPathResultType
	    get resultType() {
	      if (this._resultType) return this._resultType;
	      switch (typeof this._value) {
	        case 'number': return XPathResult.NUMBER_TYPE;
	        case 'string': return XPathResult.STRING_TYPE;
	        case 'boolean': return XPathResult.BOOLEAN_TYPE;
	        default: return XPathResult.UNORDERED_NODE_ITERATOR_TYPE;
	      }
	    },
	    get numberValue() {
	      if (XPathResult.NUMBER_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a NUMBER_TYPE.');
	      return this._value;
	    },
	    get stringValue() {
	      if (XPathResult.STRING_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a STRING_TYPE.');
	      return this._value;
	    },
	    get booleanValue() {
	      if (XPathResult.BOOLEAN_TYPE !== this.resultType)
	        throw new XPathException(XPathException.TYPE_ERR,
	                                 'You should have asked for a BOOLEAN_TYPE.');
	      return this._value;
	    },
	    get singleNodeValue() {
	      if (XPathResult.ANY_UNORDERED_NODE_TYPE !== this.resultType &&
	          XPathResult.FIRST_ORDERED_NODE_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a FIRST_ORDERED_NODE_TYPE.');
	      return this._value.nodes[0] || null;
	    },
	    get invalidIteratorState() {
	      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType)
	        return false;
	      return !!this._invalidated;
	    },
	    get snapshotLength() {
	      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');
	      return this._value.nodes.length;
	    },
	    iterateNext: function iterateNext() {
	      if (XPathResult.UNORDERED_NODE_ITERATOR_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_ITERATOR_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_ITERATOR_TYPE.');
	      if (this.invalidIteratorState)
	        throw new core.DOMException(
	            core.INVALID_STATE_ERR,
	            'The document has been mutated since the result was returned');
	      return this._value.nodes[this._i++] || null;
	    },
	    snapshotItem: function snapshotItem(index) {
	      if (XPathResult.UNORDERED_NODE_SNAPSHOT_TYPE !== this.resultType &&
	          XPathResult.ORDERED_NODE_SNAPSHOT_TYPE !== this.resultType)
	        throw new XPathException(
	            XPathException.TYPE_ERR,
	            'You should have asked for a ORDERED_NODE_SNAPSHOT_TYPE.');
	      return this._value.nodes[index] || null;
	    }
	  };
	  // so you can access ANY_TYPE etc. from the instances:
	  XPathResult.prototype = Object.create(XPathResult,
	      Object.keys(proto).reduce(function (descriptors, name) {
	        descriptors[name] = Object.getOwnPropertyDescriptor(proto, name);
	        return descriptors;
	      }, {
	        constructor: {
	          value: XPathResult,
	          writable: true,
	          configurable: true
	        }
	      }));

	  core.XPathException = XPathException;
	  core.XPathExpression = XPathExpression;
	  core.XPathResult = XPathResult;
	  core.XPathEvaluator = XPathEvaluator;

	  core.Document.prototype.createExpression =
	    XPathEvaluator.prototype.createExpression;

	  core.Document.prototype.createNSResolver =
	      XPathEvaluator.prototype.createNSResolver;

	  core.Document.prototype.evaluate = XPathEvaluator.prototype.evaluate;

	})();


/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var inheritFrom = __webpack_require__(3).inheritFrom;

	module.exports = function (core) {
	  core.CharacterData = function CharacterData(ownerDocument, data) {
	    core.Node.call(this, ownerDocument);

	    this._data = data;
	  };

	  inheritFrom(core.Node, core.CharacterData, {
	    get data() { return this._data; },
	    set data(data) {
	      if (data === null) {
	        data = "";
	      }
	      data = String(data);

	      this._setData(data);
	    },

	    get length() {
	      return this._data.length;
	    },

	    substringData: function (offset, count) {
	      offset = offset >>> 0;
	      count = count >>> 0;

	      var length = this.length;

	      if (offset > length) {
	        throw new core.DOMException(core.DOMException.INDEX_SIZE_ERR);
	      }

	      if (offset + count > length) {
	        return this._data.substring(offset);
	      }

	      return this._data.substring(offset, offset + count);
	    },

	    appendData: function (data) {
	      this.replaceData(this.length, 0, data);
	    },

	    insertData: function (offset, data) {
	      this.replaceData(offset, 0, data);
	    },

	    deleteData: function (offset, count) {
	      this.replaceData(offset, count, "");
	    },

	    replaceData: function (offset, count, data) {
	      offset = offset >>> 0;
	      count = count >>> 0;
	      data = String(data);

	      var length = this.length;

	      if (offset > length) {
	        throw new core.DOMException(core.DOMException.INDEX_SIZE_ERR);
	      }

	      if (offset + count > length) {
	        count = length - offset;
	      }

	      var start = this._data.substring(0, offset);
	      var end = this._data.substring(offset + count);

	      this._setData(start + data + end);

	      // TODO: range stuff
	    },

	    _setData: function (newData) {
	      // TODO: remove this once we no longer rely on mutation events internally, since they are nonstandard
	      var oldData = this._data;
	      this._data = newData;

	      if (this._ownerDocument && this._parentNode && this._ownerDocument.implementation._hasFeature("MutationEvents")) {
	        var ev = this._ownerDocument.createEvent("MutationEvents");
	        ev.initMutationEvent("DOMCharacterDataModified", true, false, this, oldData, newData, null, null);
	        this.dispatchEvent(ev);
	      }
	    }
	  });
	};


/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var inheritFrom = __webpack_require__(3).inheritFrom;

	module.exports = function (core) {
	  // TODO: constructor should not take ownerDocument
	  core.Comment = function Comment(ownerDocument, data) {
	    core.CharacterData.call(this, ownerDocument, data);
	  };

	  inheritFrom(core.CharacterData, core.Comment, {
	    nodeType: core.Node.COMMENT_NODE, // TODO should be on prototype, not here
	  });
	};


/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var inheritFrom = __webpack_require__(3).inheritFrom;

	module.exports = function (core) {
	  core.DocumentType = function DocumentType(ownerDocument, name, publicId, systemId) {
	    core.Node.call(this, ownerDocument);

	    this._name = name;
	    this._publicId = publicId;
	    this._systemId = systemId;
	  };

	  inheritFrom(core.Node, core.DocumentType, {
	    nodeType: core.Node.DOCUMENT_TYPE_NODE,  // TODO should be on prototype, not here
	    get name() { return this._name; },
	    get publicId() { return this._publicId; },
	    get systemId() { return this._systemId; }
	  });
	};


/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var validateNames = __webpack_require__(27);

	module.exports = function (core) {
	  core.Document.prototype.createProcessingInstruction = function (target, data) {
	    target = String(target);
	    data = String(data);

	    validateNames.name(target, core);

	    if (data.indexOf("?>") !== -1) {
	      throw new core.DOMException(core.DOMException.INVALID_CHARACTER_ERR,
	        "Processing instruction data cannot contain the string \"?>\"");
	    }

	    return new core.ProcessingInstruction(this._ownerDocument, target, data);
	  };

	  core.Document.prototype.createTextNode = function (data) {
	    return new core.Text(this, String(data));
	  };

	  core.Document.prototype.createComment = function (data) {
	    return new core.Comment(this, String(data));
	  };
	};


/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var validateNames = __webpack_require__(27);

	module.exports = function (core) {
	  core.DOMImplementation.prototype.hasFeature = function () {
	    return true;
	  };

	  core.DOMImplementation.prototype.createDocumentType = function (qualifiedName, publicId, systemId) {
	    qualifiedName = String(qualifiedName);
	    publicId = String(publicId);
	    systemId = String(systemId);

	    validateNames.qname(qualifiedName, core);

	    return new core.DocumentType(this._ownerDocument, qualifiedName, publicId, systemId);
	  };

	  core.DOMImplementation.prototype.createDocument = function (namespace, qualifiedName, doctype) {
	    namespace = namespace !== null ? String(namespace) : namespace;
	    qualifiedName = qualifiedName === null ? "" : String(qualifiedName);
	    if (doctype === undefined) {
	      doctype = null;
	    }

	    var document = new core.Document({ parsingMode: "xml" });

	    var element = null;
	    if (qualifiedName !== "") {
	      element = document.createElementNS(namespace, qualifiedName);
	    }

	    if (doctype !== null) {
	      document.appendChild(doctype);
	    }

	    if (element !== null) {
	      document.appendChild(element);
	    }

	    return document;
	  };

	  core.DOMImplementation.prototype.createHTMLDocument = function (title) {
	    // Let doc be a new document that is an HTML document.
	    // Set doc's content type to "text/html".
	    var document = new core.HTMLDocument({ parsingMode: "html" });

	    // Create a doctype, with "html" as its name and with its node document set
	    // to doc. Append the newly created node to doc.
	    var doctype = this.createDocumentType("html", "", "");
	    document.appendChild(doctype);

	    // Create an html element in the HTML namespace, and append it to doc.
	    var htmlElement = document.createElementNS("http://www.w3.org/1999/xhtml", "html");
	    document.appendChild(htmlElement);

	    // Create a head element in the HTML namespace, and append it to the html
	    // element created in the previous step.
	    var headElement = document.createElement("head");
	    htmlElement.appendChild(headElement);

	    // If the title argument is not omitted:
	    if (title !== undefined) {
	      // Create a title element in the HTML namespace, and append it to the head
	      // element created in the previous step.
	      var titleElement = document.createElement("title");
	      headElement.appendChild(titleElement);

	      // Create a Text node, set its data to title (which could be the empty
	      // string), and append it to the title element created in the previous step.
	      titleElement.appendChild(document.createTextNode(title));
	    }

	    // Create a body element in the HTML namespace, and append it to the html
	    // element created in the earlier step.
	    htmlElement.appendChild(document.createElement("body"));

	    // doc's origin is an alias to the origin of the context object's associated
	    // document, and doc's effective script origin is an alias to the effective
	    // script origin of the context object's associated document.

	    return document;
	  };
	};


/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var core = module.exports = __webpack_require__(11);

	// These (because of how they were written) directly include level1/core and modify it.
	// ORDER IS IMPORTANT
	__webpack_require__(176);
	__webpack_require__(177);
	__webpack_require__(178);
	__webpack_require__(180);
	__webpack_require__(181);
	__webpack_require__(182);
	__webpack_require__(183);

	__webpack_require__(186)(core);
	__webpack_require__(184)(core);
	__webpack_require__(192)(core);
	__webpack_require__(185)(core);
	__webpack_require__(194)(core);
	__webpack_require__(188)(core);
	__webpack_require__(187)(core);
	__webpack_require__(190)(core);
	__webpack_require__(191)(core);
	__webpack_require__(193)(core);


/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var addConstants = __webpack_require__(3).addConstants;

	module.exports = function (core) {
	  // https://dom.spec.whatwg.org/#interface-nodefilter
	  core.NodeFilter = function () {
	    throw new TypeError("Illegal constructor");
	  };

	  /**
	   * Returns an unsigned short that will be used to tell if a given Node must
	   * be accepted or not by the NodeIterator or TreeWalker iteration
	   * algorithm. This method is expected to be written by the user of a
	   * NodeFilter.
	   *
	   * @see https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter
	   * @interface
	   *
	   * @param  {Node} node DOM Node
	   * @return {FILTER_ACCEPT|FILTER_REJECT|FILTER_SKIP}
	   */
	  core.NodeFilter.acceptNode = function(/* node */) {
	    throw new Error("This method is expected to be written by the user of a NodeFilter.");
	  };

	  addConstants(core.NodeFilter, {
	    // Constants for whatToShow
	    SHOW_ALL                    : 0xFFFFFFFF,
	    SHOW_ELEMENT                : 0x00000001,
	    SHOW_ATTRIBUTE              : 0x00000002,
	    SHOW_TEXT                   : 0x00000004,
	    SHOW_CDATA_SECTION          : 0x00000008,
	    SHOW_ENTITY_REFERENCE       : 0x00000010,
	    SHOW_ENTITY                 : 0x00000020,
	    SHOW_PROCESSING_INSTRUCTION : 0x00000040,
	    SHOW_COMMENT                : 0x00000080,
	    SHOW_DOCUMENT               : 0x00000100,
	    SHOW_DOCUMENT_TYPE          : 0x00000200,
	    SHOW_DOCUMENT_FRAGMENT      : 0x00000400,
	    SHOW_NOTATION               : 0x00000800,

	    // Constants returned by acceptNode
	    FILTER_ACCEPT               : 1,
	    FILTER_REJECT               : 2,
	    FILTER_SKIP                 : 3
	  });
	};


/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var defineGetter = __webpack_require__(3).defineGetter;

	module.exports = function (core) {
	  var DOCUMENT_POSITION_DISCONNECTED = core.Node.DOCUMENT_POSITION_DISCONNECTED;
	  var DOCUMENT_POSITION_PRECEDING = core.Node.DOCUMENT_POSITION_PRECEDING;
	  var DOCUMENT_POSITION_FOLLOWING = core.Node.DOCUMENT_POSITION_FOLLOWING;
	  var DOCUMENT_POSITION_CONTAINS = core.Node.DOCUMENT_POSITION_CONTAINS;
	  var DOCUMENT_POSITION_CONTAINED_BY = core.Node.DOCUMENT_POSITION_CONTAINED_BY;
	  var DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = core.Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC;

	  /**
	   * Return true if node is of a type obsoleted by the WHATWG living standard
	   * @param  {Node}  node
	   * @return {Boolean}
	   */
	  function isObsoleteNodeType(node) {
	    return node.nodeType === core.Node.ENTITY_NODE ||
	      node.nodeType === core.Node.ENTITY_REFERENCE_NODE ||
	      node.nodeType === core.Node.NOTATION_NODE ||
	      node.nodeType === core.Node.CDATA_SECTION_NODE;
	  }

	  /**
	   * Return the parent node of node, whatever its nodeType is
	   * @param  {Node} node
	   * @return {Node or null}
	   */
	  function getNodeParent(node) {

	    if(!node) {
	      return node;
	    }

	    switch (node.nodeType) {

	      case core.Node.DOCUMENT_NODE:
	      case core.Node.DOCUMENT_FRAGMENT_NODE:
	        return null;

	      case core.Node.COMMENT_NODE:
	      case core.Node.DOCUMENT_TYPE_NODE:
	      case core.Node.ELEMENT_NODE:
	      case core.Node.PROCESSING_INSTRUCTION_NODE:
	      case core.Node.TEXT_NODE:
	        return node.parentNode;

	      case core.Node.ATTRIBUTE_NODE:

	        return node._parentNode;

	      default:
	        throw new Error("Unknown node type:" + node.nodeType);
	    }
	  }

	  /**
	   * Walk up the node tree and return the nodes root node
	   * @param  {Node} node
	   * @return {Node}
	   */
	  function findNodeRoot(node) {
	    if (!getNodeParent(node)) {
	      return node;
	    }

	    return findNodeRoot(getNodeParent(node));
	  }

	  /**
	   * Walk up the node tree returning true if otherNode is an ancestor of node
	   * @param  {Node}  node
	   * @param  {Node}  otherNode
	   * @return {Boolean}
	   */
	  function isAncestor(node, otherNode) {
	    var parentNode = node.nodeType === node.ATTRIBUTE_NODE ? node._parentNode : node.parentNode;

	    if (!parentNode) {
	      return false;
	    }

	    if(parentNode === otherNode) {
	      return true;
	    }

	    return isAncestor(parentNode, otherNode);
	  }

	  /**
	   * Traverse the node tree starting at current. Return DOCUMENT_POSITION_FOLLOWING if otherNode follows node. Return
	   * DOCUMENT_POSITION_PRECEDING if otherNode precedes node
	   * @param  {Node} current
	   * @param  {Node} node
	   * @param  {Node} otherNode
	   * @return {Number}
	   */
	  function followingOrPreceding(current, node, otherNode) {
	    if (current === node) {
	      return core.Node.DOCUMENT_POSITION_FOLLOWING;
	    }

	    if (current === otherNode) {
	      return core.Node.DOCUMENT_POSITION_PRECEDING;
	    }

	    var i = 0, len = current._childNodes.length, child, result;

	    for(; i < len; i += 1) {

	      child = current._childNodes[i];

	      if((result = followingOrPreceding(child, node, otherNode)) !== 0) {
	        return result;
	      }
	    }

	    return 0;
	  }

	  /**
	   * Returns a bitmask Number composed of DOCUMENT_POSITION constants based upon the rules defined in
	   * http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
	   * @param  {Node} other
	   * @return {Number}
	   */
	  core.Node.prototype.compareDocumentPosition = function compareDocumentPosition (other) {
	    // Let reference be the context object.
	    var reference = this;

	    if(!(other instanceof core.Node)) {
	      throw Error("Comparing position against non-Node values is not allowed");
	    }

	    if (isObsoleteNodeType(reference) || isObsoleteNodeType(other)) {
	      throw new Error("Obsolete node type");
	    }

	    // If other and reference are the same object, return zero.
	    if (reference === other) {
	      return 0;
	    }

	    // If other and reference are not in the same tree, return the result of adding DOCUMENT_POSITION_DISCONNECTED,
	    // DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC, and either DOCUMENT_POSITION_PRECEDING or DOCUMENT_POSITION_FOLLOWING,
	    // with the constraint that this is to be consistent, together.
	    if (findNodeRoot(reference) !== findNodeRoot(other)) {
	      return DOCUMENT_POSITION_DISCONNECTED + DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + DOCUMENT_POSITION_FOLLOWING;
	    }

	    // If other is an ancestor of reference, return the result of adding DOCUMENT_POSITION_CONTAINS to
	    // DOCUMENT_POSITION_PRECEDING.
	    if (isAncestor(reference, other)) {
	      return DOCUMENT_POSITION_CONTAINS + DOCUMENT_POSITION_PRECEDING;
	    }

	    // If other is a descendant of reference, return the result of adding DOCUMENT_POSITION_CONTAINED_BY to
	    // DOCUMENT_POSITION_FOLLOWING.
	    if (isAncestor(other, reference)) {
	      return DOCUMENT_POSITION_CONTAINED_BY + DOCUMENT_POSITION_FOLLOWING;
	    }

	    // If other is preceding reference return DOCUMENT_POSITION_PRECEDING, otherwise return DOCUMENT_POSITION_FOLLOWING
	    return followingOrPreceding(findNodeRoot(reference), reference, other);
	  };

	  /**
	   * The contains(other) method returns true if other is an inclusive descendant of the context object,
	   * and false otherwise (including when other is null).
	   * @param  {[Node]} other [the node to test]
	   * @return {[boolean]}      [whether other is an inclusive descendant of this]
	   */
	  core.Node.prototype.contains = function (other) {
	    return other instanceof core.Node &&
	    (this === other || this.compareDocumentPosition(other) & DOCUMENT_POSITION_CONTAINED_BY);
	  };

	  // http://dom.spec.whatwg.org/#dom-node-parentelement
	  defineGetter(core.Node.prototype, "parentElement", function () {
	    return this._parentNode !== null && this._parentNode.nodeType === core.Node.ELEMENT_NODE ? this._parentNode : null;
	  });

	  function nodeEquals(a, b) {
	    if (a.nodeType !== b.nodeType) {
	      return false;
	    }

	    switch (a.nodeType) {
	      case core.Node.DOCUMENT_TYPE_NODE:
	        if (a._name !== b._name || a._publicId !== b._publicId || a._systemId !== b._systemId) {
	          return false;
	        }
	        break;
	      case core.Node.ELEMENT_NODE:
	        if (a._namespaceURI !== b._namespaceURI || a._prefix !== b._prefix || a._localName !== b._localName ||
	            a._attributes.length !== b._attributes.length) {
	          return false;
	        }
	        break;
	      case core.Node.PROCESSING_INSTRUCTION_NODE:
	        if (a._target !== b._target || a._data !== b._data) {
	          return false;
	        }
	        break;
	      case core.Node.TEXT_NODE:
	      case core.Node.COMMENT_NODE:
	        if (a._data !== b._data) {
	          return false;
	        }
	        break;
	    }

	    if (a.nodeType === core.Node.ELEMENT_NODE) {
	      for (var i = 0; i < a._attributes.length; ++i) {
	        var aAttr = a._attributes[i];
	        var bAttr = b._attributes.$getNode(aAttr._namespaceURI, aAttr._localName);
	        if (!bAttr) {
	          return false;
	        }

	        // TODO: once Attr is simplified, check the internal property instead of the public getter
	        if (aAttr.value !== bAttr.value) {
	          return false;
	        }
	      }
	    }

	    if (a._childNodes.length !== b._childNodes.length) {
	      return false;
	    }

	    for (var j = 0; j < a._childNodes.length; ++j) {
	      if (!nodeEquals(a._childNodes[j], b._childNodes[j])) {
	        return false;
	      }
	    }

	    return true;
	  }

	  // https://dom.spec.whatwg.org/#dom-node-isequalnode
	  core.Node.prototype.isEqualNode = function (node) {
	    if (node === undefined) {
	      // this is what Node? means in the IDL
	      node = null;
	    }

	    if (node === null) {
	      return false;
	    }

	    // Fast-path, not in the spec
	    if (this === node) {
	      return true;
	    }

	    return nodeEquals(this, node);
	  };
	};




/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var inheritFrom = __webpack_require__(3).inheritFrom;

	module.exports = function (core) {
	  core.ProcessingInstruction = function ProcessingInstruction(ownerDocument, target, data) {
	    core.CharacterData.call(this, ownerDocument, data);

	    this._target = target;
	  };

	  inheritFrom(core.CharacterData, core.ProcessingInstruction, {
	    nodeType: core.Node.PROCESSING_INSTRUCTION_NODE, // TODO should be on prototype, not here
	    get target() { return this._target; }
	  });
	};


/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var nwmatcher = __webpack_require__(596);
	var memoizeQuery = __webpack_require__(3).memoizeQuery;

	module.exports = function (core) {
	  [core.Document, core.DocumentFragment, core.Element].forEach(function (Class) {
	    Class.prototype.querySelector = memoizeQuery(function (selectors) {
	      return addNwmatcher(this).first(String(selectors), this);
	    });

	    Class.prototype.querySelectorAll = memoizeQuery(function (selectors) {
	      return new core.NodeList(addNwmatcher(this).select(String(selectors), this));
	    });
	  });

	  core.Element.prototype.matches = memoizeQuery(function (selectors) {
	    return addNwmatcher(this).match(this, selectors);
	  });
	};

	// nwmatcher gets `document.documentElement` at creation-time, so we have to initialize lazily, since in the initial
	// stages of Document initialization, there is no documentElement present yet.
	function addNwmatcher(parentNode) {
	  var document = parentNode._ownerDocument;

	  if (!document._nwmatcher) {
	    document._nwmatcher = nwmatcher({ document: document });
	    document._nwmatcher.configure({ UNIQUE_ID: false });
	  }

	  return document._nwmatcher;
	}


/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var inheritFrom = __webpack_require__(3).inheritFrom;

	module.exports = function (core) {
	  // TODO: constructor should not take ownerDocument
	  core.Text = function Text(ownerDocument, data) {
	    core.CharacterData.call(this, ownerDocument, data);
	  };

	  inheritFrom(core.CharacterData, core.Text, {
	    nodeType: core.Node.TEXT_NODE, // TODO should be on prototype, not here
	    splitText: function (offset) {
	      offset = offset >>> 0;

	      var length = this.length;

	      if (offset > length) {
	        throw new core.DOMException(core.DOMException.INDEX_SIZE_ERR);
	      }

	      var count = length - offset;
	      var newData = this.substringData(offset, count);

	      var newNode = this._ownerDocument.createTextNode(newData);

	      var parent = this._parentNode;

	      if (parent !== null) {
	        parent.insertBefore(newNode, this.nextSibling);
	      }

	      this.replaceData(offset, count, "");

	      return newNode;

	      // TODO: range stuff
	    },

	    // TODO: wholeText property
	  });
	};


/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var acorn = __webpack_require__(196);
	var walk = __webpack_require__(197);

	function isScope(node) {
	  return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration' || node.type === 'ArrowFunctionExpression' || node.type === 'Program';
	}
	function isBlockScope(node) {
	  return node.type === 'BlockStatement' || isScope(node);
	}

	function declaresArguments(node) {
	  return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';
	}

	function declaresThis(node) {
	  return node.type === 'FunctionExpression' || node.type === 'FunctionDeclaration';
	}

	function reallyParse(source) {
	  try {
	    return acorn.parse(source, {
	      ecmaVersion: 6,
	      allowReturnOutsideFunction: true,
	      allowImportExportEverywhere: true,
	      allowHashBang: true
	    });
	  } catch (ex) {
	    return acorn.parse(source, {
	      ecmaVersion: 5,
	      allowReturnOutsideFunction: true,
	      allowImportExportEverywhere: true,
	      allowHashBang: true
	    });
	  }
	}
	module.exports = findGlobals;
	module.exports.parse = reallyParse;
	function findGlobals(source) {
	  var globals = [];
	  var ast;
	  // istanbul ignore else
	  if (typeof source === 'string') {
	    ast = reallyParse(source);
	  } else {
	    ast = source;
	  }
	  // istanbul ignore if
	  if (!(ast && typeof ast === 'object' && ast.type === 'Program')) {
	    throw new TypeError('Source must be either a string of JavaScript or an acorn AST');
	  }
	  var declareFunction = function (node) {
	    var fn = node;
	    fn.locals = fn.locals || {};
	    node.params.forEach(function (node) {
	      declarePattern(node, fn);
	    });
	    if (node.id) {
	      fn.locals[node.id.name] = true;
	    }
	  }
	  var declarePattern = function (node, parent) {
	    switch (node.type) {
	      case 'Identifier':
	        parent.locals[node.name] = true;
	        break;
	      case 'ObjectPattern':
	        node.properties.forEach(function (node) {
	          declarePattern(node.value, parent);
	        });
	        break;
	      case 'ArrayPattern':
	        node.elements.forEach(function (node) {
	          if (node) declarePattern(node, parent);
	        });
	        break;
	      case 'RestElement':
	        declarePattern(node.argument, parent);
	        break;
	      case 'AssignmentPattern':
	        declarePattern(node.left, parent);
	        break;
	      // istanbul ignore next
	      default:
	        throw new Error('Unrecognized pattern type: ' + node.type);
	    }
	  }
	  var declareModuleSpecifier = function (node, parents) {
	    ast.locals = ast.locals || {};
	    ast.locals[node.local.name] = true;
	  }
	  walk.ancestor(ast, {
	    'VariableDeclaration': function (node, parents) {
	      var parent = null;
	      for (var i = parents.length - 1; i >= 0 && parent === null; i--) {
	        if (node.kind === 'var' ? isScope(parents[i]) : isBlockScope(parents[i])) {
	          parent = parents[i];
	        }
	      }
	      parent.locals = parent.locals || {};
	      node.declarations.forEach(function (declaration) {
	        declarePattern(declaration.id, parent);
	      });
	    },
	    'FunctionDeclaration': function (node, parents) {
	      var parent = null;
	      for (var i = parents.length - 2; i >= 0 && parent === null; i--) {
	        if (isScope(parents[i])) {
	          parent = parents[i];
	        }
	      }
	      parent.locals = parent.locals || {};
	      parent.locals[node.id.name] = true;
	      declareFunction(node);
	    },
	    'Function': declareFunction,
	    'ClassDeclaration': function (node, parents) {
	      var parent = null;
	      for (var i = parents.length - 2; i >= 0 && parent === null; i--) {
	        if (isScope(parents[i])) {
	          parent = parents[i];
	        }
	      }
	      parent.locals = parent.locals || {};
	      parent.locals[node.id.name] = true;
	    },
	    'TryStatement': function (node) {
	      if (node.handler === null) return;
	      node.handler.body.locals = node.handler.body.locals || {};
	      node.handler.body.locals[node.handler.param.name] = true;
	    },
	    'ImportDefaultSpecifier': declareModuleSpecifier,
	    'ImportSpecifier': declareModuleSpecifier,
	    'ImportNamespaceSpecifier': declareModuleSpecifier
	  });
	  function identifier(node, parents) {
	    var name = node.name;
	    if (name === 'undefined') return;
	    for (var i = 0; i < parents.length; i++) {
	      if (name === 'arguments' && declaresArguments(parents[i])) {
	        return;
	      }
	      if (parents[i].locals && name in parents[i].locals) {
	        return;
	      }
	    }
	    if (
	      parents[parents.length - 2] &&
	      parents[parents.length - 2].type === 'TryStatement' &&
	      parents[parents.length - 2].handler &&
	      node === parents[parents.length - 2].handler.param
	    ) {
	      return;
	    }
	    node.parents = parents;
	    globals.push(node);
	  }
	  walk.ancestor(ast, {
	    'VariablePattern': identifier,
	    'Identifier': identifier,
	    'ThisExpression': function (node, parents) {
	      for (var i = 0; i < parents.length; i++) {
	        if (declaresThis(parents[i])) {
	          return;
	        }
	      }
	      node.parents = parents;
	      globals.push(node);
	    }
	  });
	  var groupedGlobals = {};
	  globals.forEach(function (node) {
	    groupedGlobals[node.name] = (groupedGlobals[node.name] || []);
	    groupedGlobals[node.name].push(node);
	  });
	  return Object.keys(groupedGlobals).sort().map(function (name) {
	    return {name: name, nodes: groupedGlobals[name]};
	  });
	}


/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.acorn = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

	"use strict";

	var _tokentype = _dereq_("./tokentype");

	var _state = _dereq_("./state");

	var pp = _state.Parser.prototype;

	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.

	pp.checkPropClash = function (prop, propHash) {
	  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) return;
	  var key = prop.key;var name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;break;
	    case "Literal":
	      name = String(key.value);break;
	    default:
	      return;
	  }
	  var kind = prop.kind;

	  if (this.options.ecmaVersion >= 6) {
	    if (name === "__proto__" && kind === "init") {
	      if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	      propHash.proto = true;
	    }
	    return;
	  }
	  name = "$" + name;
	  var other = propHash[name];
	  if (other) {
	    var isGetSet = kind !== "init";
	    if ((this.strict || isGetSet) && other[kind] || !(isGetSet ^ other.init)) this.raise(key.start, "Redefinition of property");
	  } else {
	    other = propHash[name] = {
	      init: false,
	      get: false,
	      set: false
	    };
	  }
	  other[kind] = true;
	};

	// ### Expression parsing

	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function(s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.

	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).

	pp.parseExpression = function (noIn, refDestructuringErrors) {
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
	  if (this.type === _tokentype.types.comma) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokentype.types.comma)) node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};

	// Parse an assignment expression. This includes applications of
	// operators like `+=`.

	pp.parseMaybeAssign = function (noIn, refDestructuringErrors, afterLeftParse) {
	  if (this.type == _tokentype.types._yield && this.inGenerator) return this.parseYield();

	  var validateDestructuring = false;
	  if (!refDestructuringErrors) {
	    refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };
	    validateDestructuring = true;
	  }
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  if (this.type == _tokentype.types.parenL || this.type == _tokentype.types.name) this.potentialArrowAt = this.start;
	  var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.type.isAssign) {
	    if (validateDestructuring) this.checkPatternErrors(refDestructuringErrors, true);
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.value;
	    node.left = this.type === _tokentype.types.eq ? this.toAssignable(left) : left;
	    refDestructuringErrors.shorthandAssign = 0; // reset because shorthand default was used correctly
	    this.checkLVal(left);
	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else {
	    if (validateDestructuring) this.checkExpressionErrors(refDestructuringErrors, true);
	  }
	  return left;
	};

	// Parse a ternary conditional (`?:`) operator.

	pp.parseMaybeConditional = function (noIn, refDestructuringErrors) {
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseExprOps(noIn, refDestructuringErrors);
	  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
	  if (this.eat(_tokentype.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokentype.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};

	// Start the precedence parser.

	pp.parseExprOps = function (noIn, refDestructuringErrors) {
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseMaybeUnary(refDestructuringErrors);
	  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
	  return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	};

	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.

	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.type.binop;
	  if (prec != null && (!noIn || this.type !== _tokentype.types._in)) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.value;
	      var op = this.type;
	      this.next();
	      var startPos = this.start,
	          startLoc = this.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, prec, noIn);
	      this.finishNode(node, op === _tokentype.types.logicalOR || op === _tokentype.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};

	// Parse unary operators, both prefix and postfix.

	pp.parseMaybeUnary = function (refDestructuringErrors) {
	  if (this.type.prefix) {
	    var node = this.startNode(),
	        update = this.type === _tokentype.types.incDec;
	    node.operator = this.value;
	    node.prefix = true;
	    this.next();
	    node.argument = this.parseMaybeUnary();
	    this.checkExpressionErrors(refDestructuringErrors, true);
	    if (update) this.checkLVal(node.argument);else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") this.raise(node.start, "Deleting local variable in strict mode");
	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseExprSubscripts(refDestructuringErrors);
	  if (this.checkExpressionErrors(refDestructuringErrors)) return expr;
	  while (this.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};

	// Parse call, dot, and `[]`-subscript expressions.

	pp.parseExprSubscripts = function (refDestructuringErrors) {
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  var expr = this.parseExprAtom(refDestructuringErrors);
	  var skipArrowSubscripts = expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")";
	  if (this.checkExpressionErrors(refDestructuringErrors) || skipArrowSubscripts) return expr;
	  return this.parseSubscripts(expr, startPos, startLoc);
	};

	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (this.eat(_tokentype.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdent(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokentype.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokentype.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.eat(_tokentype.types.parenL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseExprList(_tokentype.types.parenR, false);
	      base = this.finishNode(node, "CallExpression");
	    } else if (this.type === _tokentype.types.backQuote) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};

	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.

	pp.parseExprAtom = function (refDestructuringErrors) {
	  var node = undefined,
	      canBeArrow = this.potentialArrowAt == this.start;
	  switch (this.type) {
	    case _tokentype.types._super:
	      if (!this.inFunction) this.raise(this.start, "'super' outside of function or class");
	    case _tokentype.types._this:
	      var type = this.type === _tokentype.types._this ? "ThisExpression" : "Super";
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, type);

	    case _tokentype.types._yield:
	      if (this.inGenerator) this.unexpected();

	    case _tokentype.types.name:
	      var startPos = this.start,
	          startLoc = this.startLoc;
	      var id = this.parseIdent(this.type !== _tokentype.types.name);
	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id]);
	      return id;

	    case _tokentype.types.regexp:
	      var value = this.value;
	      node = this.parseLiteral(value.value);
	      node.regex = { pattern: value.pattern, flags: value.flags };
	      return node;

	    case _tokentype.types.num:case _tokentype.types.string:
	      return this.parseLiteral(this.value);

	    case _tokentype.types._null:case _tokentype.types._true:case _tokentype.types._false:
	      node = this.startNode();
	      node.value = this.type === _tokentype.types._null ? null : this.type === _tokentype.types._true;
	      node.raw = this.type.keyword;
	      this.next();
	      return this.finishNode(node, "Literal");

	    case _tokentype.types.parenL:
	      return this.parseParenAndDistinguishExpression(canBeArrow);

	    case _tokentype.types.bracketL:
	      node = this.startNode();
	      this.next();
	      // check whether this is array comprehension or regular array
	      if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {
	        return this.parseComprehension(node, false);
	      }
	      node.elements = this.parseExprList(_tokentype.types.bracketR, true, true, refDestructuringErrors);
	      return this.finishNode(node, "ArrayExpression");

	    case _tokentype.types.braceL:
	      return this.parseObj(false, refDestructuringErrors);

	    case _tokentype.types._function:
	      node = this.startNode();
	      this.next();
	      return this.parseFunction(node, false);

	    case _tokentype.types._class:
	      return this.parseClass(this.startNode(), false);

	    case _tokentype.types._new:
	      return this.parseNew();

	    case _tokentype.types.backQuote:
	      return this.parseTemplate();

	    default:
	      this.unexpected();
	  }
	};

	pp.parseLiteral = function (value) {
	  var node = this.startNode();
	  node.value = value;
	  node.raw = this.input.slice(this.start, this.end);
	  this.next();
	  return this.finishNode(node, "Literal");
	};

	pp.parseParenExpression = function () {
	  this.expect(_tokentype.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokentype.types.parenR);
	  return val;
	};

	pp.parseParenAndDistinguishExpression = function (canBeArrow) {
	  var startPos = this.start,
	      startLoc = this.startLoc,
	      val = undefined;
	  if (this.options.ecmaVersion >= 6) {
	    this.next();

	    if (this.options.ecmaVersion >= 7 && this.type === _tokentype.types._for) {
	      return this.parseComprehension(this.startNodeAt(startPos, startLoc), true);
	    }

	    var innerStartPos = this.start,
	        innerStartLoc = this.startLoc;
	    var exprList = [],
	        first = true;
	    var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 },
	        spreadStart = undefined,
	        innerParenStart = undefined;
	    while (this.type !== _tokentype.types.parenR) {
	      first ? first = false : this.expect(_tokentype.types.comma);
	      if (this.type === _tokentype.types.ellipsis) {
	        spreadStart = this.start;
	        exprList.push(this.parseParenItem(this.parseRest()));
	        break;
	      } else {
	        if (this.type === _tokentype.types.parenL && !innerParenStart) {
	          innerParenStart = this.start;
	        }
	        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
	      }
	    }
	    var innerEndPos = this.start,
	        innerEndLoc = this.startLoc;
	    this.expect(_tokentype.types.parenR);

	    if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokentype.types.arrow)) {
	      this.checkPatternErrors(refDestructuringErrors, true);
	      if (innerParenStart) this.unexpected(innerParenStart);
	      return this.parseParenArrowList(startPos, startLoc, exprList);
	    }

	    if (!exprList.length) this.unexpected(this.lastTokStart);
	    if (spreadStart) this.unexpected(spreadStart);
	    this.checkExpressionErrors(refDestructuringErrors, true);

	    if (exprList.length > 1) {
	      val = this.startNodeAt(innerStartPos, innerStartLoc);
	      val.expressions = exprList;
	      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	    } else {
	      val = exprList[0];
	    }
	  } else {
	    val = this.parseParenExpression();
	  }

	  if (this.options.preserveParens) {
	    var par = this.startNodeAt(startPos, startLoc);
	    par.expression = val;
	    return this.finishNode(par, "ParenthesizedExpression");
	  } else {
	    return val;
	  }
	};

	pp.parseParenItem = function (item) {
	  return item;
	};

	pp.parseParenArrowList = function (startPos, startLoc, exprList) {
	  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
	};

	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the

	var empty = [];

	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdent(true);
	  if (this.options.ecmaVersion >= 6 && this.eat(_tokentype.types.dot)) {
	    node.meta = meta;
	    node.property = this.parseIdent(true);
	    if (node.property.name !== "target") this.raise(node.property.start, "The only valid meta property for new is new.target");
	    if (!this.inFunction) this.raise(node.start, "new.target can only be used in functions");
	    return this.finishNode(node, "MetaProperty");
	  }
	  var startPos = this.start,
	      startLoc = this.startLoc;
	  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	  if (this.eat(_tokentype.types.parenL)) node.arguments = this.parseExprList(_tokentype.types.parenR, false);else node.arguments = empty;
	  return this.finishNode(node, "NewExpression");
	};

	// Parse template expression.

	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, '\n'),
	    cooked: this.value
	  };
	  this.next();
	  elem.tail = this.type === _tokentype.types.backQuote;
	  return this.finishNode(elem, "TemplateElement");
	};

	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokentype.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokentype.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};

	// Parse an object literal or binding pattern.

	pp.parseObj = function (isPattern, refDestructuringErrors) {
	  var node = this.startNode(),
	      first = true,
	      propHash = {};
	  node.properties = [];
	  this.next();
	  while (!this.eat(_tokentype.types.braceR)) {
	    if (!first) {
	      this.expect(_tokentype.types.comma);
	      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
	    } else first = false;

	    var prop = this.startNode(),
	        isGenerator = undefined,
	        startPos = undefined,
	        startLoc = undefined;
	    if (this.options.ecmaVersion >= 6) {
	      prop.method = false;
	      prop.shorthand = false;
	      if (isPattern || refDestructuringErrors) {
	        startPos = this.start;
	        startLoc = this.startLoc;
	      }
	      if (!isPattern) isGenerator = this.eat(_tokentype.types.star);
	    }
	    this.parsePropertyName(prop);
	    this.parsePropertyValue(prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors);
	    this.checkPropClash(prop, propHash);
	    node.properties.push(this.finishNode(prop, "Property"));
	  }
	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};

	pp.parsePropertyValue = function (prop, isPattern, isGenerator, startPos, startLoc, refDestructuringErrors) {
	  if (this.eat(_tokentype.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
	    prop.kind = "init";
	  } else if (this.options.ecmaVersion >= 6 && this.type === _tokentype.types.parenL) {
	    if (isPattern) this.unexpected();
	    prop.kind = "init";
	    prop.method = true;
	    prop.value = this.parseMethod(isGenerator);
	  } else if (this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type != _tokentype.types.comma && this.type != _tokentype.types.braceR)) {
	    if (isGenerator || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    prop.value = this.parseMethod(false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.value.params.length !== paramCount) {
	      var start = prop.value.start;
	      if (prop.kind === "get") this.raise(start, "getter should have no params");else this.raise(start, "setter should have exactly one param");
	    }
	  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
	    prop.kind = "init";
	    if (isPattern) {
	      if (this.keywords.test(prop.key.name) || (this.strict ? this.reservedWordsStrictBind : this.reservedWords).test(prop.key.name)) this.raise(prop.key.start, "Binding " + prop.key.name);
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
	    } else if (this.type === _tokentype.types.eq && refDestructuringErrors) {
	      if (!refDestructuringErrors.shorthandAssign) refDestructuringErrors.shorthandAssign = this.start;
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
	    } else {
	      prop.value = prop.key;
	    }
	    prop.shorthand = true;
	  } else this.unexpected();
	};

	pp.parsePropertyName = function (prop) {
	  if (this.options.ecmaVersion >= 6) {
	    if (this.eat(_tokentype.types.bracketL)) {
	      prop.computed = true;
	      prop.key = this.parseMaybeAssign();
	      this.expect(_tokentype.types.bracketR);
	      return prop.key;
	    } else {
	      prop.computed = false;
	    }
	  }
	  return prop.key = this.type === _tokentype.types.num || this.type === _tokentype.types.string ? this.parseExprAtom() : this.parseIdent(true);
	};

	// Initialize empty function node.

	pp.initFunction = function (node) {
	  node.id = null;
	  if (this.options.ecmaVersion >= 6) {
	    node.generator = false;
	    node.expression = false;
	  }
	};

	// Parse object or class method.

	pp.parseMethod = function (isGenerator) {
	  var node = this.startNode();
	  this.initFunction(node);
	  this.expect(_tokentype.types.parenL);
	  node.params = this.parseBindingList(_tokentype.types.parenR, false, false);
	  if (this.options.ecmaVersion >= 6) node.generator = isGenerator;
	  this.parseFunctionBody(node, false);
	  return this.finishNode(node, "FunctionExpression");
	};

	// Parse arrow function expression with given parameters.

	pp.parseArrowExpression = function (node, params) {
	  this.initFunction(node);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};

	// Parse function body and check parameters.

	pp.parseFunctionBody = function (node, isArrowFunction) {
	  var isExpression = isArrowFunction && this.type !== _tokentype.types.braceL;

	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.inFunction,
	        oldInGen = this.inGenerator,
	        oldLabels = this.labels;
	    this.inFunction = true;this.inGenerator = node.generator;this.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.inFunction = oldInFunc;this.inGenerator = oldInGen;this.labels = oldLabels;
	  }

	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  if (this.strict || !isExpression && node.body.body.length && this.isUseStrict(node.body.body[0])) {
	    var oldStrict = this.strict;
	    this.strict = true;
	    if (node.id) this.checkLVal(node.id, true);
	    this.checkParams(node);
	    this.strict = oldStrict;
	  } else if (isArrowFunction) {
	    this.checkParams(node);
	  }
	};

	// Checks function params for various disallowed patterns such as using "eval"
	// or "arguments" and duplicate parameters.

	pp.checkParams = function (node) {
	  var nameHash = {};
	  for (var i = 0; i < node.params.length; i++) {
	    this.checkLVal(node.params[i], true, nameHash);
	  }
	};

	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).

	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (!first) {
	      this.expect(_tokentype.types.comma);
	      if (this.type === close && refDestructuringErrors && !refDestructuringErrors.trailingComma) {
	        refDestructuringErrors.trailingComma = this.lastTokStart;
	      }
	      if (allowTrailingComma && this.afterTrailingComma(close)) break;
	    } else first = false;

	    var elt = undefined;
	    if (allowEmpty && this.type === _tokentype.types.comma) elt = null;else if (this.type === _tokentype.types.ellipsis) elt = this.parseSpread(refDestructuringErrors);else elt = this.parseMaybeAssign(false, refDestructuringErrors);
	    elts.push(elt);
	  }
	  return elts;
	};

	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.

	pp.parseIdent = function (liberal) {
	  var node = this.startNode();
	  if (liberal && this.options.allowReserved == "never") liberal = false;
	  if (this.type === _tokentype.types.name) {
	    if (!liberal && (this.strict ? this.reservedWordsStrict : this.reservedWords).test(this.value) && (this.options.ecmaVersion >= 6 || this.input.slice(this.start, this.end).indexOf("\\") == -1)) this.raise(this.start, "The keyword '" + this.value + "' is reserved");
	    node.name = this.value;
	  } else if (liberal && this.type.keyword) {
	    node.name = this.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "Identifier");
	};

	// Parses yield expression inside generator.

	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.type == _tokentype.types.semi || this.canInsertSemicolon() || this.type != _tokentype.types.star && !this.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokentype.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};

	// Parses array and generator comprehensions.

	pp.parseComprehension = function (node, isGenerator) {
	  node.blocks = [];
	  while (this.type === _tokentype.types._for) {
	    var block = this.startNode();
	    this.next();
	    this.expect(_tokentype.types.parenL);
	    block.left = this.parseBindingAtom();
	    this.checkLVal(block.left, true);
	    this.expectContextual("of");
	    block.right = this.parseExpression();
	    this.expect(_tokentype.types.parenR);
	    node.blocks.push(this.finishNode(block, "ComprehensionBlock"));
	  }
	  node.filter = this.eat(_tokentype.types._if) ? this.parseParenExpression() : null;
	  node.body = this.parseExpression();
	  this.expect(isGenerator ? _tokentype.types.parenR : _tokentype.types.bracketR);
	  node.generator = isGenerator;
	  return this.finishNode(node, "ComprehensionExpression");
	};

	},{"./state":10,"./tokentype":14}],2:[function(_dereq_,module,exports){
	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.

	// Reserved word lists for various dialects of the language

	"use strict";

	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	var reservedWords = {
	  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
	  5: "class enum extends super const export import",
	  6: "enum",
	  strict: "implements interface let package private protected public static yield",
	  strictBind: "eval arguments"
	};

	exports.reservedWords = reservedWords;
	// And the keywords

	var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

	var keywords = {
	  5: ecma5AndLessKeywords,
	  6: ecma5AndLessKeywords + " let const class extends export import yield super"
	};

	exports.keywords = keywords;
	// ## Character categories

	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `bin/generate-identifier-regex.js`.

	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";

	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];

	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;
	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}

	// Test whether a given character code starts an identifier.

	function isIdentifierStart(code, astral) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  if (astral === false) return false;
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}

	// Test whether a given character is part of an identifier.

	function isIdentifierChar(code, astral) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  if (astral === false) return false;
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}

	},{}],3:[function(_dereq_,module,exports){
	// Acorn is a tiny, fast JavaScript parser written in JavaScript.
	//
	// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and
	// various contributors and released under an MIT license.
	//
	// Git repositories for Acorn are available at
	//
	//     http://marijnhaverbeke.nl/git/acorn
	//     https://github.com/ternjs/acorn.git
	//
	// Please use the [github bug tracker][ghbt] to report issues.
	//
	// [ghbt]: https://github.com/ternjs/acorn/issues
	//
	// This file defines the main parser interface. The library also comes
	// with a [error-tolerant parser][dammit] and an
	// [abstract syntax tree walker][walk], defined in other files.
	//
	// [dammit]: acorn_loose.js
	// [walk]: util/walk.js

	"use strict";

	exports.__esModule = true;
	exports.parse = parse;
	exports.parseExpressionAt = parseExpressionAt;
	exports.tokenizer = tokenizer;

	var _state = _dereq_("./state");

	_dereq_("./parseutil");

	_dereq_("./statement");

	_dereq_("./lval");

	_dereq_("./expression");

	_dereq_("./location");

	exports.Parser = _state.Parser;
	exports.plugins = _state.plugins;

	var _options = _dereq_("./options");

	exports.defaultOptions = _options.defaultOptions;

	var _locutil = _dereq_("./locutil");

	exports.Position = _locutil.Position;
	exports.SourceLocation = _locutil.SourceLocation;
	exports.getLineInfo = _locutil.getLineInfo;

	var _node = _dereq_("./node");

	exports.Node = _node.Node;

	var _tokentype = _dereq_("./tokentype");

	exports.TokenType = _tokentype.TokenType;
	exports.tokTypes = _tokentype.types;

	var _tokencontext = _dereq_("./tokencontext");

	exports.TokContext = _tokencontext.TokContext;
	exports.tokContexts = _tokencontext.types;

	var _identifier = _dereq_("./identifier");

	exports.isIdentifierChar = _identifier.isIdentifierChar;
	exports.isIdentifierStart = _identifier.isIdentifierStart;

	var _tokenize = _dereq_("./tokenize");

	exports.Token = _tokenize.Token;

	var _whitespace = _dereq_("./whitespace");

	exports.isNewLine = _whitespace.isNewLine;
	exports.lineBreak = _whitespace.lineBreak;
	exports.lineBreakG = _whitespace.lineBreakG;
	var version = "2.6.4";

	exports.version = version;
	// The main exported interface (under `self.acorn` when in the
	// browser) is a `parse` function that takes a code string and
	// returns an abstract syntax tree as specified by [Mozilla parser
	// API][api].
	//
	// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

	function parse(input, options) {
	  return new _state.Parser(options, input).parse();
	}

	// This function tries to parse a single expression at a given
	// offset in a string. Useful for parsing mixed-language formats
	// that embed JavaScript expressions.

	function parseExpressionAt(input, pos, options) {
	  var p = new _state.Parser(options, input, pos);
	  p.nextToken();
	  return p.parseExpression();
	}

	// Acorn is organized as a tokenizer and a recursive-descent parser.
	// The `tokenizer` export provides an interface to the tokenizer.

	function tokenizer(input, options) {
	  return new _state.Parser(options, input);
	}

	},{"./expression":1,"./identifier":2,"./location":4,"./locutil":5,"./lval":6,"./node":7,"./options":8,"./parseutil":9,"./state":10,"./statement":11,"./tokencontext":12,"./tokenize":13,"./tokentype":14,"./whitespace":16}],4:[function(_dereq_,module,exports){
	"use strict";

	var _state = _dereq_("./state");

	var _locutil = _dereq_("./locutil");

	var pp = _state.Parser.prototype;

	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.

	pp.raise = function (pos, message) {
	  var loc = _locutil.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;err.loc = loc;err.raisedAt = this.pos;
	  throw err;
	};

	pp.curPosition = function () {
	  if (this.options.locations) {
	    return new _locutil.Position(this.curLine, this.pos - this.lineStart);
	  }
	};

	},{"./locutil":5,"./state":10}],5:[function(_dereq_,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _whitespace = _dereq_("./whitespace");

	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.

	var Position = (function () {
	  function Position(line, col) {
	    _classCallCheck(this, Position);

	    this.line = line;
	    this.column = col;
	  }

	  Position.prototype.offset = function offset(n) {
	    return new Position(this.line, this.column + n);
	  };

	  return Position;
	})();

	exports.Position = Position;

	var SourceLocation = function SourceLocation(p, start, end) {
	  _classCallCheck(this, SourceLocation);

	  this.start = start;
	  this.end = end;
	  if (p.sourceFile !== null) this.source = p.sourceFile;
	}

	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.

	;

	exports.SourceLocation = SourceLocation;

	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}

	},{"./whitespace":16}],6:[function(_dereq_,module,exports){
	"use strict";

	var _tokentype = _dereq_("./tokentype");

	var _state = _dereq_("./state");

	var _util = _dereq_("./util");

	var pp = _state.Parser.prototype;

	// Convert existing expression atom to assignable pattern
	// if possible.

	pp.toAssignable = function (node, isBinding) {
	  if (this.options.ecmaVersion >= 6 && node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (var i = 0; i < node.properties.length; i++) {
	          var prop = node.properties[i];
	          if (prop.kind !== "init") this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	          this.toAssignable(prop.value, isBinding);
	        }
	        break;

	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;

	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	          // falls through to AssignmentPattern
	        } else {
	            this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	            break;
	          }

	      case "AssignmentPattern":
	        if (node.right.type === "YieldExpression") this.raise(node.right.start, "Yield expression cannot be a default value");
	        break;

	      case "ParenthesizedExpression":
	        node.expression = this.toAssignable(node.expression, isBinding);
	        break;

	      case "MemberExpression":
	        if (!isBinding) break;

	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};

	// Convert list of expression atoms to binding list.

	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type == "RestElement") {
	      --end;
	    } else if (last && last.type == "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") this.unexpected(arg.start);
	      --end;
	    }

	    if (isBinding && last.type === "RestElement" && last.argument.type !== "Identifier") this.unexpected(last.argument.start);
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};

	// Parses spread element.

	pp.parseSpread = function (refDestructuringErrors) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refDestructuringErrors);
	  return this.finishNode(node, "SpreadElement");
	};

	pp.parseRest = function (allowNonIdent) {
	  var node = this.startNode();
	  this.next();

	  // RestElement inside of a function parameter must be an identifier
	  if (allowNonIdent) node.argument = this.type === _tokentype.types.name ? this.parseIdent() : this.unexpected();else node.argument = this.type === _tokentype.types.name || this.type === _tokentype.types.bracketL ? this.parseBindingAtom() : this.unexpected();

	  return this.finishNode(node, "RestElement");
	};

	// Parses lvalue (assignable) atom.

	pp.parseBindingAtom = function () {
	  if (this.options.ecmaVersion < 6) return this.parseIdent();
	  switch (this.type) {
	    case _tokentype.types.name:
	      return this.parseIdent();

	    case _tokentype.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokentype.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");

	    case _tokentype.types.braceL:
	      return this.parseObj(true);

	    default:
	      this.unexpected();
	  }
	};

	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma, allowNonIdent) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) first = false;else this.expect(_tokentype.types.comma);
	    if (allowEmpty && this.type === _tokentype.types.comma) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
	      break;
	    } else if (this.type === _tokentype.types.ellipsis) {
	      var rest = this.parseRest(allowNonIdent);
	      this.parseBindingListItem(rest);
	      elts.push(rest);
	      this.expect(close);
	      break;
	    } else {
	      var elem = this.parseMaybeDefault(this.start, this.startLoc);
	      this.parseBindingListItem(elem);
	      elts.push(elem);
	    }
	  }
	  return elts;
	};

	pp.parseBindingListItem = function (param) {
	  return param;
	};

	// Parses assignment pattern around given atom if possible.

	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  left = left || this.parseBindingAtom();
	  if (this.options.ecmaVersion < 6 || !this.eat(_tokentype.types.eq)) return left;
	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};

	// Verify that a node is an lval — something that can be assigned
	// to.

	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      if (checkClashes) {
	        if (_util.has(checkClashes, expr.name)) this.raise(expr.start, "Argument name clash");
	        checkClashes[expr.name] = true;
	      }
	      break;

	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;

	    case "ObjectPattern":
	      for (var i = 0; i < expr.properties.length; i++) {
	        this.checkLVal(expr.properties[i].value, isBinding, checkClashes);
	      }break;

	    case "ArrayPattern":
	      for (var i = 0; i < expr.elements.length; i++) {
	        var elem = expr.elements[i];
	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;

	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;

	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;

	    case "ParenthesizedExpression":
	      this.checkLVal(expr.expression, isBinding, checkClashes);
	      break;

	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};

	},{"./state":10,"./tokentype":14,"./util":15}],7:[function(_dereq_,module,exports){
	"use strict";

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _state = _dereq_("./state");

	var _locutil = _dereq_("./locutil");

	var Node = function Node(parser, pos, loc) {
	  _classCallCheck(this, Node);

	  this.type = "";
	  this.start = pos;
	  this.end = 0;
	  if (parser.options.locations) this.loc = new _locutil.SourceLocation(parser, loc);
	  if (parser.options.directSourceFile) this.sourceFile = parser.options.directSourceFile;
	  if (parser.options.ranges) this.range = [pos, 0];
	}

	// Start an AST node, attaching a start offset.

	;

	exports.Node = Node;
	var pp = _state.Parser.prototype;

	pp.startNode = function () {
	  return new Node(this, this.start, this.startLoc);
	};

	pp.startNodeAt = function (pos, loc) {
	  return new Node(this, pos, loc);
	};

	// Finish an AST node, adding `type` and `end` properties.

	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  if (this.options.locations) node.loc.end = loc;
	  if (this.options.ranges) node.range[1] = pos;
	  return node;
	}

	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
	};

	// Finish node at given position

	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};

	},{"./locutil":5,"./state":10}],8:[function(_dereq_,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.getOptions = getOptions;

	var _util = _dereq_("./util");

	var _locutil = _dereq_("./locutil");

	// A second optional argument can be given to further configure
	// the parser process. These options are recognized:

	var defaultOptions = {
	  // `ecmaVersion` indicates the ECMAScript version to parse. Must
	  // be either 3, or 5, or 6. This influences support for strict
	  // mode, the set of reserved words, support for getters and
	  // setters and other features.
	  ecmaVersion: 5,
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // `onInsertedSemicolon` can be a callback that will be called
	  // when a semicolon is automatically inserted. It will be passed
	  // th position of the comma as an offset, and if `locations` is
	  // enabled, it is given the location as a `{line, column}` object
	  // as second argument.
	  onInsertedSemicolon: null,
	  // `onTrailingComma` is similar to `onInsertedSemicolon`, but for
	  // trailing commas.
	  onTrailingComma: null,
	  // By default, reserved words are only enforced if ecmaVersion >= 5.
	  // Set `allowReserved` to a boolean value to explicitly turn this on
	  // an off. When this option has the value "never", reserved words
	  // and keywords can also not be used as property names.
	  allowReserved: null,
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // When enabled, hashbang directive in the beginning of file
	  // is allowed and treated as a line comment.
	  allowHashBang: false,
	  // When `locations` is on, `loc` properties holding objects with
	  // `start` and `end` properties in `{line, column}` form (with
	  // line being 1-based and column 0-based) will be attached to the
	  // nodes.
	  locations: false,
	  // A function can be passed as `onToken` option, which will
	  // cause Acorn to call that function with object in the same
	  // format as tokens returned from `tokenizer().getToken()`. Note
	  // that you are not allowed to call the parser from the
	  // callback—that will corrupt its internal state.
	  onToken: null,
	  // A function can be passed as `onComment` option, which will
	  // cause Acorn to call that function with `(block, text, start,
	  // end)` parameters whenever a comment is skipped. `block` is a
	  // boolean indicating whether this is a block (`/* */`) comment,
	  // `text` is the content of the comment, and `start` and `end` are
	  // character offsets that denote the start and end of the comment.
	  // When the `locations` option is on, two more parameters are
	  // passed, the full `{line, column}` locations of the start and
	  // end of the comments. Note that you are not allowed to call the
	  // parser from the callback—that will corrupt its internal state.
	  onComment: null,
	  // Nodes have their start and end characters offsets recorded in
	  // `start` and `end` properties (directly on the node, rather than
	  // the `loc` object, which holds line/column data. To also add a
	  // [semi-standardized][range] `range` property holding a `[start,
	  // end]` array with the same numbers, set the `ranges` option to
	  // `true`.
	  //
	  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
	  ranges: false,
	  // It is possible to parse multiple files into a single AST by
	  // passing the tree produced by parsing the first file as
	  // `program` option in subsequent parses. This will add the
	  // toplevel forms of the parsed file to the `Program` (top) node
	  // of an existing parse tree.
	  program: null,
	  // When `locations` is on, you can pass this to record the source
	  // file in every node's `loc` object.
	  sourceFile: null,
	  // This value, if given, is stored in every node, whether
	  // `locations` is on or off.
	  directSourceFile: null,
	  // When enabled, parenthesized expressions are represented by
	  // (non-standard) ParenthesizedExpression nodes
	  preserveParens: false,
	  plugins: {}
	};

	exports.defaultOptions = defaultOptions;
	// Interpret and default an options object

	function getOptions(opts) {
	  var options = {};
	  for (var opt in defaultOptions) {
	    options[opt] = opts && _util.has(opts, opt) ? opts[opt] : defaultOptions[opt];
	  }if (options.allowReserved == null) options.allowReserved = options.ecmaVersion < 5;

	  if (_util.isArray(options.onToken)) {
	    (function () {
	      var tokens = options.onToken;
	      options.onToken = function (token) {
	        return tokens.push(token);
	      };
	    })();
	  }
	  if (_util.isArray(options.onComment)) options.onComment = pushComment(options, options.onComment);

	  return options;
	}

	function pushComment(options, array) {
	  return function (block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? 'Block' : 'Line',
	      value: text,
	      start: start,
	      end: end
	    };
	    if (options.locations) comment.loc = new _locutil.SourceLocation(this, startLoc, endLoc);
	    if (options.ranges) comment.range = [start, end];
	    array.push(comment);
	  };
	}

	},{"./locutil":5,"./util":15}],9:[function(_dereq_,module,exports){
	"use strict";

	var _tokentype = _dereq_("./tokentype");

	var _state = _dereq_("./state");

	var _whitespace = _dereq_("./whitespace");

	var pp = _state.Parser.prototype;

	// ## Parser utilities

	// Test whether a statement node is the string literal `"use strict"`.

	pp.isUseStrict = function (stmt) {
	  return this.options.ecmaVersion >= 5 && stmt.type === "ExpressionStatement" && stmt.expression.type === "Literal" && stmt.expression.raw.slice(1, -1) === "use strict";
	};

	// Predicate that tests whether the next token is of the given
	// type, and if yes, consumes it as a side effect.

	pp.eat = function (type) {
	  if (this.type === type) {
	    this.next();
	    return true;
	  } else {
	    return false;
	  }
	};

	// Tests whether parsed token is a contextual keyword.

	pp.isContextual = function (name) {
	  return this.type === _tokentype.types.name && this.value === name;
	};

	// Consumes contextual keyword if possible.

	pp.eatContextual = function (name) {
	  return this.value === name && this.eat(_tokentype.types.name);
	};

	// Asserts that following token is given contextual keyword.

	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};

	// Test whether a semicolon can be inserted at the current position.

	pp.canInsertSemicolon = function () {
	  return this.type === _tokentype.types.eof || this.type === _tokentype.types.braceR || _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
	};

	pp.insertSemicolon = function () {
	  if (this.canInsertSemicolon()) {
	    if (this.options.onInsertedSemicolon) this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
	    return true;
	  }
	};

	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.

	pp.semicolon = function () {
	  if (!this.eat(_tokentype.types.semi) && !this.insertSemicolon()) this.unexpected();
	};

	pp.afterTrailingComma = function (tokType) {
	  if (this.type == tokType) {
	    if (this.options.onTrailingComma) this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
	    this.next();
	    return true;
	  }
	};

	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.

	pp.expect = function (type) {
	  this.eat(type) || this.unexpected();
	};

	// Raise an unexpected token error.

	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.start, "Unexpected token");
	};

	pp.checkPatternErrors = function (refDestructuringErrors, andThrow) {
	  var pos = refDestructuringErrors && refDestructuringErrors.trailingComma;
	  if (!andThrow) return !!pos;
	  if (pos) this.raise(pos, "Trailing comma is not permitted in destructuring patterns");
	};

	pp.checkExpressionErrors = function (refDestructuringErrors, andThrow) {
	  var pos = refDestructuringErrors && refDestructuringErrors.shorthandAssign;
	  if (!andThrow) return !!pos;
	  if (pos) this.raise(pos, "Shorthand property assignments are valid only in destructuring patterns");
	};

	},{"./state":10,"./tokentype":14,"./whitespace":16}],10:[function(_dereq_,module,exports){
	"use strict";

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _identifier = _dereq_("./identifier");

	var _tokentype = _dereq_("./tokentype");

	var _whitespace = _dereq_("./whitespace");

	var _options = _dereq_("./options");

	// Registered plugins
	var plugins = {};

	exports.plugins = plugins;
	function keywordRegexp(words) {
	  return new RegExp("^(" + words.replace(/ /g, "|") + ")$");
	}

	var Parser = (function () {
	  function Parser(options, input, startPos) {
	    _classCallCheck(this, Parser);

	    this.options = options = _options.getOptions(options);
	    this.sourceFile = options.sourceFile;
	    this.keywords = keywordRegexp(_identifier.keywords[options.ecmaVersion >= 6 ? 6 : 5]);
	    var reserved = options.allowReserved ? "" : _identifier.reservedWords[options.ecmaVersion] + (options.sourceType == "module" ? " await" : "");
	    this.reservedWords = keywordRegexp(reserved);
	    var reservedStrict = (reserved ? reserved + " " : "") + _identifier.reservedWords.strict;
	    this.reservedWordsStrict = keywordRegexp(reservedStrict);
	    this.reservedWordsStrictBind = keywordRegexp(reservedStrict + " " + _identifier.reservedWords.strictBind);
	    this.input = String(input);

	    // Used to signal to callers of `readWord1` whether the word
	    // contained any escape sequences. This is needed because words with
	    // escape sequences must not be interpreted as keywords.
	    this.containsEsc = false;

	    // Load plugins
	    this.loadPlugins(options.plugins);

	    // Set up token state

	    // The current position of the tokenizer in the input.
	    if (startPos) {
	      this.pos = startPos;
	      this.lineStart = Math.max(0, this.input.lastIndexOf("\n", startPos));
	      this.curLine = this.input.slice(0, this.lineStart).split(_whitespace.lineBreak).length;
	    } else {
	      this.pos = this.lineStart = 0;
	      this.curLine = 1;
	    }

	    // Properties of the current token:
	    // Its type
	    this.type = _tokentype.types.eof;
	    // For tokens that include more information than their type, the value
	    this.value = null;
	    // Its start and end offset
	    this.start = this.end = this.pos;
	    // And, if locations are used, the {line, column} object
	    // corresponding to those offsets
	    this.startLoc = this.endLoc = this.curPosition();

	    // Position information for the previous token
	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;

	    // The context stack is used to superficially track syntactic
	    // context to predict whether a regular expression is allowed in a
	    // given position.
	    this.context = this.initialContext();
	    this.exprAllowed = true;

	    // Figure out if it's a module code.
	    this.strict = this.inModule = options.sourceType === "module";

	    // Used to signify the start of a potential arrow function
	    this.potentialArrowAt = -1;

	    // Flags to track whether we are in a function, a generator.
	    this.inFunction = this.inGenerator = false;
	    // Labels in scope.
	    this.labels = [];

	    // If enabled, skip leading hashbang line.
	    if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === '#!') this.skipLineComment(2);
	  }

	  // DEPRECATED Kept for backwards compatibility until 3.0 in case a plugin uses them

	  Parser.prototype.isKeyword = function isKeyword(word) {
	    return this.keywords.test(word);
	  };

	  Parser.prototype.isReservedWord = function isReservedWord(word) {
	    return this.reservedWords.test(word);
	  };

	  Parser.prototype.extend = function extend(name, f) {
	    this[name] = f(this[name]);
	  };

	  Parser.prototype.loadPlugins = function loadPlugins(pluginConfigs) {
	    for (var _name in pluginConfigs) {
	      var plugin = plugins[_name];
	      if (!plugin) throw new Error("Plugin '" + _name + "' not found");
	      plugin(this, pluginConfigs[_name]);
	    }
	  };

	  Parser.prototype.parse = function parse() {
	    var node = this.options.program || this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(node);
	  };

	  return Parser;
	})();

	exports.Parser = Parser;

	},{"./identifier":2,"./options":8,"./tokentype":14,"./whitespace":16}],11:[function(_dereq_,module,exports){
	"use strict";

	var _tokentype = _dereq_("./tokentype");

	var _state = _dereq_("./state");

	var _whitespace = _dereq_("./whitespace");

	var pp = _state.Parser.prototype;

	// ### Statement parsing

	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.

	pp.parseTopLevel = function (node) {
	  var first = true;
	  if (!node.body) node.body = [];
	  while (this.type !== _tokentype.types.eof) {
	    var stmt = this.parseStatement(true, true);
	    node.body.push(stmt);
	    if (first) {
	      if (this.isUseStrict(stmt)) this.setStrict(true);
	      first = false;
	    }
	  }
	  this.next();
	  if (this.options.ecmaVersion >= 6) {
	    node.sourceType = this.options.sourceType;
	  }
	  return this.finishNode(node, "Program");
	};

	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };

	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.

	pp.parseStatement = function (declaration, topLevel) {
	  var starttype = this.type,
	      node = this.startNode();

	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.

	  switch (starttype) {
	    case _tokentype.types._break:case _tokentype.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokentype.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokentype.types._do:
	      return this.parseDoStatement(node);
	    case _tokentype.types._for:
	      return this.parseForStatement(node);
	    case _tokentype.types._function:
	      if (!declaration && this.options.ecmaVersion >= 6) this.unexpected();
	      return this.parseFunctionStatement(node);
	    case _tokentype.types._class:
	      if (!declaration) this.unexpected();
	      return this.parseClass(node, true);
	    case _tokentype.types._if:
	      return this.parseIfStatement(node);
	    case _tokentype.types._return:
	      return this.parseReturnStatement(node);
	    case _tokentype.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokentype.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokentype.types._try:
	      return this.parseTryStatement(node);
	    case _tokentype.types._let:case _tokentype.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var
	    case _tokentype.types._var:
	      return this.parseVarStatement(node, starttype);
	    case _tokentype.types._while:
	      return this.parseWhileStatement(node);
	    case _tokentype.types._with:
	      return this.parseWithStatement(node);
	    case _tokentype.types.braceL:
	      return this.parseBlock();
	    case _tokentype.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokentype.types._export:
	    case _tokentype.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) this.raise(this.start, "'import' and 'export' may only appear at the top level");
	        if (!this.inModule) this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
	      }
	      return starttype === _tokentype.types._import ? this.parseImport(node) : this.parseExport(node);

	    // If the statement does not start with a statement keyword or a
	    // brace, it's an ExpressionStatement or LabeledStatement. We
	    // simply start parsing an expression, and afterwards, if the
	    // next token is a colon and the expression was a simple
	    // Identifier node, we switch to interpreting it as a label.
	    default:
	      var maybeName = this.value,
	          expr = this.parseExpression();
	      if (starttype === _tokentype.types.name && expr.type === "Identifier" && this.eat(_tokentype.types.colon)) return this.parseLabeledStatement(node, maybeName, expr);else return this.parseExpressionStatement(node, expr);
	  }
	};

	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword == "break";
	  this.next();
	  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.label = null;else if (this.type !== _tokentype.types.name) this.unexpected();else {
	    node.label = this.parseIdent();
	    this.semicolon();
	  }

	  // Verify that there is an actual destination to break or
	  // continue to.
	  for (var i = 0; i < this.labels.length; ++i) {
	    var lab = this.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};

	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};

	pp.parseDoStatement = function (node) {
	  this.next();
	  this.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.labels.pop();
	  this.expect(_tokentype.types._while);
	  node.test = this.parseParenExpression();
	  if (this.options.ecmaVersion >= 6) this.eat(_tokentype.types.semi);else this.semicolon();
	  return this.finishNode(node, "DoWhileStatement");
	};

	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.

	pp.parseForStatement = function (node) {
	  this.next();
	  this.labels.push(loopLabel);
	  this.expect(_tokentype.types.parenL);
	  if (this.type === _tokentype.types.semi) return this.parseFor(node, null);
	  if (this.type === _tokentype.types._var || this.type === _tokentype.types._let || this.type === _tokentype.types._const) {
	    var _init = this.startNode(),
	        varKind = this.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");
	    if ((this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && _init.declarations.length === 1 && !(varKind !== _tokentype.types._var && _init.declarations[0].init)) return this.parseForIn(node, _init);
	    return this.parseFor(node, _init);
	  }
	  var refDestructuringErrors = { shorthandAssign: 0, trailingComma: 0 };
	  var init = this.parseExpression(true, refDestructuringErrors);
	  if (this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
	    this.checkPatternErrors(refDestructuringErrors, true);
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else {
	    this.checkExpressionErrors(refDestructuringErrors, true);
	  }
	  return this.parseFor(node, init);
	};

	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};

	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokentype.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};

	pp.parseReturnStatement = function (node) {
	  if (!this.inFunction && !this.options.allowReturnOutsideFunction) this.raise(this.start, "'return' outside of function");
	  this.next();

	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.

	  if (this.eat(_tokentype.types.semi) || this.insertSemicolon()) node.argument = null;else {
	    node.argument = this.parseExpression();this.semicolon();
	  }
	  return this.finishNode(node, "ReturnStatement");
	};

	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokentype.types.braceL);
	  this.labels.push(switchLabel);

	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.

	  for (var cur, sawDefault = false; this.type != _tokentype.types.braceR;) {
	    if (this.type === _tokentype.types._case || this.type === _tokentype.types._default) {
	      var isCase = this.type === _tokentype.types._case;
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokentype.types.colon);
	    } else {
	      if (!cur) this.unexpected();
	      cur.consequent.push(this.parseStatement(true));
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};

	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) this.raise(this.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};

	// Reused empty array added for node fields that are always empty.

	var empty = [];

	pp.parseTryStatement = function (node) {
	  this.next();
	  node.block = this.parseBlock();
	  node.handler = null;
	  if (this.type === _tokentype.types._catch) {
	    var clause = this.startNode();
	    this.next();
	    this.expect(_tokentype.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true);
	    this.expect(_tokentype.types.parenR);
	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }
	  node.finalizer = this.eat(_tokentype.types._finally) ? this.parseBlock() : null;
	  if (!node.handler && !node.finalizer) this.raise(node.start, "Missing catch or finally clause");
	  return this.finishNode(node, "TryStatement");
	};

	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};

	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};

	pp.parseWithStatement = function (node) {
	  if (this.strict) this.raise(this.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};

	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};

	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  for (var i = 0; i < this.labels.length; ++i) {
	    if (this.labels[i].name === maybeName) this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	  }var kind = this.type.isLoop ? "loop" : this.type === _tokentype.types._switch ? "switch" : null;
	  for (var i = this.labels.length - 1; i >= 0; i--) {
	    var label = this.labels[i];
	    if (label.statementStart == node.start) {
	      label.statementStart = this.start;
	      label.kind = kind;
	    } else break;
	  }
	  this.labels.push({ name: maybeName, kind: kind, statementStart: this.start });
	  node.body = this.parseStatement(true);
	  this.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};

	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};

	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).

	pp.parseBlock = function (allowStrict) {
	  var node = this.startNode(),
	      first = true,
	      oldStrict = undefined;
	  node.body = [];
	  this.expect(_tokentype.types.braceL);
	  while (!this.eat(_tokentype.types.braceR)) {
	    var stmt = this.parseStatement(true);
	    node.body.push(stmt);
	    if (first && allowStrict && this.isUseStrict(stmt)) {
	      oldStrict = this.strict;
	      this.setStrict(this.strict = true);
	    }
	    first = false;
	  }
	  if (oldStrict === false) this.setStrict(false);
	  return this.finishNode(node, "BlockStatement");
	};

	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.

	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokentype.types.semi);
	  node.test = this.type === _tokentype.types.semi ? null : this.parseExpression();
	  this.expect(_tokentype.types.semi);
	  node.update = this.type === _tokentype.types.parenR ? null : this.parseExpression();
	  this.expect(_tokentype.types.parenR);
	  node.body = this.parseStatement(false);
	  this.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};

	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.

	pp.parseForIn = function (node, init) {
	  var type = this.type === _tokentype.types._in ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokentype.types.parenR);
	  node.body = this.parseStatement(false);
	  this.labels.pop();
	  return this.finishNode(node, type);
	};

	// Parse a list of variable declarations.

	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarId(decl);
	    if (this.eat(_tokentype.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokentype.types._const && !(this.type === _tokentype.types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type != "Identifier" && !(isFor && (this.type === _tokentype.types._in || this.isContextual("of")))) {
	      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokentype.types.comma)) break;
	  }
	  return node;
	};

	pp.parseVarId = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};

	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseFunction = function (node, isStatement, allowExpressionBody) {
	  this.initFunction(node);
	  if (this.options.ecmaVersion >= 6) node.generator = this.eat(_tokentype.types.star);
	  if (isStatement || this.type === _tokentype.types.name) node.id = this.parseIdent();
	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);
	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};

	pp.parseFunctionParams = function (node) {
	  this.expect(_tokentype.types.parenL);
	  node.params = this.parseBindingList(_tokentype.types.parenR, false, false, true);
	};

	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseClass = function (node, isStatement) {
	  this.next();
	  this.parseClassId(node, isStatement);
	  this.parseClassSuper(node);
	  var classBody = this.startNode();
	  var hadConstructor = false;
	  classBody.body = [];
	  this.expect(_tokentype.types.braceL);
	  while (!this.eat(_tokentype.types.braceR)) {
	    if (this.eat(_tokentype.types.semi)) continue;
	    var method = this.startNode();
	    var isGenerator = this.eat(_tokentype.types.star);
	    var isMaybeStatic = this.type === _tokentype.types.name && this.value === "static";
	    this.parsePropertyName(method);
	    method["static"] = isMaybeStatic && this.type !== _tokentype.types.parenL;
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokentype.types.star);
	      this.parsePropertyName(method);
	    }
	    method.kind = "method";
	    var isGetSet = false;
	    if (!method.computed) {
	      var key = method.key;

	      if (!isGenerator && key.type === "Identifier" && this.type !== _tokentype.types.parenL && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }
	      if (!method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }
	    }
	    this.parseClassMethod(classBody, method, isGenerator);
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.value.params.length !== paramCount) {
	        var start = method.value.start;
	        if (method.kind === "get") this.raise(start, "getter should have no params");else this.raise(start, "setter should have exactly one param");
	      }
	    }
	  }
	  node.body = this.finishNode(classBody, "ClassBody");
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};

	pp.parseClassMethod = function (classBody, method, isGenerator) {
	  method.value = this.parseMethod(isGenerator);
	  classBody.body.push(this.finishNode(method, "MethodDefinition"));
	};

	pp.parseClassId = function (node, isStatement) {
	  node.id = this.type === _tokentype.types.name ? this.parseIdent() : isStatement ? this.unexpected() : null;
	};

	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokentype.types._extends) ? this.parseExprSubscripts() : null;
	};

	// Parses module export declaration.

	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.eat(_tokentype.types.star)) {
	    this.expectContextual("from");
	    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
	    this.semicolon();
	    return this.finishNode(node, "ExportAllDeclaration");
	  }
	  if (this.eat(_tokentype.types._default)) {
	    // export default ...
	    var expr = this.parseMaybeAssign();
	    var needsSemi = true;
	    if (expr.type == "FunctionExpression" || expr.type == "ClassExpression") {
	      needsSemi = false;
	      if (expr.id) {
	        expr.type = expr.type == "FunctionExpression" ? "FunctionDeclaration" : "ClassDeclaration";
	      }
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  }
	  // export var|const|let|function|class ...
	  if (this.shouldParseExportStatement()) {
	    node.declaration = this.parseStatement(true);
	    node.specifiers = [];
	    node.source = null;
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    if (this.eatContextual("from")) {
	      node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
	    } else {
	      // check for keywords used as local names
	      for (var i = 0; i < node.specifiers.length; i++) {
	        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {
	          this.unexpected(node.specifiers[i].local.start);
	        }
	      }

	      node.source = null;
	    }
	    this.semicolon();
	  }
	  return this.finishNode(node, "ExportNamedDeclaration");
	};

	pp.shouldParseExportStatement = function () {
	  return this.type.keyword;
	};

	// Parses a comma-separated list of module exports.

	pp.parseExportSpecifiers = function () {
	  var nodes = [],
	      first = true;
	  // export { x, y as z } [from '...']
	  this.expect(_tokentype.types.braceL);
	  while (!this.eat(_tokentype.types.braceR)) {
	    if (!first) {
	      this.expect(_tokentype.types.comma);
	      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
	    } else first = false;

	    var node = this.startNode();
	    node.local = this.parseIdent(this.type === _tokentype.types._default);
	    node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }
	  return nodes;
	};

	// Parses import declaration.

	pp.parseImport = function (node) {
	  this.next();
	  // import '...'
	  if (this.type === _tokentype.types.string) {
	    node.specifiers = empty;
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = this.parseImportSpecifiers();
	    this.expectContextual("from");
	    node.source = this.type === _tokentype.types.string ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};

	// Parses a comma-separated list of module imports.

	pp.parseImportSpecifiers = function () {
	  var nodes = [],
	      first = true;
	  if (this.type === _tokentype.types.name) {
	    // import defaultObj, { x, y as z } from '...'
	    var node = this.startNode();
	    node.local = this.parseIdent();
	    this.checkLVal(node.local, true);
	    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
	    if (!this.eat(_tokentype.types.comma)) return nodes;
	  }
	  if (this.type === _tokentype.types.star) {
	    var node = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    node.local = this.parseIdent();
	    this.checkLVal(node.local, true);
	    nodes.push(this.finishNode(node, "ImportNamespaceSpecifier"));
	    return nodes;
	  }
	  this.expect(_tokentype.types.braceL);
	  while (!this.eat(_tokentype.types.braceR)) {
	    if (!first) {
	      this.expect(_tokentype.types.comma);
	      if (this.afterTrailingComma(_tokentype.types.braceR)) break;
	    } else first = false;

	    var node = this.startNode();
	    node.imported = this.parseIdent(true);
	    node.local = this.eatContextual("as") ? this.parseIdent() : node.imported;
	    this.checkLVal(node.local, true);
	    nodes.push(this.finishNode(node, "ImportSpecifier"));
	  }
	  return nodes;
	};

	},{"./state":10,"./tokentype":14,"./whitespace":16}],12:[function(_dereq_,module,exports){
	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design

	"use strict";

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _state = _dereq_("./state");

	var _tokentype = _dereq_("./tokentype");

	var _whitespace = _dereq_("./whitespace");

	var TokContext = function TokContext(token, isExpr, preserveSpace, override) {
	  _classCallCheck(this, TokContext);

	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};

	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};

	exports.types = types;
	var pp = _state.Parser.prototype;

	pp.initialContext = function () {
	  return [types.b_stat];
	};

	pp.braceIsBlock = function (prevType) {
	  if (prevType === _tokentype.types.colon) {
	    var _parent = this.curContext();
	    if (_parent === types.b_stat || _parent === types.b_expr) return !_parent.isExpr;
	  }
	  if (prevType === _tokentype.types._return) return _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
	  if (prevType === _tokentype.types._else || prevType === _tokentype.types.semi || prevType === _tokentype.types.eof || prevType === _tokentype.types.parenR) return true;
	  if (prevType == _tokentype.types.braceL) return this.curContext() === types.b_stat;
	  return !this.exprAllowed;
	};

	pp.updateContext = function (prevType) {
	  var update = undefined,
	      type = this.type;
	  if (type.keyword && prevType == _tokentype.types.dot) this.exprAllowed = false;else if (update = type.updateContext) update.call(this, prevType);else this.exprAllowed = type.beforeExpr;
	};

	// Token-specific context update code

	_tokentype.types.parenR.updateContext = _tokentype.types.braceR.updateContext = function () {
	  if (this.context.length == 1) {
	    this.exprAllowed = true;
	    return;
	  }
	  var out = this.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.context.pop();
	    this.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.exprAllowed = true;
	  } else {
	    this.exprAllowed = !out.isExpr;
	  }
	};

	_tokentype.types.braceL.updateContext = function (prevType) {
	  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.exprAllowed = true;
	};

	_tokentype.types.dollarBraceL.updateContext = function () {
	  this.context.push(types.b_tmpl);
	  this.exprAllowed = true;
	};

	_tokentype.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _tokentype.types._if || prevType === _tokentype.types._for || prevType === _tokentype.types._with || prevType === _tokentype.types._while;
	  this.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.exprAllowed = true;
	};

	_tokentype.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};

	_tokentype.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) this.context.push(types.f_expr);
	  this.exprAllowed = false;
	};

	_tokentype.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) this.context.pop();else this.context.push(types.q_tmpl);
	  this.exprAllowed = false;
	};

	},{"./state":10,"./tokentype":14,"./whitespace":16}],13:[function(_dereq_,module,exports){
	"use strict";

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var _identifier = _dereq_("./identifier");

	var _tokentype = _dereq_("./tokentype");

	var _state = _dereq_("./state");

	var _locutil = _dereq_("./locutil");

	var _whitespace = _dereq_("./whitespace");

	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.

	var Token = function Token(p) {
	  _classCallCheck(this, Token);

	  this.type = p.type;
	  this.value = p.value;
	  this.start = p.start;
	  this.end = p.end;
	  if (p.options.locations) this.loc = new _locutil.SourceLocation(p, p.startLoc, p.endLoc);
	  if (p.options.ranges) this.range = [p.start, p.end];
	}

	// ## Tokenizer

	;

	exports.Token = Token;
	var pp = _state.Parser.prototype;

	// Are we running under Rhino?
	var isRhino = typeof Packages == "object" && Object.prototype.toString.call(Packages) == "[object JavaPackage]";

	// Move to the next token

	pp.next = function () {
	  if (this.options.onToken) this.options.onToken(new Token(this));

	  this.lastTokEnd = this.end;
	  this.lastTokStart = this.start;
	  this.lastTokEndLoc = this.endLoc;
	  this.lastTokStartLoc = this.startLoc;
	  this.nextToken();
	};

	pp.getToken = function () {
	  this.next();
	  return new Token(this);
	};

	// If we're in an ES6 environment, make parsers iterable
	if (typeof Symbol !== "undefined") pp[Symbol.iterator] = function () {
	  var self = this;
	  return { next: function next() {
	      var token = self.getToken();
	      return {
	        done: token.type === _tokentype.types.eof,
	        value: token
	      };
	    } };
	};

	// Toggle strict mode. Re-reads the next number or string to please
	// pedantic tests (`"use strict"; 010;` should fail).

	pp.setStrict = function (strict) {
	  this.strict = strict;
	  if (this.type !== _tokentype.types.num && this.type !== _tokentype.types.string) return;
	  this.pos = this.start;
	  if (this.options.locations) {
	    while (this.pos < this.lineStart) {
	      this.lineStart = this.input.lastIndexOf("\n", this.lineStart - 2) + 1;
	      --this.curLine;
	    }
	  }
	  this.nextToken();
	};

	pp.curContext = function () {
	  return this.context[this.context.length - 1];
	};

	// Read a single token, updating the parser object's token-related
	// properties.

	pp.nextToken = function () {
	  var curContext = this.curContext();
	  if (!curContext || !curContext.preserveSpace) this.skipSpace();

	  this.start = this.pos;
	  if (this.options.locations) this.startLoc = this.curPosition();
	  if (this.pos >= this.input.length) return this.finishToken(_tokentype.types.eof);

	  if (curContext.override) return curContext.override(this);else this.readToken(this.fullCharCodeAtPos());
	};

	pp.readToken = function (code) {
	  // Identifier or keyword. '\uXXXX' sequences are allowed in
	  // identifiers, so '\' also dispatches to that.
	  if (_identifier.isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\' */) return this.readWord();

	  return this.getTokenFromCode(code);
	};

	pp.fullCharCodeAtPos = function () {
	  var code = this.input.charCodeAt(this.pos);
	  if (code <= 0xd7ff || code >= 0xe000) return code;
	  var next = this.input.charCodeAt(this.pos + 1);
	  return (code << 10) + next - 0x35fdc00;
	};

	pp.skipBlockComment = function () {
	  var startLoc = this.options.onComment && this.curPosition();
	  var start = this.pos,
	      end = this.input.indexOf("*/", this.pos += 2);
	  if (end === -1) this.raise(this.pos - 2, "Unterminated comment");
	  this.pos = end + 2;
	  if (this.options.locations) {
	    _whitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _whitespace.lineBreakG.exec(this.input)) && match.index < this.pos) {
	      ++this.curLine;
	      this.lineStart = match.index + match[0].length;
	    }
	  }
	  if (this.options.onComment) this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
	};

	pp.skipLineComment = function (startSkip) {
	  var start = this.pos;
	  var startLoc = this.options.onComment && this.curPosition();
	  var ch = this.input.charCodeAt(this.pos += startSkip);
	  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	    ++this.pos;
	    ch = this.input.charCodeAt(this.pos);
	  }
	  if (this.options.onComment) this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
	};

	// Called at the start of the parse and after every token. Skips
	// whitespace and comments, and.

	pp.skipSpace = function () {
	  loop: while (this.pos < this.input.length) {
	    var ch = this.input.charCodeAt(this.pos);
	    switch (ch) {
	      case 32:case 160:
	        // ' '
	        ++this.pos;
	        break;
	      case 13:
	        if (this.input.charCodeAt(this.pos + 1) === 10) {
	          ++this.pos;
	        }
	      case 10:case 8232:case 8233:
	        ++this.pos;
	        if (this.options.locations) {
	          ++this.curLine;
	          this.lineStart = this.pos;
	        }
	        break;
	      case 47:
	        // '/'
	        switch (this.input.charCodeAt(this.pos + 1)) {
	          case 42:
	            // '*'
	            this.skipBlockComment();
	            break;
	          case 47:
	            this.skipLineComment(2);
	            break;
	          default:
	            break loop;
	        }
	        break;
	      default:
	        if (ch > 8 && ch < 14 || ch >= 5760 && _whitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	          ++this.pos;
	        } else {
	          break loop;
	        }
	    }
	  }
	};

	// Called at the end of every token. Sets `end`, `val`, and
	// maintains `context` and `exprAllowed`, and skips the space after
	// the token, so that the next one's `start` will point at the
	// right position.

	pp.finishToken = function (type, val) {
	  this.end = this.pos;
	  if (this.options.locations) this.endLoc = this.curPosition();
	  var prevType = this.type;
	  this.type = type;
	  this.value = val;

	  this.updateContext(prevType);
	};

	// ### Token reading

	// This is the function that is called to fetch the next token. It
	// is somewhat obscure, because it works in character codes rather
	// than characters, and because operator parsing has been inlined
	// into it.
	//
	// All in the name of speed.
	//
	pp.readToken_dot = function () {
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next >= 48 && next <= 57) return this.readNumber(true);
	  var next2 = this.input.charCodeAt(this.pos + 2);
	  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
	    // 46 = dot '.'
	    this.pos += 3;
	    return this.finishToken(_tokentype.types.ellipsis);
	  } else {
	    ++this.pos;
	    return this.finishToken(_tokentype.types.dot);
	  }
	};

	pp.readToken_slash = function () {
	  // '/'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (this.exprAllowed) {
	    ++this.pos;return this.readRegexp();
	  }
	  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
	  return this.finishOp(_tokentype.types.slash, 1);
	};

	pp.readToken_mult_modulo = function (code) {
	  // '%*'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
	  return this.finishOp(code === 42 ? _tokentype.types.star : _tokentype.types.modulo, 1);
	};

	pp.readToken_pipe_amp = function (code) {
	  // '|&'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === code) return this.finishOp(code === 124 ? _tokentype.types.logicalOR : _tokentype.types.logicalAND, 2);
	  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
	  return this.finishOp(code === 124 ? _tokentype.types.bitwiseOR : _tokentype.types.bitwiseAND, 1);
	};

	pp.readToken_caret = function () {
	  // '^'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
	  return this.finishOp(_tokentype.types.bitwiseXOR, 1);
	};

	pp.readToken_plus_min = function (code) {
	  // '+-'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === code) {
	    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 && _whitespace.lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {
	      // A `-->` line comment
	      this.skipLineComment(3);
	      this.skipSpace();
	      return this.nextToken();
	    }
	    return this.finishOp(_tokentype.types.incDec, 2);
	  }
	  if (next === 61) return this.finishOp(_tokentype.types.assign, 2);
	  return this.finishOp(_tokentype.types.plusMin, 1);
	};

	pp.readToken_lt_gt = function (code) {
	  // '<>'
	  var next = this.input.charCodeAt(this.pos + 1);
	  var size = 1;
	  if (next === code) {
	    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
	    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(_tokentype.types.assign, size + 1);
	    return this.finishOp(_tokentype.types.bitShift, size);
	  }
	  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 && this.input.charCodeAt(this.pos + 3) == 45) {
	    if (this.inModule) this.unexpected();
	    // `<!--`, an XML-style comment that should be interpreted as a line comment
	    this.skipLineComment(4);
	    this.skipSpace();
	    return this.nextToken();
	  }
	  if (next === 61) size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2;
	  return this.finishOp(_tokentype.types.relational, size);
	};

	pp.readToken_eq_excl = function (code) {
	  // '=!'
	  var next = this.input.charCodeAt(this.pos + 1);
	  if (next === 61) return this.finishOp(_tokentype.types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
	  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
	    // '=>'
	    this.pos += 2;
	    return this.finishToken(_tokentype.types.arrow);
	  }
	  return this.finishOp(code === 61 ? _tokentype.types.eq : _tokentype.types.prefix, 1);
	};

	pp.getTokenFromCode = function (code) {
	  switch (code) {
	    // The interpretation of a dot depends on whether it is followed
	    // by a digit or another two dots.
	    case 46:
	      // '.'
	      return this.readToken_dot();

	    // Punctuation tokens.
	    case 40:
	      ++this.pos;return this.finishToken(_tokentype.types.parenL);
	    case 41:
	      ++this.pos;return this.finishToken(_tokentype.types.parenR);
	    case 59:
	      ++this.pos;return this.finishToken(_tokentype.types.semi);
	    case 44:
	      ++this.pos;return this.finishToken(_tokentype.types.comma);
	    case 91:
	      ++this.pos;return this.finishToken(_tokentype.types.bracketL);
	    case 93:
	      ++this.pos;return this.finishToken(_tokentype.types.bracketR);
	    case 123:
	      ++this.pos;return this.finishToken(_tokentype.types.braceL);
	    case 125:
	      ++this.pos;return this.finishToken(_tokentype.types.braceR);
	    case 58:
	      ++this.pos;return this.finishToken(_tokentype.types.colon);
	    case 63:
	      ++this.pos;return this.finishToken(_tokentype.types.question);

	    case 96:
	      // '`'
	      if (this.options.ecmaVersion < 6) break;
	      ++this.pos;
	      return this.finishToken(_tokentype.types.backQuote);

	    case 48:
	      // '0'
	      var next = this.input.charCodeAt(this.pos + 1);
	      if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	      if (this.options.ecmaVersion >= 6) {
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      }
	    // Anything else beginning with a digit is an integer, octal
	    // number, or float.
	    case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	      // 1-9
	      return this.readNumber(false);

	    // Quotes produce strings.
	    case 34:case 39:
	      // '"', "'"
	      return this.readString(code);

	    // Operators are parsed inline in tiny state machines. '=' (61) is
	    // often referred to. `finishOp` simply skips the amount of
	    // characters it is given as second argument, and returns a token
	    // of the type given by its first argument.

	    case 47:
	      // '/'
	      return this.readToken_slash();

	    case 37:case 42:
	      // '%*'
	      return this.readToken_mult_modulo(code);

	    case 124:case 38:
	      // '|&'
	      return this.readToken_pipe_amp(code);

	    case 94:
	      // '^'
	      return this.readToken_caret();

	    case 43:case 45:
	      // '+-'
	      return this.readToken_plus_min(code);

	    case 60:case 62:
	      // '<>'
	      return this.readToken_lt_gt(code);

	    case 61:case 33:
	      // '=!'
	      return this.readToken_eq_excl(code);

	    case 126:
	      // '~'
	      return this.finishOp(_tokentype.types.prefix, 1);
	  }

	  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
	};

	pp.finishOp = function (type, size) {
	  var str = this.input.slice(this.pos, this.pos + size);
	  this.pos += size;
	  return this.finishToken(type, str);
	};

	// Parse a regular expression. Some context-awareness is necessary,
	// since a '/' inside a '[]' set does not end the expression.

	function tryCreateRegexp(src, flags, throwErrorAt, parser) {
	  try {
	    return new RegExp(src, flags);
	  } catch (e) {
	    if (throwErrorAt !== undefined) {
	      if (e instanceof SyntaxError) parser.raise(throwErrorAt, "Error parsing regular expression: " + e.message);
	      throw e;
	    }
	  }
	}

	var regexpUnicodeSupport = !!tryCreateRegexp("￿", "u");

	pp.readRegexp = function () {
	  var _this = this;

	  var escaped = undefined,
	      inClass = undefined,
	      start = this.pos;
	  for (;;) {
	    if (this.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	    var ch = this.input.charAt(this.pos);
	    if (_whitespace.lineBreak.test(ch)) this.raise(start, "Unterminated regular expression");
	    if (!escaped) {
	      if (ch === "[") inClass = true;else if (ch === "]" && inClass) inClass = false;else if (ch === "/" && !inClass) break;
	      escaped = ch === "\\";
	    } else escaped = false;
	    ++this.pos;
	  }
	  var content = this.input.slice(start, this.pos);
	  ++this.pos;
	  // Need to use `readWord1` because '\uXXXX' sequences are allowed
	  // here (don't ask).
	  var mods = this.readWord1();
	  var tmp = content;
	  if (mods) {
	    var validFlags = /^[gmsiy]*$/;
	    if (this.options.ecmaVersion >= 6) validFlags = /^[gmsiyu]*$/;
	    if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {
	      // Replace each astral symbol and every Unicode escape sequence that
	      // possibly represents an astral symbol or a paired surrogate with a
	      // single ASCII symbol to avoid throwing on regular expressions that
	      // are only valid in combination with the `/u` flag.
	      // Note: replacing with the ASCII symbol `x` might cause false
	      // negatives in unlikely scenarios. For example, `[\u{61}-b]` is a
	      // perfectly valid pattern that is equivalent to `[a-b]`, but it would
	      // be replaced by `[x-b]` which throws an error.
	      tmp = tmp.replace(/\\u\{([0-9a-fA-F]+)\}/g, function (_match, code, offset) {
	        code = Number("0x" + code);
	        if (code > 0x10FFFF) _this.raise(start + offset + 3, "Code point out of bounds");
	        return "x";
	      });
	      tmp = tmp.replace(/\\u([a-fA-F0-9]{4})|[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
	    }
	  }
	  // Detect invalid regular expressions.
	  var value = null;
	  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,
	  // so don't do detection if we are running under Rhino
	  if (!isRhino) {
	    tryCreateRegexp(tmp, undefined, start, this);
	    // Get a regular expression object for this pattern-flag pair, or `null` in
	    // case the current environment doesn't support the flags it uses.
	    value = tryCreateRegexp(content, mods);
	  }
	  return this.finishToken(_tokentype.types.regexp, { pattern: content, flags: mods, value: value });
	};

	// Read an integer in the given radix. Return null if zero digits
	// were read, the integer value otherwise. When `len` is given, this
	// will return `null` unless the integer has exactly `len` digits.

	pp.readInt = function (radix, len) {
	  var start = this.pos,
	      total = 0;
	  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	    var code = this.input.charCodeAt(this.pos),
	        val = undefined;
	    if (code >= 97) val = code - 97 + 10; // a
	    else if (code >= 65) val = code - 65 + 10; // A
	      else if (code >= 48 && code <= 57) val = code - 48; // 0-9
	        else val = Infinity;
	    if (val >= radix) break;
	    ++this.pos;
	    total = total * radix + val;
	  }
	  if (this.pos === start || len != null && this.pos - start !== len) return null;

	  return total;
	};

	pp.readRadixNumber = function (radix) {
	  this.pos += 2; // 0x
	  var val = this.readInt(radix);
	  if (val == null) this.raise(this.start + 2, "Expected number in radix " + radix);
	  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");
	  return this.finishToken(_tokentype.types.num, val);
	};

	// Read an integer, octal integer, or floating-point number.

	pp.readNumber = function (startsWithDot) {
	  var start = this.pos,
	      isFloat = false,
	      octal = this.input.charCodeAt(this.pos) === 48;
	  if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	  var next = this.input.charCodeAt(this.pos);
	  if (next === 46) {
	    // '.'
	    ++this.pos;
	    this.readInt(10);
	    isFloat = true;
	    next = this.input.charCodeAt(this.pos);
	  }
	  if (next === 69 || next === 101) {
	    // 'eE'
	    next = this.input.charCodeAt(++this.pos);
	    if (next === 43 || next === 45) ++this.pos; // '+-'
	    if (this.readInt(10) === null) this.raise(start, "Invalid number");
	    isFloat = true;
	  }
	  if (_identifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, "Identifier directly after number");

	  var str = this.input.slice(start, this.pos),
	      val = undefined;
	  if (isFloat) val = parseFloat(str);else if (!octal || str.length === 1) val = parseInt(str, 10);else if (/[89]/.test(str) || this.strict) this.raise(start, "Invalid number");else val = parseInt(str, 8);
	  return this.finishToken(_tokentype.types.num, val);
	};

	// Read a string value, interpreting backslash-escapes.

	pp.readCodePoint = function () {
	  var ch = this.input.charCodeAt(this.pos),
	      code = undefined;

	  if (ch === 123) {
	    if (this.options.ecmaVersion < 6) this.unexpected();
	    var codePos = ++this.pos;
	    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos);
	    ++this.pos;
	    if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	  } else {
	    code = this.readHexChar(4);
	  }
	  return code;
	};

	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) return String.fromCharCode(code);
	  code -= 0x10000;
	  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00);
	}

	pp.readString = function (quote) {
	  var out = "",
	      chunkStart = ++this.pos;
	  for (;;) {
	    if (this.pos >= this.input.length) this.raise(this.start, "Unterminated string constant");
	    var ch = this.input.charCodeAt(this.pos);
	    if (ch === quote) break;
	    if (ch === 92) {
	      // '\'
	      out += this.input.slice(chunkStart, this.pos);
	      out += this.readEscapedChar(false);
	      chunkStart = this.pos;
	    } else {
	      if (_whitespace.isNewLine(ch)) this.raise(this.start, "Unterminated string constant");
	      ++this.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.pos++);
	  return this.finishToken(_tokentype.types.string, out);
	};

	// Reads template string tokens.

	pp.readTmplToken = function () {
	  var out = "",
	      chunkStart = this.pos;
	  for (;;) {
	    if (this.pos >= this.input.length) this.raise(this.start, "Unterminated template");
	    var ch = this.input.charCodeAt(this.pos);
	    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
	      // '`', '${'
	      if (this.pos === this.start && this.type === _tokentype.types.template) {
	        if (ch === 36) {
	          this.pos += 2;
	          return this.finishToken(_tokentype.types.dollarBraceL);
	        } else {
	          ++this.pos;
	          return this.finishToken(_tokentype.types.backQuote);
	        }
	      }
	      out += this.input.slice(chunkStart, this.pos);
	      return this.finishToken(_tokentype.types.template, out);
	    }
	    if (ch === 92) {
	      // '\'
	      out += this.input.slice(chunkStart, this.pos);
	      out += this.readEscapedChar(true);
	      chunkStart = this.pos;
	    } else if (_whitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.pos);
	      ++this.pos;
	      switch (ch) {
	        case 13:
	          if (this.input.charCodeAt(this.pos) === 10) ++this.pos;
	        case 10:
	          out += "\n";
	          break;
	        default:
	          out += String.fromCharCode(ch);
	          break;
	      }
	      if (this.options.locations) {
	        ++this.curLine;
	        this.lineStart = this.pos;
	      }
	      chunkStart = this.pos;
	    } else {
	      ++this.pos;
	    }
	  }
	};

	// Used to read escaped characters

	pp.readEscapedChar = function (inTemplate) {
	  var ch = this.input.charCodeAt(++this.pos);
	  ++this.pos;
	  switch (ch) {
	    case 110:
	      return "\n"; // 'n' -> '\n'
	    case 114:
	      return "\r"; // 'r' -> '\r'
	    case 120:
	      return String.fromCharCode(this.readHexChar(2)); // 'x'
	    case 117:
	      return codePointToString(this.readCodePoint()); // 'u'
	    case 116:
	      return "\t"; // 't' -> '\t'
	    case 98:
	      return "\b"; // 'b' -> '\b'
	    case 118:
	      return "\u000b"; // 'v' -> '\u000b'
	    case 102:
	      return "\f"; // 'f' -> '\f'
	    case 13:
	      if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\r\n'
	    case 10:
	      // ' \n'
	      if (this.options.locations) {
	        this.lineStart = this.pos;++this.curLine;
	      }
	      return "";
	    default:
	      if (ch >= 48 && ch <= 55) {
	        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
	        var octal = parseInt(octalStr, 8);
	        if (octal > 255) {
	          octalStr = octalStr.slice(0, -1);
	          octal = parseInt(octalStr, 8);
	        }
	        if (octal > 0 && (this.strict || inTemplate)) {
	          this.raise(this.pos - 2, "Octal literal in strict mode");
	        }
	        this.pos += octalStr.length - 1;
	        return String.fromCharCode(octal);
	      }
	      return String.fromCharCode(ch);
	  }
	};

	// Used to read character escape sequences ('\x', '\u', '\U').

	pp.readHexChar = function (len) {
	  var codePos = this.pos;
	  var n = this.readInt(16, len);
	  if (n === null) this.raise(codePos, "Bad character escape sequence");
	  return n;
	};

	// Read an identifier, and return it as a string. Sets `this.containsEsc`
	// to whether the word contained a '\u' escape.
	//
	// Incrementally adds only escaped chars, adding other chunks as-is
	// as a micro-optimization.

	pp.readWord1 = function () {
	  this.containsEsc = false;
	  var word = "",
	      first = true,
	      chunkStart = this.pos;
	  var astral = this.options.ecmaVersion >= 6;
	  while (this.pos < this.input.length) {
	    var ch = this.fullCharCodeAtPos();
	    if (_identifier.isIdentifierChar(ch, astral)) {
	      this.pos += ch <= 0xffff ? 1 : 2;
	    } else if (ch === 92) {
	      // "\"
	      this.containsEsc = true;
	      word += this.input.slice(chunkStart, this.pos);
	      var escStart = this.pos;
	      if (this.input.charCodeAt(++this.pos) != 117) // "u"
	        this.raise(this.pos, "Expecting Unicode escape sequence \\uXXXX");
	      ++this.pos;
	      var esc = this.readCodePoint();
	      if (!(first ? _identifier.isIdentifierStart : _identifier.isIdentifierChar)(esc, astral)) this.raise(escStart, "Invalid Unicode escape");
	      word += codePointToString(esc);
	      chunkStart = this.pos;
	    } else {
	      break;
	    }
	    first = false;
	  }
	  return word + this.input.slice(chunkStart, this.pos);
	};

	// Read an identifier or keyword token. Will check for reserved
	// words when necessary.

	pp.readWord = function () {
	  var word = this.readWord1();
	  var type = _tokentype.types.name;
	  if ((this.options.ecmaVersion >= 6 || !this.containsEsc) && this.keywords.test(word)) type = _tokentype.keywords[word];
	  return this.finishToken(type, word);
	};

	},{"./identifier":2,"./locutil":5,"./state":10,"./tokentype":14,"./whitespace":16}],14:[function(_dereq_,module,exports){
	// ## Token types

	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.

	// All token type variables start with an underscore, to make them
	// easy to recognize.

	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// The `startsExpr` property is used to check if the token ends a
	// `yield` expression. It is set on all token types that either can
	// directly start an expression (like a quotation mark) or can
	// continue an expression (like the body of a string).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.

	"use strict";

	exports.__esModule = true;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  _classCallCheck(this, TokenType);

	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};

	exports.TokenType = TokenType;

	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };

	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),

	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),

	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.

	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10)
	};

	exports.types = types;
	// Map keyword names to token types.

	var keywords = {};

	exports.keywords = keywords;
	// Succinct definitions of keyword token types
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}

	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true, beforeExpr: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });

	},{}],15:[function(_dereq_,module,exports){
	"use strict";

	exports.__esModule = true;
	exports.isArray = isArray;
	exports.has = has;

	function isArray(obj) {
	  return Object.prototype.toString.call(obj) === "[object Array]";
	}

	// Checks if an object has a property.

	function has(obj, propName) {
	  return Object.prototype.hasOwnProperty.call(obj, propName);
	}

	},{}],16:[function(_dereq_,module,exports){
	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.

	"use strict";

	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");

	exports.lineBreakG = lineBreakG;

	function isNewLine(code) {
	  return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;
	}

	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;

	},{}]},{},[3])(3)
	});

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}(g.acorn || (g.acorn = {})).walk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	// AST walker module for Mozilla Parser API compatible trees

	// A simple walk is one where you simply specify callbacks to be
	// called on specific nodes. The last two arguments are optional. A
	// simple use would be
	//
	//     walk.simple(myTree, {
	//         Expression: function(node) { ... }
	//     });
	//
	// to do something with all expressions. All Parser API node types
	// can be used to identify node types, as well as Expression,
	// Statement, and ScopeBody, which denote categories of nodes.
	//
	// The base argument can be used to pass a custom (recursive)
	// walker, and state can be used to give this walked an initial
	// state.

	"use strict";

	exports.__esModule = true;
	exports.simple = simple;
	exports.ancestor = ancestor;
	exports.recursive = recursive;
	exports.findNodeAt = findNodeAt;
	exports.findNodeAround = findNodeAround;
	exports.findNodeAfter = findNodeAfter;
	exports.findNodeBefore = findNodeBefore;
	exports.make = make;

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function simple(node, visitors, base, state, override) {
	  if (!base) base = exports.base;(function c(node, st, override) {
	    var type = override || node.type,
	        found = visitors[type];
	    base[type](node, st, c);
	    if (found) found(node, st);
	  })(node, state, override);
	}

	// An ancestor walk builds up an array of ancestor nodes (including
	// the current node) and passes them to the callback as the state parameter.

	function ancestor(node, visitors, base, state) {
	  if (!base) base = exports.base;
	  if (!state) state = [];(function c(node, st, override) {
	    var type = override || node.type,
	        found = visitors[type];
	    if (node != st[st.length - 1]) {
	      st = st.slice();
	      st.push(node);
	    }
	    base[type](node, st, c);
	    if (found) found(node, st);
	  })(node, state);
	}

	// A recursive walk is one where your functions override the default
	// walkers. They can modify and replace the state parameter that's
	// threaded through the walk, and can opt how and whether to walk
	// their child nodes (by calling their third argument on these
	// nodes).

	function recursive(node, state, funcs, base, override) {
	  var visitor = funcs ? exports.make(funcs, base) : base;(function c(node, st, override) {
	    visitor[override || node.type](node, st, c);
	  })(node, state, override);
	}

	function makeTest(test) {
	  if (typeof test == "string") return function (type) {
	    return type == test;
	  };else if (!test) return function () {
	    return true;
	  };else return test;
	}

	var Found = function Found(node, state) {
	  _classCallCheck(this, Found);

	  this.node = node;this.state = state;
	}

	// Find a node with a given start, end, and type (all are optional,
	// null can be used as wildcard). Returns a {node, state} object, or
	// undefined when it doesn't find a matching node.
	;

	function findNodeAt(node, start, end, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  try {
	    ;(function c(node, st, override) {
	      var type = override || node.type;
	      if ((start == null || node.start <= start) && (end == null || node.end >= end)) base[type](node, st, c);
	      if ((start == null || node.start == start) && (end == null || node.end == end) && test(type, node)) throw new Found(node, st);
	    })(node, state);
	  } catch (e) {
	    if (e instanceof Found) return e;
	    throw e;
	  }
	}

	// Find the innermost node of a given type that contains the given
	// position. Interface similar to findNodeAt.

	function findNodeAround(node, pos, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  try {
	    ;(function c(node, st, override) {
	      var type = override || node.type;
	      if (node.start > pos || node.end < pos) return;
	      base[type](node, st, c);
	      if (test(type, node)) throw new Found(node, st);
	    })(node, state);
	  } catch (e) {
	    if (e instanceof Found) return e;
	    throw e;
	  }
	}

	// Find the outermost matching node after a given position.

	function findNodeAfter(node, pos, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  try {
	    ;(function c(node, st, override) {
	      if (node.end < pos) return;
	      var type = override || node.type;
	      if (node.start >= pos && test(type, node)) throw new Found(node, st);
	      base[type](node, st, c);
	    })(node, state);
	  } catch (e) {
	    if (e instanceof Found) return e;
	    throw e;
	  }
	}

	// Find the outermost matching node before a given position.

	function findNodeBefore(node, pos, test, base, state) {
	  test = makeTest(test);
	  if (!base) base = exports.base;
	  var max = undefined;(function c(node, st, override) {
	    if (node.start > pos) return;
	    var type = override || node.type;
	    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) max = new Found(node, st);
	    base[type](node, st, c);
	  })(node, state);
	  return max;
	}

	// Used to create a custom walker. Will fill in all missing node
	// type properties with the defaults.

	function make(funcs, base) {
	  if (!base) base = exports.base;
	  var visitor = {};
	  for (var type in base) visitor[type] = base[type];
	  for (var type in funcs) visitor[type] = funcs[type];
	  return visitor;
	}

	function skipThrough(node, st, c) {
	  c(node, st);
	}
	function ignore(_node, _st, _c) {}

	// Node walkers.

	var base = {};

	exports.base = base;
	base.Program = base.BlockStatement = function (node, st, c) {
	  for (var i = 0; i < node.body.length; ++i) {
	    c(node.body[i], st, "Statement");
	  }
	};
	base.Statement = skipThrough;
	base.EmptyStatement = ignore;
	base.ExpressionStatement = base.ParenthesizedExpression = function (node, st, c) {
	  return c(node.expression, st, "Expression");
	};
	base.IfStatement = function (node, st, c) {
	  c(node.test, st, "Expression");
	  c(node.consequent, st, "Statement");
	  if (node.alternate) c(node.alternate, st, "Statement");
	};
	base.LabeledStatement = function (node, st, c) {
	  return c(node.body, st, "Statement");
	};
	base.BreakStatement = base.ContinueStatement = ignore;
	base.WithStatement = function (node, st, c) {
	  c(node.object, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.SwitchStatement = function (node, st, c) {
	  c(node.discriminant, st, "Expression");
	  for (var i = 0; i < node.cases.length; ++i) {
	    var cs = node.cases[i];
	    if (cs.test) c(cs.test, st, "Expression");
	    for (var j = 0; j < cs.consequent.length; ++j) {
	      c(cs.consequent[j], st, "Statement");
	    }
	  }
	};
	base.ReturnStatement = base.YieldExpression = function (node, st, c) {
	  if (node.argument) c(node.argument, st, "Expression");
	};
	base.ThrowStatement = base.SpreadElement = function (node, st, c) {
	  return c(node.argument, st, "Expression");
	};
	base.TryStatement = function (node, st, c) {
	  c(node.block, st, "Statement");
	  if (node.handler) {
	    c(node.handler.param, st, "Pattern");
	    c(node.handler.body, st, "ScopeBody");
	  }
	  if (node.finalizer) c(node.finalizer, st, "Statement");
	};
	base.WhileStatement = base.DoWhileStatement = function (node, st, c) {
	  c(node.test, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.ForStatement = function (node, st, c) {
	  if (node.init) c(node.init, st, "ForInit");
	  if (node.test) c(node.test, st, "Expression");
	  if (node.update) c(node.update, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.ForInStatement = base.ForOfStatement = function (node, st, c) {
	  c(node.left, st, "ForInit");
	  c(node.right, st, "Expression");
	  c(node.body, st, "Statement");
	};
	base.ForInit = function (node, st, c) {
	  if (node.type == "VariableDeclaration") c(node, st);else c(node, st, "Expression");
	};
	base.DebuggerStatement = ignore;

	base.FunctionDeclaration = function (node, st, c) {
	  return c(node, st, "Function");
	};
	base.VariableDeclaration = function (node, st, c) {
	  for (var i = 0; i < node.declarations.length; ++i) {
	    c(node.declarations[i], st);
	  }
	};
	base.VariableDeclarator = function (node, st, c) {
	  c(node.id, st, "Pattern");
	  if (node.init) c(node.init, st, "Expression");
	};

	base.Function = function (node, st, c) {
	  if (node.id) c(node.id, st, "Pattern");
	  for (var i = 0; i < node.params.length; i++) {
	    c(node.params[i], st, "Pattern");
	  }c(node.body, st, node.expression ? "ScopeExpression" : "ScopeBody");
	};
	// FIXME drop these node types in next major version
	// (They are awkward, and in ES6 every block can be a scope.)
	base.ScopeBody = function (node, st, c) {
	  return c(node, st, "Statement");
	};
	base.ScopeExpression = function (node, st, c) {
	  return c(node, st, "Expression");
	};

	base.Pattern = function (node, st, c) {
	  if (node.type == "Identifier") c(node, st, "VariablePattern");else if (node.type == "MemberExpression") c(node, st, "MemberPattern");else c(node, st);
	};
	base.VariablePattern = ignore;
	base.MemberPattern = skipThrough;
	base.RestElement = function (node, st, c) {
	  return c(node.argument, st, "Pattern");
	};
	base.ArrayPattern = function (node, st, c) {
	  for (var i = 0; i < node.elements.length; ++i) {
	    var elt = node.elements[i];
	    if (elt) c(elt, st, "Pattern");
	  }
	};
	base.ObjectPattern = function (node, st, c) {
	  for (var i = 0; i < node.properties.length; ++i) {
	    c(node.properties[i].value, st, "Pattern");
	  }
	};

	base.Expression = skipThrough;
	base.ThisExpression = base.Super = base.MetaProperty = ignore;
	base.ArrayExpression = function (node, st, c) {
	  for (var i = 0; i < node.elements.length; ++i) {
	    var elt = node.elements[i];
	    if (elt) c(elt, st, "Expression");
	  }
	};
	base.ObjectExpression = function (node, st, c) {
	  for (var i = 0; i < node.properties.length; ++i) {
	    c(node.properties[i], st);
	  }
	};
	base.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;
	base.SequenceExpression = base.TemplateLiteral = function (node, st, c) {
	  for (var i = 0; i < node.expressions.length; ++i) {
	    c(node.expressions[i], st, "Expression");
	  }
	};
	base.UnaryExpression = base.UpdateExpression = function (node, st, c) {
	  c(node.argument, st, "Expression");
	};
	base.BinaryExpression = base.LogicalExpression = function (node, st, c) {
	  c(node.left, st, "Expression");
	  c(node.right, st, "Expression");
	};
	base.AssignmentExpression = base.AssignmentPattern = function (node, st, c) {
	  c(node.left, st, "Pattern");
	  c(node.right, st, "Expression");
	};
	base.ConditionalExpression = function (node, st, c) {
	  c(node.test, st, "Expression");
	  c(node.consequent, st, "Expression");
	  c(node.alternate, st, "Expression");
	};
	base.NewExpression = base.CallExpression = function (node, st, c) {
	  c(node.callee, st, "Expression");
	  if (node.arguments) for (var i = 0; i < node.arguments.length; ++i) {
	    c(node.arguments[i], st, "Expression");
	  }
	};
	base.MemberExpression = function (node, st, c) {
	  c(node.object, st, "Expression");
	  if (node.computed) c(node.property, st, "Expression");
	};
	base.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {
	  if (node.declaration) c(node.declaration, st, node.type == "ExportNamedDeclaration" || node.declaration.id ? "Statement" : "Expression");
	  if (node.source) c(node.source, st, "Expression");
	};
	base.ExportAllDeclaration = function (node, st, c) {
	  c(node.source, st, "Expression");
	};
	base.ImportDeclaration = function (node, st, c) {
	  for (var i = 0; i < node.specifiers.length; i++) {
	    c(node.specifiers[i], st);
	  }c(node.source, st, "Expression");
	};
	base.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;

	base.TaggedTemplateExpression = function (node, st, c) {
	  c(node.tag, st, "Expression");
	  c(node.quasi, st);
	};
	base.ClassDeclaration = base.ClassExpression = function (node, st, c) {
	  return c(node, st, "Class");
	};
	base.Class = function (node, st, c) {
	  if (node.id) c(node.id, st, "Pattern");
	  if (node.superClass) c(node.superClass, st, "Expression");
	  for (var i = 0; i < node.body.body.length; i++) {
	    c(node.body.body[i], st);
	  }
	};
	base.MethodDefinition = base.Property = function (node, st, c) {
	  if (node.computed) c(node.key, st, "Expression");
	  c(node.value, st, "Expression");
	};
	base.ComprehensionExpression = function (node, st, c) {
	  for (var i = 0; i < node.blocks.length; i++) {
	    c(node.blocks[i].right, st, "Expression");
	  }c(node.body, st, "Expression");
	};

	},{}]},{},[1])(1)
	});

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Acorn is a tiny, fast JavaScript parser written in JavaScript.
	//
	// Acorn was written by Marijn Haverbeke and various contributors and
	// released under an MIT license. The Unicode regexps (for identifiers
	// and whitespace) were taken from [Esprima](http://esprima.org) by
	// Ariya Hidayat.
	//
	// Git repositories for Acorn are available at
	//
	//     http://marijnhaverbeke.nl/git/acorn
	//     https://github.com/marijnh/acorn.git
	//
	// Please use the [github bug tracker][ghbt] to report issues.
	//
	// [ghbt]: https://github.com/marijnh/acorn/issues
	//
	// This file defines the main parser interface. The library also comes
	// with a [error-tolerant parser][dammit] and an
	// [abstract syntax tree walker][walk], defined in other files.
	//
	// [dammit]: acorn_loose.js
	// [walk]: util/walk.js

	(function(root, mod) {
	  if (true) return mod(exports); // CommonJS
	  if (true) return !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (mod), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); // AMD
	  mod(root.acorn || (root.acorn = {})); // Plain browser env
	})(this, function(exports) {
	  "use strict";

	  exports.version = "0.11.0";

	  // The main exported interface (under `self.acorn` when in the
	  // browser) is a `parse` function that takes a code string and
	  // returns an abstract syntax tree as specified by [Mozilla parser
	  // API][api], with the caveat that inline XML is not recognized.
	  //
	  // [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API

	  var options, input, inputLen, sourceFile;

	  exports.parse = function(inpt, opts) {
	    input = String(inpt); inputLen = input.length;
	    setOptions(opts);
	    initTokenState();
	    var startPos = options.locations ? [tokPos, curPosition()] : tokPos;
	    initParserState();
	    return parseTopLevel(options.program || startNodeAt(startPos));
	  };

	  // A second optional argument can be given to further configure
	  // the parser process. These options are recognized:

	  var defaultOptions = exports.defaultOptions = {
	    // `ecmaVersion` indicates the ECMAScript version to parse. Must
	    // be either 3, or 5, or 6. This influences support for strict
	    // mode, the set of reserved words, support for getters and
	    // setters and other features.
	    ecmaVersion: 5,
	    // Turn on `strictSemicolons` to prevent the parser from doing
	    // automatic semicolon insertion.
	    strictSemicolons: false,
	    // When `allowTrailingCommas` is false, the parser will not allow
	    // trailing commas in array and object literals.
	    allowTrailingCommas: true,
	    // By default, reserved words are not enforced. Enable
	    // `forbidReserved` to enforce them. When this option has the
	    // value "everywhere", reserved words and keywords can also not be
	    // used as property names.
	    forbidReserved: false,
	    // When enabled, a return at the top level is not considered an
	    // error.
	    allowReturnOutsideFunction: false,
	    // When enabled, import/export statements are not constrained to
	    // appearing at the top of the program.
	    allowImportExportEverywhere: false,
	    // When `locations` is on, `loc` properties holding objects with
	    // `start` and `end` properties in `{line, column}` form (with
	    // line being 1-based and column 0-based) will be attached to the
	    // nodes.
	    locations: false,
	    // A function can be passed as `onToken` option, which will
	    // cause Acorn to call that function with object in the same
	    // format as tokenize() returns. Note that you are not
	    // allowed to call the parser from the callback—that will
	    // corrupt its internal state.
	    onToken: null,
	    // A function can be passed as `onComment` option, which will
	    // cause Acorn to call that function with `(block, text, start,
	    // end)` parameters whenever a comment is skipped. `block` is a
	    // boolean indicating whether this is a block (`/* */`) comment,
	    // `text` is the content of the comment, and `start` and `end` are
	    // character offsets that denote the start and end of the comment.
	    // When the `locations` option is on, two more parameters are
	    // passed, the full `{line, column}` locations of the start and
	    // end of the comments. Note that you are not allowed to call the
	    // parser from the callback—that will corrupt its internal state.
	    onComment: null,
	    // Nodes have their start and end characters offsets recorded in
	    // `start` and `end` properties (directly on the node, rather than
	    // the `loc` object, which holds line/column data. To also add a
	    // [semi-standardized][range] `range` property holding a `[start,
	    // end]` array with the same numbers, set the `ranges` option to
	    // `true`.
	    //
	    // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678
	    ranges: false,
	    // It is possible to parse multiple files into a single AST by
	    // passing the tree produced by parsing the first file as
	    // `program` option in subsequent parses. This will add the
	    // toplevel forms of the parsed file to the `Program` (top) node
	    // of an existing parse tree.
	    program: null,
	    // When `locations` is on, you can pass this to record the source
	    // file in every node's `loc` object.
	    sourceFile: null,
	    // This value, if given, is stored in every node, whether
	    // `locations` is on or off.
	    directSourceFile: null,
	    // When enabled, parenthesized expressions are represented by
	    // (non-standard) ParenthesizedExpression nodes
	    preserveParens: false
	  };

	  // This function tries to parse a single expression at a given
	  // offset in a string. Useful for parsing mixed-language formats
	  // that embed JavaScript expressions.

	  exports.parseExpressionAt = function(inpt, pos, opts) {
	    input = String(inpt); inputLen = input.length;
	    setOptions(opts);
	    initTokenState(pos);
	    initParserState();
	    return parseExpression();
	  };

	  var isArray = function (obj) {
	    return Object.prototype.toString.call(obj) === "[object Array]";
	  };

	  function setOptions(opts) {
	    options = {};
	    for (var opt in defaultOptions)
	      options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
	    sourceFile = options.sourceFile || null;
	    if (isArray(options.onToken)) {
	      var tokens = options.onToken;
	      options.onToken = function (token) {
	        tokens.push(token);
	      };
	    }
	    if (isArray(options.onComment)) {
	      var comments = options.onComment;
	      options.onComment = function (block, text, start, end, startLoc, endLoc) {
	        var comment = {
	          type: block ? 'Block' : 'Line',
	          value: text,
	          start: start,
	          end: end
	        };
	        if (options.locations) {
	          comment.loc = new SourceLocation();
	          comment.loc.start = startLoc;
	          comment.loc.end = endLoc;
	        }
	        if (options.ranges)
	          comment.range = [start, end];
	        comments.push(comment);
	      };
	    }
	    isKeyword = options.ecmaVersion >= 6 ? isEcma6Keyword : isEcma5AndLessKeyword;
	  }

	  // The `getLineInfo` function is mostly useful when the
	  // `locations` option is off (for performance reasons) and you
	  // want to find the line/column position for a given character
	  // offset. `input` should be the code string that the offset refers
	  // into.

	  var getLineInfo = exports.getLineInfo = function(input, offset) {
	    for (var line = 1, cur = 0;;) {
	      lineBreak.lastIndex = cur;
	      var match = lineBreak.exec(input);
	      if (match && match.index < offset) {
	        ++line;
	        cur = match.index + match[0].length;
	      } else break;
	    }
	    return {line: line, column: offset - cur};
	  };

	  function Token() {
	    this.type = tokType;
	    this.value = tokVal;
	    this.start = tokStart;
	    this.end = tokEnd;
	    if (options.locations) {
	      this.loc = new SourceLocation();
	      this.loc.end = tokEndLoc;
	      // TODO: remove in next major release
	      this.startLoc = tokStartLoc;
	      this.endLoc = tokEndLoc;
	    }
	    if (options.ranges)
	      this.range = [tokStart, tokEnd];
	  }

	  exports.Token = Token;

	  // Acorn is organized as a tokenizer and a recursive-descent parser.
	  // The `tokenize` export provides an interface to the tokenizer.
	  // Because the tokenizer is optimized for being efficiently used by
	  // the Acorn parser itself, this interface is somewhat crude and not
	  // very modular. Performing another parse or call to `tokenize` will
	  // reset the internal state, and invalidate existing tokenizers.

	  exports.tokenize = function(inpt, opts) {
	    input = String(inpt); inputLen = input.length;
	    setOptions(opts);
	    initTokenState();
	    skipSpace();

	    function getToken(forceRegexp) {
	      lastEnd = tokEnd;
	      readToken(forceRegexp);
	      return new Token();
	    }
	    getToken.jumpTo = function(pos, reAllowed) {
	      tokPos = pos;
	      if (options.locations) {
	        tokCurLine = 1;
	        tokLineStart = lineBreak.lastIndex = 0;
	        var match;
	        while ((match = lineBreak.exec(input)) && match.index < pos) {
	          ++tokCurLine;
	          tokLineStart = match.index + match[0].length;
	        }
	      }
	      tokRegexpAllowed = reAllowed;
	      skipSpace();
	    };
	    getToken.noRegexp = function() {
	      tokRegexpAllowed = false;
	    };
	    getToken.options = options;
	    return getToken;
	  };

	  // State is kept in (closure-)global variables. We already saw the
	  // `options`, `input`, and `inputLen` variables above.

	  // The current position of the tokenizer in the input.

	  var tokPos;

	  // The start and end offsets of the current token.

	  var tokStart, tokEnd;

	  // When `options.locations` is true, these hold objects
	  // containing the tokens start and end line/column pairs.

	  var tokStartLoc, tokEndLoc;

	  // The type and value of the current token. Token types are objects,
	  // named by variables against which they can be compared, and
	  // holding properties that describe them (indicating, for example,
	  // the precedence of an infix operator, and the original name of a
	  // keyword token). The kind of value that's held in `tokVal` depends
	  // on the type of the token. For literals, it is the literal value,
	  // for operators, the operator name, and so on.

	  var tokType, tokVal;

	  // Internal state for the tokenizer. To distinguish between division
	  // operators and regular expressions, it remembers whether the last
	  // token was one that is allowed to be followed by an expression.
	  // (If it is, a slash is probably a regexp, if it isn't it's a
	  // division operator. See the `parseStatement` function for a
	  // caveat.)

	  var tokRegexpAllowed;

	  // When `options.locations` is true, these are used to keep
	  // track of the current line, and know when a new line has been
	  // entered.

	  var tokCurLine, tokLineStart;

	  // These store the position of the previous token, which is useful
	  // when finishing a node and assigning its `end` position.

	  var lastStart, lastEnd, lastEndLoc;

	  // This is the parser's state. `inFunction` is used to reject
	  // `return` statements outside of functions, `inGenerator` to
	  // reject `yield`s outside of generators, `labels` to verify
	  // that `break` and `continue` have somewhere to jump to, and
	  // `strict` indicates whether strict mode is on.

	  var inFunction, inGenerator, labels, strict;

	  // This counter is used for checking that arrow expressions did
	  // not contain nested parentheses in argument list.

	  var metParenL;

	  // This is used by the tokenizer to track the template strings it is
	  // inside, and count the amount of open braces seen inside them, to
	  // be able to switch back to a template token when the } to match ${
	  // is encountered. It will hold an array of integers.

	  var templates;

	  function initParserState() {
	    lastStart = lastEnd = tokPos;
	    if (options.locations) lastEndLoc = curPosition();
	    inFunction = inGenerator = strict = false;
	    labels = [];
	    skipSpace();
	    readToken();
	  }

	  // This function is used to raise exceptions on parse errors. It
	  // takes an offset integer (into the current `input`) to indicate
	  // the location of the error, attaches the position to the end
	  // of the error message, and then raises a `SyntaxError` with that
	  // message.

	  function raise(pos, message) {
	    var loc = getLineInfo(input, pos);
	    message += " (" + loc.line + ":" + loc.column + ")";
	    var err = new SyntaxError(message);
	    err.pos = pos; err.loc = loc; err.raisedAt = tokPos;
	    throw err;
	  }

	  // Reused empty array added for node fields that are always empty.

	  var empty = [];

	  // ## Token types

	  // The assignment of fine-grained, information-carrying type objects
	  // allows the tokenizer to store the information it has about a
	  // token in a way that is very cheap for the parser to look up.

	  // All token type variables start with an underscore, to make them
	  // easy to recognize.

	  // These are the general types. The `type` property is only used to
	  // make them recognizeable when debugging.

	  var _num = {type: "num"}, _regexp = {type: "regexp"}, _string = {type: "string"};
	  var _name = {type: "name"}, _eof = {type: "eof"};

	  // Keyword tokens. The `keyword` property (also used in keyword-like
	  // operators) indicates that the token originated from an
	  // identifier-like word, which is used when parsing property names.
	  //
	  // The `beforeExpr` property is used to disambiguate between regular
	  // expressions and divisions. It is set on all token types that can
	  // be followed by an expression (thus, a slash after them would be a
	  // regular expression).
	  //
	  // `isLoop` marks a keyword as starting a loop, which is important
	  // to know when parsing a label, in order to allow or disallow
	  // continue jumps to that label.

	  var _break = {keyword: "break"}, _case = {keyword: "case", beforeExpr: true}, _catch = {keyword: "catch"};
	  var _continue = {keyword: "continue"}, _debugger = {keyword: "debugger"}, _default = {keyword: "default"};
	  var _do = {keyword: "do", isLoop: true}, _else = {keyword: "else", beforeExpr: true};
	  var _finally = {keyword: "finally"}, _for = {keyword: "for", isLoop: true}, _function = {keyword: "function"};
	  var _if = {keyword: "if"}, _return = {keyword: "return", beforeExpr: true}, _switch = {keyword: "switch"};
	  var _throw = {keyword: "throw", beforeExpr: true}, _try = {keyword: "try"}, _var = {keyword: "var"};
	  var _let = {keyword: "let"}, _const = {keyword: "const"};
	  var _while = {keyword: "while", isLoop: true}, _with = {keyword: "with"}, _new = {keyword: "new", beforeExpr: true};
	  var _this = {keyword: "this"};
	  var _class = {keyword: "class"}, _extends = {keyword: "extends", beforeExpr: true};
	  var _export = {keyword: "export"}, _import = {keyword: "import"};
	  var _yield = {keyword: "yield", beforeExpr: true};

	  // The keywords that denote values.

	  var _null = {keyword: "null", atomValue: null}, _true = {keyword: "true", atomValue: true};
	  var _false = {keyword: "false", atomValue: false};

	  // Some keywords are treated as regular operators. `in` sometimes
	  // (when parsing `for`) needs to be tested against specifically, so
	  // we assign a variable name to it for quick comparing.

	  var _in = {keyword: "in", binop: 7, beforeExpr: true};

	  // Map keyword names to token types.

	  var keywordTypes = {"break": _break, "case": _case, "catch": _catch,
	                      "continue": _continue, "debugger": _debugger, "default": _default,
	                      "do": _do, "else": _else, "finally": _finally, "for": _for,
	                      "function": _function, "if": _if, "return": _return, "switch": _switch,
	                      "throw": _throw, "try": _try, "var": _var, "let": _let, "const": _const,
	                      "while": _while, "with": _with,
	                      "null": _null, "true": _true, "false": _false, "new": _new, "in": _in,
	                      "instanceof": {keyword: "instanceof", binop: 7, beforeExpr: true}, "this": _this,
	                      "typeof": {keyword: "typeof", prefix: true, beforeExpr: true},
	                      "void": {keyword: "void", prefix: true, beforeExpr: true},
	                      "delete": {keyword: "delete", prefix: true, beforeExpr: true},
	                      "class": _class, "extends": _extends,
	                      "export": _export, "import": _import, "yield": _yield};

	  // Punctuation token types. Again, the `type` property is purely for debugging.

	  var _bracketL = {type: "[", beforeExpr: true}, _bracketR = {type: "]"}, _braceL = {type: "{", beforeExpr: true};
	  var _braceR = {type: "}"}, _parenL = {type: "(", beforeExpr: true}, _parenR = {type: ")"};
	  var _comma = {type: ",", beforeExpr: true}, _semi = {type: ";", beforeExpr: true};
	  var _colon = {type: ":", beforeExpr: true}, _dot = {type: "."}, _question = {type: "?", beforeExpr: true};
	  var _arrow = {type: "=>", beforeExpr: true}, _template = {type: "template"}, _templateContinued = {type: "templateContinued"};
	  var _ellipsis = {type: "...", prefix: true, beforeExpr: true};

	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator. `isUpdate` specifies that the node produced by
	  // the operator should be of type UpdateExpression rather than
	  // simply UnaryExpression (`++` and `--`).
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.

	  var _slash = {binop: 10, beforeExpr: true}, _eq = {isAssign: true, beforeExpr: true};
	  var _assign = {isAssign: true, beforeExpr: true};
	  var _incDec = {postfix: true, prefix: true, isUpdate: true}, _prefix = {prefix: true, beforeExpr: true};
	  var _logicalOR = {binop: 1, beforeExpr: true};
	  var _logicalAND = {binop: 2, beforeExpr: true};
	  var _bitwiseOR = {binop: 3, beforeExpr: true};
	  var _bitwiseXOR = {binop: 4, beforeExpr: true};
	  var _bitwiseAND = {binop: 5, beforeExpr: true};
	  var _equality = {binop: 6, beforeExpr: true};
	  var _relational = {binop: 7, beforeExpr: true};
	  var _bitShift = {binop: 8, beforeExpr: true};
	  var _plusMin = {binop: 9, prefix: true, beforeExpr: true};
	  var _modulo = {binop: 10, beforeExpr: true};

	  // '*' may be multiply or have special meaning in ES6
	  var _star = {binop: 10, beforeExpr: true};

	  // Provide access to the token types for external users of the
	  // tokenizer.

	  exports.tokTypes = {bracketL: _bracketL, bracketR: _bracketR, braceL: _braceL, braceR: _braceR,
	                      parenL: _parenL, parenR: _parenR, comma: _comma, semi: _semi, colon: _colon,
	                      dot: _dot, ellipsis: _ellipsis, question: _question, slash: _slash, eq: _eq,
	                      name: _name, eof: _eof, num: _num, regexp: _regexp, string: _string,
	                      arrow: _arrow, template: _template, templateContinued: _templateContinued, star: _star,
	                      assign: _assign};
	  for (var kw in keywordTypes) exports.tokTypes["_" + kw] = keywordTypes[kw];

	  // This is a trick taken from Esprima. It turns out that, on
	  // non-Chrome browsers, to check whether a string is in a set, a
	  // predicate containing a big ugly `switch` statement is faster than
	  // a regular expression, and on Chrome the two are about on par.
	  // This function uses `eval` (non-lexical) to produce such a
	  // predicate from a space-separated string of words.
	  //
	  // It starts by sorting the words by length.

	  function makePredicate(words) {
	    words = words.split(" ");
	    var f = "", cats = [];
	    out: for (var i = 0; i < words.length; ++i) {
	      for (var j = 0; j < cats.length; ++j)
	        if (cats[j][0].length == words[i].length) {
	          cats[j].push(words[i]);
	          continue out;
	        }
	      cats.push([words[i]]);
	    }
	    function compareTo(arr) {
	      if (arr.length == 1) return f += "return str === " + JSON.stringify(arr[0]) + ";";
	      f += "switch(str){";
	      for (var i = 0; i < arr.length; ++i) f += "case " + JSON.stringify(arr[i]) + ":";
	      f += "return true}return false;";
	    }

	    // When there are more than three length categories, an outer
	    // switch first dispatches on the lengths, to save on comparisons.

	    if (cats.length > 3) {
	      cats.sort(function(a, b) {return b.length - a.length;});
	      f += "switch(str.length){";
	      for (var i = 0; i < cats.length; ++i) {
	        var cat = cats[i];
	        f += "case " + cat[0].length + ":";
	        compareTo(cat);
	      }
	      f += "}";

	    // Otherwise, simply generate a flat `switch` statement.

	    } else {
	      compareTo(words);
	    }
	    return new Function("str", f);
	  }

	  // The ECMAScript 3 reserved word list.

	  var isReservedWord3 = makePredicate("abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile");

	  // ECMAScript 5 reserved words.

	  var isReservedWord5 = makePredicate("class enum extends super const export import");

	  // The additional reserved words in strict mode.

	  var isStrictReservedWord = makePredicate("implements interface let package private protected public static yield");

	  // The forbidden variable names in strict mode.

	  var isStrictBadIdWord = makePredicate("eval arguments");

	  // And the keywords.

	  var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";

	  var isEcma5AndLessKeyword = makePredicate(ecma5AndLessKeywords);

	  var isEcma6Keyword = makePredicate(ecma5AndLessKeywords + " let const class extends export import yield");

	  var isKeyword = isEcma5AndLessKeyword;

	  // ## Character categories

	  // Big ugly regular expressions that match characters in the
	  // whitespace, identifier, and identifier-start categories. These
	  // are only applied when a character is found to actually have a
	  // code point above 128.
	  // Generated by `tools/generate-identifier-regex.js`.

	  var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	  var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
	  var nonASCIIidentifierChars = "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19B0-\u19C0\u19C8\u19C9\u19D0-\u19D9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u200C\u200D\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F1\uA900-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
	  var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	  var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	  // Whether a single character denotes a newline.

	  var newline = /[\n\r\u2028\u2029]/;

	  function isNewLine(code) {
	    return code === 10 || code === 13 || code === 0x2028 || code == 0x2029;
	  }

	  // Matches a whole line break (where CRLF is considered a single
	  // line break). Used to count lines.

	  var lineBreak = /\r\n|[\n\r\u2028\u2029]/g;

	  // Test whether a given character code starts an identifier.

	  var isIdentifierStart = exports.isIdentifierStart = function(code) {
	    if (code < 65) return code === 36;
	    if (code < 91) return true;
	    if (code < 97) return code === 95;
	    if (code < 123)return true;
	    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  };

	  // Test whether a given character is part of an identifier.

	  var isIdentifierChar = exports.isIdentifierChar = function(code) {
	    if (code < 48) return code === 36;
	    if (code < 58) return true;
	    if (code < 65) return false;
	    if (code < 91) return true;
	    if (code < 97) return code === 95;
	    if (code < 123)return true;
	    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  };

	  // ## Tokenizer

	  // These are used when `options.locations` is on, for the
	  // `tokStartLoc` and `tokEndLoc` properties.

	  function Position(line, col) {
	    this.line = line;
	    this.column = col;
	  }

	  Position.prototype.offset = function(n) {
	    return new Position(this.line, this.column + n);
	  }

	  function curPosition() {
	    return new Position(tokCurLine, tokPos - tokLineStart);
	  }

	  // Reset the token state. Used at the start of a parse.

	  function initTokenState(pos) {
	    if (pos) {
	      tokPos = pos;
	      tokLineStart = Math.max(0, input.lastIndexOf("\n", pos));
	      tokCurLine = input.slice(0, tokLineStart).split(newline).length;
	    } else {
	      tokCurLine = 1;
	      tokPos = tokLineStart = 0;
	    }
	    tokRegexpAllowed = true;
	    metParenL = 0;
	    templates = [];
	  }

	  // Called at the end of every token. Sets `tokEnd`, `tokVal`, and
	  // `tokRegexpAllowed`, and skips the space after the token, so that
	  // the next one's `tokStart` will point at the right position.

	  function finishToken(type, val, shouldSkipSpace) {
	    tokEnd = tokPos;
	    if (options.locations) tokEndLoc = curPosition();
	    tokType = type;
	    if (shouldSkipSpace !== false) skipSpace();
	    tokVal = val;
	    tokRegexpAllowed = type.beforeExpr;
	    if (options.onToken) {
	      options.onToken(new Token());
	    }
	  }

	  function skipBlockComment() {
	    var startLoc = options.onComment && options.locations && curPosition();
	    var start = tokPos, end = input.indexOf("*/", tokPos += 2);
	    if (end === -1) raise(tokPos - 2, "Unterminated comment");
	    tokPos = end + 2;
	    if (options.locations) {
	      lineBreak.lastIndex = start;
	      var match;
	      while ((match = lineBreak.exec(input)) && match.index < tokPos) {
	        ++tokCurLine;
	        tokLineStart = match.index + match[0].length;
	      }
	    }
	    if (options.onComment)
	      options.onComment(true, input.slice(start + 2, end), start, tokPos,
	                        startLoc, options.locations && curPosition());
	  }

	  function skipLineComment(startSkip) {
	    var start = tokPos;
	    var startLoc = options.onComment && options.locations && curPosition();
	    var ch = input.charCodeAt(tokPos+=startSkip);
	    while (tokPos < inputLen && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++tokPos;
	      ch = input.charCodeAt(tokPos);
	    }
	    if (options.onComment)
	      options.onComment(false, input.slice(start + startSkip, tokPos), start, tokPos,
	                        startLoc, options.locations && curPosition());
	  }

	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.

	  function skipSpace() {
	    while (tokPos < inputLen) {
	      var ch = input.charCodeAt(tokPos);
	      if (ch === 32) { // ' '
	        ++tokPos;
	      } else if (ch === 13) {
	        ++tokPos;
	        var next = input.charCodeAt(tokPos);
	        if (next === 10) {
	          ++tokPos;
	        }
	        if (options.locations) {
	          ++tokCurLine;
	          tokLineStart = tokPos;
	        }
	      } else if (ch === 10 || ch === 8232 || ch === 8233) {
	        ++tokPos;
	        if (options.locations) {
	          ++tokCurLine;
	          tokLineStart = tokPos;
	        }
	      } else if (ch > 8 && ch < 14) {
	        ++tokPos;
	      } else if (ch === 47) { // '/'
	        var next = input.charCodeAt(tokPos + 1);
	        if (next === 42) { // '*'
	          skipBlockComment();
	        } else if (next === 47) { // '/'
	          skipLineComment(2);
	        } else break;
	      } else if (ch === 160) { // '\xa0'
	        ++tokPos;
	      } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	        ++tokPos;
	      } else {
	        break;
	      }
	    }
	  }

	  // ### Token reading

	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //
	  // The `forceRegexp` parameter is used in the one case where the
	  // `tokRegexpAllowed` trick does not work. See `parseStatement`.

	  function readToken_dot() {
	    var next = input.charCodeAt(tokPos + 1);
	    if (next >= 48 && next <= 57) return readNumber(true);
	    var next2 = input.charCodeAt(tokPos + 2);
	    if (options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'
	      tokPos += 3;
	      return finishToken(_ellipsis);
	    } else {
	      ++tokPos;
	      return finishToken(_dot);
	    }
	  }

	  function readToken_slash() { // '/'
	    var next = input.charCodeAt(tokPos + 1);
	    if (tokRegexpAllowed) {++tokPos; return readRegexp();}
	    if (next === 61) return finishOp(_assign, 2);
	    return finishOp(_slash, 1);
	  }

	  function readToken_mult_modulo(code) { // '%*'
	    var next = input.charCodeAt(tokPos + 1);
	    if (next === 61) return finishOp(_assign, 2);
	    return finishOp(code === 42 ? _star : _modulo, 1);
	  }

	  function readToken_pipe_amp(code) { // '|&'
	    var next = input.charCodeAt(tokPos + 1);
	    if (next === code) return finishOp(code === 124 ? _logicalOR : _logicalAND, 2);
	    if (next === 61) return finishOp(_assign, 2);
	    return finishOp(code === 124 ? _bitwiseOR : _bitwiseAND, 1);
	  }

	  function readToken_caret() { // '^'
	    var next = input.charCodeAt(tokPos + 1);
	    if (next === 61) return finishOp(_assign, 2);
	    return finishOp(_bitwiseXOR, 1);
	  }

	  function readToken_plus_min(code) { // '+-'
	    var next = input.charCodeAt(tokPos + 1);
	    if (next === code) {
	      if (next == 45 && input.charCodeAt(tokPos + 2) == 62 &&
	          newline.test(input.slice(lastEnd, tokPos))) {
	        // A `-->` line comment
	        skipLineComment(3);
	        skipSpace();
	        return readToken();
	      }
	      return finishOp(_incDec, 2);
	    }
	    if (next === 61) return finishOp(_assign, 2);
	    return finishOp(_plusMin, 1);
	  }

	  function readToken_lt_gt(code) { // '<>'
	    var next = input.charCodeAt(tokPos + 1);
	    var size = 1;
	    if (next === code) {
	      size = code === 62 && input.charCodeAt(tokPos + 2) === 62 ? 3 : 2;
	      if (input.charCodeAt(tokPos + size) === 61) return finishOp(_assign, size + 1);
	      return finishOp(_bitShift, size);
	    }
	    if (next == 33 && code == 60 && input.charCodeAt(tokPos + 2) == 45 &&
	        input.charCodeAt(tokPos + 3) == 45) {
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      skipLineComment(4);
	      skipSpace();
	      return readToken();
	    }
	    if (next === 61)
	      size = input.charCodeAt(tokPos + 2) === 61 ? 3 : 2;
	    return finishOp(_relational, size);
	  }

	  function readToken_eq_excl(code) { // '=!', '=>'
	    var next = input.charCodeAt(tokPos + 1);
	    if (next === 61) return finishOp(_equality, input.charCodeAt(tokPos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62 && options.ecmaVersion >= 6) { // '=>'
	      tokPos += 2;
	      return finishToken(_arrow);
	    }
	    return finishOp(code === 61 ? _eq : _prefix, 1);
	  }

	  function getTokenFromCode(code) {
	    switch (code) {
	    // The interpretation of a dot depends on whether it is followed
	    // by a digit or another two dots.
	    case 46: // '.'
	      return readToken_dot();

	    // Punctuation tokens.
	    case 40: ++tokPos; return finishToken(_parenL);
	    case 41: ++tokPos; return finishToken(_parenR);
	    case 59: ++tokPos; return finishToken(_semi);
	    case 44: ++tokPos; return finishToken(_comma);
	    case 91: ++tokPos; return finishToken(_bracketL);
	    case 93: ++tokPos; return finishToken(_bracketR);
	    case 123:
	      ++tokPos;
	      if (templates.length) ++templates[templates.length - 1];
	      return finishToken(_braceL);
	    case 125:
	      ++tokPos;
	      if (templates.length && --templates[templates.length - 1] === 0)
	        return readTemplateString(_templateContinued);
	      else
	        return finishToken(_braceR);
	    case 58: ++tokPos; return finishToken(_colon);
	    case 63: ++tokPos; return finishToken(_question);

	    case 96: // '`'
	      if (options.ecmaVersion >= 6) {
	        ++tokPos;
	        return readTemplateString(_template);
	      }

	    case 48: // '0'
	      var next = input.charCodeAt(tokPos + 1);
	      if (next === 120 || next === 88) return readRadixNumber(16); // '0x', '0X' - hex number
	      if (options.ecmaVersion >= 6) {
	        if (next === 111 || next === 79) return readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return readRadixNumber(2); // '0b', '0B' - binary number
	      }
	    // Anything else beginning with a digit is an integer, octal
	    // number, or float.
	    case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9
	      return readNumber(false);

	    // Quotes produce strings.
	    case 34: case 39: // '"', "'"
	      return readString(code);

	    // Operators are parsed inline in tiny state machines. '=' (61) is
	    // often referred to. `finishOp` simply skips the amount of
	    // characters it is given as second argument, and returns a token
	    // of the type given by its first argument.

	    case 47: // '/'
	      return readToken_slash();

	    case 37: case 42: // '%*'
	      return readToken_mult_modulo(code);

	    case 124: case 38: // '|&'
	      return readToken_pipe_amp(code);

	    case 94: // '^'
	      return readToken_caret();

	    case 43: case 45: // '+-'
	      return readToken_plus_min(code);

	    case 60: case 62: // '<>'
	      return readToken_lt_gt(code);

	    case 61: case 33: // '=!'
	      return readToken_eq_excl(code);

	    case 126: // '~'
	      return finishOp(_prefix, 1);
	    }

	    return false;
	  }

	  function readToken(forceRegexp) {
	    if (!forceRegexp) tokStart = tokPos;
	    else tokPos = tokStart + 1;
	    if (options.locations) tokStartLoc = curPosition();
	    if (forceRegexp) return readRegexp();
	    if (tokPos >= inputLen) return finishToken(_eof);

	    var code = input.charCodeAt(tokPos);

	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (isIdentifierStart(code) || code === 92 /* '\' */) return readWord();

	    var tok = getTokenFromCode(code);

	    if (tok === false) {
	      // If we are here, we either found a non-ASCII identifier
	      // character, or something that's entirely disallowed.
	      var ch = String.fromCharCode(code);
	      if (ch === "\\" || nonASCIIidentifierStart.test(ch)) return readWord();
	      raise(tokPos, "Unexpected character '" + ch + "'");
	    }
	    return tok;
	  }

	  function finishOp(type, size) {
	    var str = input.slice(tokPos, tokPos + size);
	    tokPos += size;
	    finishToken(type, str);
	  }

	  var regexpUnicodeSupport = false;
	  try { new RegExp("\uffff", "u"); regexpUnicodeSupport = true; }
	  catch(e) {}

	  // Parse a regular expression. Some context-awareness is necessary,
	  // since a '/' inside a '[]' set does not end the expression.

	  function readRegexp() {
	    var content = "", escaped, inClass, start = tokPos;
	    for (;;) {
	      if (tokPos >= inputLen) raise(start, "Unterminated regular expression");
	      var ch = input.charAt(tokPos);
	      if (newline.test(ch)) raise(start, "Unterminated regular expression");
	      if (!escaped) {
	        if (ch === "[") inClass = true;
	        else if (ch === "]" && inClass) inClass = false;
	        else if (ch === "/" && !inClass) break;
	        escaped = ch === "\\";
	      } else escaped = false;
	      ++tokPos;
	    }
	    var content = input.slice(start, tokPos);
	    ++tokPos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = readWord1();
	    var tmp = content;
	    if (mods) {
	      var validFlags = /^[gmsiy]*$/;
	      if (options.ecmaVersion >= 6) validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) raise(start, "Invalid regular expression flag");
	      if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {
	        // Replace each astral symbol and every Unicode code point
	        // escape sequence that represents such a symbol with a single
	        // ASCII symbol to avoid throwing on regular expressions that
	        // are only valid in combination with the `/u` flag.
	        tmp = tmp
	          .replace(/\\u\{([0-9a-fA-F]{5,6})\}/g, "x")
	          .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, "x");
	      }
	    }
	    // Detect invalid regular expressions.
	    try {
	      new RegExp(tmp);
	    } catch (e) {
	      if (e instanceof SyntaxError) raise(start, "Error parsing regular expression: " + e.message);
	      raise(e);
	    }
	    // Get a regular expression object for this pattern-flag pair, or `null` in
	    // case the current environment doesn't support the flags it uses.
	    try {
	      var value = new RegExp(content, mods);
	    } catch (err) {
	      value = null;
	    }
	    return finishToken(_regexp, {pattern: content, flags: mods, value: value});
	  }

	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.

	  function readInt(radix, len) {
	    var start = tokPos, total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = input.charCodeAt(tokPos), val;
	      if (code >= 97) val = code - 97 + 10; // a
	      else if (code >= 65) val = code - 65 + 10; // A
	      else if (code >= 48 && code <= 57) val = code - 48; // 0-9
	      else val = Infinity;
	      if (val >= radix) break;
	      ++tokPos;
	      total = total * radix + val;
	    }
	    if (tokPos === start || len != null && tokPos - start !== len) return null;

	    return total;
	  }

	  function readRadixNumber(radix) {
	    tokPos += 2; // 0x
	    var val = readInt(radix);
	    if (val == null) raise(tokStart + 2, "Expected number in radix " + radix);
	    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");
	    return finishToken(_num, val);
	  }

	  // Read an integer, octal integer, or floating-point number.

	  function readNumber(startsWithDot) {
	    var start = tokPos, isFloat = false, octal = input.charCodeAt(tokPos) === 48;
	    if (!startsWithDot && readInt(10) === null) raise(start, "Invalid number");
	    if (input.charCodeAt(tokPos) === 46) {
	      ++tokPos;
	      readInt(10);
	      isFloat = true;
	    }
	    var next = input.charCodeAt(tokPos);
	    if (next === 69 || next === 101) { // 'eE'
	      next = input.charCodeAt(++tokPos);
	      if (next === 43 || next === 45) ++tokPos; // '+-'
	      if (readInt(10) === null) raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (isIdentifierStart(input.charCodeAt(tokPos))) raise(tokPos, "Identifier directly after number");

	    var str = input.slice(start, tokPos), val;
	    if (isFloat) val = parseFloat(str);
	    else if (!octal || str.length === 1) val = parseInt(str, 10);
	    else if (/[89]/.test(str) || strict) raise(start, "Invalid number");
	    else val = parseInt(str, 8);
	    return finishToken(_num, val);
	  }

	  // Read a string value, interpreting backslash-escapes.

	  function readCodePoint() {
	    var ch = input.charCodeAt(tokPos), code;

	    if (ch === 123) {
	      if (options.ecmaVersion < 6) unexpected();
	      ++tokPos;
	      code = readHexChar(input.indexOf('}', tokPos) - tokPos);
	      ++tokPos;
	      if (code > 0x10FFFF) unexpected();
	    } else {
	      code = readHexChar(4);
	    }

	    // UTF-16 Encoding
	    if (code <= 0xFFFF) {
	      return String.fromCharCode(code);
	    }
	    var cu1 = ((code - 0x10000) >> 10) + 0xD800;
	    var cu2 = ((code - 0x10000) & 1023) + 0xDC00;
	    return String.fromCharCode(cu1, cu2);
	  }

	  function readString(quote) {
	    ++tokPos;
	    var out = "";
	    for (;;) {
	      if (tokPos >= inputLen) raise(tokStart, "Unterminated string constant");
	      var ch = input.charCodeAt(tokPos);
	      if (ch === quote) {
	        ++tokPos;
	        return finishToken(_string, out);
	      }
	      if (ch === 92) { // '\'
	        out += readEscapedChar();
	      } else {
	        ++tokPos;
	        if (newline.test(String.fromCharCode(ch))) {
	          raise(tokStart, "Unterminated string constant");
	        }
	        out += String.fromCharCode(ch); // '\'
	      }
	    }
	  }

	  function readTemplateString(type) {
	    if (type == _templateContinued) templates.pop();
	    var out = "", start = tokPos;;
	    for (;;) {
	      if (tokPos >= inputLen) raise(tokStart, "Unterminated template");
	      var ch = input.charAt(tokPos);
	      if (ch === "`" || ch === "$" && input.charCodeAt(tokPos + 1) === 123) { // '`', '${'
	        var raw = input.slice(start, tokPos);
	        ++tokPos;
	        if (ch == "$") { ++tokPos; templates.push(1); }
	        return finishToken(type, {cooked: out, raw: raw});
	      }

	      if (ch === "\\") { // '\'
	        out += readEscapedChar();
	      } else {
	        ++tokPos;
	        if (newline.test(ch)) {
	          if (ch === "\r" && input.charCodeAt(tokPos) === 10) {
	            ++tokPos;
	            ch = "\n";
	          }
	          if (options.locations) {
	            ++tokCurLine;
	            tokLineStart = tokPos;
	          }
	        }
	        out += ch;
	      }
	    }
	  }

	  // Used to read escaped characters

	  function readEscapedChar() {
	    var ch = input.charCodeAt(++tokPos);
	    var octal = /^[0-7]+/.exec(input.slice(tokPos, tokPos + 3));
	    if (octal) octal = octal[0];
	    while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1);
	    if (octal === "0") octal = null;
	    ++tokPos;
	    if (octal) {
	      if (strict) raise(tokPos - 2, "Octal literal in strict mode");
	      tokPos += octal.length - 1;
	      return String.fromCharCode(parseInt(octal, 8));
	    } else {
	      switch (ch) {
	        case 110: return "\n"; // 'n' -> '\n'
	        case 114: return "\r"; // 'r' -> '\r'
	        case 120: return String.fromCharCode(readHexChar(2)); // 'x'
	        case 117: return readCodePoint(); // 'u'
	        case 116: return "\t"; // 't' -> '\t'
	        case 98: return "\b"; // 'b' -> '\b'
	        case 118: return "\u000b"; // 'v' -> '\u000b'
	        case 102: return "\f"; // 'f' -> '\f'
	        case 48: return "\0"; // 0 -> '\0'
	        case 13: if (input.charCodeAt(tokPos) === 10) ++tokPos; // '\r\n'
	        case 10: // ' \n'
	          if (options.locations) { tokLineStart = tokPos; ++tokCurLine; }
	          return "";
	        default: return String.fromCharCode(ch);
	      }
	    }
	  }

	  // Used to read character escape sequences ('\x', '\u', '\U').

	  function readHexChar(len) {
	    var n = readInt(16, len);
	    if (n === null) raise(tokStart, "Bad character escape sequence");
	    return n;
	  }

	  // Used to signal to callers of `readWord1` whether the word
	  // contained any escape sequences. This is needed because words with
	  // escape sequences must not be interpreted as keywords.

	  var containsEsc;

	  // Read an identifier, and return it as a string. Sets `containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Only builds up the word character-by-character when it actually
	  // containeds an escape, as a micro-optimization.

	  function readWord1() {
	    containsEsc = false;
	    var word, first = true, start = tokPos;
	    for (;;) {
	      var ch = input.charCodeAt(tokPos);
	      if (isIdentifierChar(ch)) {
	        if (containsEsc) word += input.charAt(tokPos);
	        ++tokPos;
	      } else if (ch === 92) { // "\"
	        if (!containsEsc) word = input.slice(start, tokPos);
	        containsEsc = true;
	        if (input.charCodeAt(++tokPos) != 117) // "u"
	          raise(tokPos, "Expecting Unicode escape sequence \\uXXXX");
	        ++tokPos;
	        var esc = readHexChar(4);
	        var escStr = String.fromCharCode(esc);
	        if (!escStr) raise(tokPos - 1, "Invalid Unicode escape");
	        if (!(first ? isIdentifierStart(esc) : isIdentifierChar(esc)))
	          raise(tokPos - 4, "Invalid Unicode escape");
	        word += escStr;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return containsEsc ? word : input.slice(start, tokPos);
	  }

	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.

	  function readWord() {
	    var word = readWord1();
	    var type = _name;
	    if (!containsEsc && isKeyword(word))
	      type = keywordTypes[word];
	    return finishToken(type, word);
	  }

	  // ## Parser

	  // A recursive descent parser operates by defining functions for all
	  // syntactic elements, and recursively calling those, each function
	  // advancing the input stream and returning an AST node. Precedence
	  // of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	  // instead of `(!x)[1]` is handled by the fact that the parser
	  // function that parses unary prefix operators is called first, and
	  // in turn calls the function that parses `[]` subscripts — that
	  // way, it'll receive the node for `x[1]` already parsed, and wraps
	  // *that* in the unary operator node.
	  //
	  // Acorn uses an [operator precedence parser][opp] to handle binary
	  // operator precedence, because it is much more compact than using
	  // the technique outlined above, which uses different, nesting
	  // functions to specify precedence, for all of the ten binary
	  // precedence levels that JavaScript defines.
	  //
	  // [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

	  // ### Parser utilities

	  // Continue to the next token.

	  function next() {
	    lastStart = tokStart;
	    lastEnd = tokEnd;
	    lastEndLoc = tokEndLoc;
	    readToken();
	  }

	  // Enter strict mode. Re-reads the next token to please pedantic
	  // tests ("use strict"; 010; -- should fail).

	  function setStrict(strct) {
	    strict = strct;
	    tokPos = tokStart;
	    if (options.locations) {
	      while (tokPos < tokLineStart) {
	        tokLineStart = input.lastIndexOf("\n", tokLineStart - 2) + 1;
	        --tokCurLine;
	      }
	    }
	    skipSpace();
	    readToken();
	  }

	  // Start an AST node, attaching a start offset.

	  function Node() {
	    this.type = null;
	    this.start = tokStart;
	    this.end = null;
	  }

	  exports.Node = Node;

	  function SourceLocation() {
	    this.start = tokStartLoc;
	    this.end = null;
	    if (sourceFile !== null) this.source = sourceFile;
	  }

	  function startNode() {
	    var node = new Node();
	    if (options.locations)
	      node.loc = new SourceLocation();
	    if (options.directSourceFile)
	      node.sourceFile = options.directSourceFile;
	    if (options.ranges)
	      node.range = [tokStart, 0];
	    return node;
	  }

	  // Sometimes, a node is only started *after* the token stream passed
	  // its start position. The functions below help storing a position
	  // and creating a node from a previous position.

	  function storeCurrentPos() {
	    return options.locations ? [tokStart, tokStartLoc] : tokStart;
	  }

	  function startNodeAt(pos) {
	    var node = new Node(), start = pos;
	    if (options.locations) {
	      node.loc = new SourceLocation();
	      node.loc.start = start[1];
	      start = pos[0];
	    }
	    node.start = start;
	    if (options.directSourceFile)
	      node.sourceFile = options.directSourceFile;
	    if (options.ranges)
	      node.range = [start, 0];

	    return node;
	  }

	  // Finish an AST node, adding `type` and `end` properties.

	  function finishNode(node, type) {
	    node.type = type;
	    node.end = lastEnd;
	    if (options.locations)
	      node.loc.end = lastEndLoc;
	    if (options.ranges)
	      node.range[1] = lastEnd;
	    return node;
	  }

	  function finishNodeAt(node, type, pos) {
	    if (options.locations) { node.loc.end = pos[1]; pos = pos[0]; }
	    node.type = type;
	    node.end = pos;
	    if (options.ranges)
	      node.range[1] = pos;
	    return node;
	  }

	  // Test whether a statement node is the string literal `"use strict"`.

	  function isUseStrict(stmt) {
	    return options.ecmaVersion >= 5 && stmt.type === "ExpressionStatement" &&
	      stmt.expression.type === "Literal" && stmt.expression.value === "use strict";
	  }

	  // Predicate that tests whether the next token is of the given
	  // type, and if yes, consumes it as a side effect.

	  function eat(type) {
	    if (tokType === type) {
	      next();
	      return true;
	    } else {
	      return false;
	    }
	  }

	  // Test whether a semicolon can be inserted at the current position.

	  function canInsertSemicolon() {
	    return !options.strictSemicolons &&
	      (tokType === _eof || tokType === _braceR || newline.test(input.slice(lastEnd, tokStart)));
	  }

	  // Consume a semicolon, or, failing that, see if we are allowed to
	  // pretend that there is a semicolon at this position.

	  function semicolon() {
	    if (!eat(_semi) && !canInsertSemicolon()) unexpected();
	  }

	  // Expect a token of a given type. If found, consume it, otherwise,
	  // raise an unexpected token error.

	  function expect(type) {
	    eat(type) || unexpected();
	  }

	  // Raise an unexpected token error.

	  function unexpected(pos) {
	    raise(pos != null ? pos : tokStart, "Unexpected token");
	  }

	  // Checks if hash object has a property.

	  function has(obj, propName) {
	    return Object.prototype.hasOwnProperty.call(obj, propName);
	  }
	  // Convert existing expression atom to assignable pattern
	  // if possible.

	  function toAssignable(node, allowSpread, checkType) {
	    if (options.ecmaVersion >= 6 && node) {
	      switch (node.type) {
	        case "Identifier":
	        case "MemberExpression":
	          break;

	        case "ObjectExpression":
	          node.type = "ObjectPattern";
	          for (var i = 0; i < node.properties.length; i++) {
	            var prop = node.properties[i];
	            if (prop.kind !== "init") unexpected(prop.key.start);
	            toAssignable(prop.value, false, checkType);
	          }
	          break;

	        case "ArrayExpression":
	          node.type = "ArrayPattern";
	          for (var i = 0, lastI = node.elements.length - 1; i <= lastI; i++) {
	            toAssignable(node.elements[i], i === lastI, checkType);
	          }
	          break;

	        case "SpreadElement":
	          if (allowSpread) {
	            toAssignable(node.argument, false, checkType);
	            checkSpreadAssign(node.argument);
	          } else {
	            unexpected(node.start);
	          }
	          break;

	        default:
	          if (checkType) unexpected(node.start);
	      }
	    }
	    return node;
	  }

	  // Checks if node can be assignable spread argument.

	  function checkSpreadAssign(node) {
	    if (node.type !== "Identifier" && node.type !== "ArrayPattern")
	      unexpected(node.start);
	  }

	  // Verify that argument names are not repeated, and it does not
	  // try to bind the words `eval` or `arguments`.

	  function checkFunctionParam(param, nameHash) {
	    switch (param.type) {
	      case "Identifier":
	        if (isStrictReservedWord(param.name) || isStrictBadIdWord(param.name))
	          raise(param.start, "Defining '" + param.name + "' in strict mode");
	        if (has(nameHash, param.name))
	          raise(param.start, "Argument name clash in strict mode");
	        nameHash[param.name] = true;
	        break;

	      case "ObjectPattern":
	        for (var i = 0; i < param.properties.length; i++)
	          checkFunctionParam(param.properties[i].value, nameHash);
	        break;

	      case "ArrayPattern":
	        for (var i = 0; i < param.elements.length; i++) {
	          var elem = param.elements[i];
	          if (elem) checkFunctionParam(elem, nameHash);
	        }
	        break;
	    }
	  }

	  // Check if property name clashes with already added.
	  // Object/class getters and setters are not allowed to clash —
	  // either with each other or with an init property — and in
	  // strict mode, init properties are also not allowed to be repeated.

	  function checkPropClash(prop, propHash) {
	    if (options.ecmaVersion >= 6) return;
	    var key = prop.key, name;
	    switch (key.type) {
	      case "Identifier": name = key.name; break;
	      case "Literal": name = String(key.value); break;
	      default: return;
	    }
	    var kind = prop.kind || "init", other;
	    if (has(propHash, name)) {
	      other = propHash[name];
	      var isGetSet = kind !== "init";
	      if ((strict || isGetSet) && other[kind] || !(isGetSet ^ other.init))
	        raise(key.start, "Redefinition of property");
	    } else {
	      other = propHash[name] = {
	        init: false,
	        get: false,
	        set: false
	      };
	    }
	    other[kind] = true;
	  }

	  // Verify that a node is an lval — something that can be assigned
	  // to.

	  function checkLVal(expr, isBinding) {
	    switch (expr.type) {
	      case "Identifier":
	        if (strict && (isStrictBadIdWord(expr.name) || isStrictReservedWord(expr.name)))
	          raise(expr.start, isBinding
	            ? "Binding " + expr.name + " in strict mode"
	            : "Assigning to " + expr.name + " in strict mode"
	          );
	        break;

	      case "MemberExpression":
	        if (!isBinding) break;

	      case "ObjectPattern":
	        for (var i = 0; i < expr.properties.length; i++)
	          checkLVal(expr.properties[i].value, isBinding);
	        break;

	      case "ArrayPattern":
	        for (var i = 0; i < expr.elements.length; i++) {
	          var elem = expr.elements[i];
	          if (elem) checkLVal(elem, isBinding);
	        }
	        break;

	      case "SpreadElement":
	        break;

	      default:
	        raise(expr.start, "Assigning to rvalue");
	    }
	  }

	  // ### Statement parsing

	  // Parse a program. Initializes the parser, reads any number of
	  // statements, and wraps them in a Program node.  Optionally takes a
	  // `program` argument.  If present, the statements will be appended
	  // to its body instead of creating a new node.

	  function parseTopLevel(node) {
	    var first = true;
	    if (!node.body) node.body = [];
	    while (tokType !== _eof) {
	      var stmt = parseStatement(true);
	      node.body.push(stmt);
	      if (first && isUseStrict(stmt)) setStrict(true);
	      first = false;
	    }

	    lastStart = tokStart;
	    lastEnd = tokEnd;
	    lastEndLoc = tokEndLoc;
	    return finishNode(node, "Program");
	  }

	  var loopLabel = {kind: "loop"}, switchLabel = {kind: "switch"};

	  // Parse a single statement.
	  //
	  // If expecting a statement and finding a slash operator, parse a
	  // regular expression literal. This is to handle cases like
	  // `if (foo) /blah/.exec(foo);`, where looking at the previous token
	  // does not help.

	  function parseStatement(topLevel) {
	    if (tokType === _slash || tokType === _assign && tokVal == "/=")
	      readToken(true);

	    var starttype = tokType, node = startNode();

	    // Most types of statements are recognized by the keyword they
	    // start with. Many are trivial to parse, some require a bit of
	    // complexity.

	    switch (starttype) {
	    case _break: case _continue: return parseBreakContinueStatement(node, starttype.keyword);
	    case _debugger: return parseDebuggerStatement(node);
	    case _do: return parseDoStatement(node);
	    case _for: return parseForStatement(node);
	    case _function: return parseFunctionStatement(node);
	    case _class: return parseClass(node, true);
	    case _if: return parseIfStatement(node);
	    case _return: return parseReturnStatement(node);
	    case _switch: return parseSwitchStatement(node);
	    case _throw: return parseThrowStatement(node);
	    case _try: return parseTryStatement(node);
	    case _var: case _let: case _const: return parseVarStatement(node, starttype.keyword);
	    case _while: return parseWhileStatement(node);
	    case _with: return parseWithStatement(node);
	    case _braceL: return parseBlock(); // no point creating a function for this
	    case _semi: return parseEmptyStatement(node);
	    case _export:
	    case _import:
	      if (!topLevel && !options.allowImportExportEverywhere)
	        raise(tokStart, "'import' and 'export' may only appear at the top level");
	      return starttype === _import ? parseImport(node) : parseExport(node);

	      // If the statement does not start with a statement keyword or a
	      // brace, it's an ExpressionStatement or LabeledStatement. We
	      // simply start parsing an expression, and afterwards, if the
	      // next token is a colon and the expression was a simple
	      // Identifier node, we switch to interpreting it as a label.
	    default:
	      var maybeName = tokVal, expr = parseExpression();
	      if (starttype === _name && expr.type === "Identifier" && eat(_colon))
	        return parseLabeledStatement(node, maybeName, expr);
	      else return parseExpressionStatement(node, expr);
	    }
	  }

	  function parseBreakContinueStatement(node, keyword) {
	    var isBreak = keyword == "break";
	    next();
	    if (eat(_semi) || canInsertSemicolon()) node.label = null;
	    else if (tokType !== _name) unexpected();
	    else {
	      node.label = parseIdent();
	      semicolon();
	    }

	    // Verify that there is an actual destination to break or
	    // continue to.
	    for (var i = 0; i < labels.length; ++i) {
	      var lab = labels[i];
	      if (node.label == null || lab.name === node.label.name) {
	        if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	        if (node.label && isBreak) break;
	      }
	    }
	    if (i === labels.length) raise(node.start, "Unsyntactic " + keyword);
	    return finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	  }

	  function parseDebuggerStatement(node) {
	    next();
	    semicolon();
	    return finishNode(node, "DebuggerStatement");
	  }

	  function parseDoStatement(node) {
	    next();
	    labels.push(loopLabel);
	    node.body = parseStatement();
	    labels.pop();
	    expect(_while);
	    node.test = parseParenExpression();
	    if (options.ecmaVersion >= 6)
	      eat(_semi);
	    else
	      semicolon();
	    return finishNode(node, "DoWhileStatement");
	  }

	  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	  // loop is non-trivial. Basically, we have to parse the init `var`
	  // statement or expression, disallowing the `in` operator (see
	  // the second parameter to `parseExpression`), and then check
	  // whether the next token is `in` or `of`. When there is no init
	  // part (semicolon immediately after the opening parenthesis), it
	  // is a regular `for` loop.

	  function parseForStatement(node) {
	    next();
	    labels.push(loopLabel);
	    expect(_parenL);
	    if (tokType === _semi) return parseFor(node, null);
	    if (tokType === _var || tokType === _let) {
	      var init = startNode(), varKind = tokType.keyword, isLet = tokType === _let;
	      next();
	      parseVar(init, true, varKind);
	      finishNode(init, "VariableDeclaration");
	      if ((tokType === _in || (options.ecmaVersion >= 6 && tokType === _name && tokVal === "of")) && init.declarations.length === 1 &&
	          !(isLet && init.declarations[0].init))
	        return parseForIn(node, init);
	      return parseFor(node, init);
	    }
	    var init = parseExpression(false, true);
	    if (tokType === _in || (options.ecmaVersion >= 6 && tokType === _name && tokVal === "of")) {
	      checkLVal(init);
	      return parseForIn(node, init);
	    }
	    return parseFor(node, init);
	  }

	  function parseFunctionStatement(node) {
	    next();
	    return parseFunction(node, true);
	  }

	  function parseIfStatement(node) {
	    next();
	    node.test = parseParenExpression();
	    node.consequent = parseStatement();
	    node.alternate = eat(_else) ? parseStatement() : null;
	    return finishNode(node, "IfStatement");
	  }

	  function parseReturnStatement(node) {
	    if (!inFunction && !options.allowReturnOutsideFunction)
	      raise(tokStart, "'return' outside of function");
	    next();

	    // In `return` (and `break`/`continue`), the keywords with
	    // optional arguments, we eagerly look for a semicolon or the
	    // possibility to insert one.

	    if (eat(_semi) || canInsertSemicolon()) node.argument = null;
	    else { node.argument = parseExpression(); semicolon(); }
	    return finishNode(node, "ReturnStatement");
	  }

	  function parseSwitchStatement(node) {
	    next();
	    node.discriminant = parseParenExpression();
	    node.cases = [];
	    expect(_braceL);
	    labels.push(switchLabel);

	    // Statements under must be grouped (by label) in SwitchCase
	    // nodes. `cur` is used to keep the node that we are currently
	    // adding statements to.

	    for (var cur, sawDefault; tokType != _braceR;) {
	      if (tokType === _case || tokType === _default) {
	        var isCase = tokType === _case;
	        if (cur) finishNode(cur, "SwitchCase");
	        node.cases.push(cur = startNode());
	        cur.consequent = [];
	        next();
	        if (isCase) cur.test = parseExpression();
	        else {
	          if (sawDefault) raise(lastStart, "Multiple default clauses"); sawDefault = true;
	          cur.test = null;
	        }
	        expect(_colon);
	      } else {
	        if (!cur) unexpected();
	        cur.consequent.push(parseStatement());
	      }
	    }
	    if (cur) finishNode(cur, "SwitchCase");
	    next(); // Closing brace
	    labels.pop();
	    return finishNode(node, "SwitchStatement");
	  }

	  function parseThrowStatement(node) {
	    next();
	    if (newline.test(input.slice(lastEnd, tokStart)))
	      raise(lastEnd, "Illegal newline after throw");
	    node.argument = parseExpression();
	    semicolon();
	    return finishNode(node, "ThrowStatement");
	  }

	  function parseTryStatement(node) {
	    next();
	    node.block = parseBlock();
	    node.handler = null;
	    if (tokType === _catch) {
	      var clause = startNode();
	      next();
	      expect(_parenL);
	      clause.param = parseIdent();
	      if (strict && isStrictBadIdWord(clause.param.name))
	        raise(clause.param.start, "Binding " + clause.param.name + " in strict mode");
	      expect(_parenR);
	      clause.guard = null;
	      clause.body = parseBlock();
	      node.handler = finishNode(clause, "CatchClause");
	    }
	    node.guardedHandlers = empty;
	    node.finalizer = eat(_finally) ? parseBlock() : null;
	    if (!node.handler && !node.finalizer)
	      raise(node.start, "Missing catch or finally clause");
	    return finishNode(node, "TryStatement");
	  }

	  function parseVarStatement(node, kind) {
	    next();
	    parseVar(node, false, kind);
	    semicolon();
	    return finishNode(node, "VariableDeclaration");
	  }

	  function parseWhileStatement(node) {
	    next();
	    node.test = parseParenExpression();
	    labels.push(loopLabel);
	    node.body = parseStatement();
	    labels.pop();
	    return finishNode(node, "WhileStatement");
	  }

	  function parseWithStatement(node) {
	    if (strict) raise(tokStart, "'with' in strict mode");
	    next();
	    node.object = parseParenExpression();
	    node.body = parseStatement();
	    return finishNode(node, "WithStatement");
	  }

	  function parseEmptyStatement(node) {
	    next();
	    return finishNode(node, "EmptyStatement");
	  }

	  function parseLabeledStatement(node, maybeName, expr) {
	    for (var i = 0; i < labels.length; ++i)
	      if (labels[i].name === maybeName) raise(expr.start, "Label '" + maybeName + "' is already declared");
	    var kind = tokType.isLoop ? "loop" : tokType === _switch ? "switch" : null;
	    labels.push({name: maybeName, kind: kind});
	    node.body = parseStatement();
	    labels.pop();
	    node.label = expr;
	    return finishNode(node, "LabeledStatement");
	  }

	  function parseExpressionStatement(node, expr) {
	    node.expression = expr;
	    semicolon();
	    return finishNode(node, "ExpressionStatement");
	  }

	  // Used for constructs like `switch` and `if` that insist on
	  // parentheses around their expression.

	  function parseParenExpression() {
	    expect(_parenL);
	    var val = parseExpression();
	    expect(_parenR);
	    return val;
	  }

	  // Parse a semicolon-enclosed block of statements, handling `"use
	  // strict"` declarations when `allowStrict` is true (used for
	  // function bodies).

	  function parseBlock(allowStrict) {
	    var node = startNode(), first = true, oldStrict;
	    node.body = [];
	    expect(_braceL);
	    while (!eat(_braceR)) {
	      var stmt = parseStatement();
	      node.body.push(stmt);
	      if (first && allowStrict && isUseStrict(stmt)) {
	        oldStrict = strict;
	        setStrict(strict = true);
	      }
	      first = false;
	    }
	    if (oldStrict === false) setStrict(false);
	    return finishNode(node, "BlockStatement");
	  }

	  // Parse a regular `for` loop. The disambiguation code in
	  // `parseStatement` will already have parsed the init statement or
	  // expression.

	  function parseFor(node, init) {
	    node.init = init;
	    expect(_semi);
	    node.test = tokType === _semi ? null : parseExpression();
	    expect(_semi);
	    node.update = tokType === _parenR ? null : parseExpression();
	    expect(_parenR);
	    node.body = parseStatement();
	    labels.pop();
	    return finishNode(node, "ForStatement");
	  }

	  // Parse a `for`/`in` and `for`/`of` loop, which are almost
	  // same from parser's perspective.

	  function parseForIn(node, init) {
	    var type = tokType === _in ? "ForInStatement" : "ForOfStatement";
	    next();
	    node.left = init;
	    node.right = parseExpression();
	    expect(_parenR);
	    node.body = parseStatement();
	    labels.pop();
	    return finishNode(node, type);
	  }

	  // Parse a list of variable declarations.

	  function parseVar(node, noIn, kind) {
	    node.declarations = [];
	    node.kind = kind;
	    for (;;) {
	      var decl = startNode();
	      decl.id = options.ecmaVersion >= 6 ? toAssignable(parseExprAtom()) : parseIdent();
	      checkLVal(decl.id, true);
	      decl.init = eat(_eq) ? parseExpression(true, noIn) : (kind === _const.keyword ? unexpected() : null);
	      node.declarations.push(finishNode(decl, "VariableDeclarator"));
	      if (!eat(_comma)) break;
	    }
	    return node;
	  }

	  // ### Expression parsing

	  // These nest, from the most general expression type at the top to
	  // 'atomic', nondivisible expression types at the bottom. Most of
	  // the functions will simply let the function(s) below them parse,
	  // and, *if* the syntactic construct they handle is present, wrap
	  // the AST node that the inner parser gave them in another node.

	  // Parse a full expression. The arguments are used to forbid comma
	  // sequences (in argument lists, array literals, or object literals)
	  // or the `in` operator (in for loops initalization expressions).

	  function parseExpression(noComma, noIn) {
	    var start = storeCurrentPos();
	    var expr = parseMaybeAssign(noIn);
	    if (!noComma && tokType === _comma) {
	      var node = startNodeAt(start);
	      node.expressions = [expr];
	      while (eat(_comma)) node.expressions.push(parseMaybeAssign(noIn));
	      return finishNode(node, "SequenceExpression");
	    }
	    return expr;
	  }

	  // Parse an assignment expression. This includes applications of
	  // operators like `+=`.

	  function parseMaybeAssign(noIn) {
	    var start = storeCurrentPos();
	    var left = parseMaybeConditional(noIn);
	    if (tokType.isAssign) {
	      var node = startNodeAt(start);
	      node.operator = tokVal;
	      node.left = tokType === _eq ? toAssignable(left) : left;
	      checkLVal(left);
	      next();
	      node.right = parseMaybeAssign(noIn);
	      return finishNode(node, "AssignmentExpression");
	    }
	    return left;
	  }

	  // Parse a ternary conditional (`?:`) operator.

	  function parseMaybeConditional(noIn) {
	    var start = storeCurrentPos();
	    var expr = parseExprOps(noIn);
	    if (eat(_question)) {
	      var node = startNodeAt(start);
	      node.test = expr;
	      node.consequent = parseExpression(true);
	      expect(_colon);
	      node.alternate = parseExpression(true, noIn);
	      return finishNode(node, "ConditionalExpression");
	    }
	    return expr;
	  }

	  // Start the precedence parser.

	  function parseExprOps(noIn) {
	    var start = storeCurrentPos();
	    return parseExprOp(parseMaybeUnary(), start, -1, noIn);
	  }

	  // Parse binary operators with the operator precedence parsing
	  // algorithm. `left` is the left-hand side of the operator.
	  // `minPrec` provides context that allows the function to stop and
	  // defer further parser to one of its callers when it encounters an
	  // operator that has a lower precedence than the set it is parsing.

	  function parseExprOp(left, leftStart, minPrec, noIn) {
	    var prec = tokType.binop;
	    if (prec != null && (!noIn || tokType !== _in)) {
	      if (prec > minPrec) {
	        var node = startNodeAt(leftStart);
	        node.left = left;
	        node.operator = tokVal;
	        var op = tokType;
	        next();
	        var start = storeCurrentPos();
	        node.right = parseExprOp(parseMaybeUnary(), start, prec, noIn);
	        finishNode(node, (op === _logicalOR || op === _logicalAND) ? "LogicalExpression" : "BinaryExpression");
	        return parseExprOp(node, leftStart, minPrec, noIn);
	      }
	    }
	    return left;
	  }

	  // Parse unary operators, both prefix and postfix.

	  function parseMaybeUnary() {
	    if (tokType.prefix) {
	      var node = startNode(), update = tokType.isUpdate, nodeType;
	      if (tokType === _ellipsis) {
	        nodeType = "SpreadElement";
	      } else {
	        nodeType = update ? "UpdateExpression" : "UnaryExpression";
	        node.operator = tokVal;
	        node.prefix = true;
	      }
	      tokRegexpAllowed = true;
	      next();
	      node.argument = parseMaybeUnary();
	      if (update) checkLVal(node.argument);
	      else if (strict && node.operator === "delete" &&
	               node.argument.type === "Identifier")
	        raise(node.start, "Deleting local variable in strict mode");
	      return finishNode(node, nodeType);
	    }
	    var start = storeCurrentPos();
	    var expr = parseExprSubscripts();
	    while (tokType.postfix && !canInsertSemicolon()) {
	      var node = startNodeAt(start);
	      node.operator = tokVal;
	      node.prefix = false;
	      node.argument = expr;
	      checkLVal(expr);
	      next();
	      expr = finishNode(node, "UpdateExpression");
	    }
	    return expr;
	  }

	  // Parse call, dot, and `[]`-subscript expressions.

	  function parseExprSubscripts() {
	    var start = storeCurrentPos();
	    return parseSubscripts(parseExprAtom(), start);
	  }

	  function parseSubscripts(base, start, noCalls) {
	    if (eat(_dot)) {
	      var node = startNodeAt(start);
	      node.object = base;
	      node.property = parseIdent(true);
	      node.computed = false;
	      return parseSubscripts(finishNode(node, "MemberExpression"), start, noCalls);
	    } else if (eat(_bracketL)) {
	      var node = startNodeAt(start);
	      node.object = base;
	      node.property = parseExpression();
	      node.computed = true;
	      expect(_bracketR);
	      return parseSubscripts(finishNode(node, "MemberExpression"), start, noCalls);
	    } else if (!noCalls && eat(_parenL)) {
	      var node = startNodeAt(start);
	      node.callee = base;
	      node.arguments = parseExprList(_parenR, false);
	      return parseSubscripts(finishNode(node, "CallExpression"), start, noCalls);
	    } else if (tokType === _template) {
	      var node = startNodeAt(start);
	      node.tag = base;
	      node.quasi = parseTemplate();
	      return parseSubscripts(finishNode(node, "TaggedTemplateExpression"), start, noCalls);
	    } return base;
	  }

	  // Parse an atomic expression — either a single token that is an
	  // expression, an expression started by a keyword like `function` or
	  // `new`, or an expression wrapped in punctuation like `()`, `[]`,
	  // or `{}`.

	  function parseExprAtom() {
	    switch (tokType) {
	    case _this:
	      var node = startNode();
	      next();
	      return finishNode(node, "ThisExpression");

	    case _yield:
	      if (inGenerator) return parseYield();

	    case _name:
	      var start = storeCurrentPos();
	      var id = parseIdent(tokType !== _name);
	      if (eat(_arrow)) {
	        return parseArrowExpression(startNodeAt(start), [id]);
	      }
	      return id;

	    case _regexp:
	      var node = startNode();
	      node.regex = {pattern: tokVal.pattern, flags: tokVal.flags};
	      node.value = tokVal.value;
	      node.raw = input.slice(tokStart, tokEnd);
	      next();
	      return finishNode(node, "Literal");

	    case _num: case _string:
	      var node = startNode();
	      node.value = tokVal;
	      node.raw = input.slice(tokStart, tokEnd);
	      next();
	      return finishNode(node, "Literal");

	    case _null: case _true: case _false:
	      var node = startNode();
	      node.value = tokType.atomValue;
	      node.raw = tokType.keyword;
	      next();
	      return finishNode(node, "Literal");

	    case _parenL:
	      var start = storeCurrentPos();
	      var val, exprList;
	      next();
	      // check whether this is generator comprehension or regular expression
	      if (options.ecmaVersion >= 7 && tokType === _for) {
	        val = parseComprehension(startNodeAt(start), true);
	      } else {
	        var oldParenL = ++metParenL;
	        if (tokType !== _parenR) {
	          val = parseExpression();
	          exprList = val.type === "SequenceExpression" ? val.expressions : [val];
	        } else {
	          exprList = [];
	        }
	        expect(_parenR);
	        // if '=>' follows '(...)', convert contents to arguments
	        if (metParenL === oldParenL && eat(_arrow)) {
	          val = parseArrowExpression(startNodeAt(start), exprList);
	        } else {
	          // forbid '()' before everything but '=>'
	          if (!val) unexpected(lastStart);
	          // forbid '...' in sequence expressions
	          if (options.ecmaVersion >= 6) {
	            for (var i = 0; i < exprList.length; i++) {
	              if (exprList[i].type === "SpreadElement") unexpected();
	            }
	          }

	          if (options.preserveParens) {
	            var par = startNodeAt(start);
	            par.expression = val;
	            val = finishNode(par, "ParenthesizedExpression");
	          }
	        }
	      }
	      return val;

	    case _bracketL:
	      var node = startNode();
	      next();
	      // check whether this is array comprehension or regular array
	      if (options.ecmaVersion >= 7 && tokType === _for) {
	        return parseComprehension(node, false);
	      }
	      node.elements = parseExprList(_bracketR, true, true);
	      return finishNode(node, "ArrayExpression");

	    case _braceL:
	      return parseObj();

	    case _function:
	      var node = startNode();
	      next();
	      return parseFunction(node, false);

	    case _class:
	      return parseClass(startNode(), false);

	    case _new:
	      return parseNew();

	    case _template:
	      return parseTemplate();

	    default:
	      unexpected();
	    }
	  }

	  // New's precedence is slightly tricky. It must allow its argument
	  // to be a `[]` or dot subscript expression, but not a call — at
	  // least, not without wrapping it in parentheses. Thus, it uses the

	  function parseNew() {
	    var node = startNode();
	    next();
	    var start = storeCurrentPos();
	    node.callee = parseSubscripts(parseExprAtom(), start, true);
	    if (eat(_parenL)) node.arguments = parseExprList(_parenR, false);
	    else node.arguments = empty;
	    return finishNode(node, "NewExpression");
	  }

	  // Parse template expression.

	  function parseTemplateElement() {
	    var elem = startNodeAt(options.locations ? [tokStart + 1, tokStartLoc.offset(1)] : tokStart + 1);
	    elem.value = tokVal;
	    elem.tail = input.charCodeAt(tokEnd - 1) !== 123; // '{'
	    next();
	    var endOff = elem.tail ? 1 : 2;
	    return finishNodeAt(elem, "TemplateElement", options.locations ? [lastEnd - endOff, lastEndLoc.offset(-endOff)] : lastEnd - endOff);
	  }

	  function parseTemplate() {
	    var node = startNode();
	    node.expressions = [];
	    var curElt = parseTemplateElement();
	    node.quasis = [curElt];
	    while (!curElt.tail) {
	      node.expressions.push(parseExpression());
	      if (tokType !== _templateContinued) unexpected();
	      node.quasis.push(curElt = parseTemplateElement());
	    }
	    return finishNode(node, "TemplateLiteral");
	  }

	  // Parse an object literal.

	  function parseObj() {
	    var node = startNode(), first = true, propHash = {};
	    node.properties = [];
	    next();
	    while (!eat(_braceR)) {
	      if (!first) {
	        expect(_comma);
	        if (options.allowTrailingCommas && eat(_braceR)) break;
	      } else first = false;

	      var prop = startNode(), isGenerator;
	      if (options.ecmaVersion >= 6) {
	        prop.method = false;
	        prop.shorthand = false;
	        isGenerator = eat(_star);
	      }
	      parsePropertyName(prop);
	      if (eat(_colon)) {
	        prop.value = parseExpression(true);
	        prop.kind = "init";
	      } else if (options.ecmaVersion >= 6 && tokType === _parenL) {
	        prop.kind = "init";
	        prop.method = true;
	        prop.value = parseMethod(isGenerator);
	      } else if (options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" &&
	                 (prop.key.name === "get" || prop.key.name === "set")) {
	        if (isGenerator) unexpected();
	        prop.kind = prop.key.name;
	        parsePropertyName(prop);
	        prop.value = parseMethod(false);
	      } else if (options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
	        prop.kind = "init";
	        prop.value = prop.key;
	        prop.shorthand = true;
	      } else unexpected();

	      checkPropClash(prop, propHash);
	      node.properties.push(finishNode(prop, "Property"));
	    }
	    return finishNode(node, "ObjectExpression");
	  }

	  function parsePropertyName(prop) {
	    if (options.ecmaVersion >= 6) {
	      if (eat(_bracketL)) {
	        prop.computed = true;
	        prop.key = parseExpression();
	        expect(_bracketR);
	        return;
	      } else {
	        prop.computed = false;
	      }
	    }
	    prop.key = (tokType === _num || tokType === _string) ? parseExprAtom() : parseIdent(true);
	  }

	  // Initialize empty function node.

	  function initFunction(node) {
	    node.id = null;
	    node.params = [];
	    if (options.ecmaVersion >= 6) {
	      node.defaults = [];
	      node.rest = null;
	      node.generator = false;
	    }
	  }

	  // Parse a function declaration or literal (depending on the
	  // `isStatement` parameter).

	  function parseFunction(node, isStatement, allowExpressionBody) {
	    initFunction(node);
	    if (options.ecmaVersion >= 6) {
	      node.generator = eat(_star);
	    }
	    if (isStatement || tokType === _name) {
	      node.id = parseIdent();
	    }
	    parseFunctionParams(node);
	    parseFunctionBody(node, allowExpressionBody);
	    return finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	  }

	  // Parse object or class method.

	  function parseMethod(isGenerator) {
	    var node = startNode();
	    initFunction(node);
	    parseFunctionParams(node);
	    var allowExpressionBody;
	    if (options.ecmaVersion >= 6) {
	      node.generator = isGenerator;
	      allowExpressionBody = true;
	    } else {
	      allowExpressionBody = false;
	    }
	    parseFunctionBody(node, allowExpressionBody);
	    return finishNode(node, "FunctionExpression");
	  }

	  // Parse arrow function expression with given parameters.

	  function parseArrowExpression(node, params) {
	    initFunction(node);

	    var defaults = node.defaults, hasDefaults = false;

	    for (var i = 0, lastI = params.length - 1; i <= lastI; i++) {
	      var param = params[i];

	      if (param.type === "AssignmentExpression" && param.operator === "=") {
	        hasDefaults = true;
	        params[i] = param.left;
	        defaults.push(param.right);
	      } else {
	        toAssignable(param, i === lastI, true);
	        defaults.push(null);
	        if (param.type === "SpreadElement") {
	          params.length--;
	          node.rest = param.argument;
	          break;
	        }
	      }
	    }

	    node.params = params;
	    if (!hasDefaults) node.defaults = [];

	    parseFunctionBody(node, true);
	    return finishNode(node, "ArrowFunctionExpression");
	  }

	  // Parse function parameters.

	  function parseFunctionParams(node) {
	    var defaults = [], hasDefaults = false;

	    expect(_parenL);
	    for (;;) {
	      if (eat(_parenR)) {
	        break;
	      } else if (options.ecmaVersion >= 6 && eat(_ellipsis)) {
	        node.rest = toAssignable(parseExprAtom(), false, true);
	        checkSpreadAssign(node.rest);
	        expect(_parenR);
	        defaults.push(null);
	        break;
	      } else {
	        node.params.push(options.ecmaVersion >= 6 ? toAssignable(parseExprAtom(), false, true) : parseIdent());
	        if (options.ecmaVersion >= 6) {
	          if (eat(_eq)) {
	            hasDefaults = true;
	            defaults.push(parseExpression(true));
	          } else {
	            defaults.push(null);
	          }
	        }
	        if (!eat(_comma)) {
	          expect(_parenR);
	          break;
	        }
	      }
	    }

	    if (hasDefaults) node.defaults = defaults;
	  }

	  // Parse function body and check parameters.

	  function parseFunctionBody(node, allowExpression) {
	    var isExpression = allowExpression && tokType !== _braceL;

	    if (isExpression) {
	      node.body = parseExpression(true);
	      node.expression = true;
	    } else {
	      // Start a new scope with regard to labels and the `inFunction`
	      // flag (restore them to their old value afterwards).
	      var oldInFunc = inFunction, oldInGen = inGenerator, oldLabels = labels;
	      inFunction = true; inGenerator = node.generator; labels = [];
	      node.body = parseBlock(true);
	      node.expression = false;
	      inFunction = oldInFunc; inGenerator = oldInGen; labels = oldLabels;
	    }

	    // If this is a strict mode function, verify that argument names
	    // are not repeated, and it does not try to bind the words `eval`
	    // or `arguments`.
	    if (strict || !isExpression && node.body.body.length && isUseStrict(node.body.body[0])) {
	      var nameHash = {};
	      if (node.id)
	        checkFunctionParam(node.id, {});
	      for (var i = 0; i < node.params.length; i++)
	        checkFunctionParam(node.params[i], nameHash);
	      if (node.rest)
	        checkFunctionParam(node.rest, nameHash);
	    }
	  }

	  // Parse a class declaration or literal (depending on the
	  // `isStatement` parameter).

	  function parseClass(node, isStatement) {
	    next();
	    node.id = tokType === _name ? parseIdent() : isStatement ? unexpected() : null;
	    node.superClass = eat(_extends) ? parseExpression() : null;
	    var classBody = startNode();
	    classBody.body = [];
	    expect(_braceL);
	    while (!eat(_braceR)) {
	      var method = startNode();
	      if (tokType === _name && tokVal === "static") {
	        next();
	        method['static'] = true;
	      } else {
	        method['static'] = false;
	      }
	      var isGenerator = eat(_star);
	      parsePropertyName(method);
	      if (tokType !== _parenL && !method.computed && method.key.type === "Identifier" &&
	          (method.key.name === "get" || method.key.name === "set")) {
	        if (isGenerator) unexpected();
	        method.kind = method.key.name;
	        parsePropertyName(method);
	      } else {
	        method.kind = "";
	      }
	      method.value = parseMethod(isGenerator);
	      classBody.body.push(finishNode(method, "MethodDefinition"));
	      eat(_semi);
	    }
	    node.body = finishNode(classBody, "ClassBody");
	    return finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	  }

	  // Parses a comma-separated list of expressions, and returns them as
	  // an array. `close` is the token type that ends the list, and
	  // `allowEmpty` can be turned on to allow subsequent commas with
	  // nothing in between them to be parsed as `null` (which is needed
	  // for array literals).

	  function parseExprList(close, allowTrailingComma, allowEmpty) {
	    var elts = [], first = true;
	    while (!eat(close)) {
	      if (!first) {
	        expect(_comma);
	        if (allowTrailingComma && options.allowTrailingCommas && eat(close)) break;
	      } else first = false;

	      if (allowEmpty && tokType === _comma) elts.push(null);
	      else elts.push(parseExpression(true));
	    }
	    return elts;
	  }

	  // Parse the next token as an identifier. If `liberal` is true (used
	  // when parsing properties), it will also convert keywords into
	  // identifiers.

	  function parseIdent(liberal) {
	    var node = startNode();
	    if (liberal && options.forbidReserved == "everywhere") liberal = false;
	    if (tokType === _name) {
	      if (!liberal &&
	          (options.forbidReserved &&
	           (options.ecmaVersion === 3 ? isReservedWord3 : isReservedWord5)(tokVal) ||
	           strict && isStrictReservedWord(tokVal)) &&
	          input.slice(tokStart, tokEnd).indexOf("\\") == -1)
	        raise(tokStart, "The keyword '" + tokVal + "' is reserved");
	      node.name = tokVal;
	    } else if (liberal && tokType.keyword) {
	      node.name = tokType.keyword;
	    } else {
	      unexpected();
	    }
	    tokRegexpAllowed = false;
	    next();
	    return finishNode(node, "Identifier");
	  }

	  // Parses module export declaration.

	  function parseExport(node) {
	    next();
	    // export var|const|let|function|class ...;
	    if (tokType === _var || tokType === _const || tokType === _let || tokType === _function || tokType === _class) {
	      node.declaration = parseStatement();
	      node['default'] = false;
	      node.specifiers = null;
	      node.source = null;
	    } else
	    // export default ...;
	    if (eat(_default)) {
	      node.declaration = parseExpression(true);
	      node['default'] = true;
	      node.specifiers = null;
	      node.source = null;
	      semicolon();
	    } else {
	      // export * from '...';
	      // export { x, y as z } [from '...'];
	      var isBatch = tokType === _star;
	      node.declaration = null;
	      node['default'] = false;
	      node.specifiers = parseExportSpecifiers();
	      if (tokType === _name && tokVal === "from") {
	        next();
	        node.source = tokType === _string ? parseExprAtom() : unexpected();
	      } else {
	        if (isBatch) unexpected();
	        node.source = null;
	      }
	      semicolon();
	    }
	    return finishNode(node, "ExportDeclaration");
	  }

	  // Parses a comma-separated list of module exports.

	  function parseExportSpecifiers() {
	    var nodes = [], first = true;
	    if (tokType === _star) {
	      // export * from '...'
	      var node = startNode();
	      next();
	      nodes.push(finishNode(node, "ExportBatchSpecifier"));
	    } else {
	      // export { x, y as z } [from '...']
	      expect(_braceL);
	      while (!eat(_braceR)) {
	        if (!first) {
	          expect(_comma);
	          if (options.allowTrailingCommas && eat(_braceR)) break;
	        } else first = false;

	        var node = startNode();
	        node.id = parseIdent(tokType === _default);
	        if (tokType === _name && tokVal === "as") {
	          next();
	          node.name = parseIdent(true);
	        } else {
	          node.name = null;
	        }
	        nodes.push(finishNode(node, "ExportSpecifier"));
	      }
	    }
	    return nodes;
	  }

	  // Parses import declaration.

	  function parseImport(node) {
	    next();
	    // import '...';
	    if (tokType === _string) {
	      node.specifiers = [];
	      node.source = parseExprAtom();
	      node.kind = "";
	    } else {
	      node.specifiers = parseImportSpecifiers();
	      if (tokType !== _name || tokVal !== "from") unexpected();
	      next();
	      node.source = tokType === _string ? parseExprAtom() : unexpected();
	    }
	    semicolon();
	    return finishNode(node, "ImportDeclaration");
	  }

	  // Parses a comma-separated list of module imports.

	  function parseImportSpecifiers() {
	    var nodes = [], first = true;
	    if (tokType === _name) {
	      // import defaultObj, { x, y as z } from '...'
	      var node = startNode();
	      node.id = parseIdent();
	      checkLVal(node.id, true);
	      node.name = null;
	      node['default'] = true;
	      nodes.push(finishNode(node, "ImportSpecifier"));
	      if (!eat(_comma)) return nodes;
	    }
	    if (tokType === _star) {
	      var node = startNode();
	      next();
	      if (tokType !== _name || tokVal !== "as") unexpected();
	      next();
	      node.name = parseIdent();
	      checkLVal(node.name, true);
	      nodes.push(finishNode(node, "ImportBatchSpecifier"));
	      return nodes;
	    }
	    expect(_braceL);
	    while (!eat(_braceR)) {
	      if (!first) {
	        expect(_comma);
	        if (options.allowTrailingCommas && eat(_braceR)) break;
	      } else first = false;

	      var node = startNode();
	      node.id = parseIdent(true);
	      if (tokType === _name && tokVal === "as") {
	        next();
	        node.name = parseIdent();
	      } else {
	        node.name = null;
	      }
	      checkLVal(node.name || node.id, true);
	      node['default'] = false;
	      nodes.push(finishNode(node, "ImportSpecifier"));
	    }
	    return nodes;
	  }

	  // Parses yield expression inside generator.

	  function parseYield() {
	    var node = startNode();
	    next();
	    if (eat(_semi) || canInsertSemicolon()) {
	      node.delegate = false;
	      node.argument = null;
	    } else {
	      node.delegate = eat(_star);
	      node.argument = parseExpression(true);
	    }
	    return finishNode(node, "YieldExpression");
	  }

	  // Parses array and generator comprehensions.

	  function parseComprehension(node, isGenerator) {
	    node.blocks = [];
	    while (tokType === _for) {
	      var block = startNode();
	      next();
	      expect(_parenL);
	      block.left = toAssignable(parseExprAtom());
	      checkLVal(block.left, true);
	      if (tokType !== _name || tokVal !== "of") unexpected();
	      next();
	      // `of` property is here for compatibility with Esprima's AST
	      // which also supports deprecated [for (... in ...) expr]
	      block.of = true;
	      block.right = parseExpression();
	      expect(_parenR);
	      node.blocks.push(finishNode(block, "ComprehensionBlock"));
	    }
	    node.filter = eat(_if) ? parseParenExpression() : null;
	    node.body = parseExpression();
	    expect(isGenerator ? _parenR : _bracketR);
	    node.generator = isGenerator;
	    return finishNode(node, "ComprehensionExpression");
	  }

	});


/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Browser Request
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//     http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	// UMD HEADER START 
	(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like enviroments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.returnExports = factory();
	  }
	}(this, function () {
	// UMD HEADER END

	var XHR = XMLHttpRequest
	if (!XHR) throw new Error('missing XMLHttpRequest')
	request.log = {
	  'trace': noop, 'debug': noop, 'info': noop, 'warn': noop, 'error': noop
	}

	var DEFAULT_TIMEOUT = 3 * 60 * 1000 // 3 minutes

	//
	// request
	//

	function request(options, callback) {
	  // The entry-point to the API: prep the options object and pass the real work to run_xhr.
	  if(typeof callback !== 'function')
	    throw new Error('Bad callback given: ' + callback)

	  if(!options)
	    throw new Error('No options given')

	  var options_onResponse = options.onResponse; // Save this for later.

	  if(typeof options === 'string')
	    options = {'uri':options};
	  else
	    options = JSON.parse(JSON.stringify(options)); // Use a duplicate for mutating.

	  options.onResponse = options_onResponse // And put it back.

	  if (options.verbose) request.log = getLogger();

	  if(options.url) {
	    options.uri = options.url;
	    delete options.url;
	  }

	  if(!options.uri && options.uri !== "")
	    throw new Error("options.uri is a required argument");

	  if(typeof options.uri != "string")
	    throw new Error("options.uri must be a string");

	  var unsupported_options = ['proxy', '_redirectsFollowed', 'maxRedirects', 'followRedirect']
	  for (var i = 0; i < unsupported_options.length; i++)
	    if(options[ unsupported_options[i] ])
	      throw new Error("options." + unsupported_options[i] + " is not supported")

	  options.callback = callback
	  options.method = options.method || 'GET';
	  options.headers = options.headers || {};
	  options.body    = options.body || null
	  options.timeout = options.timeout || request.DEFAULT_TIMEOUT

	  if(options.headers.host)
	    throw new Error("Options.headers.host is not supported");

	  if(options.json) {
	    options.headers.accept = options.headers.accept || 'application/json'
	    if(options.method !== 'GET')
	      options.headers['content-type'] = 'application/json'

	    if(typeof options.json !== 'boolean')
	      options.body = JSON.stringify(options.json)
	    else if(typeof options.body !== 'string')
	      options.body = JSON.stringify(options.body)
	  }
	  
	  //BEGIN QS Hack
	  var serialize = function(obj) {
	    var str = [];
	    for(var p in obj)
	      if (obj.hasOwnProperty(p)) {
	        str.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
	      }
	    return str.join("&");
	  }
	  
	  if(options.qs){
	    var qs = (typeof options.qs == 'string')? options.qs : serialize(options.qs);
	    if(options.uri.indexOf('?') !== -1){ //no get params
	        options.uri = options.uri+'&'+qs;
	    }else{ //existing get params
	        options.uri = options.uri+'?'+qs;
	    }
	  }
	  //END QS Hack
	  
	  //BEGIN FORM Hack
	  var multipart = function(obj) {
	    //todo: support file type (useful?)
	    var result = {};
	    result.boundry = '-------------------------------'+Math.floor(Math.random()*1000000000);
	    var lines = [];
	    for(var p in obj){
	        if (obj.hasOwnProperty(p)) {
	            lines.push(
	                '--'+result.boundry+"\n"+
	                'Content-Disposition: form-data; name="'+p+'"'+"\n"+
	                "\n"+
	                obj[p]+"\n"
	            );
	        }
	    }
	    lines.push( '--'+result.boundry+'--' );
	    result.body = lines.join('');
	    result.length = result.body.length;
	    result.type = 'multipart/form-data; boundary='+result.boundry;
	    return result;
	  }
	  
	  if(options.form){
	    if(typeof options.form == 'string') throw('form name unsupported');
	    if(options.method === 'POST'){
	        var encoding = (options.encoding || 'application/x-www-form-urlencoded').toLowerCase();
	        options.headers['content-type'] = encoding;
	        switch(encoding){
	            case 'application/x-www-form-urlencoded':
	                options.body = serialize(options.form).replace(/%20/g, "+");
	                break;
	            case 'multipart/form-data':
	                var multi = multipart(options.form);
	                //options.headers['content-length'] = multi.length;
	                options.body = multi.body;
	                options.headers['content-type'] = multi.type;
	                break;
	            default : throw new Error('unsupported encoding:'+encoding);
	        }
	    }
	  }
	  //END FORM Hack

	  // If onResponse is boolean true, call back immediately when the response is known,
	  // not when the full request is complete.
	  options.onResponse = options.onResponse || noop
	  if(options.onResponse === true) {
	    options.onResponse = callback
	    options.callback = noop
	  }

	  // XXX Browsers do not like this.
	  //if(options.body)
	  //  options.headers['content-length'] = options.body.length;

	  // HTTP basic authentication
	  if(!options.headers.authorization && options.auth)
	    options.headers.authorization = 'Basic ' + b64_enc(options.auth.username + ':' + options.auth.password);

	  return run_xhr(options)
	}

	var req_seq = 0
	function run_xhr(options) {
	  var xhr = new XHR
	    , timed_out = false
	    , is_cors = is_crossDomain(options.uri)
	    , supports_cors = ('withCredentials' in xhr)

	  req_seq += 1
	  xhr.seq_id = req_seq
	  xhr.id = req_seq + ': ' + options.method + ' ' + options.uri
	  xhr._id = xhr.id // I know I will type "_id" from habit all the time.

	  if(is_cors && !supports_cors) {
	    var cors_err = new Error('Browser does not support cross-origin request: ' + options.uri)
	    cors_err.cors = 'unsupported'
	    return options.callback(cors_err, xhr)
	  }

	  xhr.timeoutTimer = setTimeout(too_late, options.timeout)
	  function too_late() {
	    timed_out = true
	    var er = new Error('ETIMEDOUT')
	    er.code = 'ETIMEDOUT'
	    er.duration = options.timeout

	    request.log.error('Timeout', { 'id':xhr._id, 'milliseconds':options.timeout })
	    return options.callback(er, xhr)
	  }

	  // Some states can be skipped over, so remember what is still incomplete.
	  var did = {'response':false, 'loading':false, 'end':false}

	  xhr.onreadystatechange = on_state_change
	  xhr.open(options.method, options.uri, true) // asynchronous
	  if(is_cors)
	    xhr.withCredentials = !! options.withCredentials
	  xhr.send(options.body)
	  return xhr

	  function on_state_change(event) {
	    if(timed_out)
	      return request.log.debug('Ignoring timed out state change', {'state':xhr.readyState, 'id':xhr.id})

	    request.log.debug('State change', {'state':xhr.readyState, 'id':xhr.id, 'timed_out':timed_out})

	    if(xhr.readyState === XHR.OPENED) {
	      request.log.debug('Request started', {'id':xhr.id})
	      for (var key in options.headers)
	        xhr.setRequestHeader(key, options.headers[key])
	    }

	    else if(xhr.readyState === XHR.HEADERS_RECEIVED)
	      on_response()

	    else if(xhr.readyState === XHR.LOADING) {
	      on_response()
	      on_loading()
	    }

	    else if(xhr.readyState === XHR.DONE) {
	      on_response()
	      on_loading()
	      on_end()
	    }
	  }

	  function on_response() {
	    if(did.response)
	      return

	    did.response = true
	    request.log.debug('Got response', {'id':xhr.id, 'status':xhr.status})
	    clearTimeout(xhr.timeoutTimer)
	    xhr.statusCode = xhr.status // Node request compatibility

	    // Detect failed CORS requests.
	    if(is_cors && xhr.statusCode == 0) {
	      var cors_err = new Error('CORS request rejected: ' + options.uri)
	      cors_err.cors = 'rejected'

	      // Do not process this request further.
	      did.loading = true
	      did.end = true

	      return options.callback(cors_err, xhr)
	    }

	    options.onResponse(null, xhr)
	  }

	  function on_loading() {
	    if(did.loading)
	      return

	    did.loading = true
	    request.log.debug('Response body loading', {'id':xhr.id})
	    // TODO: Maybe simulate "data" events by watching xhr.responseText
	  }

	  function on_end() {
	    if(did.end)
	      return

	    did.end = true
	    request.log.debug('Request done', {'id':xhr.id})

	    xhr.body = xhr.responseText
	    if(options.json) {
	      try        { xhr.body = JSON.parse(xhr.responseText) }
	      catch (er) { return options.callback(er, xhr)        }
	    }

	    options.callback(null, xhr, xhr.body)
	  }

	} // request

	request.withCredentials = false;
	request.DEFAULT_TIMEOUT = DEFAULT_TIMEOUT;

	//
	// defaults
	//

	request.defaults = function(options, requester) {
	  var def = function (method) {
	    var d = function (params, callback) {
	      if(typeof params === 'string')
	        params = {'uri': params};
	      else {
	        params = JSON.parse(JSON.stringify(params));
	      }
	      for (var i in options) {
	        if (params[i] === undefined) params[i] = options[i]
	      }
	      return method(params, callback)
	    }
	    return d
	  }
	  var de = def(request)
	  de.get = def(request.get)
	  de.post = def(request.post)
	  de.put = def(request.put)
	  de.head = def(request.head)
	  return de
	}

	//
	// HTTP method shortcuts
	//

	var shortcuts = [ 'get', 'put', 'post', 'head' ];
	shortcuts.forEach(function(shortcut) {
	  var method = shortcut.toUpperCase();
	  var func   = shortcut.toLowerCase();

	  request[func] = function(opts) {
	    if(typeof opts === 'string')
	      opts = {'method':method, 'uri':opts};
	    else {
	      opts = JSON.parse(JSON.stringify(opts));
	      opts.method = method;
	    }

	    var args = [opts].concat(Array.prototype.slice.apply(arguments, [1]));
	    return request.apply(this, args);
	  }
	})

	//
	// CouchDB shortcut
	//

	request.couch = function(options, callback) {
	  if(typeof options === 'string')
	    options = {'uri':options}

	  // Just use the request API to do JSON.
	  options.json = true
	  if(options.body)
	    options.json = options.body
	  delete options.body

	  callback = callback || noop

	  var xhr = request(options, couch_handler)
	  return xhr

	  function couch_handler(er, resp, body) {
	    if(er)
	      return callback(er, resp, body)

	    if((resp.statusCode < 200 || resp.statusCode > 299) && body.error) {
	      // The body is a Couch JSON object indicating the error.
	      er = new Error('CouchDB error: ' + (body.error.reason || body.error.error))
	      for (var key in body)
	        er[key] = body[key]
	      return callback(er, resp, body);
	    }

	    return callback(er, resp, body);
	  }
	}

	//
	// Utility
	//

	function noop() {}

	function getLogger() {
	  var logger = {}
	    , levels = ['trace', 'debug', 'info', 'warn', 'error']
	    , level, i

	  for(i = 0; i < levels.length; i++) {
	    level = levels[i]

	    logger[level] = noop
	    if(typeof console !== 'undefined' && console && console[level])
	      logger[level] = formatted(console, level)
	  }

	  return logger
	}

	function formatted(obj, method) {
	  return formatted_logger

	  function formatted_logger(str, context) {
	    if(typeof context === 'object')
	      str += ' ' + JSON.stringify(context)

	    return obj[method].call(obj, str)
	  }
	}

	// Return whether a URL is a cross-domain request.
	function is_crossDomain(url) {
	  var rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+))?)?/

	  // jQuery #8138, IE may throw an exception when accessing
	  // a field from window.location if document.domain has been set
	  var ajaxLocation
	  try { ajaxLocation = location.href }
	  catch (e) {
	    // Use the href attribute of an A element since IE will modify it given document.location
	    ajaxLocation = document.createElement( "a" );
	    ajaxLocation.href = "";
	    ajaxLocation = ajaxLocation.href;
	  }

	  var ajaxLocParts = rurl.exec(ajaxLocation.toLowerCase()) || []
	    , parts = rurl.exec(url.toLowerCase() )

	  var result = !!(
	    parts &&
	    (  parts[1] != ajaxLocParts[1]
	    || parts[2] != ajaxLocParts[2]
	    || (parts[3] || (parts[1] === "http:" ? 80 : 443)) != (ajaxLocParts[3] || (ajaxLocParts[1] === "http:" ? 80 : 443))
	    )
	  )

	  //console.debug('is_crossDomain('+url+') -> ' + result)
	  return result
	}

	// MIT License from http://phpjs.org/functions/base64_encode:358
	function b64_enc (data) {
	    // Encodes string using MIME base64 algorithm
	    var b64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0, ac = 0, enc="", tmp_arr = [];

	    if (!data) {
	        return data;
	    }

	    // assume utf8 data
	    // data = this.utf8_encode(data+'');

	    do { // pack three octets into four hexets
	        o1 = data.charCodeAt(i++);
	        o2 = data.charCodeAt(i++);
	        o3 = data.charCodeAt(i++);

	        bits = o1<<16 | o2<<8 | o3;

	        h1 = bits>>18 & 0x3f;
	        h2 = bits>>12 & 0x3f;
	        h3 = bits>>6 & 0x3f;
	        h4 = bits & 0x3f;

	        // use hexets to index into b64, and append result to encoded string
	        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
	    } while (i < data.length);

	    enc = tmp_arr.join('');

	    switch (data.length % 3) {
	        case 1:
	            enc = enc.slice(0, -2) + '==';
	        break;
	        case 2:
	            enc = enc.slice(0, -1) + '=';
	        break;
	    }

	    return enc;
	}
	    return request;
	//UMD FOOTER START
	}));
	//UMD FOOTER END


/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	//.CommonJS
	var CSSOM = {
		CSSStyleSheet: __webpack_require__(35).CSSStyleSheet,
		CSSStyleRule: __webpack_require__(34).CSSStyleRule,
		CSSMediaRule: __webpack_require__(47).CSSMediaRule,
		CSSStyleDeclaration: __webpack_require__(19).CSSStyleDeclaration,
		CSSKeyframeRule: __webpack_require__(45).CSSKeyframeRule,
		CSSKeyframesRule: __webpack_require__(46).CSSKeyframesRule
	};
	///CommonJS


	/**
	 * Produces a deep copy of stylesheet — the instance variables of stylesheet are copied recursively.
	 * @param {CSSStyleSheet|CSSOM.CSSStyleSheet} stylesheet
	 * @nosideeffects
	 * @return {CSSOM.CSSStyleSheet}
	 */
	CSSOM.clone = function clone(stylesheet) {

		var cloned = new CSSOM.CSSStyleSheet;

		var rules = stylesheet.cssRules;
		if (!rules) {
			return cloned;
		}

		var RULE_TYPES = {
			1: CSSOM.CSSStyleRule,
			4: CSSOM.CSSMediaRule,
			//3: CSSOM.CSSImportRule,
			//5: CSSOM.CSSFontFaceRule,
			//6: CSSOM.CSSPageRule,
			8: CSSOM.CSSKeyframesRule,
			9: CSSOM.CSSKeyframeRule
		};

		for (var i=0, rulesLength=rules.length; i < rulesLength; i++) {
			var rule = rules[i];
			var ruleClone = cloned.cssRules[i] = new RULE_TYPES[rule.type];

			var style = rule.style;
			if (style) {
				var styleClone = ruleClone.style = new CSSOM.CSSStyleDeclaration;
				for (var j=0, styleLength=style.length; j < styleLength; j++) {
					var name = styleClone[j] = style[j];
					styleClone[name] = style[name];
					styleClone._importants[name] = style.getPropertyPriority(name);
				}
				styleClone.length = style.length;
			}

			if (rule.hasOwnProperty('keyText')) {
				ruleClone.keyText = rule.keyText;
			}

			if (rule.hasOwnProperty('selectorText')) {
				ruleClone.selectorText = rule.selectorText;
			}

			if (rule.hasOwnProperty('mediaText')) {
				ruleClone.mediaText = rule.mediaText;
			}

			if (rule.hasOwnProperty('cssRules')) {
				ruleClone.cssRules = clone(rule).cssRules;
			}
		}

		return cloned;

	};

	//.CommonJS
	exports.clone = CSSOM.clone;
	///CommonJS


/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	// autogenerated

	/*
	 *
	 * http://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-CSS2Properties
	 */

	module.exports = function (prototype) {
	    var alignmentBaseline = __webpack_require__(202).definition;
	    Object.defineProperty(prototype, 'alignmentBaseline', alignmentBaseline)
	    Object.defineProperty(prototype, 'alignment-baseline', alignmentBaseline)
	    var azimuth = __webpack_require__(203).definition;
	    Object.defineProperty(prototype, 'azimuth', azimuth)
	    var background = __webpack_require__(204).definition;
	    Object.defineProperty(prototype, 'background', background)
	    var backgroundAttachment = __webpack_require__(86).definition;
	    Object.defineProperty(prototype, 'backgroundAttachment', backgroundAttachment)
	    Object.defineProperty(prototype, 'background-attachment', backgroundAttachment)
	    var backgroundClip = __webpack_require__(205).definition;
	    Object.defineProperty(prototype, 'backgroundClip', backgroundClip)
	    Object.defineProperty(prototype, 'background-clip', backgroundClip)
	    var backgroundColor = __webpack_require__(87).definition;
	    Object.defineProperty(prototype, 'backgroundColor', backgroundColor)
	    Object.defineProperty(prototype, 'background-color', backgroundColor)
	    var backgroundImage = __webpack_require__(88).definition;
	    Object.defineProperty(prototype, 'backgroundImage', backgroundImage)
	    Object.defineProperty(prototype, 'background-image', backgroundImage)
	    var backgroundOrigin = __webpack_require__(206).definition;
	    Object.defineProperty(prototype, 'backgroundOrigin', backgroundOrigin)
	    Object.defineProperty(prototype, 'background-origin', backgroundOrigin)
	    var backgroundPosition = __webpack_require__(89).definition;
	    Object.defineProperty(prototype, 'backgroundPosition', backgroundPosition)
	    Object.defineProperty(prototype, 'background-position', backgroundPosition)
	    var backgroundPositionX = __webpack_require__(207).definition;
	    Object.defineProperty(prototype, 'backgroundPositionX', backgroundPositionX)
	    Object.defineProperty(prototype, 'background-position-x', backgroundPositionX)
	    var backgroundPositionY = __webpack_require__(208).definition;
	    Object.defineProperty(prototype, 'backgroundPositionY', backgroundPositionY)
	    Object.defineProperty(prototype, 'background-position-y', backgroundPositionY)
	    var backgroundRepeat = __webpack_require__(90).definition;
	    Object.defineProperty(prototype, 'backgroundRepeat', backgroundRepeat)
	    Object.defineProperty(prototype, 'background-repeat', backgroundRepeat)
	    var backgroundRepeatX = __webpack_require__(209).definition;
	    Object.defineProperty(prototype, 'backgroundRepeatX', backgroundRepeatX)
	    Object.defineProperty(prototype, 'background-repeat-x', backgroundRepeatX)
	    var backgroundRepeatY = __webpack_require__(210).definition;
	    Object.defineProperty(prototype, 'backgroundRepeatY', backgroundRepeatY)
	    Object.defineProperty(prototype, 'background-repeat-y', backgroundRepeatY)
	    var backgroundSize = __webpack_require__(211).definition;
	    Object.defineProperty(prototype, 'backgroundSize', backgroundSize)
	    Object.defineProperty(prototype, 'background-size', backgroundSize)
	    var baselineShift = __webpack_require__(212).definition;
	    Object.defineProperty(prototype, 'baselineShift', baselineShift)
	    Object.defineProperty(prototype, 'baseline-shift', baselineShift)
	    var border = __webpack_require__(213).definition;
	    Object.defineProperty(prototype, 'border', border)
	    var borderBottom = __webpack_require__(214).definition;
	    Object.defineProperty(prototype, 'borderBottom', borderBottom)
	    Object.defineProperty(prototype, 'border-bottom', borderBottom)
	    var borderBottomColor = __webpack_require__(91).definition;
	    Object.defineProperty(prototype, 'borderBottomColor', borderBottomColor)
	    Object.defineProperty(prototype, 'border-bottom-color', borderBottomColor)
	    var borderBottomLeftRadius = __webpack_require__(215).definition;
	    Object.defineProperty(prototype, 'borderBottomLeftRadius', borderBottomLeftRadius)
	    Object.defineProperty(prototype, 'border-bottom-left-radius', borderBottomLeftRadius)
	    var borderBottomRightRadius = __webpack_require__(216).definition;
	    Object.defineProperty(prototype, 'borderBottomRightRadius', borderBottomRightRadius)
	    Object.defineProperty(prototype, 'border-bottom-right-radius', borderBottomRightRadius)
	    var borderBottomStyle = __webpack_require__(92).definition;
	    Object.defineProperty(prototype, 'borderBottomStyle', borderBottomStyle)
	    Object.defineProperty(prototype, 'border-bottom-style', borderBottomStyle)
	    var borderBottomWidth = __webpack_require__(93).definition;
	    Object.defineProperty(prototype, 'borderBottomWidth', borderBottomWidth)
	    Object.defineProperty(prototype, 'border-bottom-width', borderBottomWidth)
	    var borderCollapse = __webpack_require__(217).definition;
	    Object.defineProperty(prototype, 'borderCollapse', borderCollapse)
	    Object.defineProperty(prototype, 'border-collapse', borderCollapse)
	    var borderColor = __webpack_require__(20).definition;
	    Object.defineProperty(prototype, 'borderColor', borderColor)
	    Object.defineProperty(prototype, 'border-color', borderColor)
	    var borderImage = __webpack_require__(218).definition;
	    Object.defineProperty(prototype, 'borderImage', borderImage)
	    Object.defineProperty(prototype, 'border-image', borderImage)
	    var borderImageOutset = __webpack_require__(219).definition;
	    Object.defineProperty(prototype, 'borderImageOutset', borderImageOutset)
	    Object.defineProperty(prototype, 'border-image-outset', borderImageOutset)
	    var borderImageRepeat = __webpack_require__(220).definition;
	    Object.defineProperty(prototype, 'borderImageRepeat', borderImageRepeat)
	    Object.defineProperty(prototype, 'border-image-repeat', borderImageRepeat)
	    var borderImageSlice = __webpack_require__(221).definition;
	    Object.defineProperty(prototype, 'borderImageSlice', borderImageSlice)
	    Object.defineProperty(prototype, 'border-image-slice', borderImageSlice)
	    var borderImageSource = __webpack_require__(222).definition;
	    Object.defineProperty(prototype, 'borderImageSource', borderImageSource)
	    Object.defineProperty(prototype, 'border-image-source', borderImageSource)
	    var borderImageWidth = __webpack_require__(223).definition;
	    Object.defineProperty(prototype, 'borderImageWidth', borderImageWidth)
	    Object.defineProperty(prototype, 'border-image-width', borderImageWidth)
	    var borderLeft = __webpack_require__(224).definition;
	    Object.defineProperty(prototype, 'borderLeft', borderLeft)
	    Object.defineProperty(prototype, 'border-left', borderLeft)
	    var borderLeftColor = __webpack_require__(94).definition;
	    Object.defineProperty(prototype, 'borderLeftColor', borderLeftColor)
	    Object.defineProperty(prototype, 'border-left-color', borderLeftColor)
	    var borderLeftStyle = __webpack_require__(95).definition;
	    Object.defineProperty(prototype, 'borderLeftStyle', borderLeftStyle)
	    Object.defineProperty(prototype, 'border-left-style', borderLeftStyle)
	    var borderLeftWidth = __webpack_require__(96).definition;
	    Object.defineProperty(prototype, 'borderLeftWidth', borderLeftWidth)
	    Object.defineProperty(prototype, 'border-left-width', borderLeftWidth)
	    var borderRadius = __webpack_require__(225).definition;
	    Object.defineProperty(prototype, 'borderRadius', borderRadius)
	    Object.defineProperty(prototype, 'border-radius', borderRadius)
	    var borderRight = __webpack_require__(226).definition;
	    Object.defineProperty(prototype, 'borderRight', borderRight)
	    Object.defineProperty(prototype, 'border-right', borderRight)
	    var borderRightColor = __webpack_require__(97).definition;
	    Object.defineProperty(prototype, 'borderRightColor', borderRightColor)
	    Object.defineProperty(prototype, 'border-right-color', borderRightColor)
	    var borderRightStyle = __webpack_require__(98).definition;
	    Object.defineProperty(prototype, 'borderRightStyle', borderRightStyle)
	    Object.defineProperty(prototype, 'border-right-style', borderRightStyle)
	    var borderRightWidth = __webpack_require__(99).definition;
	    Object.defineProperty(prototype, 'borderRightWidth', borderRightWidth)
	    Object.defineProperty(prototype, 'border-right-width', borderRightWidth)
	    var borderSpacing = __webpack_require__(227).definition;
	    Object.defineProperty(prototype, 'borderSpacing', borderSpacing)
	    Object.defineProperty(prototype, 'border-spacing', borderSpacing)
	    var borderStyle = __webpack_require__(21).definition;
	    Object.defineProperty(prototype, 'borderStyle', borderStyle)
	    Object.defineProperty(prototype, 'border-style', borderStyle)
	    var borderTop = __webpack_require__(228).definition;
	    Object.defineProperty(prototype, 'borderTop', borderTop)
	    Object.defineProperty(prototype, 'border-top', borderTop)
	    var borderTopColor = __webpack_require__(100).definition;
	    Object.defineProperty(prototype, 'borderTopColor', borderTopColor)
	    Object.defineProperty(prototype, 'border-top-color', borderTopColor)
	    var borderTopLeftRadius = __webpack_require__(229).definition;
	    Object.defineProperty(prototype, 'borderTopLeftRadius', borderTopLeftRadius)
	    Object.defineProperty(prototype, 'border-top-left-radius', borderTopLeftRadius)
	    var borderTopRightRadius = __webpack_require__(230).definition;
	    Object.defineProperty(prototype, 'borderTopRightRadius', borderTopRightRadius)
	    Object.defineProperty(prototype, 'border-top-right-radius', borderTopRightRadius)
	    var borderTopStyle = __webpack_require__(101).definition;
	    Object.defineProperty(prototype, 'borderTopStyle', borderTopStyle)
	    Object.defineProperty(prototype, 'border-top-style', borderTopStyle)
	    var borderTopWidth = __webpack_require__(102).definition;
	    Object.defineProperty(prototype, 'borderTopWidth', borderTopWidth)
	    Object.defineProperty(prototype, 'border-top-width', borderTopWidth)
	    var borderWidth = __webpack_require__(22).definition;
	    Object.defineProperty(prototype, 'borderWidth', borderWidth)
	    Object.defineProperty(prototype, 'border-width', borderWidth)
	    var bottom = __webpack_require__(231).definition;
	    Object.defineProperty(prototype, 'bottom', bottom)
	    var boxShadow = __webpack_require__(232).definition;
	    Object.defineProperty(prototype, 'boxShadow', boxShadow)
	    Object.defineProperty(prototype, 'box-shadow', boxShadow)
	    var boxSizing = __webpack_require__(233).definition;
	    Object.defineProperty(prototype, 'boxSizing', boxSizing)
	    Object.defineProperty(prototype, 'box-sizing', boxSizing)
	    var captionSide = __webpack_require__(234).definition;
	    Object.defineProperty(prototype, 'captionSide', captionSide)
	    Object.defineProperty(prototype, 'caption-side', captionSide)
	    var clear = __webpack_require__(235).definition;
	    Object.defineProperty(prototype, 'clear', clear)
	    var clip = __webpack_require__(236).definition;
	    Object.defineProperty(prototype, 'clip', clip)
	    var color = __webpack_require__(237).definition;
	    Object.defineProperty(prototype, 'color', color)
	    var colorInterpolation = __webpack_require__(238).definition;
	    Object.defineProperty(prototype, 'colorInterpolation', colorInterpolation)
	    Object.defineProperty(prototype, 'color-interpolation', colorInterpolation)
	    var colorInterpolationFilters = __webpack_require__(239).definition;
	    Object.defineProperty(prototype, 'colorInterpolationFilters', colorInterpolationFilters)
	    Object.defineProperty(prototype, 'color-interpolation-filters', colorInterpolationFilters)
	    var colorProfile = __webpack_require__(240).definition;
	    Object.defineProperty(prototype, 'colorProfile', colorProfile)
	    Object.defineProperty(prototype, 'color-profile', colorProfile)
	    var colorRendering = __webpack_require__(241).definition;
	    Object.defineProperty(prototype, 'colorRendering', colorRendering)
	    Object.defineProperty(prototype, 'color-rendering', colorRendering)
	    var content = __webpack_require__(242).definition;
	    Object.defineProperty(prototype, 'content', content)
	    var counterIncrement = __webpack_require__(243).definition;
	    Object.defineProperty(prototype, 'counterIncrement', counterIncrement)
	    Object.defineProperty(prototype, 'counter-increment', counterIncrement)
	    var counterReset = __webpack_require__(244).definition;
	    Object.defineProperty(prototype, 'counterReset', counterReset)
	    Object.defineProperty(prototype, 'counter-reset', counterReset)
	    var cssFloat = __webpack_require__(245).definition;
	    Object.defineProperty(prototype, 'cssFloat', cssFloat)
	    Object.defineProperty(prototype, 'css-float', cssFloat)
	    var cue = __webpack_require__(246).definition;
	    Object.defineProperty(prototype, 'cue', cue)
	    var cueAfter = __webpack_require__(247).definition;
	    Object.defineProperty(prototype, 'cueAfter', cueAfter)
	    Object.defineProperty(prototype, 'cue-after', cueAfter)
	    var cueBefore = __webpack_require__(248).definition;
	    Object.defineProperty(prototype, 'cueBefore', cueBefore)
	    Object.defineProperty(prototype, 'cue-before', cueBefore)
	    var cursor = __webpack_require__(249).definition;
	    Object.defineProperty(prototype, 'cursor', cursor)
	    var direction = __webpack_require__(250).definition;
	    Object.defineProperty(prototype, 'direction', direction)
	    var display = __webpack_require__(251).definition;
	    Object.defineProperty(prototype, 'display', display)
	    var dominantBaseline = __webpack_require__(252).definition;
	    Object.defineProperty(prototype, 'dominantBaseline', dominantBaseline)
	    Object.defineProperty(prototype, 'dominant-baseline', dominantBaseline)
	    var elevation = __webpack_require__(253).definition;
	    Object.defineProperty(prototype, 'elevation', elevation)
	    var emptyCells = __webpack_require__(254).definition;
	    Object.defineProperty(prototype, 'emptyCells', emptyCells)
	    Object.defineProperty(prototype, 'empty-cells', emptyCells)
	    var enableBackground = __webpack_require__(255).definition;
	    Object.defineProperty(prototype, 'enableBackground', enableBackground)
	    Object.defineProperty(prototype, 'enable-background', enableBackground)
	    var fill = __webpack_require__(256).definition;
	    Object.defineProperty(prototype, 'fill', fill)
	    var fillOpacity = __webpack_require__(257).definition;
	    Object.defineProperty(prototype, 'fillOpacity', fillOpacity)
	    Object.defineProperty(prototype, 'fill-opacity', fillOpacity)
	    var fillRule = __webpack_require__(258).definition;
	    Object.defineProperty(prototype, 'fillRule', fillRule)
	    Object.defineProperty(prototype, 'fill-rule', fillRule)
	    var filter = __webpack_require__(259).definition;
	    Object.defineProperty(prototype, 'filter', filter)
	    var floodColor = __webpack_require__(260).definition;
	    Object.defineProperty(prototype, 'floodColor', floodColor)
	    Object.defineProperty(prototype, 'flood-color', floodColor)
	    var floodOpacity = __webpack_require__(261).definition;
	    Object.defineProperty(prototype, 'floodOpacity', floodOpacity)
	    Object.defineProperty(prototype, 'flood-opacity', floodOpacity)
	    var font = __webpack_require__(262).definition;
	    Object.defineProperty(prototype, 'font', font)
	    var fontFamily = __webpack_require__(103).definition;
	    Object.defineProperty(prototype, 'fontFamily', fontFamily)
	    Object.defineProperty(prototype, 'font-family', fontFamily)
	    var fontSize = __webpack_require__(104).definition;
	    Object.defineProperty(prototype, 'fontSize', fontSize)
	    Object.defineProperty(prototype, 'font-size', fontSize)
	    var fontSizeAdjust = __webpack_require__(263).definition;
	    Object.defineProperty(prototype, 'fontSizeAdjust', fontSizeAdjust)
	    Object.defineProperty(prototype, 'font-size-adjust', fontSizeAdjust)
	    var fontStretch = __webpack_require__(264).definition;
	    Object.defineProperty(prototype, 'fontStretch', fontStretch)
	    Object.defineProperty(prototype, 'font-stretch', fontStretch)
	    var fontStyle = __webpack_require__(105).definition;
	    Object.defineProperty(prototype, 'fontStyle', fontStyle)
	    Object.defineProperty(prototype, 'font-style', fontStyle)
	    var fontVariant = __webpack_require__(106).definition;
	    Object.defineProperty(prototype, 'fontVariant', fontVariant)
	    Object.defineProperty(prototype, 'font-variant', fontVariant)
	    var fontWeight = __webpack_require__(107).definition;
	    Object.defineProperty(prototype, 'fontWeight', fontWeight)
	    Object.defineProperty(prototype, 'font-weight', fontWeight)
	    var glyphOrientationHorizontal = __webpack_require__(265).definition;
	    Object.defineProperty(prototype, 'glyphOrientationHorizontal', glyphOrientationHorizontal)
	    Object.defineProperty(prototype, 'glyph-orientation-horizontal', glyphOrientationHorizontal)
	    var glyphOrientationVertical = __webpack_require__(266).definition;
	    Object.defineProperty(prototype, 'glyphOrientationVertical', glyphOrientationVertical)
	    Object.defineProperty(prototype, 'glyph-orientation-vertical', glyphOrientationVertical)
	    var height = __webpack_require__(267).definition;
	    Object.defineProperty(prototype, 'height', height)
	    var imageRendering = __webpack_require__(268).definition;
	    Object.defineProperty(prototype, 'imageRendering', imageRendering)
	    Object.defineProperty(prototype, 'image-rendering', imageRendering)
	    var kerning = __webpack_require__(269).definition;
	    Object.defineProperty(prototype, 'kerning', kerning)
	    var left = __webpack_require__(270).definition;
	    Object.defineProperty(prototype, 'left', left)
	    var letterSpacing = __webpack_require__(271).definition;
	    Object.defineProperty(prototype, 'letterSpacing', letterSpacing)
	    Object.defineProperty(prototype, 'letter-spacing', letterSpacing)
	    var lightingColor = __webpack_require__(272).definition;
	    Object.defineProperty(prototype, 'lightingColor', lightingColor)
	    Object.defineProperty(prototype, 'lighting-color', lightingColor)
	    var lineHeight = __webpack_require__(108).definition;
	    Object.defineProperty(prototype, 'lineHeight', lineHeight)
	    Object.defineProperty(prototype, 'line-height', lineHeight)
	    var listStyle = __webpack_require__(273).definition;
	    Object.defineProperty(prototype, 'listStyle', listStyle)
	    Object.defineProperty(prototype, 'list-style', listStyle)
	    var listStyleImage = __webpack_require__(274).definition;
	    Object.defineProperty(prototype, 'listStyleImage', listStyleImage)
	    Object.defineProperty(prototype, 'list-style-image', listStyleImage)
	    var listStylePosition = __webpack_require__(275).definition;
	    Object.defineProperty(prototype, 'listStylePosition', listStylePosition)
	    Object.defineProperty(prototype, 'list-style-position', listStylePosition)
	    var listStyleType = __webpack_require__(276).definition;
	    Object.defineProperty(prototype, 'listStyleType', listStyleType)
	    Object.defineProperty(prototype, 'list-style-type', listStyleType)
	    var margin = __webpack_require__(277).definition;
	    Object.defineProperty(prototype, 'margin', margin)
	    var marginBottom = __webpack_require__(278).definition;
	    Object.defineProperty(prototype, 'marginBottom', marginBottom)
	    Object.defineProperty(prototype, 'margin-bottom', marginBottom)
	    var marginLeft = __webpack_require__(279).definition;
	    Object.defineProperty(prototype, 'marginLeft', marginLeft)
	    Object.defineProperty(prototype, 'margin-left', marginLeft)
	    var marginRight = __webpack_require__(280).definition;
	    Object.defineProperty(prototype, 'marginRight', marginRight)
	    Object.defineProperty(prototype, 'margin-right', marginRight)
	    var marginTop = __webpack_require__(281).definition;
	    Object.defineProperty(prototype, 'marginTop', marginTop)
	    Object.defineProperty(prototype, 'margin-top', marginTop)
	    var marker = __webpack_require__(282).definition;
	    Object.defineProperty(prototype, 'marker', marker)
	    var markerEnd = __webpack_require__(283).definition;
	    Object.defineProperty(prototype, 'markerEnd', markerEnd)
	    Object.defineProperty(prototype, 'marker-end', markerEnd)
	    var markerMid = __webpack_require__(284).definition;
	    Object.defineProperty(prototype, 'markerMid', markerMid)
	    Object.defineProperty(prototype, 'marker-mid', markerMid)
	    var markerOffset = __webpack_require__(285).definition;
	    Object.defineProperty(prototype, 'markerOffset', markerOffset)
	    Object.defineProperty(prototype, 'marker-offset', markerOffset)
	    var markerStart = __webpack_require__(286).definition;
	    Object.defineProperty(prototype, 'markerStart', markerStart)
	    Object.defineProperty(prototype, 'marker-start', markerStart)
	    var marks = __webpack_require__(287).definition;
	    Object.defineProperty(prototype, 'marks', marks)
	    var mask = __webpack_require__(288).definition;
	    Object.defineProperty(prototype, 'mask', mask)
	    var maxHeight = __webpack_require__(289).definition;
	    Object.defineProperty(prototype, 'maxHeight', maxHeight)
	    Object.defineProperty(prototype, 'max-height', maxHeight)
	    var maxWidth = __webpack_require__(290).definition;
	    Object.defineProperty(prototype, 'maxWidth', maxWidth)
	    Object.defineProperty(prototype, 'max-width', maxWidth)
	    var minHeight = __webpack_require__(291).definition;
	    Object.defineProperty(prototype, 'minHeight', minHeight)
	    Object.defineProperty(prototype, 'min-height', minHeight)
	    var minWidth = __webpack_require__(292).definition;
	    Object.defineProperty(prototype, 'minWidth', minWidth)
	    Object.defineProperty(prototype, 'min-width', minWidth)
	    var opacity = __webpack_require__(293).definition;
	    Object.defineProperty(prototype, 'opacity', opacity)
	    var orphans = __webpack_require__(294).definition;
	    Object.defineProperty(prototype, 'orphans', orphans)
	    var outline = __webpack_require__(295).definition;
	    Object.defineProperty(prototype, 'outline', outline)
	    var outlineColor = __webpack_require__(296).definition;
	    Object.defineProperty(prototype, 'outlineColor', outlineColor)
	    Object.defineProperty(prototype, 'outline-color', outlineColor)
	    var outlineOffset = __webpack_require__(297).definition;
	    Object.defineProperty(prototype, 'outlineOffset', outlineOffset)
	    Object.defineProperty(prototype, 'outline-offset', outlineOffset)
	    var outlineStyle = __webpack_require__(298).definition;
	    Object.defineProperty(prototype, 'outlineStyle', outlineStyle)
	    Object.defineProperty(prototype, 'outline-style', outlineStyle)
	    var outlineWidth = __webpack_require__(299).definition;
	    Object.defineProperty(prototype, 'outlineWidth', outlineWidth)
	    Object.defineProperty(prototype, 'outline-width', outlineWidth)
	    var overflow = __webpack_require__(300).definition;
	    Object.defineProperty(prototype, 'overflow', overflow)
	    var overflowX = __webpack_require__(301).definition;
	    Object.defineProperty(prototype, 'overflowX', overflowX)
	    Object.defineProperty(prototype, 'overflow-x', overflowX)
	    var overflowY = __webpack_require__(302).definition;
	    Object.defineProperty(prototype, 'overflowY', overflowY)
	    Object.defineProperty(prototype, 'overflow-y', overflowY)
	    var padding = __webpack_require__(303).definition;
	    Object.defineProperty(prototype, 'padding', padding)
	    var paddingBottom = __webpack_require__(304).definition;
	    Object.defineProperty(prototype, 'paddingBottom', paddingBottom)
	    Object.defineProperty(prototype, 'padding-bottom', paddingBottom)
	    var paddingLeft = __webpack_require__(305).definition;
	    Object.defineProperty(prototype, 'paddingLeft', paddingLeft)
	    Object.defineProperty(prototype, 'padding-left', paddingLeft)
	    var paddingRight = __webpack_require__(306).definition;
	    Object.defineProperty(prototype, 'paddingRight', paddingRight)
	    Object.defineProperty(prototype, 'padding-right', paddingRight)
	    var paddingTop = __webpack_require__(307).definition;
	    Object.defineProperty(prototype, 'paddingTop', paddingTop)
	    Object.defineProperty(prototype, 'padding-top', paddingTop)
	    var page = __webpack_require__(308).definition;
	    Object.defineProperty(prototype, 'page', page)
	    var pageBreakAfter = __webpack_require__(309).definition;
	    Object.defineProperty(prototype, 'pageBreakAfter', pageBreakAfter)
	    Object.defineProperty(prototype, 'page-break-after', pageBreakAfter)
	    var pageBreakBefore = __webpack_require__(310).definition;
	    Object.defineProperty(prototype, 'pageBreakBefore', pageBreakBefore)
	    Object.defineProperty(prototype, 'page-break-before', pageBreakBefore)
	    var pageBreakInside = __webpack_require__(311).definition;
	    Object.defineProperty(prototype, 'pageBreakInside', pageBreakInside)
	    Object.defineProperty(prototype, 'page-break-inside', pageBreakInside)
	    var pause = __webpack_require__(312).definition;
	    Object.defineProperty(prototype, 'pause', pause)
	    var pauseAfter = __webpack_require__(313).definition;
	    Object.defineProperty(prototype, 'pauseAfter', pauseAfter)
	    Object.defineProperty(prototype, 'pause-after', pauseAfter)
	    var pauseBefore = __webpack_require__(314).definition;
	    Object.defineProperty(prototype, 'pauseBefore', pauseBefore)
	    Object.defineProperty(prototype, 'pause-before', pauseBefore)
	    var pitch = __webpack_require__(315).definition;
	    Object.defineProperty(prototype, 'pitch', pitch)
	    var pitchRange = __webpack_require__(316).definition;
	    Object.defineProperty(prototype, 'pitchRange', pitchRange)
	    Object.defineProperty(prototype, 'pitch-range', pitchRange)
	    var playDuring = __webpack_require__(317).definition;
	    Object.defineProperty(prototype, 'playDuring', playDuring)
	    Object.defineProperty(prototype, 'play-during', playDuring)
	    var pointerEvents = __webpack_require__(318).definition;
	    Object.defineProperty(prototype, 'pointerEvents', pointerEvents)
	    Object.defineProperty(prototype, 'pointer-events', pointerEvents)
	    var position = __webpack_require__(319).definition;
	    Object.defineProperty(prototype, 'position', position)
	    var quotes = __webpack_require__(320).definition;
	    Object.defineProperty(prototype, 'quotes', quotes)
	    var resize = __webpack_require__(321).definition;
	    Object.defineProperty(prototype, 'resize', resize)
	    var richness = __webpack_require__(322).definition;
	    Object.defineProperty(prototype, 'richness', richness)
	    var right = __webpack_require__(323).definition;
	    Object.defineProperty(prototype, 'right', right)
	    var shapeRendering = __webpack_require__(324).definition;
	    Object.defineProperty(prototype, 'shapeRendering', shapeRendering)
	    Object.defineProperty(prototype, 'shape-rendering', shapeRendering)
	    var size = __webpack_require__(325).definition;
	    Object.defineProperty(prototype, 'size', size)
	    var speak = __webpack_require__(326).definition;
	    Object.defineProperty(prototype, 'speak', speak)
	    var speakHeader = __webpack_require__(327).definition;
	    Object.defineProperty(prototype, 'speakHeader', speakHeader)
	    Object.defineProperty(prototype, 'speak-header', speakHeader)
	    var speakNumeral = __webpack_require__(328).definition;
	    Object.defineProperty(prototype, 'speakNumeral', speakNumeral)
	    Object.defineProperty(prototype, 'speak-numeral', speakNumeral)
	    var speakPunctuation = __webpack_require__(329).definition;
	    Object.defineProperty(prototype, 'speakPunctuation', speakPunctuation)
	    Object.defineProperty(prototype, 'speak-punctuation', speakPunctuation)
	    var speechRate = __webpack_require__(330).definition;
	    Object.defineProperty(prototype, 'speechRate', speechRate)
	    Object.defineProperty(prototype, 'speech-rate', speechRate)
	    var src = __webpack_require__(331).definition;
	    Object.defineProperty(prototype, 'src', src)
	    var stopColor = __webpack_require__(332).definition;
	    Object.defineProperty(prototype, 'stopColor', stopColor)
	    Object.defineProperty(prototype, 'stop-color', stopColor)
	    var stopOpacity = __webpack_require__(333).definition;
	    Object.defineProperty(prototype, 'stopOpacity', stopOpacity)
	    Object.defineProperty(prototype, 'stop-opacity', stopOpacity)
	    var stress = __webpack_require__(334).definition;
	    Object.defineProperty(prototype, 'stress', stress)
	    var stroke = __webpack_require__(335).definition;
	    Object.defineProperty(prototype, 'stroke', stroke)
	    var strokeDasharray = __webpack_require__(336).definition;
	    Object.defineProperty(prototype, 'strokeDasharray', strokeDasharray)
	    Object.defineProperty(prototype, 'stroke-dasharray', strokeDasharray)
	    var strokeDashoffset = __webpack_require__(337).definition;
	    Object.defineProperty(prototype, 'strokeDashoffset', strokeDashoffset)
	    Object.defineProperty(prototype, 'stroke-dashoffset', strokeDashoffset)
	    var strokeLinecap = __webpack_require__(338).definition;
	    Object.defineProperty(prototype, 'strokeLinecap', strokeLinecap)
	    Object.defineProperty(prototype, 'stroke-linecap', strokeLinecap)
	    var strokeLinejoin = __webpack_require__(339).definition;
	    Object.defineProperty(prototype, 'strokeLinejoin', strokeLinejoin)
	    Object.defineProperty(prototype, 'stroke-linejoin', strokeLinejoin)
	    var strokeMiterlimit = __webpack_require__(340).definition;
	    Object.defineProperty(prototype, 'strokeMiterlimit', strokeMiterlimit)
	    Object.defineProperty(prototype, 'stroke-miterlimit', strokeMiterlimit)
	    var strokeOpacity = __webpack_require__(341).definition;
	    Object.defineProperty(prototype, 'strokeOpacity', strokeOpacity)
	    Object.defineProperty(prototype, 'stroke-opacity', strokeOpacity)
	    var strokeWidth = __webpack_require__(342).definition;
	    Object.defineProperty(prototype, 'strokeWidth', strokeWidth)
	    Object.defineProperty(prototype, 'stroke-width', strokeWidth)
	    var tableLayout = __webpack_require__(343).definition;
	    Object.defineProperty(prototype, 'tableLayout', tableLayout)
	    Object.defineProperty(prototype, 'table-layout', tableLayout)
	    var textAlign = __webpack_require__(344).definition;
	    Object.defineProperty(prototype, 'textAlign', textAlign)
	    Object.defineProperty(prototype, 'text-align', textAlign)
	    var textAnchor = __webpack_require__(345).definition;
	    Object.defineProperty(prototype, 'textAnchor', textAnchor)
	    Object.defineProperty(prototype, 'text-anchor', textAnchor)
	    var textDecoration = __webpack_require__(346).definition;
	    Object.defineProperty(prototype, 'textDecoration', textDecoration)
	    Object.defineProperty(prototype, 'text-decoration', textDecoration)
	    var textIndent = __webpack_require__(347).definition;
	    Object.defineProperty(prototype, 'textIndent', textIndent)
	    Object.defineProperty(prototype, 'text-indent', textIndent)
	    var textLineThrough = __webpack_require__(348).definition;
	    Object.defineProperty(prototype, 'textLineThrough', textLineThrough)
	    Object.defineProperty(prototype, 'text-line-through', textLineThrough)
	    var textLineThroughColor = __webpack_require__(349).definition;
	    Object.defineProperty(prototype, 'textLineThroughColor', textLineThroughColor)
	    Object.defineProperty(prototype, 'text-line-through-color', textLineThroughColor)
	    var textLineThroughMode = __webpack_require__(350).definition;
	    Object.defineProperty(prototype, 'textLineThroughMode', textLineThroughMode)
	    Object.defineProperty(prototype, 'text-line-through-mode', textLineThroughMode)
	    var textLineThroughStyle = __webpack_require__(351).definition;
	    Object.defineProperty(prototype, 'textLineThroughStyle', textLineThroughStyle)
	    Object.defineProperty(prototype, 'text-line-through-style', textLineThroughStyle)
	    var textLineThroughWidth = __webpack_require__(352).definition;
	    Object.defineProperty(prototype, 'textLineThroughWidth', textLineThroughWidth)
	    Object.defineProperty(prototype, 'text-line-through-width', textLineThroughWidth)
	    var textOverflow = __webpack_require__(353).definition;
	    Object.defineProperty(prototype, 'textOverflow', textOverflow)
	    Object.defineProperty(prototype, 'text-overflow', textOverflow)
	    var textOverline = __webpack_require__(354).definition;
	    Object.defineProperty(prototype, 'textOverline', textOverline)
	    Object.defineProperty(prototype, 'text-overline', textOverline)
	    var textOverlineColor = __webpack_require__(355).definition;
	    Object.defineProperty(prototype, 'textOverlineColor', textOverlineColor)
	    Object.defineProperty(prototype, 'text-overline-color', textOverlineColor)
	    var textOverlineMode = __webpack_require__(356).definition;
	    Object.defineProperty(prototype, 'textOverlineMode', textOverlineMode)
	    Object.defineProperty(prototype, 'text-overline-mode', textOverlineMode)
	    var textOverlineStyle = __webpack_require__(357).definition;
	    Object.defineProperty(prototype, 'textOverlineStyle', textOverlineStyle)
	    Object.defineProperty(prototype, 'text-overline-style', textOverlineStyle)
	    var textOverlineWidth = __webpack_require__(358).definition;
	    Object.defineProperty(prototype, 'textOverlineWidth', textOverlineWidth)
	    Object.defineProperty(prototype, 'text-overline-width', textOverlineWidth)
	    var textRendering = __webpack_require__(359).definition;
	    Object.defineProperty(prototype, 'textRendering', textRendering)
	    Object.defineProperty(prototype, 'text-rendering', textRendering)
	    var textShadow = __webpack_require__(360).definition;
	    Object.defineProperty(prototype, 'textShadow', textShadow)
	    Object.defineProperty(prototype, 'text-shadow', textShadow)
	    var textTransform = __webpack_require__(361).definition;
	    Object.defineProperty(prototype, 'textTransform', textTransform)
	    Object.defineProperty(prototype, 'text-transform', textTransform)
	    var textUnderline = __webpack_require__(362).definition;
	    Object.defineProperty(prototype, 'textUnderline', textUnderline)
	    Object.defineProperty(prototype, 'text-underline', textUnderline)
	    var textUnderlineColor = __webpack_require__(363).definition;
	    Object.defineProperty(prototype, 'textUnderlineColor', textUnderlineColor)
	    Object.defineProperty(prototype, 'text-underline-color', textUnderlineColor)
	    var textUnderlineMode = __webpack_require__(364).definition;
	    Object.defineProperty(prototype, 'textUnderlineMode', textUnderlineMode)
	    Object.defineProperty(prototype, 'text-underline-mode', textUnderlineMode)
	    var textUnderlineStyle = __webpack_require__(365).definition;
	    Object.defineProperty(prototype, 'textUnderlineStyle', textUnderlineStyle)
	    Object.defineProperty(prototype, 'text-underline-style', textUnderlineStyle)
	    var textUnderlineWidth = __webpack_require__(366).definition;
	    Object.defineProperty(prototype, 'textUnderlineWidth', textUnderlineWidth)
	    Object.defineProperty(prototype, 'text-underline-width', textUnderlineWidth)
	    var top = __webpack_require__(367).definition;
	    Object.defineProperty(prototype, 'top', top)
	    var unicodeBidi = __webpack_require__(368).definition;
	    Object.defineProperty(prototype, 'unicodeBidi', unicodeBidi)
	    Object.defineProperty(prototype, 'unicode-bidi', unicodeBidi)
	    var unicodeRange = __webpack_require__(369).definition;
	    Object.defineProperty(prototype, 'unicodeRange', unicodeRange)
	    Object.defineProperty(prototype, 'unicode-range', unicodeRange)
	    var vectorEffect = __webpack_require__(370).definition;
	    Object.defineProperty(prototype, 'vectorEffect', vectorEffect)
	    Object.defineProperty(prototype, 'vector-effect', vectorEffect)
	    var verticalAlign = __webpack_require__(371).definition;
	    Object.defineProperty(prototype, 'verticalAlign', verticalAlign)
	    Object.defineProperty(prototype, 'vertical-align', verticalAlign)
	    var visibility = __webpack_require__(372).definition;
	    Object.defineProperty(prototype, 'visibility', visibility)
	    var voiceFamily = __webpack_require__(373).definition;
	    Object.defineProperty(prototype, 'voiceFamily', voiceFamily)
	    Object.defineProperty(prototype, 'voice-family', voiceFamily)
	    var volume = __webpack_require__(374).definition;
	    Object.defineProperty(prototype, 'volume', volume)
	    var webkitAnimation = __webpack_require__(375).definition;
	    Object.defineProperty(prototype, 'webkitAnimation', webkitAnimation)
	    Object.defineProperty(prototype, 'webkit-animation', webkitAnimation)
	    var webkitAnimationDelay = __webpack_require__(376).definition;
	    Object.defineProperty(prototype, 'webkitAnimationDelay', webkitAnimationDelay)
	    Object.defineProperty(prototype, 'webkit-animation-delay', webkitAnimationDelay)
	    var webkitAnimationDirection = __webpack_require__(377).definition;
	    Object.defineProperty(prototype, 'webkitAnimationDirection', webkitAnimationDirection)
	    Object.defineProperty(prototype, 'webkit-animation-direction', webkitAnimationDirection)
	    var webkitAnimationDuration = __webpack_require__(378).definition;
	    Object.defineProperty(prototype, 'webkitAnimationDuration', webkitAnimationDuration)
	    Object.defineProperty(prototype, 'webkit-animation-duration', webkitAnimationDuration)
	    var webkitAnimationFillMode = __webpack_require__(379).definition;
	    Object.defineProperty(prototype, 'webkitAnimationFillMode', webkitAnimationFillMode)
	    Object.defineProperty(prototype, 'webkit-animation-fill-mode', webkitAnimationFillMode)
	    var webkitAnimationIterationCount = __webpack_require__(380).definition;
	    Object.defineProperty(prototype, 'webkitAnimationIterationCount', webkitAnimationIterationCount)
	    Object.defineProperty(prototype, 'webkit-animation-iteration-count', webkitAnimationIterationCount)
	    var webkitAnimationName = __webpack_require__(381).definition;
	    Object.defineProperty(prototype, 'webkitAnimationName', webkitAnimationName)
	    Object.defineProperty(prototype, 'webkit-animation-name', webkitAnimationName)
	    var webkitAnimationPlayState = __webpack_require__(382).definition;
	    Object.defineProperty(prototype, 'webkitAnimationPlayState', webkitAnimationPlayState)
	    Object.defineProperty(prototype, 'webkit-animation-play-state', webkitAnimationPlayState)
	    var webkitAnimationTimingFunction = __webpack_require__(383).definition;
	    Object.defineProperty(prototype, 'webkitAnimationTimingFunction', webkitAnimationTimingFunction)
	    Object.defineProperty(prototype, 'webkit-animation-timing-function', webkitAnimationTimingFunction)
	    var webkitAppearance = __webpack_require__(384).definition;
	    Object.defineProperty(prototype, 'webkitAppearance', webkitAppearance)
	    Object.defineProperty(prototype, 'webkit-appearance', webkitAppearance)
	    var webkitAspectRatio = __webpack_require__(385).definition;
	    Object.defineProperty(prototype, 'webkitAspectRatio', webkitAspectRatio)
	    Object.defineProperty(prototype, 'webkit-aspect-ratio', webkitAspectRatio)
	    var webkitBackfaceVisibility = __webpack_require__(386).definition;
	    Object.defineProperty(prototype, 'webkitBackfaceVisibility', webkitBackfaceVisibility)
	    Object.defineProperty(prototype, 'webkit-backface-visibility', webkitBackfaceVisibility)
	    var webkitBackgroundClip = __webpack_require__(387).definition;
	    Object.defineProperty(prototype, 'webkitBackgroundClip', webkitBackgroundClip)
	    Object.defineProperty(prototype, 'webkit-background-clip', webkitBackgroundClip)
	    var webkitBackgroundComposite = __webpack_require__(388).definition;
	    Object.defineProperty(prototype, 'webkitBackgroundComposite', webkitBackgroundComposite)
	    Object.defineProperty(prototype, 'webkit-background-composite', webkitBackgroundComposite)
	    var webkitBackgroundOrigin = __webpack_require__(389).definition;
	    Object.defineProperty(prototype, 'webkitBackgroundOrigin', webkitBackgroundOrigin)
	    Object.defineProperty(prototype, 'webkit-background-origin', webkitBackgroundOrigin)
	    var webkitBackgroundSize = __webpack_require__(390).definition;
	    Object.defineProperty(prototype, 'webkitBackgroundSize', webkitBackgroundSize)
	    Object.defineProperty(prototype, 'webkit-background-size', webkitBackgroundSize)
	    var webkitBorderAfter = __webpack_require__(391).definition;
	    Object.defineProperty(prototype, 'webkitBorderAfter', webkitBorderAfter)
	    Object.defineProperty(prototype, 'webkit-border-after', webkitBorderAfter)
	    var webkitBorderAfterColor = __webpack_require__(392).definition;
	    Object.defineProperty(prototype, 'webkitBorderAfterColor', webkitBorderAfterColor)
	    Object.defineProperty(prototype, 'webkit-border-after-color', webkitBorderAfterColor)
	    var webkitBorderAfterStyle = __webpack_require__(393).definition;
	    Object.defineProperty(prototype, 'webkitBorderAfterStyle', webkitBorderAfterStyle)
	    Object.defineProperty(prototype, 'webkit-border-after-style', webkitBorderAfterStyle)
	    var webkitBorderAfterWidth = __webpack_require__(394).definition;
	    Object.defineProperty(prototype, 'webkitBorderAfterWidth', webkitBorderAfterWidth)
	    Object.defineProperty(prototype, 'webkit-border-after-width', webkitBorderAfterWidth)
	    var webkitBorderBefore = __webpack_require__(395).definition;
	    Object.defineProperty(prototype, 'webkitBorderBefore', webkitBorderBefore)
	    Object.defineProperty(prototype, 'webkit-border-before', webkitBorderBefore)
	    var webkitBorderBeforeColor = __webpack_require__(396).definition;
	    Object.defineProperty(prototype, 'webkitBorderBeforeColor', webkitBorderBeforeColor)
	    Object.defineProperty(prototype, 'webkit-border-before-color', webkitBorderBeforeColor)
	    var webkitBorderBeforeStyle = __webpack_require__(397).definition;
	    Object.defineProperty(prototype, 'webkitBorderBeforeStyle', webkitBorderBeforeStyle)
	    Object.defineProperty(prototype, 'webkit-border-before-style', webkitBorderBeforeStyle)
	    var webkitBorderBeforeWidth = __webpack_require__(398).definition;
	    Object.defineProperty(prototype, 'webkitBorderBeforeWidth', webkitBorderBeforeWidth)
	    Object.defineProperty(prototype, 'webkit-border-before-width', webkitBorderBeforeWidth)
	    var webkitBorderEnd = __webpack_require__(399).definition;
	    Object.defineProperty(prototype, 'webkitBorderEnd', webkitBorderEnd)
	    Object.defineProperty(prototype, 'webkit-border-end', webkitBorderEnd)
	    var webkitBorderEndColor = __webpack_require__(400).definition;
	    Object.defineProperty(prototype, 'webkitBorderEndColor', webkitBorderEndColor)
	    Object.defineProperty(prototype, 'webkit-border-end-color', webkitBorderEndColor)
	    var webkitBorderEndStyle = __webpack_require__(401).definition;
	    Object.defineProperty(prototype, 'webkitBorderEndStyle', webkitBorderEndStyle)
	    Object.defineProperty(prototype, 'webkit-border-end-style', webkitBorderEndStyle)
	    var webkitBorderEndWidth = __webpack_require__(402).definition;
	    Object.defineProperty(prototype, 'webkitBorderEndWidth', webkitBorderEndWidth)
	    Object.defineProperty(prototype, 'webkit-border-end-width', webkitBorderEndWidth)
	    var webkitBorderFit = __webpack_require__(403).definition;
	    Object.defineProperty(prototype, 'webkitBorderFit', webkitBorderFit)
	    Object.defineProperty(prototype, 'webkit-border-fit', webkitBorderFit)
	    var webkitBorderHorizontalSpacing = __webpack_require__(404).definition;
	    Object.defineProperty(prototype, 'webkitBorderHorizontalSpacing', webkitBorderHorizontalSpacing)
	    Object.defineProperty(prototype, 'webkit-border-horizontal-spacing', webkitBorderHorizontalSpacing)
	    var webkitBorderImage = __webpack_require__(405).definition;
	    Object.defineProperty(prototype, 'webkitBorderImage', webkitBorderImage)
	    Object.defineProperty(prototype, 'webkit-border-image', webkitBorderImage)
	    var webkitBorderRadius = __webpack_require__(406).definition;
	    Object.defineProperty(prototype, 'webkitBorderRadius', webkitBorderRadius)
	    Object.defineProperty(prototype, 'webkit-border-radius', webkitBorderRadius)
	    var webkitBorderStart = __webpack_require__(407).definition;
	    Object.defineProperty(prototype, 'webkitBorderStart', webkitBorderStart)
	    Object.defineProperty(prototype, 'webkit-border-start', webkitBorderStart)
	    var webkitBorderStartColor = __webpack_require__(408).definition;
	    Object.defineProperty(prototype, 'webkitBorderStartColor', webkitBorderStartColor)
	    Object.defineProperty(prototype, 'webkit-border-start-color', webkitBorderStartColor)
	    var webkitBorderStartStyle = __webpack_require__(409).definition;
	    Object.defineProperty(prototype, 'webkitBorderStartStyle', webkitBorderStartStyle)
	    Object.defineProperty(prototype, 'webkit-border-start-style', webkitBorderStartStyle)
	    var webkitBorderStartWidth = __webpack_require__(410).definition;
	    Object.defineProperty(prototype, 'webkitBorderStartWidth', webkitBorderStartWidth)
	    Object.defineProperty(prototype, 'webkit-border-start-width', webkitBorderStartWidth)
	    var webkitBorderVerticalSpacing = __webpack_require__(411).definition;
	    Object.defineProperty(prototype, 'webkitBorderVerticalSpacing', webkitBorderVerticalSpacing)
	    Object.defineProperty(prototype, 'webkit-border-vertical-spacing', webkitBorderVerticalSpacing)
	    var webkitBoxAlign = __webpack_require__(412).definition;
	    Object.defineProperty(prototype, 'webkitBoxAlign', webkitBoxAlign)
	    Object.defineProperty(prototype, 'webkit-box-align', webkitBoxAlign)
	    var webkitBoxDirection = __webpack_require__(413).definition;
	    Object.defineProperty(prototype, 'webkitBoxDirection', webkitBoxDirection)
	    Object.defineProperty(prototype, 'webkit-box-direction', webkitBoxDirection)
	    var webkitBoxFlex = __webpack_require__(414).definition;
	    Object.defineProperty(prototype, 'webkitBoxFlex', webkitBoxFlex)
	    Object.defineProperty(prototype, 'webkit-box-flex', webkitBoxFlex)
	    var webkitBoxFlexGroup = __webpack_require__(415).definition;
	    Object.defineProperty(prototype, 'webkitBoxFlexGroup', webkitBoxFlexGroup)
	    Object.defineProperty(prototype, 'webkit-box-flex-group', webkitBoxFlexGroup)
	    var webkitBoxLines = __webpack_require__(416).definition;
	    Object.defineProperty(prototype, 'webkitBoxLines', webkitBoxLines)
	    Object.defineProperty(prototype, 'webkit-box-lines', webkitBoxLines)
	    var webkitBoxOrdinalGroup = __webpack_require__(417).definition;
	    Object.defineProperty(prototype, 'webkitBoxOrdinalGroup', webkitBoxOrdinalGroup)
	    Object.defineProperty(prototype, 'webkit-box-ordinal-group', webkitBoxOrdinalGroup)
	    var webkitBoxOrient = __webpack_require__(418).definition;
	    Object.defineProperty(prototype, 'webkitBoxOrient', webkitBoxOrient)
	    Object.defineProperty(prototype, 'webkit-box-orient', webkitBoxOrient)
	    var webkitBoxPack = __webpack_require__(419).definition;
	    Object.defineProperty(prototype, 'webkitBoxPack', webkitBoxPack)
	    Object.defineProperty(prototype, 'webkit-box-pack', webkitBoxPack)
	    var webkitBoxReflect = __webpack_require__(420).definition;
	    Object.defineProperty(prototype, 'webkitBoxReflect', webkitBoxReflect)
	    Object.defineProperty(prototype, 'webkit-box-reflect', webkitBoxReflect)
	    var webkitBoxShadow = __webpack_require__(421).definition;
	    Object.defineProperty(prototype, 'webkitBoxShadow', webkitBoxShadow)
	    Object.defineProperty(prototype, 'webkit-box-shadow', webkitBoxShadow)
	    var webkitColorCorrection = __webpack_require__(422).definition;
	    Object.defineProperty(prototype, 'webkitColorCorrection', webkitColorCorrection)
	    Object.defineProperty(prototype, 'webkit-color-correction', webkitColorCorrection)
	    var webkitColumnAxis = __webpack_require__(423).definition;
	    Object.defineProperty(prototype, 'webkitColumnAxis', webkitColumnAxis)
	    Object.defineProperty(prototype, 'webkit-column-axis', webkitColumnAxis)
	    var webkitColumnBreakAfter = __webpack_require__(424).definition;
	    Object.defineProperty(prototype, 'webkitColumnBreakAfter', webkitColumnBreakAfter)
	    Object.defineProperty(prototype, 'webkit-column-break-after', webkitColumnBreakAfter)
	    var webkitColumnBreakBefore = __webpack_require__(425).definition;
	    Object.defineProperty(prototype, 'webkitColumnBreakBefore', webkitColumnBreakBefore)
	    Object.defineProperty(prototype, 'webkit-column-break-before', webkitColumnBreakBefore)
	    var webkitColumnBreakInside = __webpack_require__(426).definition;
	    Object.defineProperty(prototype, 'webkitColumnBreakInside', webkitColumnBreakInside)
	    Object.defineProperty(prototype, 'webkit-column-break-inside', webkitColumnBreakInside)
	    var webkitColumnCount = __webpack_require__(427).definition;
	    Object.defineProperty(prototype, 'webkitColumnCount', webkitColumnCount)
	    Object.defineProperty(prototype, 'webkit-column-count', webkitColumnCount)
	    var webkitColumnGap = __webpack_require__(428).definition;
	    Object.defineProperty(prototype, 'webkitColumnGap', webkitColumnGap)
	    Object.defineProperty(prototype, 'webkit-column-gap', webkitColumnGap)
	    var webkitColumnRule = __webpack_require__(429).definition;
	    Object.defineProperty(prototype, 'webkitColumnRule', webkitColumnRule)
	    Object.defineProperty(prototype, 'webkit-column-rule', webkitColumnRule)
	    var webkitColumnRuleColor = __webpack_require__(430).definition;
	    Object.defineProperty(prototype, 'webkitColumnRuleColor', webkitColumnRuleColor)
	    Object.defineProperty(prototype, 'webkit-column-rule-color', webkitColumnRuleColor)
	    var webkitColumnRuleStyle = __webpack_require__(431).definition;
	    Object.defineProperty(prototype, 'webkitColumnRuleStyle', webkitColumnRuleStyle)
	    Object.defineProperty(prototype, 'webkit-column-rule-style', webkitColumnRuleStyle)
	    var webkitColumnRuleWidth = __webpack_require__(432).definition;
	    Object.defineProperty(prototype, 'webkitColumnRuleWidth', webkitColumnRuleWidth)
	    Object.defineProperty(prototype, 'webkit-column-rule-width', webkitColumnRuleWidth)
	    var webkitColumnSpan = __webpack_require__(433).definition;
	    Object.defineProperty(prototype, 'webkitColumnSpan', webkitColumnSpan)
	    Object.defineProperty(prototype, 'webkit-column-span', webkitColumnSpan)
	    var webkitColumnWidth = __webpack_require__(434).definition;
	    Object.defineProperty(prototype, 'webkitColumnWidth', webkitColumnWidth)
	    Object.defineProperty(prototype, 'webkit-column-width', webkitColumnWidth)
	    var webkitColumns = __webpack_require__(435).definition;
	    Object.defineProperty(prototype, 'webkitColumns', webkitColumns)
	    Object.defineProperty(prototype, 'webkit-columns', webkitColumns)
	    var webkitFilter = __webpack_require__(436).definition;
	    Object.defineProperty(prototype, 'webkitFilter', webkitFilter)
	    Object.defineProperty(prototype, 'webkit-filter', webkitFilter)
	    var webkitFlexAlign = __webpack_require__(437).definition;
	    Object.defineProperty(prototype, 'webkitFlexAlign', webkitFlexAlign)
	    Object.defineProperty(prototype, 'webkit-flex-align', webkitFlexAlign)
	    var webkitFlexDirection = __webpack_require__(438).definition;
	    Object.defineProperty(prototype, 'webkitFlexDirection', webkitFlexDirection)
	    Object.defineProperty(prototype, 'webkit-flex-direction', webkitFlexDirection)
	    var webkitFlexFlow = __webpack_require__(439).definition;
	    Object.defineProperty(prototype, 'webkitFlexFlow', webkitFlexFlow)
	    Object.defineProperty(prototype, 'webkit-flex-flow', webkitFlexFlow)
	    var webkitFlexItemAlign = __webpack_require__(440).definition;
	    Object.defineProperty(prototype, 'webkitFlexItemAlign', webkitFlexItemAlign)
	    Object.defineProperty(prototype, 'webkit-flex-item-align', webkitFlexItemAlign)
	    var webkitFlexLinePack = __webpack_require__(441).definition;
	    Object.defineProperty(prototype, 'webkitFlexLinePack', webkitFlexLinePack)
	    Object.defineProperty(prototype, 'webkit-flex-line-pack', webkitFlexLinePack)
	    var webkitFlexOrder = __webpack_require__(442).definition;
	    Object.defineProperty(prototype, 'webkitFlexOrder', webkitFlexOrder)
	    Object.defineProperty(prototype, 'webkit-flex-order', webkitFlexOrder)
	    var webkitFlexPack = __webpack_require__(443).definition;
	    Object.defineProperty(prototype, 'webkitFlexPack', webkitFlexPack)
	    Object.defineProperty(prototype, 'webkit-flex-pack', webkitFlexPack)
	    var webkitFlexWrap = __webpack_require__(444).definition;
	    Object.defineProperty(prototype, 'webkitFlexWrap', webkitFlexWrap)
	    Object.defineProperty(prototype, 'webkit-flex-wrap', webkitFlexWrap)
	    var webkitFlowFrom = __webpack_require__(445).definition;
	    Object.defineProperty(prototype, 'webkitFlowFrom', webkitFlowFrom)
	    Object.defineProperty(prototype, 'webkit-flow-from', webkitFlowFrom)
	    var webkitFlowInto = __webpack_require__(446).definition;
	    Object.defineProperty(prototype, 'webkitFlowInto', webkitFlowInto)
	    Object.defineProperty(prototype, 'webkit-flow-into', webkitFlowInto)
	    var webkitFontFeatureSettings = __webpack_require__(447).definition;
	    Object.defineProperty(prototype, 'webkitFontFeatureSettings', webkitFontFeatureSettings)
	    Object.defineProperty(prototype, 'webkit-font-feature-settings', webkitFontFeatureSettings)
	    var webkitFontKerning = __webpack_require__(448).definition;
	    Object.defineProperty(prototype, 'webkitFontKerning', webkitFontKerning)
	    Object.defineProperty(prototype, 'webkit-font-kerning', webkitFontKerning)
	    var webkitFontSizeDelta = __webpack_require__(449).definition;
	    Object.defineProperty(prototype, 'webkitFontSizeDelta', webkitFontSizeDelta)
	    Object.defineProperty(prototype, 'webkit-font-size-delta', webkitFontSizeDelta)
	    var webkitFontSmoothing = __webpack_require__(450).definition;
	    Object.defineProperty(prototype, 'webkitFontSmoothing', webkitFontSmoothing)
	    Object.defineProperty(prototype, 'webkit-font-smoothing', webkitFontSmoothing)
	    var webkitFontVariantLigatures = __webpack_require__(451).definition;
	    Object.defineProperty(prototype, 'webkitFontVariantLigatures', webkitFontVariantLigatures)
	    Object.defineProperty(prototype, 'webkit-font-variant-ligatures', webkitFontVariantLigatures)
	    var webkitHighlight = __webpack_require__(452).definition;
	    Object.defineProperty(prototype, 'webkitHighlight', webkitHighlight)
	    Object.defineProperty(prototype, 'webkit-highlight', webkitHighlight)
	    var webkitHyphenateCharacter = __webpack_require__(453).definition;
	    Object.defineProperty(prototype, 'webkitHyphenateCharacter', webkitHyphenateCharacter)
	    Object.defineProperty(prototype, 'webkit-hyphenate-character', webkitHyphenateCharacter)
	    var webkitHyphenateLimitAfter = __webpack_require__(454).definition;
	    Object.defineProperty(prototype, 'webkitHyphenateLimitAfter', webkitHyphenateLimitAfter)
	    Object.defineProperty(prototype, 'webkit-hyphenate-limit-after', webkitHyphenateLimitAfter)
	    var webkitHyphenateLimitBefore = __webpack_require__(455).definition;
	    Object.defineProperty(prototype, 'webkitHyphenateLimitBefore', webkitHyphenateLimitBefore)
	    Object.defineProperty(prototype, 'webkit-hyphenate-limit-before', webkitHyphenateLimitBefore)
	    var webkitHyphenateLimitLines = __webpack_require__(456).definition;
	    Object.defineProperty(prototype, 'webkitHyphenateLimitLines', webkitHyphenateLimitLines)
	    Object.defineProperty(prototype, 'webkit-hyphenate-limit-lines', webkitHyphenateLimitLines)
	    var webkitHyphens = __webpack_require__(457).definition;
	    Object.defineProperty(prototype, 'webkitHyphens', webkitHyphens)
	    Object.defineProperty(prototype, 'webkit-hyphens', webkitHyphens)
	    var webkitLineAlign = __webpack_require__(458).definition;
	    Object.defineProperty(prototype, 'webkitLineAlign', webkitLineAlign)
	    Object.defineProperty(prototype, 'webkit-line-align', webkitLineAlign)
	    var webkitLineBoxContain = __webpack_require__(459).definition;
	    Object.defineProperty(prototype, 'webkitLineBoxContain', webkitLineBoxContain)
	    Object.defineProperty(prototype, 'webkit-line-box-contain', webkitLineBoxContain)
	    var webkitLineBreak = __webpack_require__(460).definition;
	    Object.defineProperty(prototype, 'webkitLineBreak', webkitLineBreak)
	    Object.defineProperty(prototype, 'webkit-line-break', webkitLineBreak)
	    var webkitLineClamp = __webpack_require__(461).definition;
	    Object.defineProperty(prototype, 'webkitLineClamp', webkitLineClamp)
	    Object.defineProperty(prototype, 'webkit-line-clamp', webkitLineClamp)
	    var webkitLineGrid = __webpack_require__(462).definition;
	    Object.defineProperty(prototype, 'webkitLineGrid', webkitLineGrid)
	    Object.defineProperty(prototype, 'webkit-line-grid', webkitLineGrid)
	    var webkitLineSnap = __webpack_require__(463).definition;
	    Object.defineProperty(prototype, 'webkitLineSnap', webkitLineSnap)
	    Object.defineProperty(prototype, 'webkit-line-snap', webkitLineSnap)
	    var webkitLocale = __webpack_require__(464).definition;
	    Object.defineProperty(prototype, 'webkitLocale', webkitLocale)
	    Object.defineProperty(prototype, 'webkit-locale', webkitLocale)
	    var webkitLogicalHeight = __webpack_require__(465).definition;
	    Object.defineProperty(prototype, 'webkitLogicalHeight', webkitLogicalHeight)
	    Object.defineProperty(prototype, 'webkit-logical-height', webkitLogicalHeight)
	    var webkitLogicalWidth = __webpack_require__(466).definition;
	    Object.defineProperty(prototype, 'webkitLogicalWidth', webkitLogicalWidth)
	    Object.defineProperty(prototype, 'webkit-logical-width', webkitLogicalWidth)
	    var webkitMarginAfter = __webpack_require__(467).definition;
	    Object.defineProperty(prototype, 'webkitMarginAfter', webkitMarginAfter)
	    Object.defineProperty(prototype, 'webkit-margin-after', webkitMarginAfter)
	    var webkitMarginAfterCollapse = __webpack_require__(468).definition;
	    Object.defineProperty(prototype, 'webkitMarginAfterCollapse', webkitMarginAfterCollapse)
	    Object.defineProperty(prototype, 'webkit-margin-after-collapse', webkitMarginAfterCollapse)
	    var webkitMarginBefore = __webpack_require__(469).definition;
	    Object.defineProperty(prototype, 'webkitMarginBefore', webkitMarginBefore)
	    Object.defineProperty(prototype, 'webkit-margin-before', webkitMarginBefore)
	    var webkitMarginBeforeCollapse = __webpack_require__(470).definition;
	    Object.defineProperty(prototype, 'webkitMarginBeforeCollapse', webkitMarginBeforeCollapse)
	    Object.defineProperty(prototype, 'webkit-margin-before-collapse', webkitMarginBeforeCollapse)
	    var webkitMarginBottomCollapse = __webpack_require__(471).definition;
	    Object.defineProperty(prototype, 'webkitMarginBottomCollapse', webkitMarginBottomCollapse)
	    Object.defineProperty(prototype, 'webkit-margin-bottom-collapse', webkitMarginBottomCollapse)
	    var webkitMarginCollapse = __webpack_require__(472).definition;
	    Object.defineProperty(prototype, 'webkitMarginCollapse', webkitMarginCollapse)
	    Object.defineProperty(prototype, 'webkit-margin-collapse', webkitMarginCollapse)
	    var webkitMarginEnd = __webpack_require__(473).definition;
	    Object.defineProperty(prototype, 'webkitMarginEnd', webkitMarginEnd)
	    Object.defineProperty(prototype, 'webkit-margin-end', webkitMarginEnd)
	    var webkitMarginStart = __webpack_require__(474).definition;
	    Object.defineProperty(prototype, 'webkitMarginStart', webkitMarginStart)
	    Object.defineProperty(prototype, 'webkit-margin-start', webkitMarginStart)
	    var webkitMarginTopCollapse = __webpack_require__(475).definition;
	    Object.defineProperty(prototype, 'webkitMarginTopCollapse', webkitMarginTopCollapse)
	    Object.defineProperty(prototype, 'webkit-margin-top-collapse', webkitMarginTopCollapse)
	    var webkitMarquee = __webpack_require__(476).definition;
	    Object.defineProperty(prototype, 'webkitMarquee', webkitMarquee)
	    Object.defineProperty(prototype, 'webkit-marquee', webkitMarquee)
	    var webkitMarqueeDirection = __webpack_require__(477).definition;
	    Object.defineProperty(prototype, 'webkitMarqueeDirection', webkitMarqueeDirection)
	    Object.defineProperty(prototype, 'webkit-marquee-direction', webkitMarqueeDirection)
	    var webkitMarqueeIncrement = __webpack_require__(478).definition;
	    Object.defineProperty(prototype, 'webkitMarqueeIncrement', webkitMarqueeIncrement)
	    Object.defineProperty(prototype, 'webkit-marquee-increment', webkitMarqueeIncrement)
	    var webkitMarqueeRepetition = __webpack_require__(479).definition;
	    Object.defineProperty(prototype, 'webkitMarqueeRepetition', webkitMarqueeRepetition)
	    Object.defineProperty(prototype, 'webkit-marquee-repetition', webkitMarqueeRepetition)
	    var webkitMarqueeSpeed = __webpack_require__(480).definition;
	    Object.defineProperty(prototype, 'webkitMarqueeSpeed', webkitMarqueeSpeed)
	    Object.defineProperty(prototype, 'webkit-marquee-speed', webkitMarqueeSpeed)
	    var webkitMarqueeStyle = __webpack_require__(481).definition;
	    Object.defineProperty(prototype, 'webkitMarqueeStyle', webkitMarqueeStyle)
	    Object.defineProperty(prototype, 'webkit-marquee-style', webkitMarqueeStyle)
	    var webkitMask = __webpack_require__(482).definition;
	    Object.defineProperty(prototype, 'webkitMask', webkitMask)
	    Object.defineProperty(prototype, 'webkit-mask', webkitMask)
	    var webkitMaskAttachment = __webpack_require__(483).definition;
	    Object.defineProperty(prototype, 'webkitMaskAttachment', webkitMaskAttachment)
	    Object.defineProperty(prototype, 'webkit-mask-attachment', webkitMaskAttachment)
	    var webkitMaskBoxImage = __webpack_require__(484).definition;
	    Object.defineProperty(prototype, 'webkitMaskBoxImage', webkitMaskBoxImage)
	    Object.defineProperty(prototype, 'webkit-mask-box-image', webkitMaskBoxImage)
	    var webkitMaskBoxImageOutset = __webpack_require__(485).definition;
	    Object.defineProperty(prototype, 'webkitMaskBoxImageOutset', webkitMaskBoxImageOutset)
	    Object.defineProperty(prototype, 'webkit-mask-box-image-outset', webkitMaskBoxImageOutset)
	    var webkitMaskBoxImageRepeat = __webpack_require__(486).definition;
	    Object.defineProperty(prototype, 'webkitMaskBoxImageRepeat', webkitMaskBoxImageRepeat)
	    Object.defineProperty(prototype, 'webkit-mask-box-image-repeat', webkitMaskBoxImageRepeat)
	    var webkitMaskBoxImageSlice = __webpack_require__(487).definition;
	    Object.defineProperty(prototype, 'webkitMaskBoxImageSlice', webkitMaskBoxImageSlice)
	    Object.defineProperty(prototype, 'webkit-mask-box-image-slice', webkitMaskBoxImageSlice)
	    var webkitMaskBoxImageSource = __webpack_require__(488).definition;
	    Object.defineProperty(prototype, 'webkitMaskBoxImageSource', webkitMaskBoxImageSource)
	    Object.defineProperty(prototype, 'webkit-mask-box-image-source', webkitMaskBoxImageSource)
	    var webkitMaskBoxImageWidth = __webpack_require__(489).definition;
	    Object.defineProperty(prototype, 'webkitMaskBoxImageWidth', webkitMaskBoxImageWidth)
	    Object.defineProperty(prototype, 'webkit-mask-box-image-width', webkitMaskBoxImageWidth)
	    var webkitMaskClip = __webpack_require__(490).definition;
	    Object.defineProperty(prototype, 'webkitMaskClip', webkitMaskClip)
	    Object.defineProperty(prototype, 'webkit-mask-clip', webkitMaskClip)
	    var webkitMaskComposite = __webpack_require__(491).definition;
	    Object.defineProperty(prototype, 'webkitMaskComposite', webkitMaskComposite)
	    Object.defineProperty(prototype, 'webkit-mask-composite', webkitMaskComposite)
	    var webkitMaskImage = __webpack_require__(492).definition;
	    Object.defineProperty(prototype, 'webkitMaskImage', webkitMaskImage)
	    Object.defineProperty(prototype, 'webkit-mask-image', webkitMaskImage)
	    var webkitMaskOrigin = __webpack_require__(493).definition;
	    Object.defineProperty(prototype, 'webkitMaskOrigin', webkitMaskOrigin)
	    Object.defineProperty(prototype, 'webkit-mask-origin', webkitMaskOrigin)
	    var webkitMaskPosition = __webpack_require__(494).definition;
	    Object.defineProperty(prototype, 'webkitMaskPosition', webkitMaskPosition)
	    Object.defineProperty(prototype, 'webkit-mask-position', webkitMaskPosition)
	    var webkitMaskPositionX = __webpack_require__(495).definition;
	    Object.defineProperty(prototype, 'webkitMaskPositionX', webkitMaskPositionX)
	    Object.defineProperty(prototype, 'webkit-mask-position-x', webkitMaskPositionX)
	    var webkitMaskPositionY = __webpack_require__(496).definition;
	    Object.defineProperty(prototype, 'webkitMaskPositionY', webkitMaskPositionY)
	    Object.defineProperty(prototype, 'webkit-mask-position-y', webkitMaskPositionY)
	    var webkitMaskRepeat = __webpack_require__(497).definition;
	    Object.defineProperty(prototype, 'webkitMaskRepeat', webkitMaskRepeat)
	    Object.defineProperty(prototype, 'webkit-mask-repeat', webkitMaskRepeat)
	    var webkitMaskRepeatX = __webpack_require__(498).definition;
	    Object.defineProperty(prototype, 'webkitMaskRepeatX', webkitMaskRepeatX)
	    Object.defineProperty(prototype, 'webkit-mask-repeat-x', webkitMaskRepeatX)
	    var webkitMaskRepeatY = __webpack_require__(499).definition;
	    Object.defineProperty(prototype, 'webkitMaskRepeatY', webkitMaskRepeatY)
	    Object.defineProperty(prototype, 'webkit-mask-repeat-y', webkitMaskRepeatY)
	    var webkitMaskSize = __webpack_require__(500).definition;
	    Object.defineProperty(prototype, 'webkitMaskSize', webkitMaskSize)
	    Object.defineProperty(prototype, 'webkit-mask-size', webkitMaskSize)
	    var webkitMatchNearestMailBlockquoteColor = __webpack_require__(501).definition;
	    Object.defineProperty(prototype, 'webkitMatchNearestMailBlockquoteColor', webkitMatchNearestMailBlockquoteColor)
	    Object.defineProperty(prototype, 'webkit-match-nearest-mail-blockquote-color', webkitMatchNearestMailBlockquoteColor)
	    var webkitMaxLogicalHeight = __webpack_require__(502).definition;
	    Object.defineProperty(prototype, 'webkitMaxLogicalHeight', webkitMaxLogicalHeight)
	    Object.defineProperty(prototype, 'webkit-max-logical-height', webkitMaxLogicalHeight)
	    var webkitMaxLogicalWidth = __webpack_require__(503).definition;
	    Object.defineProperty(prototype, 'webkitMaxLogicalWidth', webkitMaxLogicalWidth)
	    Object.defineProperty(prototype, 'webkit-max-logical-width', webkitMaxLogicalWidth)
	    var webkitMinLogicalHeight = __webpack_require__(504).definition;
	    Object.defineProperty(prototype, 'webkitMinLogicalHeight', webkitMinLogicalHeight)
	    Object.defineProperty(prototype, 'webkit-min-logical-height', webkitMinLogicalHeight)
	    var webkitMinLogicalWidth = __webpack_require__(505).definition;
	    Object.defineProperty(prototype, 'webkitMinLogicalWidth', webkitMinLogicalWidth)
	    Object.defineProperty(prototype, 'webkit-min-logical-width', webkitMinLogicalWidth)
	    var webkitNbspMode = __webpack_require__(506).definition;
	    Object.defineProperty(prototype, 'webkitNbspMode', webkitNbspMode)
	    Object.defineProperty(prototype, 'webkit-nbsp-mode', webkitNbspMode)
	    var webkitOverflowScrolling = __webpack_require__(507).definition;
	    Object.defineProperty(prototype, 'webkitOverflowScrolling', webkitOverflowScrolling)
	    Object.defineProperty(prototype, 'webkit-overflow-scrolling', webkitOverflowScrolling)
	    var webkitPaddingAfter = __webpack_require__(508).definition;
	    Object.defineProperty(prototype, 'webkitPaddingAfter', webkitPaddingAfter)
	    Object.defineProperty(prototype, 'webkit-padding-after', webkitPaddingAfter)
	    var webkitPaddingBefore = __webpack_require__(509).definition;
	    Object.defineProperty(prototype, 'webkitPaddingBefore', webkitPaddingBefore)
	    Object.defineProperty(prototype, 'webkit-padding-before', webkitPaddingBefore)
	    var webkitPaddingEnd = __webpack_require__(510).definition;
	    Object.defineProperty(prototype, 'webkitPaddingEnd', webkitPaddingEnd)
	    Object.defineProperty(prototype, 'webkit-padding-end', webkitPaddingEnd)
	    var webkitPaddingStart = __webpack_require__(511).definition;
	    Object.defineProperty(prototype, 'webkitPaddingStart', webkitPaddingStart)
	    Object.defineProperty(prototype, 'webkit-padding-start', webkitPaddingStart)
	    var webkitPerspective = __webpack_require__(512).definition;
	    Object.defineProperty(prototype, 'webkitPerspective', webkitPerspective)
	    Object.defineProperty(prototype, 'webkit-perspective', webkitPerspective)
	    var webkitPerspectiveOrigin = __webpack_require__(513).definition;
	    Object.defineProperty(prototype, 'webkitPerspectiveOrigin', webkitPerspectiveOrigin)
	    Object.defineProperty(prototype, 'webkit-perspective-origin', webkitPerspectiveOrigin)
	    var webkitPerspectiveOriginX = __webpack_require__(514).definition;
	    Object.defineProperty(prototype, 'webkitPerspectiveOriginX', webkitPerspectiveOriginX)
	    Object.defineProperty(prototype, 'webkit-perspective-origin-x', webkitPerspectiveOriginX)
	    var webkitPerspectiveOriginY = __webpack_require__(515).definition;
	    Object.defineProperty(prototype, 'webkitPerspectiveOriginY', webkitPerspectiveOriginY)
	    Object.defineProperty(prototype, 'webkit-perspective-origin-y', webkitPerspectiveOriginY)
	    var webkitPrintColorAdjust = __webpack_require__(516).definition;
	    Object.defineProperty(prototype, 'webkitPrintColorAdjust', webkitPrintColorAdjust)
	    Object.defineProperty(prototype, 'webkit-print-color-adjust', webkitPrintColorAdjust)
	    var webkitRegionBreakAfter = __webpack_require__(517).definition;
	    Object.defineProperty(prototype, 'webkitRegionBreakAfter', webkitRegionBreakAfter)
	    Object.defineProperty(prototype, 'webkit-region-break-after', webkitRegionBreakAfter)
	    var webkitRegionBreakBefore = __webpack_require__(518).definition;
	    Object.defineProperty(prototype, 'webkitRegionBreakBefore', webkitRegionBreakBefore)
	    Object.defineProperty(prototype, 'webkit-region-break-before', webkitRegionBreakBefore)
	    var webkitRegionBreakInside = __webpack_require__(519).definition;
	    Object.defineProperty(prototype, 'webkitRegionBreakInside', webkitRegionBreakInside)
	    Object.defineProperty(prototype, 'webkit-region-break-inside', webkitRegionBreakInside)
	    var webkitRegionOverflow = __webpack_require__(520).definition;
	    Object.defineProperty(prototype, 'webkitRegionOverflow', webkitRegionOverflow)
	    Object.defineProperty(prototype, 'webkit-region-overflow', webkitRegionOverflow)
	    var webkitRtlOrdering = __webpack_require__(521).definition;
	    Object.defineProperty(prototype, 'webkitRtlOrdering', webkitRtlOrdering)
	    Object.defineProperty(prototype, 'webkit-rtl-ordering', webkitRtlOrdering)
	    var webkitSvgShadow = __webpack_require__(522).definition;
	    Object.defineProperty(prototype, 'webkitSvgShadow', webkitSvgShadow)
	    Object.defineProperty(prototype, 'webkit-svg-shadow', webkitSvgShadow)
	    var webkitTapHighlightColor = __webpack_require__(523).definition;
	    Object.defineProperty(prototype, 'webkitTapHighlightColor', webkitTapHighlightColor)
	    Object.defineProperty(prototype, 'webkit-tap-highlight-color', webkitTapHighlightColor)
	    var webkitTextCombine = __webpack_require__(524).definition;
	    Object.defineProperty(prototype, 'webkitTextCombine', webkitTextCombine)
	    Object.defineProperty(prototype, 'webkit-text-combine', webkitTextCombine)
	    var webkitTextDecorationsInEffect = __webpack_require__(525).definition;
	    Object.defineProperty(prototype, 'webkitTextDecorationsInEffect', webkitTextDecorationsInEffect)
	    Object.defineProperty(prototype, 'webkit-text-decorations-in-effect', webkitTextDecorationsInEffect)
	    var webkitTextEmphasis = __webpack_require__(526).definition;
	    Object.defineProperty(prototype, 'webkitTextEmphasis', webkitTextEmphasis)
	    Object.defineProperty(prototype, 'webkit-text-emphasis', webkitTextEmphasis)
	    var webkitTextEmphasisColor = __webpack_require__(527).definition;
	    Object.defineProperty(prototype, 'webkitTextEmphasisColor', webkitTextEmphasisColor)
	    Object.defineProperty(prototype, 'webkit-text-emphasis-color', webkitTextEmphasisColor)
	    var webkitTextEmphasisPosition = __webpack_require__(528).definition;
	    Object.defineProperty(prototype, 'webkitTextEmphasisPosition', webkitTextEmphasisPosition)
	    Object.defineProperty(prototype, 'webkit-text-emphasis-position', webkitTextEmphasisPosition)
	    var webkitTextEmphasisStyle = __webpack_require__(529).definition;
	    Object.defineProperty(prototype, 'webkitTextEmphasisStyle', webkitTextEmphasisStyle)
	    Object.defineProperty(prototype, 'webkit-text-emphasis-style', webkitTextEmphasisStyle)
	    var webkitTextFillColor = __webpack_require__(530).definition;
	    Object.defineProperty(prototype, 'webkitTextFillColor', webkitTextFillColor)
	    Object.defineProperty(prototype, 'webkit-text-fill-color', webkitTextFillColor)
	    var webkitTextOrientation = __webpack_require__(531).definition;
	    Object.defineProperty(prototype, 'webkitTextOrientation', webkitTextOrientation)
	    Object.defineProperty(prototype, 'webkit-text-orientation', webkitTextOrientation)
	    var webkitTextSecurity = __webpack_require__(532).definition;
	    Object.defineProperty(prototype, 'webkitTextSecurity', webkitTextSecurity)
	    Object.defineProperty(prototype, 'webkit-text-security', webkitTextSecurity)
	    var webkitTextSizeAdjust = __webpack_require__(533).definition;
	    Object.defineProperty(prototype, 'webkitTextSizeAdjust', webkitTextSizeAdjust)
	    Object.defineProperty(prototype, 'webkit-text-size-adjust', webkitTextSizeAdjust)
	    var webkitTextStroke = __webpack_require__(534).definition;
	    Object.defineProperty(prototype, 'webkitTextStroke', webkitTextStroke)
	    Object.defineProperty(prototype, 'webkit-text-stroke', webkitTextStroke)
	    var webkitTextStrokeColor = __webpack_require__(535).definition;
	    Object.defineProperty(prototype, 'webkitTextStrokeColor', webkitTextStrokeColor)
	    Object.defineProperty(prototype, 'webkit-text-stroke-color', webkitTextStrokeColor)
	    var webkitTextStrokeWidth = __webpack_require__(536).definition;
	    Object.defineProperty(prototype, 'webkitTextStrokeWidth', webkitTextStrokeWidth)
	    Object.defineProperty(prototype, 'webkit-text-stroke-width', webkitTextStrokeWidth)
	    var webkitTransform = __webpack_require__(537).definition;
	    Object.defineProperty(prototype, 'webkitTransform', webkitTransform)
	    Object.defineProperty(prototype, 'webkit-transform', webkitTransform)
	    var webkitTransformOrigin = __webpack_require__(538).definition;
	    Object.defineProperty(prototype, 'webkitTransformOrigin', webkitTransformOrigin)
	    Object.defineProperty(prototype, 'webkit-transform-origin', webkitTransformOrigin)
	    var webkitTransformOriginX = __webpack_require__(539).definition;
	    Object.defineProperty(prototype, 'webkitTransformOriginX', webkitTransformOriginX)
	    Object.defineProperty(prototype, 'webkit-transform-origin-x', webkitTransformOriginX)
	    var webkitTransformOriginY = __webpack_require__(540).definition;
	    Object.defineProperty(prototype, 'webkitTransformOriginY', webkitTransformOriginY)
	    Object.defineProperty(prototype, 'webkit-transform-origin-y', webkitTransformOriginY)
	    var webkitTransformOriginZ = __webpack_require__(541).definition;
	    Object.defineProperty(prototype, 'webkitTransformOriginZ', webkitTransformOriginZ)
	    Object.defineProperty(prototype, 'webkit-transform-origin-z', webkitTransformOriginZ)
	    var webkitTransformStyle = __webpack_require__(542).definition;
	    Object.defineProperty(prototype, 'webkitTransformStyle', webkitTransformStyle)
	    Object.defineProperty(prototype, 'webkit-transform-style', webkitTransformStyle)
	    var webkitTransition = __webpack_require__(543).definition;
	    Object.defineProperty(prototype, 'webkitTransition', webkitTransition)
	    Object.defineProperty(prototype, 'webkit-transition', webkitTransition)
	    var webkitTransitionDelay = __webpack_require__(544).definition;
	    Object.defineProperty(prototype, 'webkitTransitionDelay', webkitTransitionDelay)
	    Object.defineProperty(prototype, 'webkit-transition-delay', webkitTransitionDelay)
	    var webkitTransitionDuration = __webpack_require__(545).definition;
	    Object.defineProperty(prototype, 'webkitTransitionDuration', webkitTransitionDuration)
	    Object.defineProperty(prototype, 'webkit-transition-duration', webkitTransitionDuration)
	    var webkitTransitionProperty = __webpack_require__(546).definition;
	    Object.defineProperty(prototype, 'webkitTransitionProperty', webkitTransitionProperty)
	    Object.defineProperty(prototype, 'webkit-transition-property', webkitTransitionProperty)
	    var webkitTransitionTimingFunction = __webpack_require__(547).definition;
	    Object.defineProperty(prototype, 'webkitTransitionTimingFunction', webkitTransitionTimingFunction)
	    Object.defineProperty(prototype, 'webkit-transition-timing-function', webkitTransitionTimingFunction)
	    var webkitUserDrag = __webpack_require__(548).definition;
	    Object.defineProperty(prototype, 'webkitUserDrag', webkitUserDrag)
	    Object.defineProperty(prototype, 'webkit-user-drag', webkitUserDrag)
	    var webkitUserModify = __webpack_require__(549).definition;
	    Object.defineProperty(prototype, 'webkitUserModify', webkitUserModify)
	    Object.defineProperty(prototype, 'webkit-user-modify', webkitUserModify)
	    var webkitUserSelect = __webpack_require__(550).definition;
	    Object.defineProperty(prototype, 'webkitUserSelect', webkitUserSelect)
	    Object.defineProperty(prototype, 'webkit-user-select', webkitUserSelect)
	    var webkitWrap = __webpack_require__(551).definition;
	    Object.defineProperty(prototype, 'webkitWrap', webkitWrap)
	    Object.defineProperty(prototype, 'webkit-wrap', webkitWrap)
	    var webkitWrapFlow = __webpack_require__(552).definition;
	    Object.defineProperty(prototype, 'webkitWrapFlow', webkitWrapFlow)
	    Object.defineProperty(prototype, 'webkit-wrap-flow', webkitWrapFlow)
	    var webkitWrapMargin = __webpack_require__(553).definition;
	    Object.defineProperty(prototype, 'webkitWrapMargin', webkitWrapMargin)
	    Object.defineProperty(prototype, 'webkit-wrap-margin', webkitWrapMargin)
	    var webkitWrapPadding = __webpack_require__(554).definition;
	    Object.defineProperty(prototype, 'webkitWrapPadding', webkitWrapPadding)
	    Object.defineProperty(prototype, 'webkit-wrap-padding', webkitWrapPadding)
	    var webkitWrapShapeInside = __webpack_require__(555).definition;
	    Object.defineProperty(prototype, 'webkitWrapShapeInside', webkitWrapShapeInside)
	    Object.defineProperty(prototype, 'webkit-wrap-shape-inside', webkitWrapShapeInside)
	    var webkitWrapShapeOutside = __webpack_require__(556).definition;
	    Object.defineProperty(prototype, 'webkitWrapShapeOutside', webkitWrapShapeOutside)
	    Object.defineProperty(prototype, 'webkit-wrap-shape-outside', webkitWrapShapeOutside)
	    var webkitWrapThrough = __webpack_require__(557).definition;
	    Object.defineProperty(prototype, 'webkitWrapThrough', webkitWrapThrough)
	    Object.defineProperty(prototype, 'webkit-wrap-through', webkitWrapThrough)
	    var webkitWritingMode = __webpack_require__(558).definition;
	    Object.defineProperty(prototype, 'webkitWritingMode', webkitWritingMode)
	    Object.defineProperty(prototype, 'webkit-writing-mode', webkitWritingMode)
	    var whiteSpace = __webpack_require__(559).definition;
	    Object.defineProperty(prototype, 'whiteSpace', whiteSpace)
	    Object.defineProperty(prototype, 'white-space', whiteSpace)
	    var widows = __webpack_require__(560).definition;
	    Object.defineProperty(prototype, 'widows', widows)
	    var width = __webpack_require__(561).definition;
	    Object.defineProperty(prototype, 'width', width)
	    var wordBreak = __webpack_require__(562).definition;
	    Object.defineProperty(prototype, 'wordBreak', wordBreak)
	    Object.defineProperty(prototype, 'word-break', wordBreak)
	    var wordSpacing = __webpack_require__(563).definition;
	    Object.defineProperty(prototype, 'wordSpacing', wordSpacing)
	    Object.defineProperty(prototype, 'word-spacing', wordSpacing)
	    var wordWrap = __webpack_require__(564).definition;
	    Object.defineProperty(prototype, 'wordWrap', wordWrap)
	    Object.defineProperty(prototype, 'word-wrap', wordWrap)
	    var writingMode = __webpack_require__(565).definition;
	    Object.defineProperty(prototype, 'writingMode', writingMode)
	    Object.defineProperty(prototype, 'writing-mode', writingMode)
	    var zIndex = __webpack_require__(566).definition;
	    Object.defineProperty(prototype, 'zIndex', zIndex)
	    Object.defineProperty(prototype, 'z-index', zIndex)
	    var zoom = __webpack_require__(567).definition;
	    Object.defineProperty(prototype, 'zoom', zoom)
	};


/***/ },
/* 202 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('alignment-baseline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('alignment-baseline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	module.exports.definition = {
	    set: function (v) {
	        var valueType = parsers.valueType(v);
	        if (valueType === parsers.TYPES.ANGLE) {
	            return this._setProperty('azimuth', parsers.parseAngle(v));
	        }
	        if (valueType === parsers.TYPES.KEYWORD) {
	            var keywords = v.toLowerCase().trim().split(/\s+/);
	            var hasBehind = false;
	            if (keywords.length > 2) {
	                return;
	            }
	            var behindIndex = keywords.indexOf('behind');
	            hasBehind = (behindIndex !== -1);

	            if (keywords.length === 2) {
	                if (!hasBehind) {
	                    return;
	                }
	                keywords.splice(behindIndex, 1);
	            }
	            if (keywords[0] === 'leftwards' || keywords[0] === 'rightwards') {
	                if (hasBehind) {
	                    return;
	                }
	                return this._setProperty('azimuth', keywords[0]);
	            }
	            if (keywords[0] === 'behind') {
	                return this._setProperty('azimuth', '180deg');
	            }
	            var deg;
	            switch (keywords[0]) {
	            case 'left-side':
	                return this._setProperty('azimuth', '270deg');
	            case 'far-left':
	                return this._setProperty('azimuth', (hasBehind ? 240 : 300) + 'deg');
	            case 'left':
	                return this._setProperty('azimuth', (hasBehind ? 220 : 320) + 'deg');
	            case 'center-left':
	                return this._setProperty('azimuth', (hasBehind ? 200 : 340) + 'deg');
	            case 'center':
	                return this._setProperty('azimuth', (hasBehind ? 180 : 0) + 'deg');
	            case 'center-right':
	                return this._setProperty('azimuth', (hasBehind ? 160 : 20) + 'deg');
	            case 'right':
	                return this._setProperty('azimuth', (hasBehind ? 140 : 40) + 'deg');
	            case 'far-right':
	                return this._setProperty('azimuth', (hasBehind ? 120 : 60) + 'deg');
	            case 'right-side':
	                return this._setProperty('azimuth', '90deg');
	            default:
	                return;
	            }
	        }
	    },
	    get: function () {
	        return this.getPropertyValue('azimuth');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var shorthandParser = __webpack_require__(1).shorthandParser;
	var shorthandSetter = __webpack_require__(1).shorthandSetter;
	var shorthandGetter = __webpack_require__(1).shorthandGetter;

	var shorthand_for = {
	    'background-color': __webpack_require__(87),
	    'background-image': __webpack_require__(88),
	    'background-repeat': __webpack_require__(90),
	    'background-attachment': __webpack_require__(86),
	    'background-position': __webpack_require__(89)
	};

	module.exports.isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};

	module.exports.definition = {
	    set: shorthandSetter('background', shorthand_for),
	    get: shorthandGetter('background', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 205 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 206 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 207 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-position-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-position-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 208 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-position-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-position-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 209 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-repeat-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 210 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-repeat-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-repeat-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 211 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('background-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('background-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 212 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('baseline-shift', v);
	    },
	    get: function () {
	        return this.getPropertyValue('baseline-shift');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var shorthandParser = __webpack_require__(1).shorthandParser;
	var shorthandSetter = __webpack_require__(1).shorthandSetter;
	var shorthandGetter = __webpack_require__(1).shorthandGetter;

	var shorthand_for = {
	    'border-width': __webpack_require__(22),
	    'border-style': __webpack_require__(21),
	    'border-color': __webpack_require__(20)
	};

	var isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	module.exports.isValid = isValid;

	var parser = function (v) {
	    if (v.toString().toLowerCase() === 'none') {
	        v = '';
	    }
	    if (isValid(v)) {
	        return v;
	    }
	    return undefined;
	};

	var myShorthandSetter = shorthandSetter('border', shorthand_for);
	var myShorthandGetter = shorthandGetter('border', shorthand_for);

	module.exports.definition = {
	    set: function (v) {
	        if (v.toString().toLowerCase() === 'none') {
	            v = '';
	        }
	        myShorthandSetter.call(this, v);
	        this.removeProperty('border-top');
	        this.removeProperty('border-left');
	        this.removeProperty('border-right');
	        this.removeProperty('border-bottom');
	        this._values['border-top'] = this._values.border;
	        this._values['border-left'] = this._values.border;
	        this._values['border-right'] = this._values.border;
	        this._values['border-bottom'] = this._values.border;
	    },
	    get: myShorthandGetter,
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var shorthandSetter = __webpack_require__(1).shorthandSetter;
	var shorthandGetter = __webpack_require__(1).shorthandGetter;
	var shorthandParser = __webpack_require__(1).shorthandParser;

	var shorthand_for = {
	    'border-bottom-width': __webpack_require__(93),
	    'border-bottom-style': __webpack_require__(92),
	    'border-bottom-color': __webpack_require__(91)
	};

	var isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: shorthandSetter('border-bottom', shorthand_for),
	    get: shorthandGetter('border-bottom', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 215 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-bottom-left-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-left-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 216 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-bottom-right-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-bottom-right-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	var parse = function parse(v) {
	    if (parsers.valueType(v) === parsers.TYPES.KEYWORD && (v.toLowerCase() === 'collapse' || v.toLowerCase() === 'separate' || v.toLowerCase() === 'inherit')) {
	        return v;
	    }
	    return undefined;
	};

	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-collapse', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('border-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 218 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 219 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 220 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 221 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 222 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 223 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var shorthandSetter = __webpack_require__(1).shorthandSetter;
	var shorthandGetter = __webpack_require__(1).shorthandGetter;
	var shorthandParser = __webpack_require__(1).shorthandParser;

	var shorthand_for = {
	    'border-left-width': __webpack_require__(96),
	    'border-left-style': __webpack_require__(95),
	    'border-left-color': __webpack_require__(94)
	};

	var isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: shorthandSetter('border-left', shorthand_for),
	    get: shorthandGetter('border-left', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 225 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var shorthandSetter = __webpack_require__(1).shorthandSetter;
	var shorthandGetter = __webpack_require__(1).shorthandGetter;
	var shorthandParser = __webpack_require__(1).shorthandParser;

	var shorthand_for = {
	    'border-right-width': __webpack_require__(99),
	    'border-right-style': __webpack_require__(98),
	    'border-right-color': __webpack_require__(97)
	};

	var isValid = function isValid(v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};
	module.exports.isValid = isValid;

	module.exports.definition = {
	    set: shorthandSetter('border-right', shorthand_for),
	    get: shorthandGetter('border-right', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parsers = __webpack_require__(1);

	// <length> <length>? | inherit
	// if one, it applies to both horizontal and verical spacing
	// if two, the first applies to the horizontal and the second applies to vertical spacing

	var parse = function parse(v) {
	    if (v.toLowerCase() === 'inherit') {
	        return v;
	    }
	    var parts = v.split(/\s+/);
	    if (parts.length !== 1 && parts.length !== 2) {
	        return undefined;
	    }
	    parts.forEach(function (part) {
	        if (parsers.valueType(part) !== parsers.TYPES.LENGTH) {
	            return undefined;
	        }
	    });

	    return v;
	};

	module.exports.isValid = function isValid(v) {
	    return parse(v) !== undefined;
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-spacing', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('border-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var shorthandSetter = __webpack_require__(1).shorthandSetter;
	var shorthandGetter = __webpack_require__(1).shorthandGetter;
	var shorthandParser = __webpack_require__(1).shorthandParser;

	var shorthand_for = {
	    'border-top-width': __webpack_require__(102),
	    'border-top-style': __webpack_require__(101),
	    'border-top-color': __webpack_require__(100)
	};

	module.exports.isValid = function (v) {
	    return shorthandParser(v, shorthand_for) !== undefined;
	};

	module.exports.definition = {
	    set: shorthandSetter('border-top', shorthand_for),
	    get: shorthandGetter('border-top', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 229 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-top-left-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-left-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 230 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('border-top-right-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('border-top-right-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseMeasurement = __webpack_require__(1).parseMeasurement;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('bottom', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 232 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('box-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('box-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 233 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('box-sizing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('box-sizing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 234 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('caption-side', v);
	    },
	    get: function () {
	        return this.getPropertyValue('caption-side');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseKeyword = __webpack_require__(1).parseKeyword;

	var clear_keywords = [ 'none', 'left', 'right', 'both', 'inherit' ];

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('clear', parseKeyword(v, clear_keywords));
	    },
	    get: function () {
	        return this.getPropertyValue('clear');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseMeasurement = __webpack_require__(1).parseMeasurement;

	/*jslint regexp: true*/
	var shape_regex = /^rect\((.*)\)$/i;
	/*jslint regexp: false*/

	var parse = function (val) {
	    if (val === '' || val === null) {
	        return val;
	    }
	    if (typeof val !== 'string') {
	        return undefined;
	    }
	    val = val.toLowerCase();
	    if (val === 'auto' || val === 'inherit') {
	        return val;
	    }
	    var matches = val.match(shape_regex);
	    if (!matches) {
	        return undefined;
	    }
	    var parts = matches[1].split(/\s*,\s*/);
	    if (parts.length !== 4) {
	        return undefined;
	    }
	    var valid = parts.every(function (part, index) {
	        var measurement = parseMeasurement(part);
	        parts[index] = measurement;
	        return measurement !== undefined;
	    });
	    if (!valid) {
	        return undefined;
	    }
	    parts = parts.join(', ');
	    return val.replace(matches[1], parts);
	};

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('clip', parse(v));
	    },
	    get: function () {
	        return this.getPropertyValue('clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 238 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('color-interpolation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-interpolation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 239 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('color-interpolation-filters', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-interpolation-filters');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 240 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('color-profile', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-profile');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 241 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('color-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('color-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 242 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('content', v);
	    },
	    get: function () {
	        return this.getPropertyValue('content');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 243 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('counter-increment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('counter-increment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 244 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('counter-reset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('counter-reset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 245 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('float', v);
	    },
	    get: function () {
	        return this.getPropertyValue('float');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 246 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('cue', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 247 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('cue-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 248 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('cue-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cue-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 249 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('cursor', v);
	    },
	    get: function () {
	        return this.getPropertyValue('cursor');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 250 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 251 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('display', v);
	    },
	    get: function () {
	        return this.getPropertyValue('display');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 252 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('dominant-baseline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('dominant-baseline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 253 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('elevation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('elevation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 254 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('empty-cells', v);
	    },
	    get: function () {
	        return this.getPropertyValue('empty-cells');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 255 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('enable-background', v);
	    },
	    get: function () {
	        return this.getPropertyValue('enable-background');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 256 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('fill', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 257 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('fill-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 258 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('fill-rule', v);
	    },
	    get: function () {
	        return this.getPropertyValue('fill-rule');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 259 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('filter', v);
	    },
	    get: function () {
	        return this.getPropertyValue('filter');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('flood-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('flood-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 261 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('flood-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('flood-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var TYPES = __webpack_require__(1).TYPES;
	var valueType = __webpack_require__(1).valueType;
	var shorthandParser = __webpack_require__(1).shorthandParser;
	var shorthandSetter = __webpack_require__(1).shorthandSetter;
	var shorthandGetter = __webpack_require__(1).shorthandGetter;

	var shorthand_for = {
	    'font-family': __webpack_require__(103),
	    'font-size': __webpack_require__(104),
	    'font-style': __webpack_require__(105),
	    'font-variant': __webpack_require__(106),
	    'font-weight': __webpack_require__(107),
	    'line-height': __webpack_require__(108)
	};

	var static_fonts = ['caption', 'icon', 'menu', 'message-box', 'small-caption', 'status-bar', 'inherit'];

	module.exports.isValid = function isValid(v) {
	    return (shorthandParser(v, shorthand_for) !== undefined) ||
	        (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1);
	};

	var setter = shorthandSetter('font', shorthand_for);

	module.exports.definition = {
	    set: function (v) {
	        var short = shorthandParser(v, shorthand_for);
	        if (short !== undefined) {
	            return setter.call(this, v);
	        }
	        if (valueType(v) === TYPES.KEYWORD && static_fonts.indexOf(v.toLowerCase()) !== -1) {
	            this._setProperty('font', v);
	        }
	    },
	    get: shorthandGetter('font', shorthand_for),
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 263 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('font-size-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-size-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 264 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('font-stretch', v);
	    },
	    get: function () {
	        return this.getPropertyValue('font-stretch');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 265 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('glyph-orientation-horizontal', v);
	    },
	    get: function () {
	        return this.getPropertyValue('glyph-orientation-horizontal');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 266 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('glyph-orientation-vertical', v);
	    },
	    get: function () {
	        return this.getPropertyValue('glyph-orientation-vertical');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseMeasurement = __webpack_require__(1).parseMeasurement;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('height', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 268 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('image-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('image-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 269 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('kerning', v);
	    },
	    get: function () {
	        return this.getPropertyValue('kerning');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseMeasurement = __webpack_require__(1).parseMeasurement;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('left', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 271 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('letter-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('letter-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 272 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('lighting-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('lighting-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 273 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('list-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 274 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('list-style-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 275 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('list-style-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 276 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('list-style-type', v);
	    },
	    get: function () {
	        return this.getPropertyValue('list-style-type');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 277 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('margin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 278 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('margin-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 279 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('margin-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 280 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('margin-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 281 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('margin-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('margin-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 282 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('marker', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 283 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('marker-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 284 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('marker-mid', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-mid');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 285 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('marker-offset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-offset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 286 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('marker-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marker-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 287 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('marks', v);
	    },
	    get: function () {
	        return this.getPropertyValue('marks');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 288 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('mask', v);
	    },
	    get: function () {
	        return this.getPropertyValue('mask');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 289 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('max-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('max-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 290 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('max-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('max-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 291 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('min-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('min-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 292 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('min-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('min-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 293 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseNumber = __webpack_require__(1).parseNumber;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('opacity', parseNumber(v));
	    },
	    get: function () {
	        return this.getPropertyValue('opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 294 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('orphans', v);
	    },
	    get: function () {
	        return this.getPropertyValue('orphans');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 295 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('outline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 296 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('outline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('outline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 297 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('outline-offset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-offset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 298 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('outline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 299 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('outline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('outline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 300 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 301 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('overflow-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 302 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('overflow-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('overflow-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 303 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('padding', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 304 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('padding-bottom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-bottom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 305 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('padding-left', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-left');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 306 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('padding-right', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 307 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('padding-top', v);
	    },
	    get: function () {
	        return this.getPropertyValue('padding-top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 308 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('page', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 309 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('page-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 310 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('page-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 311 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('page-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('page-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 312 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('pause', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 313 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('pause-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 314 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('pause-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pause-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 315 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('pitch', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pitch');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 316 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('pitch-range', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pitch-range');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 317 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('play-during', v);
	    },
	    get: function () {
	        return this.getPropertyValue('play-during');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 318 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('pointer-events', v);
	    },
	    get: function () {
	        return this.getPropertyValue('pointer-events');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 319 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 320 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('quotes', v);
	    },
	    get: function () {
	        return this.getPropertyValue('quotes');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 321 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('resize', v);
	    },
	    get: function () {
	        return this.getPropertyValue('resize');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 322 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('richness', v);
	    },
	    get: function () {
	        return this.getPropertyValue('richness');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 323 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseMeasurement = __webpack_require__(1).parseMeasurement;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('right', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('right');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 324 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('shape-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('shape-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 325 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 326 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('speak', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 327 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('speak-header', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-header');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 328 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('speak-numeral', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-numeral');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 329 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('speak-punctuation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speak-punctuation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 330 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('speech-rate', v);
	    },
	    get: function () {
	        return this.getPropertyValue('speech-rate');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 331 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('src', v);
	    },
	    get: function () {
	        return this.getPropertyValue('src');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 332 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stop-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('stop-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 333 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stop-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stop-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 334 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stress', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stress');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 335 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 336 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke-dasharray', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-dasharray');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 337 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke-dashoffset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-dashoffset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 338 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke-linecap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-linecap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 339 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke-linejoin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-linejoin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 340 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke-miterlimit', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-miterlimit');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 341 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke-opacity', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-opacity');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 342 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('stroke-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('stroke-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 343 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('table-layout', v);
	    },
	    get: function () {
	        return this.getPropertyValue('table-layout');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 344 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 345 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-anchor', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-anchor');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 346 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-decoration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-decoration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 347 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-indent', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-indent');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 348 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-line-through', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 349 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-line-through-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 350 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-line-through-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 351 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-line-through-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 352 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-line-through-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-line-through-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 353 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 354 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-overline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-overline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 356 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-overline-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 357 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-overline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 358 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-overline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-overline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 359 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-rendering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-rendering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 360 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 361 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-transform', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-transform');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 362 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-underline', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-underline-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 364 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-underline-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 365 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-underline-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 366 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('text-underline-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('text-underline-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 367 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseMeasurement = __webpack_require__(1).parseMeasurement;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('top', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('top');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 368 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('unicode-bidi', v);
	    },
	    get: function () {
	        return this.getPropertyValue('unicode-bidi');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 369 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('unicode-range', v);
	    },
	    get: function () {
	        return this.getPropertyValue('unicode-range');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 370 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('vector-effect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('vector-effect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 371 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('vertical-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('vertical-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 372 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('visibility', v);
	    },
	    get: function () {
	        return this.getPropertyValue('visibility');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 373 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('voic-family', v);
	    },
	    get: function () {
	        return this.getPropertyValue('voice-family');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 374 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('volume', v);
	    },
	    get: function () {
	        return this.getPropertyValue('volume');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 375 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 376 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-delay', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-delay');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 377 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 378 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-duration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-duration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 379 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-fill-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-fill-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 380 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-iteration-count', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-iteration-count');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 381 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-name', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-name');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 382 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-play-state', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-play-state');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 383 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-animation-timing-function', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-animation-timing-function');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 384 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-appearance', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-appearance');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 385 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-aspect-ratio', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-aspect-ratio');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 386 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-backface-visibility', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-backface-visibility');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 387 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-background-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 388 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-background-composite', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-composite');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 389 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-background-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 390 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-background-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-background-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 391 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-after-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 393 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-after-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 394 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-after-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-after-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 395 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-before-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 397 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-before-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 398 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-before-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-before-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 399 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-end-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 401 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-end-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 402 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-end-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-end-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 403 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-fit', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-fit');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 404 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-horizontal-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-horizontal-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 405 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 406 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-radius', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-radius');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 407 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-start-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 409 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-start-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 410 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-start-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-start-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 411 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-border-vertical-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-border-vertical-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 412 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 413 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 414 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-flex', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-flex');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 415 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-flex-group', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-flex-group');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 416 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-lines', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-lines');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 417 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-ordinal-group', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-ordinal-group');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 418 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-orient', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-orient');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 419 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 420 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-reflect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-reflect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 421 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-box-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-box-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 422 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-color-correction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-color-correction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 423 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-axis', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-axis');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 424 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 425 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 426 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 427 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-count', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-count');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 428 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-gap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-gap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 429 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-rule', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-rule-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 431 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-rule-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 432 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-rule-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-rule-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 433 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-span', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-span');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 434 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-column-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-column-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 435 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-columns', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-columns');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 436 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-filter', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-filter');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 437 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 438 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 439 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-flow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-flow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 440 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-item-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-item-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 441 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-line-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-line-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 442 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-order', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-order');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 443 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-pack', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-pack');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 444 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flex-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flex-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 445 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flow-from', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flow-from');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 446 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-flow-into', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-flow-into');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 447 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-font-feature-settings', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-feature-settings');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 448 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-font-kerning', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-kerning');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 449 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-font-size-delta', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-size-delta');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 450 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-font-smoothing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-smoothing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 451 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-font-variant-ligatures', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-font-variant-ligatures');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 452 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-highlight', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-highlight');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 453 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-hyphenate-character', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-character');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 454 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-hyphenate-limit-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 455 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-hyphenate-limit-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 456 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-hyphenate-limit-lines', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphenate-limit-lines');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 457 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-hyphens', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-hyphens');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 458 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-line-align', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-align');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 459 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-line-box-contain', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-box-contain');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 460 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-line-break', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-break');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 461 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-line-clamp', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-clamp');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 462 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-line-grid', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-grid');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 463 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-line-snap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-line-snap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 464 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-locale', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-locale');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 465 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 466 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 467 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 468 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-after-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-after-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 469 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 470 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-before-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-before-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 471 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-bottom-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-bottom-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 472 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 473 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 474 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 475 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-margin-top-collapse', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-margin-top-collapse');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 476 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-marquee', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 477 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-marquee-direction', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-direction');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 478 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-marquee-increment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-increment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 479 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-marquee-repetition', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-repetition');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 480 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-marquee-speed', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-speed');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 481 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-marquee-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-marquee-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 482 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 483 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-attachment', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-attachment');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 484 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-box-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 485 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-box-image-outset', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-outset');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 486 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-box-image-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 487 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-box-image-slice', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-slice');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 488 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-box-image-source', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-source');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 489 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-box-image-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-box-image-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 490 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-clip', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-clip');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 491 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-composite', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-composite');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 492 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-image', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-image');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 493 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 494 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 495 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-position-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 496 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-position-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-position-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 497 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-repeat', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 498 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-repeat-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 499 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-repeat-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-repeat-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 500 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-mask-size', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-mask-size');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 501 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-match-nearest-mail-blockquote-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-match-nearest-mail-blockquote-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 502 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-max-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-max-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 503 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-max-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-max-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 504 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-min-logical-height', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-min-logical-height');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 505 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-min-logical-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-min-logical-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 506 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-nbsp-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-nbsp-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 507 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-overflow-scrolling', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-overflow-scrolling');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 508 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-padding-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 509 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-padding-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 510 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-padding-end', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-end');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 511 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-padding-start', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-padding-start');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 512 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-perspective', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 513 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-perspective-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 514 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-perspective-origin-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 515 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-perspective-origin-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-perspective-origin-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 516 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-print-color-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-print-color-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 517 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-region-break-after', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-after');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 518 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-region-break-before', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-before');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 519 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-region-break-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-break-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 520 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-region-overflow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-region-overflow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 521 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-rtl-ordering', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-rtl-ordering');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 522 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-svg-shadow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-svg-shadow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 523 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-tap-highlight-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-tap-highlight-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 524 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-combine', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-combine');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 525 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-decorations-in-effect', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-decorations-in-effect');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 526 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-emphasis', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 527 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-emphasis-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 528 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-emphasis-position', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-position');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 529 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-emphasis-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-emphasis-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 530 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-fill-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-fill-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 531 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-orientation', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-orientation');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 532 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-security', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-security');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 533 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-size-adjust', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-size-adjust');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 534 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-stroke', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 535 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseColor = __webpack_require__(1).parseColor;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-stroke-color', parseColor(v));
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke-color');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 536 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-text-stroke-width', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-text-stroke-width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 537 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transform', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 538 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transform-origin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 539 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transform-origin-x', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-x');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 540 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transform-origin-y', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-y');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 541 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transform-origin-z', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-origin-z');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 542 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transform-style', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transform-style');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 543 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transition', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 544 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transition-delay', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-delay');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 545 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transition-duration', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-duration');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 546 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transition-property', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-property');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 547 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-transition-timing-function', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-transition-timing-function');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 548 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-user-drag', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-drag');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 549 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-user-modify', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-modify');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 550 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-user-select', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-user-select');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 551 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 552 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-wrap-flow', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-flow');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 553 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-wrap-margin', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-margin');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 554 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-wrap-padding', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-padding');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 555 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-wrap-shape-inside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-shape-inside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 556 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-wrap-shape-outside', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-shape-outside');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 557 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-wrap-through', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-wrap-through');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 558 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('-webkit-writing-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('-webkit-writing-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 559 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('white-space', v);
	    },
	    get: function () {
	        return this.getPropertyValue('white-space');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 560 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('widows', v);
	    },
	    get: function () {
	        return this.getPropertyValue('widows');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 561 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var parseMeasurement = __webpack_require__(1).parseMeasurement;

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('width', parseMeasurement(v));
	    },
	    get: function () {
	        return this.getPropertyValue('width');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 562 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('word-break', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-break');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 563 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('word-spacing', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-spacing');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 564 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('word-wrap', v);
	    },
	    get: function () {
	        return this.getPropertyValue('word-wrap');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 565 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('writing-mode', v);
	    },
	    get: function () {
	        return this.getPropertyValue('writing-mode');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 566 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('z-index', v);
	    },
	    get: function () {
	        return this.getPropertyValue('z-index');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 567 */
/***/ function(module, exports) {

	'use strict';

	module.exports.definition = {
	    set: function (v) {
	        this._setProperty('zoom', v);
	    },
	    get: function () {
	        return this.getPropertyValue('zoom');
	    },
	    enumerable: true,
	    configurable: true
	};


/***/ },
/* 568 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*
	  Copyright (C) 2012-2014 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2015 Ingvar Stepanyan <me@rreverser.com>
	  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>
	  Copyright (C) 2012-2013 Michael Ficarra <escodegen.copyright@michael.ficarra.me>
	  Copyright (C) 2012-2013 Mathias Bynens <mathias@qiwi.be>
	  Copyright (C) 2013 Irakli Gozalishvili <rfobic@gmail.com>
	  Copyright (C) 2012 Robert Gust-Bardon <donate@robert.gust-bardon.org>
	  Copyright (C) 2012 John Freeman <jfreeman08@gmail.com>
	  Copyright (C) 2011-2012 Ariya Hidayat <ariya.hidayat@gmail.com>
	  Copyright (C) 2012 Joost-Wim Boekesteijn <joost-wim@boekesteijn.nl>
	  Copyright (C) 2012 Kris Kowal <kris.kowal@cixar.com>
	  Copyright (C) 2012 Arpad Borsos <arpad.borsos@googlemail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	/*global exports:true, require:true, global:true*/
	(function () {
	    'use strict';

	    var Syntax,
	        Precedence,
	        BinaryPrecedence,
	        SourceNode,
	        estraverse,
	        esutils,
	        isArray,
	        base,
	        indent,
	        json,
	        renumber,
	        hexadecimal,
	        quotes,
	        escapeless,
	        newline,
	        space,
	        parentheses,
	        semicolons,
	        safeConcatenation,
	        directive,
	        extra,
	        parse,
	        sourceMap,
	        sourceCode,
	        preserveBlankLines,
	        FORMAT_MINIFY,
	        FORMAT_DEFAULTS;

	    estraverse = __webpack_require__(569);
	    esutils = __webpack_require__(572);

	    Syntax = estraverse.Syntax;

	    // Generation is done by generateExpression.
	    function isExpression(node) {
	        return CodeGenerator.Expression.hasOwnProperty(node.type);
	    }

	    // Generation is done by generateStatement.
	    function isStatement(node) {
	        return CodeGenerator.Statement.hasOwnProperty(node.type);
	    }

	    Precedence = {
	        Sequence: 0,
	        Yield: 1,
	        Await: 1,
	        Assignment: 1,
	        Conditional: 2,
	        ArrowFunction: 2,
	        LogicalOR: 3,
	        LogicalAND: 4,
	        BitwiseOR: 5,
	        BitwiseXOR: 6,
	        BitwiseAND: 7,
	        Equality: 8,
	        Relational: 9,
	        BitwiseSHIFT: 10,
	        Additive: 11,
	        Multiplicative: 12,
	        Unary: 13,
	        Postfix: 14,
	        Call: 15,
	        New: 16,
	        TaggedTemplate: 17,
	        Member: 18,
	        Primary: 19
	    };

	    BinaryPrecedence = {
	        '||': Precedence.LogicalOR,
	        '&&': Precedence.LogicalAND,
	        '|': Precedence.BitwiseOR,
	        '^': Precedence.BitwiseXOR,
	        '&': Precedence.BitwiseAND,
	        '==': Precedence.Equality,
	        '!=': Precedence.Equality,
	        '===': Precedence.Equality,
	        '!==': Precedence.Equality,
	        'is': Precedence.Equality,
	        'isnt': Precedence.Equality,
	        '<': Precedence.Relational,
	        '>': Precedence.Relational,
	        '<=': Precedence.Relational,
	        '>=': Precedence.Relational,
	        'in': Precedence.Relational,
	        'instanceof': Precedence.Relational,
	        '<<': Precedence.BitwiseSHIFT,
	        '>>': Precedence.BitwiseSHIFT,
	        '>>>': Precedence.BitwiseSHIFT,
	        '+': Precedence.Additive,
	        '-': Precedence.Additive,
	        '*': Precedence.Multiplicative,
	        '%': Precedence.Multiplicative,
	        '/': Precedence.Multiplicative
	    };

	    //Flags
	    var F_ALLOW_IN = 1,
	        F_ALLOW_CALL = 1 << 1,
	        F_ALLOW_UNPARATH_NEW = 1 << 2,
	        F_FUNC_BODY = 1 << 3,
	        F_DIRECTIVE_CTX = 1 << 4,
	        F_SEMICOLON_OPT = 1 << 5;

	    //Expression flag sets
	    //NOTE: Flag order:
	    // F_ALLOW_IN
	    // F_ALLOW_CALL
	    // F_ALLOW_UNPARATH_NEW
	    var E_FTT = F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
	        E_TTF = F_ALLOW_IN | F_ALLOW_CALL,
	        E_TTT = F_ALLOW_IN | F_ALLOW_CALL | F_ALLOW_UNPARATH_NEW,
	        E_TFF = F_ALLOW_IN,
	        E_FFT = F_ALLOW_UNPARATH_NEW,
	        E_TFT = F_ALLOW_IN | F_ALLOW_UNPARATH_NEW;

	    //Statement flag sets
	    //NOTE: Flag order:
	    // F_ALLOW_IN
	    // F_FUNC_BODY
	    // F_DIRECTIVE_CTX
	    // F_SEMICOLON_OPT
	    var S_TFFF = F_ALLOW_IN,
	        S_TFFT = F_ALLOW_IN | F_SEMICOLON_OPT,
	        S_FFFF = 0x00,
	        S_TFTF = F_ALLOW_IN | F_DIRECTIVE_CTX,
	        S_TTFF = F_ALLOW_IN | F_FUNC_BODY;

	    function getDefaultOptions() {
	        // default options
	        return {
	            indent: null,
	            base: null,
	            parse: null,
	            comment: false,
	            format: {
	                indent: {
	                    style: '    ',
	                    base: 0,
	                    adjustMultilineComment: false
	                },
	                newline: '\n',
	                space: ' ',
	                json: false,
	                renumber: false,
	                hexadecimal: false,
	                quotes: 'single',
	                escapeless: false,
	                compact: false,
	                parentheses: true,
	                semicolons: true,
	                safeConcatenation: false,
	                preserveBlankLines: false
	            },
	            moz: {
	                comprehensionExpressionStartsWithAssignment: false,
	                starlessGenerator: false
	            },
	            sourceMap: null,
	            sourceMapRoot: null,
	            sourceMapWithCode: false,
	            directive: false,
	            raw: true,
	            verbatim: null,
	            sourceCode: null
	        };
	    }

	    function stringRepeat(str, num) {
	        var result = '';

	        for (num |= 0; num > 0; num >>>= 1, str += str) {
	            if (num & 1) {
	                result += str;
	            }
	        }

	        return result;
	    }

	    isArray = Array.isArray;
	    if (!isArray) {
	        isArray = function isArray(array) {
	            return Object.prototype.toString.call(array) === '[object Array]';
	        };
	    }

	    function hasLineTerminator(str) {
	        return (/[\r\n]/g).test(str);
	    }

	    function endsWithLineTerminator(str) {
	        var len = str.length;
	        return len && esutils.code.isLineTerminator(str.charCodeAt(len - 1));
	    }

	    function merge(target, override) {
	        var key;
	        for (key in override) {
	            if (override.hasOwnProperty(key)) {
	                target[key] = override[key];
	            }
	        }
	        return target;
	    }

	    function updateDeeply(target, override) {
	        var key, val;

	        function isHashObject(target) {
	            return typeof target === 'object' && target instanceof Object && !(target instanceof RegExp);
	        }

	        for (key in override) {
	            if (override.hasOwnProperty(key)) {
	                val = override[key];
	                if (isHashObject(val)) {
	                    if (isHashObject(target[key])) {
	                        updateDeeply(target[key], val);
	                    } else {
	                        target[key] = updateDeeply({}, val);
	                    }
	                } else {
	                    target[key] = val;
	                }
	            }
	        }
	        return target;
	    }

	    function generateNumber(value) {
	        var result, point, temp, exponent, pos;

	        if (value !== value) {
	            throw new Error('Numeric literal whose value is NaN');
	        }
	        if (value < 0 || (value === 0 && 1 / value < 0)) {
	            throw new Error('Numeric literal whose value is negative');
	        }

	        if (value === 1 / 0) {
	            return json ? 'null' : renumber ? '1e400' : '1e+400';
	        }

	        result = '' + value;
	        if (!renumber || result.length < 3) {
	            return result;
	        }

	        point = result.indexOf('.');
	        if (!json && result.charCodeAt(0) === 0x30  /* 0 */ && point === 1) {
	            point = 0;
	            result = result.slice(1);
	        }
	        temp = result;
	        result = result.replace('e+', 'e');
	        exponent = 0;
	        if ((pos = temp.indexOf('e')) > 0) {
	            exponent = +temp.slice(pos + 1);
	            temp = temp.slice(0, pos);
	        }
	        if (point >= 0) {
	            exponent -= temp.length - point - 1;
	            temp = +(temp.slice(0, point) + temp.slice(point + 1)) + '';
	        }
	        pos = 0;
	        while (temp.charCodeAt(temp.length + pos - 1) === 0x30  /* 0 */) {
	            --pos;
	        }
	        if (pos !== 0) {
	            exponent -= pos;
	            temp = temp.slice(0, pos);
	        }
	        if (exponent !== 0) {
	            temp += 'e' + exponent;
	        }
	        if ((temp.length < result.length ||
	                    (hexadecimal && value > 1e12 && Math.floor(value) === value && (temp = '0x' + value.toString(16)).length < result.length)) &&
	                +temp === value) {
	            result = temp;
	        }

	        return result;
	    }

	    // Generate valid RegExp expression.
	    // This function is based on https://github.com/Constellation/iv Engine

	    function escapeRegExpCharacter(ch, previousIsBackslash) {
	        // not handling '\' and handling \u2028 or \u2029 to unicode escape sequence
	        if ((ch & ~1) === 0x2028) {
	            return (previousIsBackslash ? 'u' : '\\u') + ((ch === 0x2028) ? '2028' : '2029');
	        } else if (ch === 10 || ch === 13) {  // \n, \r
	            return (previousIsBackslash ? '' : '\\') + ((ch === 10) ? 'n' : 'r');
	        }
	        return String.fromCharCode(ch);
	    }

	    function generateRegExp(reg) {
	        var match, result, flags, i, iz, ch, characterInBrack, previousIsBackslash;

	        result = reg.toString();

	        if (reg.source) {
	            // extract flag from toString result
	            match = result.match(/\/([^/]*)$/);
	            if (!match) {
	                return result;
	            }

	            flags = match[1];
	            result = '';

	            characterInBrack = false;
	            previousIsBackslash = false;
	            for (i = 0, iz = reg.source.length; i < iz; ++i) {
	                ch = reg.source.charCodeAt(i);

	                if (!previousIsBackslash) {
	                    if (characterInBrack) {
	                        if (ch === 93) {  // ]
	                            characterInBrack = false;
	                        }
	                    } else {
	                        if (ch === 47) {  // /
	                            result += '\\';
	                        } else if (ch === 91) {  // [
	                            characterInBrack = true;
	                        }
	                    }
	                    result += escapeRegExpCharacter(ch, previousIsBackslash);
	                    previousIsBackslash = ch === 92;  // \
	                } else {
	                    // if new RegExp("\\\n') is provided, create /\n/
	                    result += escapeRegExpCharacter(ch, previousIsBackslash);
	                    // prevent like /\\[/]/
	                    previousIsBackslash = false;
	                }
	            }

	            return '/' + result + '/' + flags;
	        }

	        return result;
	    }

	    function escapeAllowedCharacter(code, next) {
	        var hex;

	        if (code === 0x08  /* \b */) {
	            return '\\b';
	        }

	        if (code === 0x0C  /* \f */) {
	            return '\\f';
	        }

	        if (code === 0x09  /* \t */) {
	            return '\\t';
	        }

	        hex = code.toString(16).toUpperCase();
	        if (json || code > 0xFF) {
	            return '\\u' + '0000'.slice(hex.length) + hex;
	        } else if (code === 0x0000 && !esutils.code.isDecimalDigit(next)) {
	            return '\\0';
	        } else if (code === 0x000B  /* \v */) { // '\v'
	            return '\\x0B';
	        } else {
	            return '\\x' + '00'.slice(hex.length) + hex;
	        }
	    }

	    function escapeDisallowedCharacter(code) {
	        if (code === 0x5C  /* \ */) {
	            return '\\\\';
	        }

	        if (code === 0x0A  /* \n */) {
	            return '\\n';
	        }

	        if (code === 0x0D  /* \r */) {
	            return '\\r';
	        }

	        if (code === 0x2028) {
	            return '\\u2028';
	        }

	        if (code === 0x2029) {
	            return '\\u2029';
	        }

	        throw new Error('Incorrectly classified character');
	    }

	    function escapeDirective(str) {
	        var i, iz, code, quote;

	        quote = quotes === 'double' ? '"' : '\'';
	        for (i = 0, iz = str.length; i < iz; ++i) {
	            code = str.charCodeAt(i);
	            if (code === 0x27  /* ' */) {
	                quote = '"';
	                break;
	            } else if (code === 0x22  /* " */) {
	                quote = '\'';
	                break;
	            } else if (code === 0x5C  /* \ */) {
	                ++i;
	            }
	        }

	        return quote + str + quote;
	    }

	    function escapeString(str) {
	        var result = '', i, len, code, singleQuotes = 0, doubleQuotes = 0, single, quote;

	        for (i = 0, len = str.length; i < len; ++i) {
	            code = str.charCodeAt(i);
	            if (code === 0x27  /* ' */) {
	                ++singleQuotes;
	            } else if (code === 0x22  /* " */) {
	                ++doubleQuotes;
	            } else if (code === 0x2F  /* / */ && json) {
	                result += '\\';
	            } else if (esutils.code.isLineTerminator(code) || code === 0x5C  /* \ */) {
	                result += escapeDisallowedCharacter(code);
	                continue;
	            } else if (!esutils.code.isIdentifierPartES5(code) && (json && code < 0x20  /* SP */ || !json && !escapeless && (code < 0x20  /* SP */ || code > 0x7E  /* ~ */))) {
	                result += escapeAllowedCharacter(code, str.charCodeAt(i + 1));
	                continue;
	            }
	            result += String.fromCharCode(code);
	        }

	        single = !(quotes === 'double' || (quotes === 'auto' && doubleQuotes < singleQuotes));
	        quote = single ? '\'' : '"';

	        if (!(single ? singleQuotes : doubleQuotes)) {
	            return quote + result + quote;
	        }

	        str = result;
	        result = quote;

	        for (i = 0, len = str.length; i < len; ++i) {
	            code = str.charCodeAt(i);
	            if ((code === 0x27  /* ' */ && single) || (code === 0x22  /* " */ && !single)) {
	                result += '\\';
	            }
	            result += String.fromCharCode(code);
	        }

	        return result + quote;
	    }

	    /**
	     * flatten an array to a string, where the array can contain
	     * either strings or nested arrays
	     */
	    function flattenToString(arr) {
	        var i, iz, elem, result = '';
	        for (i = 0, iz = arr.length; i < iz; ++i) {
	            elem = arr[i];
	            result += isArray(elem) ? flattenToString(elem) : elem;
	        }
	        return result;
	    }

	    /**
	     * convert generated to a SourceNode when source maps are enabled.
	     */
	    function toSourceNodeWhenNeeded(generated, node) {
	        if (!sourceMap) {
	            // with no source maps, generated is either an
	            // array or a string.  if an array, flatten it.
	            // if a string, just return it
	            if (isArray(generated)) {
	                return flattenToString(generated);
	            } else {
	                return generated;
	            }
	        }
	        if (node == null) {
	            if (generated instanceof SourceNode) {
	                return generated;
	            } else {
	                node = {};
	            }
	        }
	        if (node.loc == null) {
	            return new SourceNode(null, null, sourceMap, generated, node.name || null);
	        }
	        return new SourceNode(node.loc.start.line, node.loc.start.column, (sourceMap === true ? node.loc.source || null : sourceMap), generated, node.name || null);
	    }

	    function noEmptySpace() {
	        return (space) ? space : ' ';
	    }

	    function join(left, right) {
	        var leftSource,
	            rightSource,
	            leftCharCode,
	            rightCharCode;

	        leftSource = toSourceNodeWhenNeeded(left).toString();
	        if (leftSource.length === 0) {
	            return [right];
	        }

	        rightSource = toSourceNodeWhenNeeded(right).toString();
	        if (rightSource.length === 0) {
	            return [left];
	        }

	        leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
	        rightCharCode = rightSource.charCodeAt(0);

	        if ((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode ||
	            esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode) ||
	            leftCharCode === 0x2F  /* / */ && rightCharCode === 0x69  /* i */) { // infix word operators all start with `i`
	            return [left, noEmptySpace(), right];
	        } else if (esutils.code.isWhiteSpace(leftCharCode) || esutils.code.isLineTerminator(leftCharCode) ||
	                esutils.code.isWhiteSpace(rightCharCode) || esutils.code.isLineTerminator(rightCharCode)) {
	            return [left, right];
	        }
	        return [left, space, right];
	    }

	    function addIndent(stmt) {
	        return [base, stmt];
	    }

	    function withIndent(fn) {
	        var previousBase;
	        previousBase = base;
	        base += indent;
	        fn(base);
	        base = previousBase;
	    }

	    function calculateSpaces(str) {
	        var i;
	        for (i = str.length - 1; i >= 0; --i) {
	            if (esutils.code.isLineTerminator(str.charCodeAt(i))) {
	                break;
	            }
	        }
	        return (str.length - 1) - i;
	    }

	    function adjustMultilineComment(value, specialBase) {
	        var array, i, len, line, j, spaces, previousBase, sn;

	        array = value.split(/\r\n|[\r\n]/);
	        spaces = Number.MAX_VALUE;

	        // first line doesn't have indentation
	        for (i = 1, len = array.length; i < len; ++i) {
	            line = array[i];
	            j = 0;
	            while (j < line.length && esutils.code.isWhiteSpace(line.charCodeAt(j))) {
	                ++j;
	            }
	            if (spaces > j) {
	                spaces = j;
	            }
	        }

	        if (typeof specialBase !== 'undefined') {
	            // pattern like
	            // {
	            //   var t = 20;  /*
	            //                 * this is comment
	            //                 */
	            // }
	            previousBase = base;
	            if (array[1][spaces] === '*') {
	                specialBase += ' ';
	            }
	            base = specialBase;
	        } else {
	            if (spaces & 1) {
	                // /*
	                //  *
	                //  */
	                // If spaces are odd number, above pattern is considered.
	                // We waste 1 space.
	                --spaces;
	            }
	            previousBase = base;
	        }

	        for (i = 1, len = array.length; i < len; ++i) {
	            sn = toSourceNodeWhenNeeded(addIndent(array[i].slice(spaces)));
	            array[i] = sourceMap ? sn.join('') : sn;
	        }

	        base = previousBase;

	        return array.join('\n');
	    }

	    function generateComment(comment, specialBase) {
	        if (comment.type === 'Line') {
	            if (endsWithLineTerminator(comment.value)) {
	                return '//' + comment.value;
	            } else {
	                // Always use LineTerminator
	                var result = '//' + comment.value;
	                if (!preserveBlankLines) {
	                    result += '\n';
	                }
	                return result;
	            }
	        }
	        if (extra.format.indent.adjustMultilineComment && /[\n\r]/.test(comment.value)) {
	            return adjustMultilineComment('/*' + comment.value + '*/', specialBase);
	        }
	        return '/*' + comment.value + '*/';
	    }

	    function addComments(stmt, result) {
	        var i, len, comment, save, tailingToStatement, specialBase, fragment,
	            extRange, range, prevRange, prefix, infix, suffix, count;

	        if (stmt.leadingComments && stmt.leadingComments.length > 0) {
	            save = result;

	            if (preserveBlankLines) {
	                comment = stmt.leadingComments[0];
	                result = [];

	                extRange = comment.extendedRange;
	                range = comment.range;

	                prefix = sourceCode.substring(extRange[0], range[0]);
	                count = (prefix.match(/\n/g) || []).length;
	                if (count > 0) {
	                    result.push(stringRepeat('\n', count));
	                    result.push(addIndent(generateComment(comment)));
	                } else {
	                    result.push(prefix);
	                    result.push(generateComment(comment));
	                }

	                prevRange = range;

	                for (i = 1, len = stmt.leadingComments.length; i < len; i++) {
	                    comment = stmt.leadingComments[i];
	                    range = comment.range;

	                    infix = sourceCode.substring(prevRange[1], range[0]);
	                    count = (infix.match(/\n/g) || []).length;
	                    result.push(stringRepeat('\n', count));
	                    result.push(addIndent(generateComment(comment)));

	                    prevRange = range;
	                }

	                suffix = sourceCode.substring(range[1], extRange[1]);
	                count = (suffix.match(/\n/g) || []).length;
	                result.push(stringRepeat('\n', count));
	            } else {
	                comment = stmt.leadingComments[0];
	                result = [];
	                if (safeConcatenation && stmt.type === Syntax.Program && stmt.body.length === 0) {
	                    result.push('\n');
	                }
	                result.push(generateComment(comment));
	                if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                    result.push('\n');
	                }

	                for (i = 1, len = stmt.leadingComments.length; i < len; ++i) {
	                    comment = stmt.leadingComments[i];
	                    fragment = [generateComment(comment)];
	                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
	                        fragment.push('\n');
	                    }
	                    result.push(addIndent(fragment));
	                }
	            }

	            result.push(addIndent(save));
	        }

	        if (stmt.trailingComments) {

	            if (preserveBlankLines) {
	                comment = stmt.trailingComments[0];
	                extRange = comment.extendedRange;
	                range = comment.range;

	                prefix = sourceCode.substring(extRange[0], range[0]);
	                count = (prefix.match(/\n/g) || []).length;

	                if (count > 0) {
	                    result.push(stringRepeat('\n', count));
	                    result.push(addIndent(generateComment(comment)));
	                } else {
	                    result.push(prefix);
	                    result.push(generateComment(comment));
	                }
	            } else {
	                tailingToStatement = !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
	                specialBase = stringRepeat(' ', calculateSpaces(toSourceNodeWhenNeeded([base, result, indent]).toString()));
	                for (i = 0, len = stmt.trailingComments.length; i < len; ++i) {
	                    comment = stmt.trailingComments[i];
	                    if (tailingToStatement) {
	                        // We assume target like following script
	                        //
	                        // var t = 20;  /**
	                        //               * This is comment of t
	                        //               */
	                        if (i === 0) {
	                            // first case
	                            result = [result, indent];
	                        } else {
	                            result = [result, specialBase];
	                        }
	                        result.push(generateComment(comment, specialBase));
	                    } else {
	                        result = [result, addIndent(generateComment(comment))];
	                    }
	                    if (i !== len - 1 && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                        result = [result, '\n'];
	                    }
	                }
	            }
	        }

	        return result;
	    }

	    function generateBlankLines(start, end, result) {
	        var j, newlineCount = 0;

	        for (j = start; j < end; j++) {
	            if (sourceCode[j] === '\n') {
	                newlineCount++;
	            }
	        }

	        for (j = 1; j < newlineCount; j++) {
	            result.push(newline);
	        }
	    }

	    function parenthesize(text, current, should) {
	        if (current < should) {
	            return ['(', text, ')'];
	        }
	        return text;
	    }

	    function generateVerbatimString(string) {
	        var i, iz, result;
	        result = string.split(/\r\n|\n/);
	        for (i = 1, iz = result.length; i < iz; i++) {
	            result[i] = newline + base + result[i];
	        }
	        return result;
	    }

	    function generateVerbatim(expr, precedence) {
	        var verbatim, result, prec;
	        verbatim = expr[extra.verbatim];

	        if (typeof verbatim === 'string') {
	            result = parenthesize(generateVerbatimString(verbatim), Precedence.Sequence, precedence);
	        } else {
	            // verbatim is object
	            result = generateVerbatimString(verbatim.content);
	            prec = (verbatim.precedence != null) ? verbatim.precedence : Precedence.Sequence;
	            result = parenthesize(result, prec, precedence);
	        }

	        return toSourceNodeWhenNeeded(result, expr);
	    }

	    function CodeGenerator() {
	    }

	    // Helpers.

	    CodeGenerator.prototype.maybeBlock = function(stmt, flags) {
	        var result, noLeadingComment, that = this;

	        noLeadingComment = !extra.comment || !stmt.leadingComments;

	        if (stmt.type === Syntax.BlockStatement && noLeadingComment) {
	            return [space, this.generateStatement(stmt, flags)];
	        }

	        if (stmt.type === Syntax.EmptyStatement && noLeadingComment) {
	            return ';';
	        }

	        withIndent(function () {
	            result = [
	                newline,
	                addIndent(that.generateStatement(stmt, flags))
	            ];
	        });

	        return result;
	    };

	    CodeGenerator.prototype.maybeBlockSuffix = function (stmt, result) {
	        var ends = endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString());
	        if (stmt.type === Syntax.BlockStatement && (!extra.comment || !stmt.leadingComments) && !ends) {
	            return [result, space];
	        }
	        if (ends) {
	            return [result, base];
	        }
	        return [result, newline, base];
	    };

	    function generateIdentifier(node) {
	        return toSourceNodeWhenNeeded(node.name, node);
	    }

	    function generateAsyncPrefix(node, spaceRequired) {
	        return node.async ? 'async' + (spaceRequired ? noEmptySpace() : space) : '';
	    }

	    function generateStarSuffix(node) {
	        var isGenerator = node.generator && !extra.moz.starlessGenerator;
	        return isGenerator ? '*' + space : '';
	    }

	    function generateMethodPrefix(prop) {
	        var func = prop.value;
	        if (func.async) {
	            return generateAsyncPrefix(func, !prop.computed);
	        } else {
	            // avoid space before method name
	            return generateStarSuffix(func) ? '*' : '';
	        }
	    }

	    CodeGenerator.prototype.generatePattern = function (node, precedence, flags) {
	        if (node.type === Syntax.Identifier) {
	            return generateIdentifier(node);
	        }
	        return this.generateExpression(node, precedence, flags);
	    };

	    CodeGenerator.prototype.generateFunctionParams = function (node) {
	        var i, iz, result, hasDefault;

	        hasDefault = false;

	        if (node.type === Syntax.ArrowFunctionExpression &&
	                !node.rest && (!node.defaults || node.defaults.length === 0) &&
	                node.params.length === 1 && node.params[0].type === Syntax.Identifier) {
	            // arg => { } case
	            result = [generateAsyncPrefix(node, true), generateIdentifier(node.params[0])];
	        } else {
	            result = node.type === Syntax.ArrowFunctionExpression ? [generateAsyncPrefix(node, false)] : [];
	            result.push('(');
	            if (node.defaults) {
	                hasDefault = true;
	            }
	            for (i = 0, iz = node.params.length; i < iz; ++i) {
	                if (hasDefault && node.defaults[i]) {
	                    // Handle default values.
	                    result.push(this.generateAssignment(node.params[i], node.defaults[i], '=', Precedence.Assignment, E_TTT));
	                } else {
	                    result.push(this.generatePattern(node.params[i], Precedence.Assignment, E_TTT));
	                }
	                if (i + 1 < iz) {
	                    result.push(',' + space);
	                }
	            }

	            if (node.rest) {
	                if (node.params.length) {
	                    result.push(',' + space);
	                }
	                result.push('...');
	                result.push(generateIdentifier(node.rest));
	            }

	            result.push(')');
	        }

	        return result;
	    };

	    CodeGenerator.prototype.generateFunctionBody = function (node) {
	        var result, expr;

	        result = this.generateFunctionParams(node);

	        if (node.type === Syntax.ArrowFunctionExpression) {
	            result.push(space);
	            result.push('=>');
	        }

	        if (node.expression) {
	            result.push(space);
	            expr = this.generateExpression(node.body, Precedence.Assignment, E_TTT);
	            if (expr.toString().charAt(0) === '{') {
	                expr = ['(', expr, ')'];
	            }
	            result.push(expr);
	        } else {
	            result.push(this.maybeBlock(node.body, S_TTFF));
	        }

	        return result;
	    };

	    CodeGenerator.prototype.generateIterationForStatement = function (operator, stmt, flags) {
	        var result = ['for' + space + '('], that = this;
	        withIndent(function () {
	            if (stmt.left.type === Syntax.VariableDeclaration) {
	                withIndent(function () {
	                    result.push(stmt.left.kind + noEmptySpace());
	                    result.push(that.generateStatement(stmt.left.declarations[0], S_FFFF));
	                });
	            } else {
	                result.push(that.generateExpression(stmt.left, Precedence.Call, E_TTT));
	            }

	            result = join(result, operator);
	            result = [join(
	                result,
	                that.generateExpression(stmt.right, Precedence.Sequence, E_TTT)
	            ), ')'];
	        });
	        result.push(this.maybeBlock(stmt.body, flags));
	        return result;
	    };

	    CodeGenerator.prototype.generatePropertyKey = function (expr, computed) {
	        var result = [];

	        if (computed) {
	            result.push('[');
	        }

	        result.push(this.generateExpression(expr, Precedence.Sequence, E_TTT));
	        if (computed) {
	            result.push(']');
	        }

	        return result;
	    };

	    CodeGenerator.prototype.generateAssignment = function (left, right, operator, precedence, flags) {
	        if (Precedence.Assignment < precedence) {
	            flags |= F_ALLOW_IN;
	        }

	        return parenthesize(
	            [
	                this.generateExpression(left, Precedence.Call, flags),
	                space + operator + space,
	                this.generateExpression(right, Precedence.Assignment, flags)
	            ],
	            Precedence.Assignment,
	            precedence
	        );
	    };

	    CodeGenerator.prototype.semicolon = function (flags) {
	        if (!semicolons && flags & F_SEMICOLON_OPT) {
	            return '';
	        }
	        return ';';
	    };

	    // Statements.

	    CodeGenerator.Statement = {

	        BlockStatement: function (stmt, flags) {
	            var range, content, result = ['{', newline], that = this;

	            withIndent(function () {
	                // handle functions without any code
	                if (stmt.body.length === 0 && preserveBlankLines) {
	                    range = stmt.range;
	                    if (range[1] - range[0] > 2) {
	                        content = sourceCode.substring(range[0] + 1, range[1] - 1);
	                        if (content[0] === '\n') {
	                            result = ['{'];
	                        }
	                        result.push(content);
	                    }
	                }

	                var i, iz, fragment, bodyFlags;
	                bodyFlags = S_TFFF;
	                if (flags & F_FUNC_BODY) {
	                    bodyFlags |= F_DIRECTIVE_CTX;
	                }

	                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
	                    if (preserveBlankLines) {
	                        // handle spaces before the first line
	                        if (i === 0) {
	                            if (stmt.body[0].leadingComments) {
	                                range = stmt.body[0].leadingComments[0].extendedRange;
	                                content = sourceCode.substring(range[0], range[1]);
	                                if (content[0] === '\n') {
	                                    result = ['{'];
	                                }
	                            }
	                            if (!stmt.body[0].leadingComments) {
	                                generateBlankLines(stmt.range[0], stmt.body[0].range[0], result);
	                            }
	                        }

	                        // handle spaces between lines
	                        if (i > 0) {
	                            if (!stmt.body[i - 1].trailingComments  && !stmt.body[i].leadingComments) {
	                                generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
	                            }
	                        }
	                    }

	                    if (i === iz - 1) {
	                        bodyFlags |= F_SEMICOLON_OPT;
	                    }

	                    if (stmt.body[i].leadingComments && preserveBlankLines) {
	                        fragment = that.generateStatement(stmt.body[i], bodyFlags);
	                    } else {
	                        fragment = addIndent(that.generateStatement(stmt.body[i], bodyFlags));
	                    }

	                    result.push(fragment);
	                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
	                        if (preserveBlankLines && i < iz - 1) {
	                            // don't add a new line if there are leading coments
	                            // in the next statement
	                            if (!stmt.body[i + 1].leadingComments) {
	                                result.push(newline);
	                            }
	                        } else {
	                            result.push(newline);
	                        }
	                    }

	                    if (preserveBlankLines) {
	                        // handle spaces after the last line
	                        if (i === iz - 1) {
	                            if (!stmt.body[i].trailingComments) {
	                                generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
	                            }
	                        }
	                    }
	                }
	            });

	            result.push(addIndent('}'));
	            return result;
	        },

	        BreakStatement: function (stmt, flags) {
	            if (stmt.label) {
	                return 'break ' + stmt.label.name + this.semicolon(flags);
	            }
	            return 'break' + this.semicolon(flags);
	        },

	        ContinueStatement: function (stmt, flags) {
	            if (stmt.label) {
	                return 'continue ' + stmt.label.name + this.semicolon(flags);
	            }
	            return 'continue' + this.semicolon(flags);
	        },

	        ClassBody: function (stmt, flags) {
	            var result = [ '{', newline], that = this;

	            withIndent(function (indent) {
	                var i, iz;

	                for (i = 0, iz = stmt.body.length; i < iz; ++i) {
	                    result.push(indent);
	                    result.push(that.generateExpression(stmt.body[i], Precedence.Sequence, E_TTT));
	                    if (i + 1 < iz) {
	                        result.push(newline);
	                    }
	                }
	            });

	            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                result.push(newline);
	            }
	            result.push(base);
	            result.push('}');
	            return result;
	        },

	        ClassDeclaration: function (stmt, flags) {
	            var result, fragment;
	            result  = ['class ' + stmt.id.name];
	            if (stmt.superClass) {
	                fragment = join('extends', this.generateExpression(stmt.superClass, Precedence.Assignment, E_TTT));
	                result = join(result, fragment);
	            }
	            result.push(space);
	            result.push(this.generateStatement(stmt.body, S_TFFT));
	            return result;
	        },

	        DirectiveStatement: function (stmt, flags) {
	            if (extra.raw && stmt.raw) {
	                return stmt.raw + this.semicolon(flags);
	            }
	            return escapeDirective(stmt.directive) + this.semicolon(flags);
	        },

	        DoWhileStatement: function (stmt, flags) {
	            // Because `do 42 while (cond)` is Syntax Error. We need semicolon.
	            var result = join('do', this.maybeBlock(stmt.body, S_TFFF));
	            result = this.maybeBlockSuffix(stmt.body, result);
	            return join(result, [
	                'while' + space + '(',
	                this.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
	                ')' + this.semicolon(flags)
	            ]);
	        },

	        CatchClause: function (stmt, flags) {
	            var result, that = this;
	            withIndent(function () {
	                var guard;

	                result = [
	                    'catch' + space + '(',
	                    that.generateExpression(stmt.param, Precedence.Sequence, E_TTT),
	                    ')'
	                ];

	                if (stmt.guard) {
	                    guard = that.generateExpression(stmt.guard, Precedence.Sequence, E_TTT);
	                    result.splice(2, 0, ' if ', guard);
	                }
	            });
	            result.push(this.maybeBlock(stmt.body, S_TFFF));
	            return result;
	        },

	        DebuggerStatement: function (stmt, flags) {
	            return 'debugger' + this.semicolon(flags);
	        },

	        EmptyStatement: function (stmt, flags) {
	            return ';';
	        },

	        ExportDeclaration: function (stmt, flags) {
	            var result = [ 'export' ], bodyFlags, that = this;

	            bodyFlags = (flags & F_SEMICOLON_OPT) ? S_TFFT : S_TFFF;

	            // export default HoistableDeclaration[Default]
	            // export default AssignmentExpression[In] ;
	            if (stmt['default']) {
	                result = join(result, 'default');
	                if (isStatement(stmt.declaration)) {
	                    result = join(result, this.generateStatement(stmt.declaration, bodyFlags));
	                } else {
	                    result = join(result, this.generateExpression(stmt.declaration, Precedence.Assignment, E_TTT) + this.semicolon(flags));
	                }
	                return result;
	            }

	            // export VariableStatement
	            // export Declaration[Default]
	            if (stmt.declaration) {
	                return join(result, this.generateStatement(stmt.declaration, bodyFlags));
	            }

	            // export * FromClause ;
	            // export ExportClause[NoReference] FromClause ;
	            // export ExportClause ;
	            if (stmt.specifiers) {
	                if (stmt.specifiers.length === 0) {
	                    result = join(result, '{' + space + '}');
	                } else if (stmt.specifiers[0].type === Syntax.ExportBatchSpecifier) {
	                    result = join(result, this.generateExpression(stmt.specifiers[0], Precedence.Sequence, E_TTT));
	                } else {
	                    result = join(result, '{');
	                    withIndent(function (indent) {
	                        var i, iz;
	                        result.push(newline);
	                        for (i = 0, iz = stmt.specifiers.length; i < iz; ++i) {
	                            result.push(indent);
	                            result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
	                            if (i + 1 < iz) {
	                                result.push(',' + newline);
	                            }
	                        }
	                    });
	                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                        result.push(newline);
	                    }
	                    result.push(base + '}');
	                }

	                if (stmt.source) {
	                    result = join(result, [
	                        'from' + space,
	                        // ModuleSpecifier
	                        this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
	                        this.semicolon(flags)
	                    ]);
	                } else {
	                    result.push(this.semicolon(flags));
	                }
	            }
	            return result;
	        },

	        ExportDefaultDeclaration: function (stmt, flags) {
	             stmt.default = true;
	             return this.ExportDeclaration(stmt, flags);
	        },

	        ExportNamedDeclaration: function (stmt, flags) {
	            return this.ExportDeclaration(stmt, flags);
	        },

	        ExpressionStatement: function (stmt, flags) {
	            var result, fragment;

	            function isClassPrefixed(fragment) {
	                var code;
	                if (fragment.slice(0, 5) !== 'class') {
	                    return false;
	                }
	                code = fragment.charCodeAt(5);
	                return code === 0x7B  /* '{' */ || esutils.code.isWhiteSpace(code) || esutils.code.isLineTerminator(code);
	            }

	            function isFunctionPrefixed(fragment) {
	                var code;
	                if (fragment.slice(0, 8) !== 'function') {
	                    return false;
	                }
	                code = fragment.charCodeAt(8);
	                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
	            }

	            function isAsyncPrefixed(fragment) {
	                var code, i, iz;
	                if (fragment.slice(0, 5) !== 'async') {
	                    return false;
	                }
	                if (!esutils.code.isWhiteSpace(fragment.charCodeAt(5))) {
	                    return false;
	                }
	                for (i = 6, iz = fragment.length; i < iz; ++i) {
	                    if (!esutils.code.isWhiteSpace(fragment.charCodeAt(i))) {
	                        break;
	                    }
	                }
	                if (i === iz) {
	                    return false;
	                }
	                if (fragment.slice(i, i + 8) !== 'function') {
	                    return false;
	                }
	                code = fragment.charCodeAt(i + 8);
	                return code === 0x28 /* '(' */ || esutils.code.isWhiteSpace(code) || code === 0x2A  /* '*' */ || esutils.code.isLineTerminator(code);
	            }

	            result = [this.generateExpression(stmt.expression, Precedence.Sequence, E_TTT)];
	            // 12.4 '{', 'function', 'class' is not allowed in this position.
	            // wrap expression with parentheses
	            fragment = toSourceNodeWhenNeeded(result).toString();
	            if (fragment.charCodeAt(0) === 0x7B  /* '{' */ ||  // ObjectExpression
	                    isClassPrefixed(fragment) ||
	                    isFunctionPrefixed(fragment) ||
	                    isAsyncPrefixed(fragment) ||
	                    (directive && (flags & F_DIRECTIVE_CTX) && stmt.expression.type === Syntax.Literal && typeof stmt.expression.value === 'string')) {
	                result = ['(', result, ')' + this.semicolon(flags)];
	            } else {
	                result.push(this.semicolon(flags));
	            }
	            return result;
	        },

	        ImportDeclaration: function (stmt, flags) {
	            // ES6: 15.2.1 valid import declarations:
	            //     - import ImportClause FromClause ;
	            //     - import ModuleSpecifier ;
	            var result, cursor, that = this;

	            // If no ImportClause is present,
	            // this should be `import ModuleSpecifier` so skip `from`
	            // ModuleSpecifier is StringLiteral.
	            if (stmt.specifiers.length === 0) {
	                // import ModuleSpecifier ;
	                return [
	                    'import',
	                    space,
	                    // ModuleSpecifier
	                    this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
	                    this.semicolon(flags)
	                ];
	            }

	            // import ImportClause FromClause ;
	            result = [
	                'import'
	            ];
	            cursor = 0;

	            // ImportedBinding
	            if (stmt.specifiers[cursor].type === Syntax.ImportDefaultSpecifier) {
	                result = join(result, [
	                        this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
	                ]);
	                ++cursor;
	            }

	            if (stmt.specifiers[cursor]) {
	                if (cursor !== 0) {
	                    result.push(',');
	                }

	                if (stmt.specifiers[cursor].type === Syntax.ImportNamespaceSpecifier) {
	                    // NameSpaceImport
	                    result = join(result, [
	                            space,
	                            this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT)
	                    ]);
	                } else {
	                    // NamedImports
	                    result.push(space + '{');

	                    if ((stmt.specifiers.length - cursor) === 1) {
	                        // import { ... } from "...";
	                        result.push(space);
	                        result.push(this.generateExpression(stmt.specifiers[cursor], Precedence.Sequence, E_TTT));
	                        result.push(space + '}' + space);
	                    } else {
	                        // import {
	                        //    ...,
	                        //    ...,
	                        // } from "...";
	                        withIndent(function (indent) {
	                            var i, iz;
	                            result.push(newline);
	                            for (i = cursor, iz = stmt.specifiers.length; i < iz; ++i) {
	                                result.push(indent);
	                                result.push(that.generateExpression(stmt.specifiers[i], Precedence.Sequence, E_TTT));
	                                if (i + 1 < iz) {
	                                    result.push(',' + newline);
	                                }
	                            }
	                        });
	                        if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                            result.push(newline);
	                        }
	                        result.push(base + '}' + space);
	                    }
	                }
	            }

	            result = join(result, [
	                'from' + space,
	                // ModuleSpecifier
	                this.generateExpression(stmt.source, Precedence.Sequence, E_TTT),
	                this.semicolon(flags)
	            ]);
	            return result;
	        },

	        VariableDeclarator: function (stmt, flags) {
	            var itemFlags = (flags & F_ALLOW_IN) ? E_TTT : E_FTT;
	            if (stmt.init) {
	                return [
	                    this.generateExpression(stmt.id, Precedence.Assignment, itemFlags),
	                    space,
	                    '=',
	                    space,
	                    this.generateExpression(stmt.init, Precedence.Assignment, itemFlags)
	                ];
	            }
	            return this.generatePattern(stmt.id, Precedence.Assignment, itemFlags);
	        },

	        VariableDeclaration: function (stmt, flags) {
	            // VariableDeclarator is typed as Statement,
	            // but joined with comma (not LineTerminator).
	            // So if comment is attached to target node, we should specialize.
	            var result, i, iz, node, bodyFlags, that = this;

	            result = [ stmt.kind ];

	            bodyFlags = (flags & F_ALLOW_IN) ? S_TFFF : S_FFFF;

	            function block() {
	                node = stmt.declarations[0];
	                if (extra.comment && node.leadingComments) {
	                    result.push('\n');
	                    result.push(addIndent(that.generateStatement(node, bodyFlags)));
	                } else {
	                    result.push(noEmptySpace());
	                    result.push(that.generateStatement(node, bodyFlags));
	                }

	                for (i = 1, iz = stmt.declarations.length; i < iz; ++i) {
	                    node = stmt.declarations[i];
	                    if (extra.comment && node.leadingComments) {
	                        result.push(',' + newline);
	                        result.push(addIndent(that.generateStatement(node, bodyFlags)));
	                    } else {
	                        result.push(',' + space);
	                        result.push(that.generateStatement(node, bodyFlags));
	                    }
	                }
	            }

	            if (stmt.declarations.length > 1) {
	                withIndent(block);
	            } else {
	                block();
	            }

	            result.push(this.semicolon(flags));

	            return result;
	        },

	        ThrowStatement: function (stmt, flags) {
	            return [join(
	                'throw',
	                this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
	            ), this.semicolon(flags)];
	        },

	        TryStatement: function (stmt, flags) {
	            var result, i, iz, guardedHandlers;

	            result = ['try', this.maybeBlock(stmt.block, S_TFFF)];
	            result = this.maybeBlockSuffix(stmt.block, result);

	            if (stmt.handlers) {
	                // old interface
	                for (i = 0, iz = stmt.handlers.length; i < iz; ++i) {
	                    result = join(result, this.generateStatement(stmt.handlers[i], S_TFFF));
	                    if (stmt.finalizer || i + 1 !== iz) {
	                        result = this.maybeBlockSuffix(stmt.handlers[i].body, result);
	                    }
	                }
	            } else {
	                guardedHandlers = stmt.guardedHandlers || [];

	                for (i = 0, iz = guardedHandlers.length; i < iz; ++i) {
	                    result = join(result, this.generateStatement(guardedHandlers[i], S_TFFF));
	                    if (stmt.finalizer || i + 1 !== iz) {
	                        result = this.maybeBlockSuffix(guardedHandlers[i].body, result);
	                    }
	                }

	                // new interface
	                if (stmt.handler) {
	                    if (isArray(stmt.handler)) {
	                        for (i = 0, iz = stmt.handler.length; i < iz; ++i) {
	                            result = join(result, this.generateStatement(stmt.handler[i], S_TFFF));
	                            if (stmt.finalizer || i + 1 !== iz) {
	                                result = this.maybeBlockSuffix(stmt.handler[i].body, result);
	                            }
	                        }
	                    } else {
	                        result = join(result, this.generateStatement(stmt.handler, S_TFFF));
	                        if (stmt.finalizer) {
	                            result = this.maybeBlockSuffix(stmt.handler.body, result);
	                        }
	                    }
	                }
	            }
	            if (stmt.finalizer) {
	                result = join(result, ['finally', this.maybeBlock(stmt.finalizer, S_TFFF)]);
	            }
	            return result;
	        },

	        SwitchStatement: function (stmt, flags) {
	            var result, fragment, i, iz, bodyFlags, that = this;
	            withIndent(function () {
	                result = [
	                    'switch' + space + '(',
	                    that.generateExpression(stmt.discriminant, Precedence.Sequence, E_TTT),
	                    ')' + space + '{' + newline
	                ];
	            });
	            if (stmt.cases) {
	                bodyFlags = S_TFFF;
	                for (i = 0, iz = stmt.cases.length; i < iz; ++i) {
	                    if (i === iz - 1) {
	                        bodyFlags |= F_SEMICOLON_OPT;
	                    }
	                    fragment = addIndent(this.generateStatement(stmt.cases[i], bodyFlags));
	                    result.push(fragment);
	                    if (!endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
	                        result.push(newline);
	                    }
	                }
	            }
	            result.push(addIndent('}'));
	            return result;
	        },

	        SwitchCase: function (stmt, flags) {
	            var result, fragment, i, iz, bodyFlags, that = this;
	            withIndent(function () {
	                if (stmt.test) {
	                    result = [
	                        join('case', that.generateExpression(stmt.test, Precedence.Sequence, E_TTT)),
	                        ':'
	                    ];
	                } else {
	                    result = ['default:'];
	                }

	                i = 0;
	                iz = stmt.consequent.length;
	                if (iz && stmt.consequent[0].type === Syntax.BlockStatement) {
	                    fragment = that.maybeBlock(stmt.consequent[0], S_TFFF);
	                    result.push(fragment);
	                    i = 1;
	                }

	                if (i !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                    result.push(newline);
	                }

	                bodyFlags = S_TFFF;
	                for (; i < iz; ++i) {
	                    if (i === iz - 1 && flags & F_SEMICOLON_OPT) {
	                        bodyFlags |= F_SEMICOLON_OPT;
	                    }
	                    fragment = addIndent(that.generateStatement(stmt.consequent[i], bodyFlags));
	                    result.push(fragment);
	                    if (i + 1 !== iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
	                        result.push(newline);
	                    }
	                }
	            });
	            return result;
	        },

	        IfStatement: function (stmt, flags) {
	            var result, bodyFlags, semicolonOptional, that = this;
	            withIndent(function () {
	                result = [
	                    'if' + space + '(',
	                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
	                    ')'
	                ];
	            });
	            semicolonOptional = flags & F_SEMICOLON_OPT;
	            bodyFlags = S_TFFF;
	            if (semicolonOptional) {
	                bodyFlags |= F_SEMICOLON_OPT;
	            }
	            if (stmt.alternate) {
	                result.push(this.maybeBlock(stmt.consequent, S_TFFF));
	                result = this.maybeBlockSuffix(stmt.consequent, result);
	                if (stmt.alternate.type === Syntax.IfStatement) {
	                    result = join(result, ['else ', this.generateStatement(stmt.alternate, bodyFlags)]);
	                } else {
	                    result = join(result, join('else', this.maybeBlock(stmt.alternate, bodyFlags)));
	                }
	            } else {
	                result.push(this.maybeBlock(stmt.consequent, bodyFlags));
	            }
	            return result;
	        },

	        ForStatement: function (stmt, flags) {
	            var result, that = this;
	            withIndent(function () {
	                result = ['for' + space + '('];
	                if (stmt.init) {
	                    if (stmt.init.type === Syntax.VariableDeclaration) {
	                        result.push(that.generateStatement(stmt.init, S_FFFF));
	                    } else {
	                        // F_ALLOW_IN becomes false.
	                        result.push(that.generateExpression(stmt.init, Precedence.Sequence, E_FTT));
	                        result.push(';');
	                    }
	                } else {
	                    result.push(';');
	                }

	                if (stmt.test) {
	                    result.push(space);
	                    result.push(that.generateExpression(stmt.test, Precedence.Sequence, E_TTT));
	                    result.push(';');
	                } else {
	                    result.push(';');
	                }

	                if (stmt.update) {
	                    result.push(space);
	                    result.push(that.generateExpression(stmt.update, Precedence.Sequence, E_TTT));
	                    result.push(')');
	                } else {
	                    result.push(')');
	                }
	            });

	            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
	            return result;
	        },

	        ForInStatement: function (stmt, flags) {
	            return this.generateIterationForStatement('in', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
	        },

	        ForOfStatement: function (stmt, flags) {
	            return this.generateIterationForStatement('of', stmt, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF);
	        },

	        LabeledStatement: function (stmt, flags) {
	            return [stmt.label.name + ':', this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF)];
	        },

	        Program: function (stmt, flags) {
	            var result, fragment, i, iz, bodyFlags;
	            iz = stmt.body.length;
	            result = [safeConcatenation && iz > 0 ? '\n' : ''];
	            bodyFlags = S_TFTF;
	            for (i = 0; i < iz; ++i) {
	                if (!safeConcatenation && i === iz - 1) {
	                    bodyFlags |= F_SEMICOLON_OPT;
	                }

	                if (preserveBlankLines) {
	                    // handle spaces before the first line
	                    if (i === 0) {
	                        if (!stmt.body[0].leadingComments) {
	                            generateBlankLines(stmt.range[0], stmt.body[i].range[0], result);
	                        }
	                    }

	                    // handle spaces between lines
	                    if (i > 0) {
	                        if (!stmt.body[i - 1].trailingComments && !stmt.body[i].leadingComments) {
	                            generateBlankLines(stmt.body[i - 1].range[1], stmt.body[i].range[0], result);
	                        }
	                    }
	                }

	                fragment = addIndent(this.generateStatement(stmt.body[i], bodyFlags));
	                result.push(fragment);
	                if (i + 1 < iz && !endsWithLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
	                    if (preserveBlankLines) {
	                        if (!stmt.body[i + 1].leadingComments) {
	                            result.push(newline);
	                        }
	                    } else {
	                        result.push(newline);
	                    }
	                }

	                if (preserveBlankLines) {
	                    // handle spaces after the last line
	                    if (i === iz - 1) {
	                        if (!stmt.body[i].trailingComments) {
	                            generateBlankLines(stmt.body[i].range[1], stmt.range[1], result);
	                        }
	                    }
	                }
	            }
	            return result;
	        },

	        FunctionDeclaration: function (stmt, flags) {
	            return [
	                generateAsyncPrefix(stmt, true),
	                'function',
	                generateStarSuffix(stmt) || noEmptySpace(),
	                generateIdentifier(stmt.id),
	                this.generateFunctionBody(stmt)
	            ];
	        },

	        ReturnStatement: function (stmt, flags) {
	            if (stmt.argument) {
	                return [join(
	                    'return',
	                    this.generateExpression(stmt.argument, Precedence.Sequence, E_TTT)
	                ), this.semicolon(flags)];
	            }
	            return ['return' + this.semicolon(flags)];
	        },

	        WhileStatement: function (stmt, flags) {
	            var result, that = this;
	            withIndent(function () {
	                result = [
	                    'while' + space + '(',
	                    that.generateExpression(stmt.test, Precedence.Sequence, E_TTT),
	                    ')'
	                ];
	            });
	            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
	            return result;
	        },

	        WithStatement: function (stmt, flags) {
	            var result, that = this;
	            withIndent(function () {
	                result = [
	                    'with' + space + '(',
	                    that.generateExpression(stmt.object, Precedence.Sequence, E_TTT),
	                    ')'
	                ];
	            });
	            result.push(this.maybeBlock(stmt.body, flags & F_SEMICOLON_OPT ? S_TFFT : S_TFFF));
	            return result;
	        }

	    };

	    merge(CodeGenerator.prototype, CodeGenerator.Statement);

	    // Expressions.

	    CodeGenerator.Expression = {

	        SequenceExpression: function (expr, precedence, flags) {
	            var result, i, iz;
	            if (Precedence.Sequence < precedence) {
	                flags |= F_ALLOW_IN;
	            }
	            result = [];
	            for (i = 0, iz = expr.expressions.length; i < iz; ++i) {
	                result.push(this.generateExpression(expr.expressions[i], Precedence.Assignment, flags));
	                if (i + 1 < iz) {
	                    result.push(',' + space);
	                }
	            }
	            return parenthesize(result, Precedence.Sequence, precedence);
	        },

	        AssignmentExpression: function (expr, precedence, flags) {
	            return this.generateAssignment(expr.left, expr.right, expr.operator, precedence, flags);
	        },

	        ArrowFunctionExpression: function (expr, precedence, flags) {
	            return parenthesize(this.generateFunctionBody(expr), Precedence.ArrowFunction, precedence);
	        },

	        ConditionalExpression: function (expr, precedence, flags) {
	            if (Precedence.Conditional < precedence) {
	                flags |= F_ALLOW_IN;
	            }
	            return parenthesize(
	                [
	                    this.generateExpression(expr.test, Precedence.LogicalOR, flags),
	                    space + '?' + space,
	                    this.generateExpression(expr.consequent, Precedence.Assignment, flags),
	                    space + ':' + space,
	                    this.generateExpression(expr.alternate, Precedence.Assignment, flags)
	                ],
	                Precedence.Conditional,
	                precedence
	            );
	        },

	        LogicalExpression: function (expr, precedence, flags) {
	            return this.BinaryExpression(expr, precedence, flags);
	        },

	        BinaryExpression: function (expr, precedence, flags) {
	            var result, currentPrecedence, fragment, leftSource;
	            currentPrecedence = BinaryPrecedence[expr.operator];

	            if (currentPrecedence < precedence) {
	                flags |= F_ALLOW_IN;
	            }

	            fragment = this.generateExpression(expr.left, currentPrecedence, flags);

	            leftSource = fragment.toString();

	            if (leftSource.charCodeAt(leftSource.length - 1) === 0x2F /* / */ && esutils.code.isIdentifierPartES5(expr.operator.charCodeAt(0))) {
	                result = [fragment, noEmptySpace(), expr.operator];
	            } else {
	                result = join(fragment, expr.operator);
	            }

	            fragment = this.generateExpression(expr.right, currentPrecedence + 1, flags);

	            if (expr.operator === '/' && fragment.toString().charAt(0) === '/' ||
	            expr.operator.slice(-1) === '<' && fragment.toString().slice(0, 3) === '!--') {
	                // If '/' concats with '/' or `<` concats with `!--`, it is interpreted as comment start
	                result.push(noEmptySpace());
	                result.push(fragment);
	            } else {
	                result = join(result, fragment);
	            }

	            if (expr.operator === 'in' && !(flags & F_ALLOW_IN)) {
	                return ['(', result, ')'];
	            }
	            return parenthesize(result, currentPrecedence, precedence);
	        },

	        CallExpression: function (expr, precedence, flags) {
	            var result, i, iz;
	            // F_ALLOW_UNPARATH_NEW becomes false.
	            result = [this.generateExpression(expr.callee, Precedence.Call, E_TTF)];
	            result.push('(');
	            for (i = 0, iz = expr['arguments'].length; i < iz; ++i) {
	                result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
	                if (i + 1 < iz) {
	                    result.push(',' + space);
	                }
	            }
	            result.push(')');

	            if (!(flags & F_ALLOW_CALL)) {
	                return ['(', result, ')'];
	            }
	            return parenthesize(result, Precedence.Call, precedence);
	        },

	        NewExpression: function (expr, precedence, flags) {
	            var result, length, i, iz, itemFlags;
	            length = expr['arguments'].length;

	            // F_ALLOW_CALL becomes false.
	            // F_ALLOW_UNPARATH_NEW may become false.
	            itemFlags = (flags & F_ALLOW_UNPARATH_NEW && !parentheses && length === 0) ? E_TFT : E_TFF;

	            result = join(
	                'new',
	                this.generateExpression(expr.callee, Precedence.New, itemFlags)
	            );

	            if (!(flags & F_ALLOW_UNPARATH_NEW) || parentheses || length > 0) {
	                result.push('(');
	                for (i = 0, iz = length; i < iz; ++i) {
	                    result.push(this.generateExpression(expr['arguments'][i], Precedence.Assignment, E_TTT));
	                    if (i + 1 < iz) {
	                        result.push(',' + space);
	                    }
	                }
	                result.push(')');
	            }

	            return parenthesize(result, Precedence.New, precedence);
	        },

	        MemberExpression: function (expr, precedence, flags) {
	            var result, fragment;

	            // F_ALLOW_UNPARATH_NEW becomes false.
	            result = [this.generateExpression(expr.object, Precedence.Call, (flags & F_ALLOW_CALL) ? E_TTF : E_TFF)];

	            if (expr.computed) {
	                result.push('[');
	                result.push(this.generateExpression(expr.property, Precedence.Sequence, flags & F_ALLOW_CALL ? E_TTT : E_TFT));
	                result.push(']');
	            } else {
	                if (expr.object.type === Syntax.Literal && typeof expr.object.value === 'number') {
	                    fragment = toSourceNodeWhenNeeded(result).toString();
	                    // When the following conditions are all true,
	                    //   1. No floating point
	                    //   2. Don't have exponents
	                    //   3. The last character is a decimal digit
	                    //   4. Not hexadecimal OR octal number literal
	                    // we should add a floating point.
	                    if (
	                            fragment.indexOf('.') < 0 &&
	                            !/[eExX]/.test(fragment) &&
	                            esutils.code.isDecimalDigit(fragment.charCodeAt(fragment.length - 1)) &&
	                            !(fragment.length >= 2 && fragment.charCodeAt(0) === 48)  // '0'
	                            ) {
	                        result.push('.');
	                    }
	                }
	                result.push('.');
	                result.push(generateIdentifier(expr.property));
	            }

	            return parenthesize(result, Precedence.Member, precedence);
	        },

	        UnaryExpression: function (expr, precedence, flags) {
	            var result, fragment, rightCharCode, leftSource, leftCharCode;
	            fragment = this.generateExpression(expr.argument, Precedence.Unary, E_TTT);

	            if (space === '') {
	                result = join(expr.operator, fragment);
	            } else {
	                result = [expr.operator];
	                if (expr.operator.length > 2) {
	                    // delete, void, typeof
	                    // get `typeof []`, not `typeof[]`
	                    result = join(result, fragment);
	                } else {
	                    // Prevent inserting spaces between operator and argument if it is unnecessary
	                    // like, `!cond`
	                    leftSource = toSourceNodeWhenNeeded(result).toString();
	                    leftCharCode = leftSource.charCodeAt(leftSource.length - 1);
	                    rightCharCode = fragment.toString().charCodeAt(0);

	                    if (((leftCharCode === 0x2B  /* + */ || leftCharCode === 0x2D  /* - */) && leftCharCode === rightCharCode) ||
	                            (esutils.code.isIdentifierPartES5(leftCharCode) && esutils.code.isIdentifierPartES5(rightCharCode))) {
	                        result.push(noEmptySpace());
	                        result.push(fragment);
	                    } else {
	                        result.push(fragment);
	                    }
	                }
	            }
	            return parenthesize(result, Precedence.Unary, precedence);
	        },

	        YieldExpression: function (expr, precedence, flags) {
	            var result;
	            if (expr.delegate) {
	                result = 'yield*';
	            } else {
	                result = 'yield';
	            }
	            if (expr.argument) {
	                result = join(
	                    result,
	                    this.generateExpression(expr.argument, Precedence.Yield, E_TTT)
	                );
	            }
	            return parenthesize(result, Precedence.Yield, precedence);
	        },

	        AwaitExpression: function (expr, precedence, flags) {
	            var result = join(
	                expr.all ? 'await*' : 'await',
	                this.generateExpression(expr.argument, Precedence.Await, E_TTT)
	            );
	            return parenthesize(result, Precedence.Await, precedence);
	        },

	        UpdateExpression: function (expr, precedence, flags) {
	            if (expr.prefix) {
	                return parenthesize(
	                    [
	                        expr.operator,
	                        this.generateExpression(expr.argument, Precedence.Unary, E_TTT)
	                    ],
	                    Precedence.Unary,
	                    precedence
	                );
	            }
	            return parenthesize(
	                [
	                    this.generateExpression(expr.argument, Precedence.Postfix, E_TTT),
	                    expr.operator
	                ],
	                Precedence.Postfix,
	                precedence
	            );
	        },

	        FunctionExpression: function (expr, precedence, flags) {
	            var result = [
	                generateAsyncPrefix(expr, true),
	                'function'
	            ];
	            if (expr.id) {
	                result.push(generateStarSuffix(expr) || noEmptySpace());
	                result.push(generateIdentifier(expr.id));
	            } else {
	                result.push(generateStarSuffix(expr) || space);
	            }
	            result.push(this.generateFunctionBody(expr));
	            return result;
	        },

	        ExportBatchSpecifier: function (expr, precedence, flags) {
	            return '*';
	        },

	        ArrayPattern: function (expr, precedence, flags) {
	            return this.ArrayExpression(expr, precedence, flags, true);
	        },

	        ArrayExpression: function (expr, precedence, flags, isPattern) {
	            var result, multiline, that = this;
	            if (!expr.elements.length) {
	                return '[]';
	            }
	            multiline = isPattern ? false : expr.elements.length > 1;
	            result = ['[', multiline ? newline : ''];
	            withIndent(function (indent) {
	                var i, iz;
	                for (i = 0, iz = expr.elements.length; i < iz; ++i) {
	                    if (!expr.elements[i]) {
	                        if (multiline) {
	                            result.push(indent);
	                        }
	                        if (i + 1 === iz) {
	                            result.push(',');
	                        }
	                    } else {
	                        result.push(multiline ? indent : '');
	                        result.push(that.generateExpression(expr.elements[i], Precedence.Assignment, E_TTT));
	                    }
	                    if (i + 1 < iz) {
	                        result.push(',' + (multiline ? newline : space));
	                    }
	                }
	            });
	            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                result.push(newline);
	            }
	            result.push(multiline ? base : '');
	            result.push(']');
	            return result;
	        },

	        RestElement: function(expr, precedence, flags) {
	            return '...' + this.generatePattern(expr.argument);
	        },

	        ClassExpression: function (expr, precedence, flags) {
	            var result, fragment;
	            result = ['class'];
	            if (expr.id) {
	                result = join(result, this.generateExpression(expr.id, Precedence.Sequence, E_TTT));
	            }
	            if (expr.superClass) {
	                fragment = join('extends', this.generateExpression(expr.superClass, Precedence.Assignment, E_TTT));
	                result = join(result, fragment);
	            }
	            result.push(space);
	            result.push(this.generateStatement(expr.body, S_TFFT));
	            return result;
	        },

	        MethodDefinition: function (expr, precedence, flags) {
	            var result, fragment;
	            if (expr['static']) {
	                result = ['static' + space];
	            } else {
	                result = [];
	            }
	            if (expr.kind === 'get' || expr.kind === 'set') {
	                fragment = [
	                    join(expr.kind, this.generatePropertyKey(expr.key, expr.computed)),
	                    this.generateFunctionBody(expr.value)
	                ];
	            } else {
	                fragment = [
	                    generateMethodPrefix(expr),
	                    this.generatePropertyKey(expr.key, expr.computed),
	                    this.generateFunctionBody(expr.value)
	                ];
	            }
	            return join(result, fragment);
	        },

	        Property: function (expr, precedence, flags) {
	            if (expr.kind === 'get' || expr.kind === 'set') {
	                return [
	                    expr.kind, noEmptySpace(),
	                    this.generatePropertyKey(expr.key, expr.computed),
	                    this.generateFunctionBody(expr.value)
	                ];
	            }

	            if (expr.shorthand) {
	                return this.generatePropertyKey(expr.key, expr.computed);
	            }

	            if (expr.method) {
	                return [
	                    generateMethodPrefix(expr),
	                    this.generatePropertyKey(expr.key, expr.computed),
	                    this.generateFunctionBody(expr.value)
	                ];
	            }

	            return [
	                this.generatePropertyKey(expr.key, expr.computed),
	                ':' + space,
	                this.generateExpression(expr.value, Precedence.Assignment, E_TTT)
	            ];
	        },

	        ObjectExpression: function (expr, precedence, flags) {
	            var multiline, result, fragment, that = this;

	            if (!expr.properties.length) {
	                return '{}';
	            }
	            multiline = expr.properties.length > 1;

	            withIndent(function () {
	                fragment = that.generateExpression(expr.properties[0], Precedence.Sequence, E_TTT);
	            });

	            if (!multiline) {
	                // issues 4
	                // Do not transform from
	                //   dejavu.Class.declare({
	                //       method2: function () {}
	                //   });
	                // to
	                //   dejavu.Class.declare({method2: function () {
	                //       }});
	                if (!hasLineTerminator(toSourceNodeWhenNeeded(fragment).toString())) {
	                    return [ '{', space, fragment, space, '}' ];
	                }
	            }

	            withIndent(function (indent) {
	                var i, iz;
	                result = [ '{', newline, indent, fragment ];

	                if (multiline) {
	                    result.push(',' + newline);
	                    for (i = 1, iz = expr.properties.length; i < iz; ++i) {
	                        result.push(indent);
	                        result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
	                        if (i + 1 < iz) {
	                            result.push(',' + newline);
	                        }
	                    }
	                }
	            });

	            if (!endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                result.push(newline);
	            }
	            result.push(base);
	            result.push('}');
	            return result;
	        },

	        ObjectPattern: function (expr, precedence, flags) {
	            var result, i, iz, multiline, property, that = this;
	            if (!expr.properties.length) {
	                return '{}';
	            }

	            multiline = false;
	            if (expr.properties.length === 1) {
	                property = expr.properties[0];
	                if (property.value.type !== Syntax.Identifier) {
	                    multiline = true;
	                }
	            } else {
	                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
	                    property = expr.properties[i];
	                    if (!property.shorthand) {
	                        multiline = true;
	                        break;
	                    }
	                }
	            }
	            result = ['{', multiline ? newline : '' ];

	            withIndent(function (indent) {
	                var i, iz;
	                for (i = 0, iz = expr.properties.length; i < iz; ++i) {
	                    result.push(multiline ? indent : '');
	                    result.push(that.generateExpression(expr.properties[i], Precedence.Sequence, E_TTT));
	                    if (i + 1 < iz) {
	                        result.push(',' + (multiline ? newline : space));
	                    }
	                }
	            });

	            if (multiline && !endsWithLineTerminator(toSourceNodeWhenNeeded(result).toString())) {
	                result.push(newline);
	            }
	            result.push(multiline ? base : '');
	            result.push('}');
	            return result;
	        },

	        ThisExpression: function (expr, precedence, flags) {
	            return 'this';
	        },

	        Super: function (expr, precedence, flags) {
	            return 'super';
	        },

	        Identifier: function (expr, precedence, flags) {
	            return generateIdentifier(expr);
	        },

	        ImportDefaultSpecifier: function (expr, precedence, flags) {
	            return generateIdentifier(expr.id || expr.local);
	        },

	        ImportNamespaceSpecifier: function (expr, precedence, flags) {
	            var result = ['*'];
	            var id = expr.id || expr.local;
	            if (id) {
	                result.push(space + 'as' + noEmptySpace() + generateIdentifier(id));
	            }
	            return result;
	        },

	        ImportSpecifier: function (expr, precedence, flags) {
	            return this.ExportSpecifier(expr, precedence, flags);
	        },

	        ExportSpecifier: function (expr, precedence, flags) {
	            var exported = (expr.id || expr.imported).name;
	            var result = [ exported ];
	            var id = expr.name || expr.local;
	            if (id && id.name !== exported) {
	                result.push(noEmptySpace() + 'as' + noEmptySpace() + generateIdentifier(id));
	            }
	            return result;
	        },

	        Literal: function (expr, precedence, flags) {
	            var raw;
	            if (expr.hasOwnProperty('raw') && parse && extra.raw) {
	                try {
	                    raw = parse(expr.raw).body[0].expression;
	                    if (raw.type === Syntax.Literal) {
	                        if (raw.value === expr.value) {
	                            return expr.raw;
	                        }
	                    }
	                } catch (e) {
	                    // not use raw property
	                }
	            }

	            if (expr.value === null) {
	                return 'null';
	            }

	            if (typeof expr.value === 'string') {
	                return escapeString(expr.value);
	            }

	            if (typeof expr.value === 'number') {
	                return generateNumber(expr.value);
	            }

	            if (typeof expr.value === 'boolean') {
	                return expr.value ? 'true' : 'false';
	            }

	            return generateRegExp(expr.value);
	        },

	        GeneratorExpression: function (expr, precedence, flags) {
	            return this.ComprehensionExpression(expr, precedence, flags);
	        },

	        ComprehensionExpression: function (expr, precedence, flags) {
	            // GeneratorExpression should be parenthesized with (...), ComprehensionExpression with [...]
	            // Due to https://bugzilla.mozilla.org/show_bug.cgi?id=883468 position of expr.body can differ in Spidermonkey and ES6

	            var result, i, iz, fragment, that = this;
	            result = (expr.type === Syntax.GeneratorExpression) ? ['('] : ['['];

	            if (extra.moz.comprehensionExpressionStartsWithAssignment) {
	                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);
	                result.push(fragment);
	            }

	            if (expr.blocks) {
	                withIndent(function () {
	                    for (i = 0, iz = expr.blocks.length; i < iz; ++i) {
	                        fragment = that.generateExpression(expr.blocks[i], Precedence.Sequence, E_TTT);
	                        if (i > 0 || extra.moz.comprehensionExpressionStartsWithAssignment) {
	                            result = join(result, fragment);
	                        } else {
	                            result.push(fragment);
	                        }
	                    }
	                });
	            }

	            if (expr.filter) {
	                result = join(result, 'if' + space);
	                fragment = this.generateExpression(expr.filter, Precedence.Sequence, E_TTT);
	                result = join(result, [ '(', fragment, ')' ]);
	            }

	            if (!extra.moz.comprehensionExpressionStartsWithAssignment) {
	                fragment = this.generateExpression(expr.body, Precedence.Assignment, E_TTT);

	                result = join(result, fragment);
	            }

	            result.push((expr.type === Syntax.GeneratorExpression) ? ')' : ']');
	            return result;
	        },

	        ComprehensionBlock: function (expr, precedence, flags) {
	            var fragment;
	            if (expr.left.type === Syntax.VariableDeclaration) {
	                fragment = [
	                    expr.left.kind, noEmptySpace(),
	                    this.generateStatement(expr.left.declarations[0], S_FFFF)
	                ];
	            } else {
	                fragment = this.generateExpression(expr.left, Precedence.Call, E_TTT);
	            }

	            fragment = join(fragment, expr.of ? 'of' : 'in');
	            fragment = join(fragment, this.generateExpression(expr.right, Precedence.Sequence, E_TTT));

	            return [ 'for' + space + '(', fragment, ')' ];
	        },

	        SpreadElement: function (expr, precedence, flags) {
	            return [
	                '...',
	                this.generateExpression(expr.argument, Precedence.Assignment, E_TTT)
	            ];
	        },

	        TaggedTemplateExpression: function (expr, precedence, flags) {
	            var itemFlags = E_TTF;
	            if (!(flags & F_ALLOW_CALL)) {
	                itemFlags = E_TFF;
	            }
	            var result = [
	                this.generateExpression(expr.tag, Precedence.Call, itemFlags),
	                this.generateExpression(expr.quasi, Precedence.Primary, E_FFT)
	            ];
	            return parenthesize(result, Precedence.TaggedTemplate, precedence);
	        },

	        TemplateElement: function (expr, precedence, flags) {
	            // Don't use "cooked". Since tagged template can use raw template
	            // representation. So if we do so, it breaks the script semantics.
	            return expr.value.raw;
	        },

	        TemplateLiteral: function (expr, precedence, flags) {
	            var result, i, iz;
	            result = [ '`' ];
	            for (i = 0, iz = expr.quasis.length; i < iz; ++i) {
	                result.push(this.generateExpression(expr.quasis[i], Precedence.Primary, E_TTT));
	                if (i + 1 < iz) {
	                    result.push('${' + space);
	                    result.push(this.generateExpression(expr.expressions[i], Precedence.Sequence, E_TTT));
	                    result.push(space + '}');
	                }
	            }
	            result.push('`');
	            return result;
	        },

	        ModuleSpecifier: function (expr, precedence, flags) {
	            return this.Literal(expr, precedence, flags);
	        }

	    };

	    merge(CodeGenerator.prototype, CodeGenerator.Expression);

	    CodeGenerator.prototype.generateExpression = function (expr, precedence, flags) {
	        var result, type;

	        type = expr.type || Syntax.Property;

	        if (extra.verbatim && expr.hasOwnProperty(extra.verbatim)) {
	            return generateVerbatim(expr, precedence);
	        }

	        result = this[type](expr, precedence, flags);


	        if (extra.comment) {
	            result = addComments(expr, result);
	        }
	        return toSourceNodeWhenNeeded(result, expr);
	    };

	    CodeGenerator.prototype.generateStatement = function (stmt, flags) {
	        var result,
	            fragment;

	        result = this[stmt.type](stmt, flags);

	        // Attach comments

	        if (extra.comment) {
	            result = addComments(stmt, result);
	        }

	        fragment = toSourceNodeWhenNeeded(result).toString();
	        if (stmt.type === Syntax.Program && !safeConcatenation && newline === '' &&  fragment.charAt(fragment.length - 1) === '\n') {
	            result = sourceMap ? toSourceNodeWhenNeeded(result).replaceRight(/\s+$/, '') : fragment.replace(/\s+$/, '');
	        }

	        return toSourceNodeWhenNeeded(result, stmt);
	    };

	    function generateInternal(node) {
	        var codegen;

	        codegen = new CodeGenerator();
	        if (isStatement(node)) {
	            return codegen.generateStatement(node, S_TFFF);
	        }

	        if (isExpression(node)) {
	            return codegen.generateExpression(node, Precedence.Sequence, E_TTT);
	        }

	        throw new Error('Unknown node type: ' + node.type);
	    }

	    function generate(node, options) {
	        var defaultOptions = getDefaultOptions(), result, pair;

	        if (options != null) {
	            // Obsolete options
	            //
	            //   `options.indent`
	            //   `options.base`
	            //
	            // Instead of them, we can use `option.format.indent`.
	            if (typeof options.indent === 'string') {
	                defaultOptions.format.indent.style = options.indent;
	            }
	            if (typeof options.base === 'number') {
	                defaultOptions.format.indent.base = options.base;
	            }
	            options = updateDeeply(defaultOptions, options);
	            indent = options.format.indent.style;
	            if (typeof options.base === 'string') {
	                base = options.base;
	            } else {
	                base = stringRepeat(indent, options.format.indent.base);
	            }
	        } else {
	            options = defaultOptions;
	            indent = options.format.indent.style;
	            base = stringRepeat(indent, options.format.indent.base);
	        }
	        json = options.format.json;
	        renumber = options.format.renumber;
	        hexadecimal = json ? false : options.format.hexadecimal;
	        quotes = json ? 'double' : options.format.quotes;
	        escapeless = options.format.escapeless;
	        newline = options.format.newline;
	        space = options.format.space;
	        if (options.format.compact) {
	            newline = space = indent = base = '';
	        }
	        parentheses = options.format.parentheses;
	        semicolons = options.format.semicolons;
	        safeConcatenation = options.format.safeConcatenation;
	        directive = options.directive;
	        parse = json ? null : options.parse;
	        sourceMap = options.sourceMap;
	        sourceCode = options.sourceCode;
	        preserveBlankLines = options.format.preserveBlankLines && sourceCode !== null;
	        extra = options;

	        if (sourceMap) {
	            if (!exports.browser) {
	                // We assume environment is node.js
	                // And prevent from including source-map by browserify
	                SourceNode = __webpack_require__(573).SourceNode;
	            } else {
	                SourceNode = global.sourceMap.SourceNode;
	            }
	        }

	        result = generateInternal(node);

	        if (!sourceMap) {
	            pair = {code: result.toString(), map: null};
	            return options.sourceMapWithCode ? pair : pair.code;
	        }


	        pair = result.toStringWithSourceMap({
	            file: options.file,
	            sourceRoot: options.sourceMapRoot
	        });

	        if (options.sourceContent) {
	            pair.map.setSourceContent(options.sourceMap,
	                                      options.sourceContent);
	        }

	        if (options.sourceMapWithCode) {
	            return pair;
	        }

	        return pair.map.toString();
	    }

	    FORMAT_MINIFY = {
	        indent: {
	            style: '',
	            base: 0
	        },
	        renumber: true,
	        hexadecimal: true,
	        quotes: 'auto',
	        escapeless: true,
	        compact: true,
	        parentheses: false,
	        semicolons: false
	    };

	    FORMAT_DEFAULTS = getDefaultOptions().format;

	    exports.version = __webpack_require__(611).version;
	    exports.generate = generate;
	    exports.attachComments = estraverse.attachComments;
	    exports.Precedence = updateDeeply({}, Precedence);
	    exports.browser = false;
	    exports.FORMAT_MINIFY = FORMAT_MINIFY;
	    exports.FORMAT_DEFAULTS = FORMAT_DEFAULTS;
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 569 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	  Copyright (C) 2012-2013 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2012 Ariya Hidayat <ariya.hidayat@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
	/*jslint vars:false, bitwise:true*/
	/*jshint indent:4*/
	/*global exports:true, define:true*/
	(function (root, factory) {
	    'use strict';

	    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
	    // and plain browser loading,
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== 'undefined') {
	        factory(exports);
	    } else {
	        factory((root.estraverse = {}));
	    }
	}(this, function clone(exports) {
	    'use strict';

	    var Syntax,
	        isArray,
	        VisitorOption,
	        VisitorKeys,
	        objectCreate,
	        objectKeys,
	        BREAK,
	        SKIP,
	        REMOVE;

	    function ignoreJSHintError() { }

	    isArray = Array.isArray;
	    if (!isArray) {
	        isArray = function isArray(array) {
	            return Object.prototype.toString.call(array) === '[object Array]';
	        };
	    }

	    function deepCopy(obj) {
	        var ret = {}, key, val;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                val = obj[key];
	                if (typeof val === 'object' && val !== null) {
	                    ret[key] = deepCopy(val);
	                } else {
	                    ret[key] = val;
	                }
	            }
	        }
	        return ret;
	    }

	    function shallowCopy(obj) {
	        var ret = {}, key;
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                ret[key] = obj[key];
	            }
	        }
	        return ret;
	    }
	    ignoreJSHintError(shallowCopy);

	    // based on LLVM libc++ upper_bound / lower_bound
	    // MIT License

	    function upperBound(array, func) {
	        var diff, len, i, current;

	        len = array.length;
	        i = 0;

	        while (len) {
	            diff = len >>> 1;
	            current = i + diff;
	            if (func(array[current])) {
	                len = diff;
	            } else {
	                i = current + 1;
	                len -= diff + 1;
	            }
	        }
	        return i;
	    }

	    function lowerBound(array, func) {
	        var diff, len, i, current;

	        len = array.length;
	        i = 0;

	        while (len) {
	            diff = len >>> 1;
	            current = i + diff;
	            if (func(array[current])) {
	                i = current + 1;
	                len -= diff + 1;
	            } else {
	                len = diff;
	            }
	        }
	        return i;
	    }
	    ignoreJSHintError(lowerBound);

	    objectCreate = Object.create || (function () {
	        function F() { }

	        return function (o) {
	            F.prototype = o;
	            return new F();
	        };
	    })();

	    objectKeys = Object.keys || function (o) {
	        var keys = [], key;
	        for (key in o) {
	            keys.push(key);
	        }
	        return keys;
	    };

	    function extend(to, from) {
	        var keys = objectKeys(from), key, i, len;
	        for (i = 0, len = keys.length; i < len; i += 1) {
	            key = keys[i];
	            to[key] = from[key];
	        }
	        return to;
	    }

	    Syntax = {
	        AssignmentExpression: 'AssignmentExpression',
	        ArrayExpression: 'ArrayExpression',
	        ArrayPattern: 'ArrayPattern',
	        ArrowFunctionExpression: 'ArrowFunctionExpression',
	        AwaitExpression: 'AwaitExpression', // CAUTION: It's deferred to ES7.
	        BlockStatement: 'BlockStatement',
	        BinaryExpression: 'BinaryExpression',
	        BreakStatement: 'BreakStatement',
	        CallExpression: 'CallExpression',
	        CatchClause: 'CatchClause',
	        ClassBody: 'ClassBody',
	        ClassDeclaration: 'ClassDeclaration',
	        ClassExpression: 'ClassExpression',
	        ComprehensionBlock: 'ComprehensionBlock',  // CAUTION: It's deferred to ES7.
	        ComprehensionExpression: 'ComprehensionExpression',  // CAUTION: It's deferred to ES7.
	        ConditionalExpression: 'ConditionalExpression',
	        ContinueStatement: 'ContinueStatement',
	        DebuggerStatement: 'DebuggerStatement',
	        DirectiveStatement: 'DirectiveStatement',
	        DoWhileStatement: 'DoWhileStatement',
	        EmptyStatement: 'EmptyStatement',
	        ExportBatchSpecifier: 'ExportBatchSpecifier',
	        ExportDeclaration: 'ExportDeclaration',
	        ExportSpecifier: 'ExportSpecifier',
	        ExpressionStatement: 'ExpressionStatement',
	        ForStatement: 'ForStatement',
	        ForInStatement: 'ForInStatement',
	        ForOfStatement: 'ForOfStatement',
	        FunctionDeclaration: 'FunctionDeclaration',
	        FunctionExpression: 'FunctionExpression',
	        GeneratorExpression: 'GeneratorExpression',  // CAUTION: It's deferred to ES7.
	        Identifier: 'Identifier',
	        IfStatement: 'IfStatement',
	        ImportDeclaration: 'ImportDeclaration',
	        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
	        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
	        ImportSpecifier: 'ImportSpecifier',
	        Literal: 'Literal',
	        LabeledStatement: 'LabeledStatement',
	        LogicalExpression: 'LogicalExpression',
	        MemberExpression: 'MemberExpression',
	        MethodDefinition: 'MethodDefinition',
	        ModuleSpecifier: 'ModuleSpecifier',
	        NewExpression: 'NewExpression',
	        ObjectExpression: 'ObjectExpression',
	        ObjectPattern: 'ObjectPattern',
	        Program: 'Program',
	        Property: 'Property',
	        ReturnStatement: 'ReturnStatement',
	        SequenceExpression: 'SequenceExpression',
	        SpreadElement: 'SpreadElement',
	        SwitchStatement: 'SwitchStatement',
	        SwitchCase: 'SwitchCase',
	        TaggedTemplateExpression: 'TaggedTemplateExpression',
	        TemplateElement: 'TemplateElement',
	        TemplateLiteral: 'TemplateLiteral',
	        ThisExpression: 'ThisExpression',
	        ThrowStatement: 'ThrowStatement',
	        TryStatement: 'TryStatement',
	        UnaryExpression: 'UnaryExpression',
	        UpdateExpression: 'UpdateExpression',
	        VariableDeclaration: 'VariableDeclaration',
	        VariableDeclarator: 'VariableDeclarator',
	        WhileStatement: 'WhileStatement',
	        WithStatement: 'WithStatement',
	        YieldExpression: 'YieldExpression'
	    };

	    VisitorKeys = {
	        AssignmentExpression: ['left', 'right'],
	        ArrayExpression: ['elements'],
	        ArrayPattern: ['elements'],
	        ArrowFunctionExpression: ['params', 'defaults', 'rest', 'body'],
	        AwaitExpression: ['argument'], // CAUTION: It's deferred to ES7.
	        BlockStatement: ['body'],
	        BinaryExpression: ['left', 'right'],
	        BreakStatement: ['label'],
	        CallExpression: ['callee', 'arguments'],
	        CatchClause: ['param', 'body'],
	        ClassBody: ['body'],
	        ClassDeclaration: ['id', 'body', 'superClass'],
	        ClassExpression: ['id', 'body', 'superClass'],
	        ComprehensionBlock: ['left', 'right'],  // CAUTION: It's deferred to ES7.
	        ComprehensionExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
	        ConditionalExpression: ['test', 'consequent', 'alternate'],
	        ContinueStatement: ['label'],
	        DebuggerStatement: [],
	        DirectiveStatement: [],
	        DoWhileStatement: ['body', 'test'],
	        EmptyStatement: [],
	        ExportBatchSpecifier: [],
	        ExportDeclaration: ['declaration', 'specifiers', 'source'],
	        ExportSpecifier: ['id', 'name'],
	        ExpressionStatement: ['expression'],
	        ForStatement: ['init', 'test', 'update', 'body'],
	        ForInStatement: ['left', 'right', 'body'],
	        ForOfStatement: ['left', 'right', 'body'],
	        FunctionDeclaration: ['id', 'params', 'defaults', 'rest', 'body'],
	        FunctionExpression: ['id', 'params', 'defaults', 'rest', 'body'],
	        GeneratorExpression: ['blocks', 'filter', 'body'],  // CAUTION: It's deferred to ES7.
	        Identifier: [],
	        IfStatement: ['test', 'consequent', 'alternate'],
	        ImportDeclaration: ['specifiers', 'source'],
	        ImportDefaultSpecifier: ['id'],
	        ImportNamespaceSpecifier: ['id'],
	        ImportSpecifier: ['id', 'name'],
	        Literal: [],
	        LabeledStatement: ['label', 'body'],
	        LogicalExpression: ['left', 'right'],
	        MemberExpression: ['object', 'property'],
	        MethodDefinition: ['key', 'value'],
	        ModuleSpecifier: [],
	        NewExpression: ['callee', 'arguments'],
	        ObjectExpression: ['properties'],
	        ObjectPattern: ['properties'],
	        Program: ['body'],
	        Property: ['key', 'value'],
	        ReturnStatement: ['argument'],
	        SequenceExpression: ['expressions'],
	        SpreadElement: ['argument'],
	        SwitchStatement: ['discriminant', 'cases'],
	        SwitchCase: ['test', 'consequent'],
	        TaggedTemplateExpression: ['tag', 'quasi'],
	        TemplateElement: [],
	        TemplateLiteral: ['quasis', 'expressions'],
	        ThisExpression: [],
	        ThrowStatement: ['argument'],
	        TryStatement: ['block', 'handlers', 'handler', 'guardedHandlers', 'finalizer'],
	        UnaryExpression: ['argument'],
	        UpdateExpression: ['argument'],
	        VariableDeclaration: ['declarations'],
	        VariableDeclarator: ['id', 'init'],
	        WhileStatement: ['test', 'body'],
	        WithStatement: ['object', 'body'],
	        YieldExpression: ['argument']
	    };

	    // unique id
	    BREAK = {};
	    SKIP = {};
	    REMOVE = {};

	    VisitorOption = {
	        Break: BREAK,
	        Skip: SKIP,
	        Remove: REMOVE
	    };

	    function Reference(parent, key) {
	        this.parent = parent;
	        this.key = key;
	    }

	    Reference.prototype.replace = function replace(node) {
	        this.parent[this.key] = node;
	    };

	    Reference.prototype.remove = function remove() {
	        if (isArray(this.parent)) {
	            this.parent.splice(this.key, 1);
	            return true;
	        } else {
	            this.replace(null);
	            return false;
	        }
	    };

	    function Element(node, path, wrap, ref) {
	        this.node = node;
	        this.path = path;
	        this.wrap = wrap;
	        this.ref = ref;
	    }

	    function Controller() { }

	    // API:
	    // return property path array from root to current node
	    Controller.prototype.path = function path() {
	        var i, iz, j, jz, result, element;

	        function addToPath(result, path) {
	            if (isArray(path)) {
	                for (j = 0, jz = path.length; j < jz; ++j) {
	                    result.push(path[j]);
	                }
	            } else {
	                result.push(path);
	            }
	        }

	        // root node
	        if (!this.__current.path) {
	            return null;
	        }

	        // first node is sentinel, second node is root element
	        result = [];
	        for (i = 2, iz = this.__leavelist.length; i < iz; ++i) {
	            element = this.__leavelist[i];
	            addToPath(result, element.path);
	        }
	        addToPath(result, this.__current.path);
	        return result;
	    };

	    // API:
	    // return type of current node
	    Controller.prototype.type = function () {
	        var node = this.current();
	        return node.type || this.__current.wrap;
	    };

	    // API:
	    // return array of parent elements
	    Controller.prototype.parents = function parents() {
	        var i, iz, result;

	        // first node is sentinel
	        result = [];
	        for (i = 1, iz = this.__leavelist.length; i < iz; ++i) {
	            result.push(this.__leavelist[i].node);
	        }

	        return result;
	    };

	    // API:
	    // return current node
	    Controller.prototype.current = function current() {
	        return this.__current.node;
	    };

	    Controller.prototype.__execute = function __execute(callback, element) {
	        var previous, result;

	        result = undefined;

	        previous  = this.__current;
	        this.__current = element;
	        this.__state = null;
	        if (callback) {
	            result = callback.call(this, element.node, this.__leavelist[this.__leavelist.length - 1].node);
	        }
	        this.__current = previous;

	        return result;
	    };

	    // API:
	    // notify control skip / break
	    Controller.prototype.notify = function notify(flag) {
	        this.__state = flag;
	    };

	    // API:
	    // skip child nodes of current node
	    Controller.prototype.skip = function () {
	        this.notify(SKIP);
	    };

	    // API:
	    // break traversals
	    Controller.prototype['break'] = function () {
	        this.notify(BREAK);
	    };

	    // API:
	    // remove node
	    Controller.prototype.remove = function () {
	        this.notify(REMOVE);
	    };

	    Controller.prototype.__initialize = function(root, visitor) {
	        this.visitor = visitor;
	        this.root = root;
	        this.__worklist = [];
	        this.__leavelist = [];
	        this.__current = null;
	        this.__state = null;
	        this.__fallback = visitor.fallback === 'iteration';
	        this.__keys = VisitorKeys;
	        if (visitor.keys) {
	            this.__keys = extend(objectCreate(this.__keys), visitor.keys);
	        }
	    };

	    function isNode(node) {
	        if (node == null) {
	            return false;
	        }
	        return typeof node === 'object' && typeof node.type === 'string';
	    }

	    function isProperty(nodeType, key) {
	        return (nodeType === Syntax.ObjectExpression || nodeType === Syntax.ObjectPattern) && 'properties' === key;
	    }

	    Controller.prototype.traverse = function traverse(root, visitor) {
	        var worklist,
	            leavelist,
	            element,
	            node,
	            nodeType,
	            ret,
	            key,
	            current,
	            current2,
	            candidates,
	            candidate,
	            sentinel;

	        this.__initialize(root, visitor);

	        sentinel = {};

	        // reference
	        worklist = this.__worklist;
	        leavelist = this.__leavelist;

	        // initialize
	        worklist.push(new Element(root, null, null, null));
	        leavelist.push(new Element(null, null, null, null));

	        while (worklist.length) {
	            element = worklist.pop();

	            if (element === sentinel) {
	                element = leavelist.pop();

	                ret = this.__execute(visitor.leave, element);

	                if (this.__state === BREAK || ret === BREAK) {
	                    return;
	                }
	                continue;
	            }

	            if (element.node) {

	                ret = this.__execute(visitor.enter, element);

	                if (this.__state === BREAK || ret === BREAK) {
	                    return;
	                }

	                worklist.push(sentinel);
	                leavelist.push(element);

	                if (this.__state === SKIP || ret === SKIP) {
	                    continue;
	                }

	                node = element.node;
	                nodeType = element.wrap || node.type;
	                candidates = this.__keys[nodeType];
	                if (!candidates) {
	                    if (this.__fallback) {
	                        candidates = objectKeys(node);
	                    } else {
	                        throw new Error('Unknown node type ' + nodeType + '.');
	                    }
	                }

	                current = candidates.length;
	                while ((current -= 1) >= 0) {
	                    key = candidates[current];
	                    candidate = node[key];
	                    if (!candidate) {
	                        continue;
	                    }

	                    if (isArray(candidate)) {
	                        current2 = candidate.length;
	                        while ((current2 -= 1) >= 0) {
	                            if (!candidate[current2]) {
	                                continue;
	                            }
	                            if (isProperty(nodeType, candidates[current])) {
	                                element = new Element(candidate[current2], [key, current2], 'Property', null);
	                            } else if (isNode(candidate[current2])) {
	                                element = new Element(candidate[current2], [key, current2], null, null);
	                            } else {
	                                continue;
	                            }
	                            worklist.push(element);
	                        }
	                    } else if (isNode(candidate)) {
	                        worklist.push(new Element(candidate, key, null, null));
	                    }
	                }
	            }
	        }
	    };

	    Controller.prototype.replace = function replace(root, visitor) {
	        function removeElem(element) {
	            var i,
	                key,
	                nextElem,
	                parent;

	            if (element.ref.remove()) {
	                // When the reference is an element of an array.
	                key = element.ref.key;
	                parent = element.ref.parent;

	                // If removed from array, then decrease following items' keys.
	                i = worklist.length;
	                while (i--) {
	                    nextElem = worklist[i];
	                    if (nextElem.ref && nextElem.ref.parent === parent) {
	                        if  (nextElem.ref.key < key) {
	                            break;
	                        }
	                        --nextElem.ref.key;
	                    }
	                }
	            }
	        }

	        var worklist,
	            leavelist,
	            node,
	            nodeType,
	            target,
	            element,
	            current,
	            current2,
	            candidates,
	            candidate,
	            sentinel,
	            outer,
	            key;

	        this.__initialize(root, visitor);

	        sentinel = {};

	        // reference
	        worklist = this.__worklist;
	        leavelist = this.__leavelist;

	        // initialize
	        outer = {
	            root: root
	        };
	        element = new Element(root, null, null, new Reference(outer, 'root'));
	        worklist.push(element);
	        leavelist.push(element);

	        while (worklist.length) {
	            element = worklist.pop();

	            if (element === sentinel) {
	                element = leavelist.pop();

	                target = this.__execute(visitor.leave, element);

	                // node may be replaced with null,
	                // so distinguish between undefined and null in this place
	                if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
	                    // replace
	                    element.ref.replace(target);
	                }

	                if (this.__state === REMOVE || target === REMOVE) {
	                    removeElem(element);
	                }

	                if (this.__state === BREAK || target === BREAK) {
	                    return outer.root;
	                }
	                continue;
	            }

	            target = this.__execute(visitor.enter, element);

	            // node may be replaced with null,
	            // so distinguish between undefined and null in this place
	            if (target !== undefined && target !== BREAK && target !== SKIP && target !== REMOVE) {
	                // replace
	                element.ref.replace(target);
	                element.node = target;
	            }

	            if (this.__state === REMOVE || target === REMOVE) {
	                removeElem(element);
	                element.node = null;
	            }

	            if (this.__state === BREAK || target === BREAK) {
	                return outer.root;
	            }

	            // node may be null
	            node = element.node;
	            if (!node) {
	                continue;
	            }

	            worklist.push(sentinel);
	            leavelist.push(element);

	            if (this.__state === SKIP || target === SKIP) {
	                continue;
	            }

	            nodeType = element.wrap || node.type;
	            candidates = this.__keys[nodeType];
	            if (!candidates) {
	                if (this.__fallback) {
	                    candidates = objectKeys(node);
	                } else {
	                    throw new Error('Unknown node type ' + nodeType + '.');
	                }
	            }

	            current = candidates.length;
	            while ((current -= 1) >= 0) {
	                key = candidates[current];
	                candidate = node[key];
	                if (!candidate) {
	                    continue;
	                }

	                if (isArray(candidate)) {
	                    current2 = candidate.length;
	                    while ((current2 -= 1) >= 0) {
	                        if (!candidate[current2]) {
	                            continue;
	                        }
	                        if (isProperty(nodeType, candidates[current])) {
	                            element = new Element(candidate[current2], [key, current2], 'Property', new Reference(candidate, current2));
	                        } else if (isNode(candidate[current2])) {
	                            element = new Element(candidate[current2], [key, current2], null, new Reference(candidate, current2));
	                        } else {
	                            continue;
	                        }
	                        worklist.push(element);
	                    }
	                } else if (isNode(candidate)) {
	                    worklist.push(new Element(candidate, key, null, new Reference(node, key)));
	                }
	            }
	        }

	        return outer.root;
	    };

	    function traverse(root, visitor) {
	        var controller = new Controller();
	        return controller.traverse(root, visitor);
	    }

	    function replace(root, visitor) {
	        var controller = new Controller();
	        return controller.replace(root, visitor);
	    }

	    function extendCommentRange(comment, tokens) {
	        var target;

	        target = upperBound(tokens, function search(token) {
	            return token.range[0] > comment.range[0];
	        });

	        comment.extendedRange = [comment.range[0], comment.range[1]];

	        if (target !== tokens.length) {
	            comment.extendedRange[1] = tokens[target].range[0];
	        }

	        target -= 1;
	        if (target >= 0) {
	            comment.extendedRange[0] = tokens[target].range[1];
	        }

	        return comment;
	    }

	    function attachComments(tree, providedComments, tokens) {
	        // At first, we should calculate extended comment ranges.
	        var comments = [], comment, len, i, cursor;

	        if (!tree.range) {
	            throw new Error('attachComments needs range information');
	        }

	        // tokens array is empty, we attach comments to tree as 'leadingComments'
	        if (!tokens.length) {
	            if (providedComments.length) {
	                for (i = 0, len = providedComments.length; i < len; i += 1) {
	                    comment = deepCopy(providedComments[i]);
	                    comment.extendedRange = [0, tree.range[0]];
	                    comments.push(comment);
	                }
	                tree.leadingComments = comments;
	            }
	            return tree;
	        }

	        for (i = 0, len = providedComments.length; i < len; i += 1) {
	            comments.push(extendCommentRange(deepCopy(providedComments[i]), tokens));
	        }

	        // This is based on John Freeman's implementation.
	        cursor = 0;
	        traverse(tree, {
	            enter: function (node) {
	                var comment;

	                while (cursor < comments.length) {
	                    comment = comments[cursor];
	                    if (comment.extendedRange[1] > node.range[0]) {
	                        break;
	                    }

	                    if (comment.extendedRange[1] === node.range[0]) {
	                        if (!node.leadingComments) {
	                            node.leadingComments = [];
	                        }
	                        node.leadingComments.push(comment);
	                        comments.splice(cursor, 1);
	                    } else {
	                        cursor += 1;
	                    }
	                }

	                // already out of owned node
	                if (cursor === comments.length) {
	                    return VisitorOption.Break;
	                }

	                if (comments[cursor].extendedRange[0] > node.range[1]) {
	                    return VisitorOption.Skip;
	                }
	            }
	        });

	        cursor = 0;
	        traverse(tree, {
	            leave: function (node) {
	                var comment;

	                while (cursor < comments.length) {
	                    comment = comments[cursor];
	                    if (node.range[1] < comment.extendedRange[0]) {
	                        break;
	                    }

	                    if (node.range[1] === comment.extendedRange[0]) {
	                        if (!node.trailingComments) {
	                            node.trailingComments = [];
	                        }
	                        node.trailingComments.push(comment);
	                        comments.splice(cursor, 1);
	                    } else {
	                        cursor += 1;
	                    }
	                }

	                // already out of owned node
	                if (cursor === comments.length) {
	                    return VisitorOption.Break;
	                }

	                if (comments[cursor].extendedRange[0] > node.range[1]) {
	                    return VisitorOption.Skip;
	                }
	            }
	        });

	        return tree;
	    }

	    exports.version = '1.8.1-dev';
	    exports.Syntax = Syntax;
	    exports.traverse = traverse;
	    exports.replace = replace;
	    exports.attachComments = attachComments;
	    exports.VisitorKeys = VisitorKeys;
	    exports.VisitorOption = VisitorOption;
	    exports.Controller = Controller;
	    exports.cloneEnvironment = function () { return clone({}); };

	    return exports;
	}));
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 570 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    function isExpression(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'ArrayExpression':
	            case 'AssignmentExpression':
	            case 'BinaryExpression':
	            case 'CallExpression':
	            case 'ConditionalExpression':
	            case 'FunctionExpression':
	            case 'Identifier':
	            case 'Literal':
	            case 'LogicalExpression':
	            case 'MemberExpression':
	            case 'NewExpression':
	            case 'ObjectExpression':
	            case 'SequenceExpression':
	            case 'ThisExpression':
	            case 'UnaryExpression':
	            case 'UpdateExpression':
	                return true;
	        }
	        return false;
	    }

	    function isIterationStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'DoWhileStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'WhileStatement':
	                return true;
	        }
	        return false;
	    }

	    function isStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'BlockStatement':
	            case 'BreakStatement':
	            case 'ContinueStatement':
	            case 'DebuggerStatement':
	            case 'DoWhileStatement':
	            case 'EmptyStatement':
	            case 'ExpressionStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'IfStatement':
	            case 'LabeledStatement':
	            case 'ReturnStatement':
	            case 'SwitchStatement':
	            case 'ThrowStatement':
	            case 'TryStatement':
	            case 'VariableDeclaration':
	            case 'WhileStatement':
	            case 'WithStatement':
	                return true;
	        }
	        return false;
	    }

	    function isSourceElement(node) {
	      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
	    }

	    function trailingStatement(node) {
	        switch (node.type) {
	        case 'IfStatement':
	            if (node.alternate != null) {
	                return node.alternate;
	            }
	            return node.consequent;

	        case 'LabeledStatement':
	        case 'ForStatement':
	        case 'ForInStatement':
	        case 'WhileStatement':
	        case 'WithStatement':
	            return node.body;
	        }
	        return null;
	    }

	    function isProblematicIfStatement(node) {
	        var current;

	        if (node.type !== 'IfStatement') {
	            return false;
	        }
	        if (node.alternate == null) {
	            return false;
	        }
	        current = node.consequent;
	        do {
	            if (current.type === 'IfStatement') {
	                if (current.alternate == null)  {
	                    return true;
	                }
	            }
	            current = trailingStatement(current);
	        } while (current);

	        return false;
	    }

	    module.exports = {
	        isExpression: isExpression,
	        isStatement: isStatement,
	        isIterationStatement: isIterationStatement,
	        isSourceElement: isSourceElement,
	        isProblematicIfStatement: isProblematicIfStatement,

	        trailingStatement: trailingStatement
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 571 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var code = __webpack_require__(109);

	    function isStrictModeReservedWordES6(id) {
	        switch (id) {
	        case 'implements':
	        case 'interface':
	        case 'package':
	        case 'private':
	        case 'protected':
	        case 'public':
	        case 'static':
	        case 'let':
	            return true;
	        default:
	            return false;
	        }
	    }

	    function isKeywordES5(id, strict) {
	        // yield should not be treated as keyword under non-strict mode.
	        if (!strict && id === 'yield') {
	            return false;
	        }
	        return isKeywordES6(id, strict);
	    }

	    function isKeywordES6(id, strict) {
	        if (strict && isStrictModeReservedWordES6(id)) {
	            return true;
	        }

	        switch (id.length) {
	        case 2:
	            return (id === 'if') || (id === 'in') || (id === 'do');
	        case 3:
	            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
	        case 4:
	            return (id === 'this') || (id === 'else') || (id === 'case') ||
	                (id === 'void') || (id === 'with') || (id === 'enum');
	        case 5:
	            return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                (id === 'class') || (id === 'super');
	        case 6:
	            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                (id === 'switch') || (id === 'export') || (id === 'import');
	        case 7:
	            return (id === 'default') || (id === 'finally') || (id === 'extends');
	        case 8:
	            return (id === 'function') || (id === 'continue') || (id === 'debugger');
	        case 10:
	            return (id === 'instanceof');
	        default:
	            return false;
	        }
	    }

	    function isReservedWordES5(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
	    }

	    function isReservedWordES6(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
	    }

	    function isRestrictedWord(id) {
	        return id === 'eval' || id === 'arguments';
	    }

	    function isIdentifierNameES5(id) {
	        var i, iz, ch;

	        if (id.length === 0) { return false; }

	        ch = id.charCodeAt(0);
	        if (!code.isIdentifierStartES5(ch)) {
	            return false;
	        }

	        for (i = 1, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (!code.isIdentifierPartES5(ch)) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function decodeUtf16(lead, trail) {
	        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
	    }

	    function isIdentifierNameES6(id) {
	        var i, iz, ch, lowCh, check;

	        if (id.length === 0) { return false; }

	        check = code.isIdentifierStartES6;
	        for (i = 0, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (0xD800 <= ch && ch <= 0xDBFF) {
	                ++i;
	                if (i >= iz) { return false; }
	                lowCh = id.charCodeAt(i);
	                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
	                    return false;
	                }
	                ch = decodeUtf16(ch, lowCh);
	            }
	            if (!check(ch)) {
	                return false;
	            }
	            check = code.isIdentifierPartES6;
	        }
	        return true;
	    }

	    function isIdentifierES5(id, strict) {
	        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
	    }

	    function isIdentifierES6(id, strict) {
	        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
	    }

	    module.exports = {
	        isKeywordES5: isKeywordES5,
	        isKeywordES6: isKeywordES6,
	        isReservedWordES5: isReservedWordES5,
	        isReservedWordES6: isReservedWordES6,
	        isRestrictedWord: isRestrictedWord,
	        isIdentifierNameES5: isIdentifierNameES5,
	        isIdentifierNameES6: isIdentifierNameES6,
	        isIdentifierES5: isIdentifierES5,
	        isIdentifierES6: isIdentifierES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 572 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/


	(function () {
	    'use strict';

	    exports.ast = __webpack_require__(570);
	    exports.code = __webpack_require__(109);
	    exports.keyword = __webpack_require__(571);
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 573 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(113).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(51).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(577).SourceNode;


/***/ },
/* 574 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var charToIntMap = {};
	  var intToCharMap = {};

	  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	    .split('')
	    .forEach(function (ch, index) {
	      charToIntMap[ch] = index;
	      intToCharMap[index] = ch;
	    });

	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function base64_encode(aNumber) {
	    if (aNumber in intToCharMap) {
	      return intToCharMap[aNumber];
	    }
	    throw new TypeError("Must be between 0 and 63: " + aNumber);
	  };

	  /**
	   * Decode a single base 64 digit to an integer.
	   */
	  exports.decode = function base64_decode(aChar) {
	    if (aChar in charToIntMap) {
	      return charToIntMap[aChar];
	    }
	    throw new TypeError("Not a valid base 64 digit: " + aChar);
	  };

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 575 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(13);
	  var binarySearch = __webpack_require__(112);
	  var SourceMapConsumer = __webpack_require__(51).SourceMapConsumer;
	  var BasicSourceMapConsumer = __webpack_require__(50).BasicSourceMapConsumer;

	  /**
	   * An IndexedSourceMapConsumer instance represents a parsed source map which
	   * we can query for information. It differs from BasicSourceMapConsumer in
	   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	   * input.
	   *
	   * The only parameter is a raw source map (either as a JSON string, or already
	   * parsed to an object). According to the spec for indexed source maps, they
	   * have the following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - file: Optional. The generated file this source map is associated with.
	   *   - sections: A list of section definitions.
	   *
	   * Each value under the "sections" field has two fields:
	   *   - offset: The offset into the original specified at which this section
	   *       begins to apply, defined as an object with a "line" and "column"
	   *       field.
	   *   - map: A source map definition. This source map could also be indexed,
	   *       but doesn't have to be.
	   *
	   * Instead of the "map" field, it's also possible to have a "url" field
	   * specifying a URL to retrieve a source map from, but that's currently
	   * unsupported.
	   *
	   * Here's an example source map, taken from the source map spec[0], but
	   * modified to omit a section which uses the "url" field.
	   *
	   *  {
	   *    version : 3,
	   *    file: "app.js",
	   *    sections: [{
	   *      offset: {line:100, column:10},
	   *      map: {
	   *        version : 3,
	   *        file: "section.js",
	   *        sources: ["foo.js", "bar.js"],
	   *        names: ["src", "maps", "are", "fun"],
	   *        mappings: "AAAA,E;;ABCDE;"
	   *      }
	   *    }],
	   *  }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	   */
	  function IndexedSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sections = util.getArg(sourceMap, 'sections');

	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    var lastOffset = {
	      line: -1,
	      column: 0
	    };
	    this._sections = sections.map(function (s) {
	      if (s.url) {
	        // The url field will require support for asynchronicity.
	        // See https://github.com/mozilla/source-map/issues/16
	        throw new Error('Support for url field in sections not implemented.');
	      }
	      var offset = util.getArg(s, 'offset');
	      var offsetLine = util.getArg(offset, 'line');
	      var offsetColumn = util.getArg(offset, 'column');

	      if (offsetLine < lastOffset.line ||
	          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	        throw new Error('Section offsets must be ordered and non-overlapping.');
	      }
	      lastOffset = offset;

	      return {
	        generatedOffset: {
	          // The offset fields are 0-based, but we use 1-based indices when
	          // encoding/decoding from VLQ.
	          generatedLine: offsetLine + 1,
	          generatedColumn: offsetColumn + 1
	        },
	        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	      }
	    });
	  }

	  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  IndexedSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      var sources = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	          sources.push(this._sections[i].consumer.sources[j]);
	        }
	      };
	      return sources;
	    }
	  });

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  IndexedSourceMapConsumer.prototype.originalPositionFor =
	    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      // Find the section containing the generated position we're trying to map
	      // to an original position.
	      var sectionIndex = binarySearch.search(needle, this._sections,
	        function(needle, section) {
	          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	          if (cmp) {
	            return cmp;
	          }

	          return (needle.generatedColumn -
	                  section.generatedOffset.generatedColumn);
	        });
	      var section = this._sections[sectionIndex];

	      if (!section) {
	        return {
	          source: null,
	          line: null,
	          column: null,
	          name: null
	        };
	      }

	      return section.consumer.originalPositionFor({
	        line: needle.generatedLine -
	          (section.generatedOffset.generatedLine - 1),
	        column: needle.generatedColumn -
	          (section.generatedOffset.generatedLine === needle.generatedLine
	           ? section.generatedOffset.generatedColumn - 1
	           : 0)
	      });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  IndexedSourceMapConsumer.prototype.sourceContentFor =
	    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        var content = section.consumer.sourceContentFor(aSource, true);
	        if (content) {
	          return content;
	        }
	      }
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  IndexedSourceMapConsumer.prototype.generatedPositionFor =
	    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        // Only consider this section if the requested source is in the list of
	        // sources of the consumer.
	        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	          continue;
	        }
	        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	        if (generatedPosition) {
	          var ret = {
	            line: generatedPosition.line +
	              (section.generatedOffset.generatedLine - 1),
	            column: generatedPosition.column +
	              (section.generatedOffset.generatedLine === generatedPosition.line
	               ? section.generatedOffset.generatedColumn - 1
	               : 0)
	          };
	          return ret;
	        }
	      }

	      return {
	        line: null,
	        column: null
	      };
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  IndexedSourceMapConsumer.prototype._parseMappings =
	    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      this.__generatedMappings = [];
	      this.__originalMappings = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	        var sectionMappings = section.consumer._generatedMappings;
	        for (var j = 0; j < sectionMappings.length; j++) {
	          var mapping = sectionMappings[i];

	          var source = mapping.source;
	          var sourceRoot = section.consumer.sourceRoot;

	          if (source != null && sourceRoot != null) {
	            source = util.join(sourceRoot, source);
	          }

	          // The mappings coming from the consumer for the section have
	          // generated positions relative to the start of the section, so we
	          // need to offset them to be relative to the start of the concatenated
	          // generated file.
	          var adjustedMapping = {
	            source: source,
	            generatedLine: mapping.generatedLine +
	              (section.generatedOffset.generatedLine - 1),
	            generatedColumn: mapping.column +
	              (section.generatedOffset.generatedLine === mapping.generatedLine)
	              ? section.generatedOffset.generatedColumn - 1
	              : 0,
	            originalLine: mapping.originalLine,
	            originalColumn: mapping.originalColumn,
	            name: mapping.name
	          };

	          this.__generatedMappings.push(adjustedMapping);
	          if (typeof adjustedMapping.originalLine === 'number') {
	            this.__originalMappings.push(adjustedMapping);
	          }
	        };
	      };

	    this.__generatedMappings.sort(util.compareByGeneratedPositions);
	    this.__originalMappings.sort(util.compareByOriginalPositions);
	  };

	  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 576 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var util = __webpack_require__(13);

	  /**
	   * Determine whether mappingB is after mappingA with respect to generated
	   * position.
	   */
	  function generatedPositionAfter(mappingA, mappingB) {
	    // Optimized for most common case
	    var lineA = mappingA.generatedLine;
	    var lineB = mappingB.generatedLine;
	    var columnA = mappingA.generatedColumn;
	    var columnB = mappingB.generatedColumn;
	    return lineB > lineA || lineB == lineA && columnB >= columnA ||
	           util.compareByGeneratedPositions(mappingA, mappingB) <= 0;
	  }

	  /**
	   * A data structure to provide a sorted view of accumulated mappings in a
	   * performance conscious manner. It trades a neglibable overhead in general
	   * case for a large speedup in case of mappings being added in order.
	   */
	  function MappingList() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }

	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  MappingList.prototype.unsortedForEach =
	    function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };

	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  MappingList.prototype.add = function MappingList_add(aMapping) {
	    var mapping;
	    if (generatedPositionAfter(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  };

	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  MappingList.prototype.toArray = function MappingList_toArray() {
	    if (!this._sorted) {
	      this._array.sort(util.compareByGeneratedPositions);
	      this._sorted = true;
	    }
	    return this._array;
	  };

	  exports.MappingList = MappingList;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 577 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	if (false) {
	    var define = require('amdefine')(module, require);
	}
	!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require, exports, module) {

	  var SourceMapGenerator = __webpack_require__(113).SourceMapGenerator;
	  var util = __webpack_require__(13);

	  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	  // operating systems these days (capturing the result).
	  var REGEX_NEWLINE = /(\r?\n)/;

	  // Newline character code for charCodeAt() comparisons
	  var NEWLINE_CODE = 10;

	  // Private symbol for identifying `SourceNode`s when multiple versions of
	  // the source-map library are loaded. This MUST NOT CHANGE across
	  // versions!
	  var isSourceNode = "$$$isSourceNode$$$";

	  /**
	   * SourceNodes provide a way to abstract over interpolating/concatenating
	   * snippets of generated JavaScript source code while maintaining the line and
	   * column information associated with the original source code.
	   *
	   * @param aLine The original line number.
	   * @param aColumn The original column number.
	   * @param aSource The original source's filename.
	   * @param aChunks Optional. An array of strings which are snippets of
	   *        generated JS, or other SourceNodes.
	   * @param aName The original identifier.
	   */
	  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	    this.children = [];
	    this.sourceContents = {};
	    this.line = aLine == null ? null : aLine;
	    this.column = aColumn == null ? null : aColumn;
	    this.source = aSource == null ? null : aSource;
	    this.name = aName == null ? null : aName;
	    this[isSourceNode] = true;
	    if (aChunks != null) this.add(aChunks);
	  }

	  /**
	   * Creates a SourceNode from generated code and a SourceMapConsumer.
	   *
	   * @param aGeneratedCode The generated code
	   * @param aSourceMapConsumer The SourceMap for the generated code
	   * @param aRelativePath Optional. The path that relative sources in the
	   *        SourceMapConsumer should be relative to.
	   */
	  SourceNode.fromStringWithSourceMap =
	    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      // The SourceNode we want to fill with the generated code
	      // and the SourceMap
	      var node = new SourceNode();

	      // All even indices of this array are one line of the generated code,
	      // while all odd indices are the newlines between two adjacent lines
	      // (since `REGEX_NEWLINE` captures its match).
	      // Processed fragments are removed from this array, by calling `shiftNextLine`.
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        // The last line of a file might not have a newline.
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };

	      // We need to remember the position of "remainingLines"
	      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	      // The generate SourceNodes we need a code range.
	      // To extract it current and last mapping is used.
	      // Here we store the last mapping.
	      var lastMapping = null;

	      aSourceMapConsumer.eachMapping(function (mapping) {
	        if (lastMapping !== null) {
	          // We add the code from "lastMapping" to "mapping":
	          // First check if there is a new line in between.
	          if (lastGeneratedLine < mapping.generatedLine) {
	            var code = "";
	            // Associate first line with "lastMapping"
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	            // The remaining code is added without mapping
	          } else {
	            // There is no new line in between.
	            // Associate the code between "lastGeneratedColumn" and
	            // "mapping.generatedColumn" with "lastMapping"
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn -
	                                          lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                                lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            // No more remaining code, continue
	            lastMapping = mapping;
	            return;
	          }
	        }
	        // We add the generated code until the first mapping
	        // to the SourceNode without any mapping.
	        // Each line is added as separate string.
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      // We have processed all mappings.
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          // Associate the remaining code in the current line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        // and add the remaining lines without any mapping
	        node.add(remainingLines.join(""));
	      }

	      // Copy sourcesContent into SourceNode
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });

	      return node;

	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath
	            ? util.join(aRelativePath, mapping.source)
	            : mapping.source;
	          node.add(new SourceNode(mapping.originalLine,
	                                  mapping.originalColumn,
	                                  source,
	                                  code,
	                                  mapping.name));
	        }
	      }
	    };

	  /**
	   * Add a chunk of generated JS to this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.add = function SourceNode_add(aChunk) {
	    if (Array.isArray(aChunk)) {
	      aChunk.forEach(function (chunk) {
	        this.add(chunk);
	      }, this);
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      if (aChunk) {
	        this.children.push(aChunk);
	      }
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Add a chunk of generated JS to the beginning of this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	    if (Array.isArray(aChunk)) {
	      for (var i = aChunk.length-1; i >= 0; i--) {
	        this.prepend(aChunk[i]);
	      }
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      this.children.unshift(aChunk);
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Walk over the tree of JS snippets in this node and its children. The
	   * walking function is called once for each snippet of JS and is passed that
	   * snippet and the its original associated source's line/column location.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	    var chunk;
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      chunk = this.children[i];
	      if (chunk[isSourceNode]) {
	        chunk.walk(aFn);
	      }
	      else {
	        if (chunk !== '') {
	          aFn(chunk, { source: this.source,
	                       line: this.line,
	                       column: this.column,
	                       name: this.name });
	        }
	      }
	    }
	  };

	  /**
	   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	   * each of `this.children`.
	   *
	   * @param aSep The separator.
	   */
	  SourceNode.prototype.join = function SourceNode_join(aSep) {
	    var newChildren;
	    var i;
	    var len = this.children.length;
	    if (len > 0) {
	      newChildren = [];
	      for (i = 0; i < len-1; i++) {
	        newChildren.push(this.children[i]);
	        newChildren.push(aSep);
	      }
	      newChildren.push(this.children[i]);
	      this.children = newChildren;
	    }
	    return this;
	  };

	  /**
	   * Call String.prototype.replace on the very right-most source snippet. Useful
	   * for trimming whitespace from the end of a source node, etc.
	   *
	   * @param aPattern The pattern to replace.
	   * @param aReplacement The thing to replace the pattern with.
	   */
	  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	    var lastChild = this.children[this.children.length - 1];
	    if (lastChild[isSourceNode]) {
	      lastChild.replaceRight(aPattern, aReplacement);
	    }
	    else if (typeof lastChild === 'string') {
	      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	    }
	    else {
	      this.children.push(''.replace(aPattern, aReplacement));
	    }
	    return this;
	  };

	  /**
	   * Set the source content for a source file. This will be added to the SourceMapGenerator
	   * in the sourcesContent field.
	   *
	   * @param aSourceFile The filename of the source file
	   * @param aSourceContent The content of the source file
	   */
	  SourceNode.prototype.setSourceContent =
	    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };

	  /**
	   * Walk over the tree of SourceNodes. The walking function is called for each
	   * source file content and is passed the filename and source content.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walkSourceContents =
	    function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0, len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }

	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0, len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };

	  /**
	   * Return the string representation of this source node. Walks over the tree
	   * and concatenates all the various snippets together to one string.
	   */
	  SourceNode.prototype.toString = function SourceNode_toString() {
	    var str = "";
	    this.walk(function (chunk) {
	      str += chunk;
	    });
	    return str;
	  };

	  /**
	   * Returns the string representation of this source node along with a source
	   * map.
	   */
	  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	    var generated = {
	      code: "",
	      line: 1,
	      column: 0
	    };
	    var map = new SourceMapGenerator(aArgs);
	    var sourceMappingActive = false;
	    var lastOriginalSource = null;
	    var lastOriginalLine = null;
	    var lastOriginalColumn = null;
	    var lastOriginalName = null;
	    this.walk(function (chunk, original) {
	      generated.code += chunk;
	      if (original.source !== null
	          && original.line !== null
	          && original.column !== null) {
	        if(lastOriginalSource !== original.source
	           || lastOriginalLine !== original.line
	           || lastOriginalColumn !== original.column
	           || lastOriginalName !== original.name) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	        lastOriginalSource = original.source;
	        lastOriginalLine = original.line;
	        lastOriginalColumn = original.column;
	        lastOriginalName = original.name;
	        sourceMappingActive = true;
	      } else if (sourceMappingActive) {
	        map.addMapping({
	          generated: {
	            line: generated.line,
	            column: generated.column
	          }
	        });
	        lastOriginalSource = null;
	        sourceMappingActive = false;
	      }
	      for (var idx = 0, length = chunk.length; idx < length; idx++) {
	        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	          generated.line++;
	          generated.column = 0;
	          // Mappings end at eol
	          if (idx + 1 === length) {
	            lastOriginalSource = null;
	            sourceMappingActive = false;
	          } else if (sourceMappingActive) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	        } else {
	          generated.column++;
	        }
	      }
	    });
	    this.walkSourceContents(function (sourceFile, sourceContent) {
	      map.setSourceContent(sourceFile, sourceContent);
	    });

	    return { code: generated.code, map: map };
	  };

	  exports.SourceNode = SourceNode;

	}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));


/***/ },
/* 578 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = CollectingHandler;

	function CollectingHandler(cbs){
		this._cbs = cbs || {};
		this.events = [];
	}

	var EVENTS = __webpack_require__(28).EVENTS;
	Object.keys(EVENTS).forEach(function(name){
		if(EVENTS[name] === 0){
			name = "on" + name;
			CollectingHandler.prototype[name] = function(){
				this.events.push([name]);
				if(this._cbs[name]) this._cbs[name]();
			};
		} else if(EVENTS[name] === 1){
			name = "on" + name;
			CollectingHandler.prototype[name] = function(a){
				this.events.push([name, a]);
				if(this._cbs[name]) this._cbs[name](a);
			};
		} else if(EVENTS[name] === 2){
			name = "on" + name;
			CollectingHandler.prototype[name] = function(a, b){
				this.events.push([name, a, b]);
				if(this._cbs[name]) this._cbs[name](a, b);
			};
		} else {
			throw Error("wrong number of arguments");
		}
	});

	CollectingHandler.prototype.onreset = function(){
		this.events = [];
		if(this._cbs.onreset) this._cbs.onreset();
	};

	CollectingHandler.prototype.restart = function(){
		if(this._cbs.onreset) this._cbs.onreset();

		for(var i = 0, len = this.events.length; i < len; i++){
			if(this._cbs[this.events[i][0]]){

				var num = this.events[i].length;

				if(num === 1){
					this._cbs[this.events[i][0]]();
				} else if(num === 2){
					this._cbs[this.events[i][0]](this.events[i][1]);
				} else {
					this._cbs[this.events[i][0]](this.events[i][1], this.events[i][2]);
				}
			}
		}
	};


/***/ },
/* 579 */
/***/ function(module, exports, __webpack_require__) {

	var index = __webpack_require__(28),
	    DomHandler = index.DomHandler,
		DomUtils = index.DomUtils;

	//TODO: make this a streamable handler
	function FeedHandler(callback, options){
		this.init(callback, options);
	}

	__webpack_require__(10).inherits(FeedHandler, DomHandler);

	FeedHandler.prototype.init = DomHandler;

	function getElements(what, where){
		return DomUtils.getElementsByTagName(what, where, true);
	}
	function getOneElement(what, where){
		return DomUtils.getElementsByTagName(what, where, true, 1)[0];
	}
	function fetch(what, where, recurse){
		return DomUtils.getText(
			DomUtils.getElementsByTagName(what, where, recurse, 1)
		).trim();
	}

	function addConditionally(obj, prop, what, where, recurse){
		var tmp = fetch(what, where, recurse);
		if(tmp) obj[prop] = tmp;
	}

	var isValidFeed = function(value){
		return value === "rss" || value === "feed" || value === "rdf:RDF";
	};

	FeedHandler.prototype.onend = function(){
		var feed = {},
			feedRoot = getOneElement(isValidFeed, this.dom),
			tmp, childs;

		if(feedRoot){
			if(feedRoot.name === "feed"){
				childs = feedRoot.children;

				feed.type = "atom";
				addConditionally(feed, "id", "id", childs);
				addConditionally(feed, "title", "title", childs);
				if((tmp = getOneElement("link", childs)) && (tmp = tmp.attribs) && (tmp = tmp.href)) feed.link = tmp;
				addConditionally(feed, "description", "subtitle", childs);
				if((tmp = fetch("updated", childs))) feed.updated = new Date(tmp);
				addConditionally(feed, "author", "email", childs, true);

				feed.items = getElements("entry", childs).map(function(item){
					var entry = {}, tmp;

					item = item.children;

					addConditionally(entry, "id", "id", item);
					addConditionally(entry, "title", "title", item);
					if((tmp = getOneElement("link", item)) && (tmp = tmp.attribs) && (tmp = tmp.href)) entry.link = tmp;
					if((tmp = fetch("summary", item) || fetch("content", item))) entry.description = tmp;
					if((tmp = fetch("updated", item))) entry.pubDate = new Date(tmp);
					return entry;
				});
			} else {
				childs = getOneElement("channel", feedRoot.children).children;

				feed.type = feedRoot.name.substr(0, 3);
				feed.id = "";
				addConditionally(feed, "title", "title", childs);
				addConditionally(feed, "link", "link", childs);
				addConditionally(feed, "description", "description", childs);
				if((tmp = fetch("lastBuildDate", childs))) feed.updated = new Date(tmp);
				addConditionally(feed, "author", "managingEditor", childs, true);

				feed.items = getElements("item", feedRoot.children).map(function(item){
					var entry = {}, tmp;

					item = item.children;

					addConditionally(entry, "id", "guid", item);
					addConditionally(entry, "title", "title", item);
					addConditionally(entry, "link", "link", item);
					addConditionally(entry, "description", "description", item);
					if((tmp = fetch("pubDate", item))) entry.pubDate = new Date(tmp);
					return entry;
				});
			}
		}
		this.dom = feed;
		DomHandler.prototype._handleCallback.call(
			this, feedRoot ? null : Error("couldn't find root of feed")
		);
	};

	module.exports = FeedHandler;


/***/ },
/* 580 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = ProxyHandler;

	function ProxyHandler(cbs){
		this._cbs = cbs || {};
	}

	var EVENTS = __webpack_require__(28).EVENTS;
	Object.keys(EVENTS).forEach(function(name){
		if(EVENTS[name] === 0){
			name = "on" + name;
			ProxyHandler.prototype[name] = function(){
				if(this._cbs[name]) this._cbs[name]();
			};
		} else if(EVENTS[name] === 1){
			name = "on" + name;
			ProxyHandler.prototype[name] = function(a){
				if(this._cbs[name]) this._cbs[name](a);
			};
		} else if(EVENTS[name] === 2){
			name = "on" + name;
			ProxyHandler.prototype[name] = function(a, b){
				if(this._cbs[name]) this._cbs[name](a, b);
			};
		} else {
			throw Error("wrong number of arguments");
		}
	});

/***/ },
/* 581 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = Stream;

	var Parser = __webpack_require__(116);

	function Stream(options){
		Parser.call(this, new Cbs(this), options);
	}

	__webpack_require__(10).inherits(Stream, Parser);

	Stream.prototype.readable = true;

	function Cbs(scope){
		this.scope = scope;
	}

	var EVENTS = __webpack_require__(28).EVENTS;

	Object.keys(EVENTS).forEach(function(name){
		if(EVENTS[name] === 0){
			Cbs.prototype["on" + name] = function(){
				this.scope.emit(name);
			};
		} else if(EVENTS[name] === 1){
			Cbs.prototype["on" + name] = function(a){
				this.scope.emit(name, a);
			};
		} else if(EVENTS[name] === 2){
			Cbs.prototype["on" + name] = function(a, b){
				this.scope.emit(name, a, b);
			};
		} else {
			throw Error("wrong number of arguments!");
		}
	});

/***/ },
/* 582 */
/***/ function(module, exports, __webpack_require__) {

	var ElementType = __webpack_require__(29);

	var re_whitespace = /\s+/g;
	var NodePrototype = __webpack_require__(117);
	var ElementPrototype = __webpack_require__(583);

	function DomHandler(callback, options, elementCB){
		if(typeof callback === "object"){
			elementCB = options;
			options = callback;
			callback = null;
		} else if(typeof options === "function"){
			elementCB = options;
			options = defaultOpts;
		}
		this._callback = callback;
		this._options = options || defaultOpts;
		this._elementCB = elementCB;
		this.dom = [];
		this._done = false;
		this._tagStack = [];
		this._parser = this._parser || null;
	}

	//default options
	var defaultOpts = {
		normalizeWhitespace: false, //Replace all whitespace with single spaces
		withStartIndices: false, //Add startIndex properties to nodes
	};

	DomHandler.prototype.onparserinit = function(parser){
		this._parser = parser;
	};

	//Resets the handler back to starting state
	DomHandler.prototype.onreset = function(){
		DomHandler.call(this, this._callback, this._options, this._elementCB);
	};

	//Signals the handler that parsing is done
	DomHandler.prototype.onend = function(){
		if(this._done) return;
		this._done = true;
		this._parser = null;
		this._handleCallback(null);
	};

	DomHandler.prototype._handleCallback =
	DomHandler.prototype.onerror = function(error){
		if(typeof this._callback === "function"){
			this._callback(error, this.dom);
		} else {
			if(error) throw error;
		}
	};

	DomHandler.prototype.onclosetag = function(){
		//if(this._tagStack.pop().name !== name) this._handleCallback(Error("Tagname didn't match!"));
		var elem = this._tagStack.pop();
		if(this._elementCB) this._elementCB(elem);
	};

	DomHandler.prototype._addDomElement = function(element){
		var parent = this._tagStack[this._tagStack.length - 1];
		var siblings = parent ? parent.children : this.dom;
		var previousSibling = siblings[siblings.length - 1];

		element.next = null;

		if(this._options.withStartIndices){
			element.startIndex = this._parser.startIndex;
		}

		if (this._options.withDomLvl1) {
			element.__proto__ = element.type === "tag" ? ElementPrototype : NodePrototype;
		}

		if(previousSibling){
			element.prev = previousSibling;
			previousSibling.next = element;
		} else {
			element.prev = null;
		}

		siblings.push(element);
		element.parent = parent || null;
	};

	DomHandler.prototype.onopentag = function(name, attribs){
		var element = {
			type: name === "script" ? ElementType.Script : name === "style" ? ElementType.Style : ElementType.Tag,
			name: name,
			attribs: attribs,
			children: []
		};

		this._addDomElement(element);

		this._tagStack.push(element);
	};

	DomHandler.prototype.ontext = function(data){
		//the ignoreWhitespace is officially dropped, but for now,
		//it's an alias for normalizeWhitespace
		var normalize = this._options.normalizeWhitespace || this._options.ignoreWhitespace;

		var lastTag;

		if(!this._tagStack.length && this.dom.length && (lastTag = this.dom[this.dom.length-1]).type === ElementType.Text){
			if(normalize){
				lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
			} else {
				lastTag.data += data;
			}
		} else {
			if(
				this._tagStack.length &&
				(lastTag = this._tagStack[this._tagStack.length - 1]) &&
				(lastTag = lastTag.children[lastTag.children.length - 1]) &&
				lastTag.type === ElementType.Text
			){
				if(normalize){
					lastTag.data = (lastTag.data + data).replace(re_whitespace, " ");
				} else {
					lastTag.data += data;
				}
			} else {
				if(normalize){
					data = data.replace(re_whitespace, " ");
				}

				this._addDomElement({
					data: data,
					type: ElementType.Text
				});
			}
		}
	};

	DomHandler.prototype.oncomment = function(data){
		var lastTag = this._tagStack[this._tagStack.length - 1];

		if(lastTag && lastTag.type === ElementType.Comment){
			lastTag.data += data;
			return;
		}

		var element = {
			data: data,
			type: ElementType.Comment
		};

		this._addDomElement(element);
		this._tagStack.push(element);
	};

	DomHandler.prototype.oncdatastart = function(){
		var element = {
			children: [{
				data: "",
				type: ElementType.Text
			}],
			type: ElementType.CDATA
		};

		this._addDomElement(element);
		this._tagStack.push(element);
	};

	DomHandler.prototype.oncommentend = DomHandler.prototype.oncdataend = function(){
		this._tagStack.pop();
	};

	DomHandler.prototype.onprocessinginstruction = function(name, data){
		this._addDomElement({
			name: name,
			data: data,
			type: ElementType.Directive
		});
	};

	module.exports = DomHandler;


/***/ },
/* 583 */
/***/ function(module, exports, __webpack_require__) {

	// DOM-Level-1-compliant structure
	var NodePrototype = __webpack_require__(117);
	var ElementPrototype = module.exports = Object.create(NodePrototype);

	var domLvl1 = {
		tagName: "name"
	};

	Object.keys(domLvl1).forEach(function(key) {
		var shorthand = domLvl1[key];
		Object.defineProperty(ElementPrototype, key, {
			get: function() {
				return this[shorthand] || null;
			},
			set: function(val) {
				this[shorthand] = val;
				return val;
			}
		});
	});


/***/ },
/* 584 */
/***/ function(module, exports, __webpack_require__) {

	var DomUtils = module.exports;

	[
		__webpack_require__(589),
		__webpack_require__(590),
		__webpack_require__(587),
		__webpack_require__(588),
		__webpack_require__(586),
		__webpack_require__(585)
	].forEach(function(ext){
		Object.keys(ext).forEach(function(key){
			DomUtils[key] = ext[key].bind(DomUtils);
		});
	});


/***/ },
/* 585 */
/***/ function(module, exports) {

	// removeSubsets
	// Given an array of nodes, remove any member that is contained by another.
	exports.removeSubsets = function(nodes) {
		var idx = nodes.length, node, ancestor, replace;

		// Check if each node (or one of its ancestors) is already contained in the
		// array.
		while (--idx > -1) {
			node = ancestor = nodes[idx];

			// Temporarily remove the node under consideration
			nodes[idx] = null;
			replace = true;

			while (ancestor) {
				if (nodes.indexOf(ancestor) > -1) {
					replace = false;
					nodes.splice(idx, 1);
					break;
				}
				ancestor = ancestor.parent;
			}

			// If the node has been found to be unique, re-insert it.
			if (replace) {
				nodes[idx] = node;
			}
		}

		return nodes;
	};

	// Source: http://dom.spec.whatwg.org/#dom-node-comparedocumentposition
	var POSITION = {
		DISCONNECTED: 1,
		PRECEDING: 2,
		FOLLOWING: 4,
		CONTAINS: 8,
		CONTAINED_BY: 16
	};

	// Compare the position of one node against another node in any other document.
	// The return value is a bitmask with the following values:
	//
	// document order:
	// > There is an ordering, document order, defined on all the nodes in the
	// > document corresponding to the order in which the first character of the
	// > XML representation of each node occurs in the XML representation of the
	// > document after expansion of general entities. Thus, the document element
	// > node will be the first node. Element nodes occur before their children.
	// > Thus, document order orders element nodes in order of the occurrence of
	// > their start-tag in the XML (after expansion of entities). The attribute
	// > nodes of an element occur after the element and before its children. The
	// > relative order of attribute nodes is implementation-dependent./
	// Source:
	// http://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-document-order
	//
	// @argument {Node} nodaA The first node to use in the comparison
	// @argument {Node} nodeB The second node to use in the comparison
	//
	// @return {Number} A bitmask describing the input nodes' relative position.
	//         See http://dom.spec.whatwg.org/#dom-node-comparedocumentposition for
	//         a description of these values.
	var comparePos = exports.compareDocumentPosition = function(nodeA, nodeB) {
		var aParents = [];
		var bParents = [];
		var current, sharedParent, siblings, aSibling, bSibling, idx;

		if (nodeA === nodeB) {
			return 0;
		}

		current = nodeA;
		while (current) {
			aParents.unshift(current);
			current = current.parent;
		}
		current = nodeB;
		while (current) {
			bParents.unshift(current);
			current = current.parent;
		}

		idx = 0;
		while (aParents[idx] === bParents[idx]) {
			idx++;
		}

		if (idx === 0) {
			return POSITION.DISCONNECTED;
		}

		sharedParent = aParents[idx - 1];
		siblings = sharedParent.children;
		aSibling = aParents[idx];
		bSibling = bParents[idx];

		if (siblings.indexOf(aSibling) > siblings.indexOf(bSibling)) {
			if (sharedParent === nodeB) {
				return POSITION.FOLLOWING | POSITION.CONTAINED_BY;
			}
			return POSITION.FOLLOWING;
		} else {
			if (sharedParent === nodeA) {
				return POSITION.PRECEDING | POSITION.CONTAINS;
			}
			return POSITION.PRECEDING;
		}
	};

	// Sort an array of nodes based on their relative position in the document and
	// remove any duplicate nodes. If the array contains nodes that do not belong
	// to the same document, sort order is unspecified.
	//
	// @argument {Array} nodes Array of DOM nodes
	//
	// @returns {Array} collection of unique nodes, sorted in document order
	exports.uniqueSort = function(nodes) {
		var idx = nodes.length, node, position;

		nodes = nodes.slice();

		while (--idx > -1) {
			node = nodes[idx];
			position = nodes.indexOf(node);
			if (position > -1 && position < idx) {
				nodes.splice(idx, 1);
			}
		}
		nodes.sort(function(a, b) {
			var relative = comparePos(a, b);
			if (relative & POSITION.PRECEDING) {
				return -1;
			} else if (relative & POSITION.FOLLOWING) {
				return 1;
			}
			return 0;
		});

		return nodes;
	};


/***/ },
/* 586 */
/***/ function(module, exports, __webpack_require__) {

	var ElementType = __webpack_require__(29);
	var isTag = exports.isTag = ElementType.isTag;

	exports.testElement = function(options, element){
		for(var key in options){
			if(!options.hasOwnProperty(key));
			else if(key === "tag_name"){
				if(!isTag(element) || !options.tag_name(element.name)){
					return false;
				}
			} else if(key === "tag_type"){
				if(!options.tag_type(element.type)) return false;
			} else if(key === "tag_contains"){
				if(isTag(element) || !options.tag_contains(element.data)){
					return false;
				}
			} else if(!element.attribs || !options[key](element.attribs[key])){
				return false;
			}
		}
		return true;
	};

	var Checks = {
		tag_name: function(name){
			if(typeof name === "function"){
				return function(elem){ return isTag(elem) && name(elem.name); };
			} else if(name === "*"){
				return isTag;
			} else {
				return function(elem){ return isTag(elem) && elem.name === name; };
			}
		},
		tag_type: function(type){
			if(typeof type === "function"){
				return function(elem){ return type(elem.type); };
			} else {
				return function(elem){ return elem.type === type; };
			}
		},
		tag_contains: function(data){
			if(typeof data === "function"){
				return function(elem){ return !isTag(elem) && data(elem.data); };
			} else {
				return function(elem){ return !isTag(elem) && elem.data === data; };
			}
		}
	};

	function getAttribCheck(attrib, value){
		if(typeof value === "function"){
			return function(elem){ return elem.attribs && value(elem.attribs[attrib]); };
		} else {
			return function(elem){ return elem.attribs && elem.attribs[attrib] === value; };
		}
	}

	function combineFuncs(a, b){
		return function(elem){
			return a(elem) || b(elem);
		};
	}

	exports.getElements = function(options, element, recurse, limit){
		var funcs = Object.keys(options).map(function(key){
			var value = options[key];
			return key in Checks ? Checks[key](value) : getAttribCheck(key, value);
		});

		return funcs.length === 0 ? [] : this.filter(
			funcs.reduce(combineFuncs),
			element, recurse, limit
		);
	};

	exports.getElementById = function(id, element, recurse){
		if(!Array.isArray(element)) element = [element];
		return this.findOne(getAttribCheck("id", id), element, recurse !== false);
	};

	exports.getElementsByTagName = function(name, element, recurse, limit){
		return this.filter(Checks.tag_name(name), element, recurse, limit);
	};

	exports.getElementsByTagType = function(type, element, recurse, limit){
		return this.filter(Checks.tag_type(type), element, recurse, limit);
	};


/***/ },
/* 587 */
/***/ function(module, exports) {

	exports.removeElement = function(elem){
		if(elem.prev) elem.prev.next = elem.next;
		if(elem.next) elem.next.prev = elem.prev;

		if(elem.parent){
			var childs = elem.parent.children;
			childs.splice(childs.lastIndexOf(elem), 1);
		}
	};

	exports.replaceElement = function(elem, replacement){
		var prev = replacement.prev = elem.prev;
		if(prev){
			prev.next = replacement;
		}

		var next = replacement.next = elem.next;
		if(next){
			next.prev = replacement;
		}

		var parent = replacement.parent = elem.parent;
		if(parent){
			var childs = parent.children;
			childs[childs.lastIndexOf(elem)] = replacement;
		}
	};

	exports.appendChild = function(elem, child){
		child.parent = elem;

		if(elem.children.push(child) !== 1){
			var sibling = elem.children[elem.children.length - 2];
			sibling.next = child;
			child.prev = sibling;
			child.next = null;
		}
	};

	exports.append = function(elem, next){
		var parent = elem.parent,
			currNext = elem.next;

		next.next = currNext;
		next.prev = elem;
		elem.next = next;
		next.parent = parent;

		if(currNext){
			currNext.prev = next;
			if(parent){
				var childs = parent.children;
				childs.splice(childs.lastIndexOf(currNext), 0, next);
			}
		} else if(parent){
			parent.children.push(next);
		}
	};

	exports.prepend = function(elem, prev){
		var parent = elem.parent;
		if(parent){
			var childs = parent.children;
			childs.splice(childs.lastIndexOf(elem), 0, prev);
		}

		if(elem.prev){
			elem.prev.next = prev;
		}
		
		prev.parent = parent;
		prev.prev = elem.prev;
		prev.next = elem;
		elem.prev = prev;
	};




/***/ },
/* 588 */
/***/ function(module, exports, __webpack_require__) {

	var isTag = __webpack_require__(29).isTag;

	module.exports = {
		filter: filter,
		find: find,
		findOneChild: findOneChild,
		findOne: findOne,
		existsOne: existsOne,
		findAll: findAll
	};

	function filter(test, element, recurse, limit){
		if(!Array.isArray(element)) element = [element];

		if(typeof limit !== "number" || !isFinite(limit)){
			limit = Infinity;
		}
		return find(test, element, recurse !== false, limit);
	}

	function find(test, elems, recurse, limit){
		var result = [], childs;

		for(var i = 0, j = elems.length; i < j; i++){
			if(test(elems[i])){
				result.push(elems[i]);
				if(--limit <= 0) break;
			}

			childs = elems[i].children;
			if(recurse && childs && childs.length > 0){
				childs = find(test, childs, recurse, limit);
				result = result.concat(childs);
				limit -= childs.length;
				if(limit <= 0) break;
			}
		}

		return result;
	}

	function findOneChild(test, elems){
		for(var i = 0, l = elems.length; i < l; i++){
			if(test(elems[i])) return elems[i];
		}

		return null;
	}

	function findOne(test, elems){
		var elem = null;

		for(var i = 0, l = elems.length; i < l && !elem; i++){
			if(!isTag(elems[i])){
				continue;
			} else if(test(elems[i])){
				elem = elems[i];
			} else if(elems[i].children.length > 0){
				elem = findOne(test, elems[i].children);
			}
		}

		return elem;
	}

	function existsOne(test, elems){
		for(var i = 0, l = elems.length; i < l; i++){
			if(
				isTag(elems[i]) && (
					test(elems[i]) || (
						elems[i].children.length > 0 &&
						existsOne(test, elems[i].children)
					)
				)
			){
				return true;
			}
		}

		return false;
	}

	function findAll(test, elems){
		var result = [];
		for(var i = 0, j = elems.length; i < j; i++){
			if(!isTag(elems[i])) continue;
			if(test(elems[i])) result.push(elems[i]);

			if(elems[i].children.length > 0){
				result = result.concat(findAll(test, elems[i].children));
			}
		}
		return result;
	}


/***/ },
/* 589 */
/***/ function(module, exports, __webpack_require__) {

	var ElementType = __webpack_require__(29),
	    getOuterHTML = __webpack_require__(591),
	    isTag = ElementType.isTag;

	module.exports = {
		getInnerHTML: getInnerHTML,
		getOuterHTML: getOuterHTML,
		getText: getText
	};

	function getInnerHTML(elem, opts){
		return elem.children ? elem.children.map(function(elem){
			return getOuterHTML(elem, opts);
		}).join("") : "";
	}

	function getText(elem){
		if(Array.isArray(elem)) return elem.map(getText).join("");
		if(isTag(elem) || elem.type === ElementType.CDATA) return getText(elem.children);
		if(elem.type === ElementType.Text) return elem.data;
		return "";
	}


/***/ },
/* 590 */
/***/ function(module, exports) {

	var getChildren = exports.getChildren = function(elem){
		return elem.children;
	};

	var getParent = exports.getParent = function(elem){
		return elem.parent;
	};

	exports.getSiblings = function(elem){
		var parent = getParent(elem);
		return parent ? getChildren(parent) : [elem];
	};

	exports.getAttributeValue = function(elem, name){
		return elem.attribs && elem.attribs[name];
	};

	exports.hasAttrib = function(elem, name){
		return !!elem.attribs && hasOwnProperty.call(elem.attribs, name);
	};

	exports.getName = function(elem){
		return elem.name;
	};


/***/ },
/* 591 */
/***/ function(module, exports, __webpack_require__) {

	/*
	  Module dependencies
	*/
	var ElementType = __webpack_require__(592);
	var entities = __webpack_require__(593);

	/*
	  Boolean Attributes
	*/
	var booleanAttributes = {
	  __proto__: null,
	  allowfullscreen: true,
	  async: true,
	  autofocus: true,
	  autoplay: true,
	  checked: true,
	  controls: true,
	  default: true,
	  defer: true,
	  disabled: true,
	  hidden: true,
	  ismap: true,
	  loop: true,
	  multiple: true,
	  muted: true,
	  open: true,
	  readonly: true,
	  required: true,
	  reversed: true,
	  scoped: true,
	  seamless: true,
	  selected: true,
	  typemustmatch: true
	};

	var unencodedElements = {
	  __proto__: null,
	  style: true,
	  script: true,
	  xmp: true,
	  iframe: true,
	  noembed: true,
	  noframes: true,
	  plaintext: true,
	  noscript: true
	};

	/*
	  Format attributes
	*/
	function formatAttrs(attributes, opts) {
	  if (!attributes) return;

	  var output = '',
	      value;

	  // Loop through the attributes
	  for (var key in attributes) {
	    value = attributes[key];
	    if (output) {
	      output += ' ';
	    }

	    if (!value && booleanAttributes[key]) {
	      output += key;
	    } else {
	      output += key + '="' + (opts.decodeEntities ? entities.encodeXML(value) : value) + '"';
	    }
	  }

	  return output;
	}

	/*
	  Self-enclosing tags (stolen from node-htmlparser)
	*/
	var singleTag = {
	  __proto__: null,
	  area: true,
	  base: true,
	  basefont: true,
	  br: true,
	  col: true,
	  command: true,
	  embed: true,
	  frame: true,
	  hr: true,
	  img: true,
	  input: true,
	  isindex: true,
	  keygen: true,
	  link: true,
	  meta: true,
	  param: true,
	  source: true,
	  track: true,
	  wbr: true,
	};


	var render = module.exports = function(dom, opts) {
	  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];
	  opts = opts || {};

	  var output = '';

	  for(var i = 0; i < dom.length; i++){
	    var elem = dom[i];

	    if (elem.type === 'root')
	      output += render(elem.children, opts);
	    else if (ElementType.isTag(elem))
	      output += renderTag(elem, opts);
	    else if (elem.type === ElementType.Directive)
	      output += renderDirective(elem);
	    else if (elem.type === ElementType.Comment)
	      output += renderComment(elem);
	    else if (elem.type === ElementType.CDATA)
	      output += renderCdata(elem);
	    else
	      output += renderText(elem, opts);
	  }

	  return output;
	};

	function renderTag(elem, opts) {
	  // Handle SVG
	  if (elem.name === "svg") opts = {decodeEntities: opts.decodeEntities, xmlMode: true};

	  var tag = '<' + elem.name,
	      attribs = formatAttrs(elem.attribs, opts);

	  if (attribs) {
	    tag += ' ' + attribs;
	  }

	  if (
	    opts.xmlMode
	    && (!elem.children || elem.children.length === 0)
	  ) {
	    tag += '/>';
	  } else {
	    tag += '>';
	    if (elem.children) {
	      tag += render(elem.children, opts);
	    }

	    if (!singleTag[elem.name] || opts.xmlMode) {
	      tag += '</' + elem.name + '>';
	    }
	  }

	  return tag;
	}

	function renderDirective(elem) {
	  return '<' + elem.data + '>';
	}

	function renderText(elem, opts) {
	  var data = elem.data || '';

	  // if entities weren't decoded, no need to encode them back
	  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {
	    data = entities.encodeXML(data);
	  }

	  return data;
	}

	function renderCdata(elem) {
	  return '<![CDATA[' + elem.children[0].data + ']]>';
	}

	function renderComment(elem) {
	  return '<!--' + elem.data + '-->';
	}


/***/ },
/* 592 */
/***/ function(module, exports) {

	//Types of elements found in the DOM
	module.exports = {
		Text: "text", //Text
		Directive: "directive", //<? ... ?>
		Comment: "comment", //<!-- ... -->
		Script: "script", //<script> tags
		Style: "style", //<style> tags
		Tag: "tag", //Any tag
		CDATA: "cdata", //<![CDATA[ ... ]]>

		isTag: function(elem){
			return elem.type === "tag" || elem.type === "script" || elem.type === "style";
		}
	};

/***/ },
/* 593 */
/***/ function(module, exports, __webpack_require__) {

	var encode = __webpack_require__(595),
	    decode = __webpack_require__(594);

	exports.decode = function(data, level){
		return (!level || level <= 0 ? decode.XML : decode.HTML)(data);
	};

	exports.decodeStrict = function(data, level){
		return (!level || level <= 0 ? decode.XML : decode.HTMLStrict)(data);
	};

	exports.encode = function(data, level){
		return (!level || level <= 0 ? encode.XML : encode.HTML)(data);
	};

	exports.encodeXML = encode.XML;

	exports.encodeHTML4 =
	exports.encodeHTML5 =
	exports.encodeHTML  = encode.HTML;

	exports.decodeXML =
	exports.decodeXMLStrict = decode.XML;

	exports.decodeHTML4 =
	exports.decodeHTML5 =
	exports.decodeHTML = decode.HTML;

	exports.decodeHTML4Strict =
	exports.decodeHTML5Strict =
	exports.decodeHTMLStrict = decode.HTMLStrict;

	exports.escape = encode.escape;


/***/ },
/* 594 */
/***/ function(module, exports, __webpack_require__) {

	var entityMap = __webpack_require__(55),
	    legacyMap = __webpack_require__(123),
	    xmlMap    = __webpack_require__(56),
	    decodeCodePoint = __webpack_require__(118);

	var decodeXMLStrict  = getStrictDecoder(xmlMap),
	    decodeHTMLStrict = getStrictDecoder(entityMap);

	function getStrictDecoder(map){
		var keys = Object.keys(map).join("|"),
		    replace = getReplacer(map);

		keys += "|#[xX][\\da-fA-F]+|#\\d+";

		var re = new RegExp("&(?:" + keys + ");", "g");

		return function(str){
			return String(str).replace(re, replace);
		};
	}

	var decodeHTML = (function(){
		var legacy = Object.keys(legacyMap)
			.sort(sorter);

		var keys = Object.keys(entityMap)
			.sort(sorter);

		for(var i = 0, j = 0; i < keys.length; i++){
			if(legacy[j] === keys[i]){
				keys[i] += ";?";
				j++;
			} else {
				keys[i] += ";";
			}
		}

		var re = new RegExp("&(?:" + keys.join("|") + "|#[xX][\\da-fA-F]+;?|#\\d+;?)", "g"),
		    replace = getReplacer(entityMap);

		function replacer(str){
			if(str.substr(-1) !== ";") str += ";";
			return replace(str);
		}

		//TODO consider creating a merged map
		return function(str){
			return String(str).replace(re, replacer);
		};
	}());

	function sorter(a, b){
		return a < b ? 1 : -1;
	}

	function getReplacer(map){
		return function replace(str){
			if(str.charAt(1) === "#"){
				if(str.charAt(2) === "X" || str.charAt(2) === "x"){
					return decodeCodePoint(parseInt(str.substr(3), 16));
				}
				return decodeCodePoint(parseInt(str.substr(2), 10));
			}
			return map[str.slice(1, -1)];
		};
	}

	module.exports = {
		XML: decodeXMLStrict,
		HTML: decodeHTML,
		HTMLStrict: decodeHTMLStrict
	};

/***/ },
/* 595 */
/***/ function(module, exports, __webpack_require__) {

	var inverseXML = getInverseObj(__webpack_require__(56)),
	    xmlReplacer = getInverseReplacer(inverseXML);

	exports.XML = getInverse(inverseXML, xmlReplacer);

	var inverseHTML = getInverseObj(__webpack_require__(55)),
	    htmlReplacer = getInverseReplacer(inverseHTML);

	exports.HTML = getInverse(inverseHTML, htmlReplacer);

	function getInverseObj(obj){
		return Object.keys(obj).sort().reduce(function(inverse, name){
			inverse[obj[name]] = "&" + name + ";";
			return inverse;
		}, {});
	}

	function getInverseReplacer(inverse){
		var single = [],
		    multiple = [];

		Object.keys(inverse).forEach(function(k){
			if(k.length === 1){
				single.push("\\" + k);
			} else {
				multiple.push(k);
			}
		});

		//TODO add ranges
		multiple.unshift("[" + single.join("") + "]");

		return new RegExp(multiple.join("|"), "g");
	}

	var re_nonASCII = /[^\0-\x7F]/g,
	    re_astralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;

	function singleCharReplacer(c){
		return "&#x" + c.charCodeAt(0).toString(16).toUpperCase() + ";";
	}

	function astralReplacer(c){
		// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		var high = c.charCodeAt(0);
		var low  = c.charCodeAt(1);
		var codePoint = (high - 0xD800) * 0x400 + low - 0xDC00 + 0x10000;
		return "&#x" + codePoint.toString(16).toUpperCase() + ";";
	}

	function getInverse(inverse, re){
		function func(name){
			return inverse[name];
		}

		return function(data){
			return data
					.replace(re, func)
					.replace(re_astralSymbols, astralReplacer)
					.replace(re_nonASCII, singleCharReplacer);
		};
	}

	var re_xmlChars = getInverseReplacer(inverseXML);

	function escapeXML(data){
		return data
				.replace(re_xmlChars, singleCharReplacer)
				.replace(re_astralSymbols, astralReplacer)
				.replace(re_nonASCII, singleCharReplacer);
	}

	exports.escape = escapeXML;


/***/ },
/* 596 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {/*
	 * Copyright (C) 2007-2015 Diego Perini
	 * All rights reserved.
	 *
	 * nwmatcher-noqsa.js - A fast CSS selector engine and matcher
	 *
	 * Author: Diego Perini <diego.perini at gmail com>
	 * Version: 1.3.7
	 * Created: 20070722
	 * Release: 20151120
	 *
	 * License:
	 *  http://javascript.nwbox.com/NWMatcher/MIT-LICENSE
	 * Download:
	 *  http://javascript.nwbox.com/NWMatcher/nwmatcher.js
	 */

	(function(global, factory) {

	  if (true) {
	    module.exports = function (browserGlobal) {
	      // passed global does not contain
	      // references to native objects
	      browserGlobal.console = console;
	      browserGlobal.parseInt = parseInt;
	      browserGlobal.Function = Function;
	      browserGlobal.Boolean = Boolean;
	      browserGlobal.Number = Number;
	      browserGlobal.RegExp = RegExp;
	      browserGlobal.String = String;
	      browserGlobal.Object = Object;
	      browserGlobal.Array = Array;
	      browserGlobal.Error = Error;
	      browserGlobal.Date = Date;
	      browserGlobal.Math = Math;
	      var exports = browserGlobal.Object();
	      factory(browserGlobal, exports);
	      return exports;
	    };
	    module.factory = factory;
	  } else {
	    factory(global,
	      (global.NW || (global.NW = global.Object())) &&
	      (global.NW.Dom || (global.NW.Dom = global.Object())));
	    global.NW.Dom.factory = factory;
	  }

	})(this, function(global, exports) {

	  var version = 'nwmatcher-1.3.7',

	  Dom = exports,

	  doc = global.document,
	  root = doc.documentElement,

	  isSingleMatch,
	  isSingleSelect,

	  lastSlice,
	  lastContext,
	  lastPosition,

	  lastMatcher,
	  lastSelector,

	  lastPartsMatch,
	  lastPartsSelect,

	  operators = '([~*^$|!]?={1})',
	  combinators = '[\\s]|[>+~](?=[^>+~])',
	  pseudoparms = '(?:[-+]?\\d*n)?[-+]?\\d*',

	  quotedvalue = '"[^"\\\\]*(?:\\\\.[^"\\\\]*)*"' + "|'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'",
	  skipgroup = '\\[.*\\]|\\(.*\\)|\\{.*\\}',

	  encoding = '(?:[-\\w]|[^\\x00-\\xa0]|\\\\.)',
	  identifier = '(?:-?[_a-zA-Z]{1}[-\\w]*|[^\\x00-\\xa0]+|\\\\.+)+',

	  attrcheck = '(' + quotedvalue + '|' + identifier + ')',
	  attributes = '\\s*(' + encoding + '*:?' + encoding + '+)\\s*(?:' + operators + '\\s*' + attrcheck + ')?\\s*',

	  attrmatcher = attributes.replace(attrcheck, '([\\x22\\x27]*)((?:\\\\?.)*?)\\3'),

	  pseudoclass = '((?:' +
	    pseudoparms + '|' + quotedvalue + '|' +
	    '[#.:]?|' + encoding + '+|' +
	    '\\[' + attributes + '\\]|' +
	    '\\(.+\\)|\\s*|' +
	    ',)+)',

	  extensions = '.+',

	  standardValidator =
	    '(?=\\s*[^>+~(){}<>])' +
	    '(' +
	    '\\*' +
	    '|(?:[#.:]?' + identifier + ')' +
	    '|' + combinators +
	    '|\\[' + attributes + '\\]' +
	    '|\\(' + pseudoclass + '\\)' +
	    '|\\{' + extensions + '\\}' +
	    '|(?:,|\\s*)' +
	    ')+',

	  extendedValidator = standardValidator.replace(pseudoclass, '.*'),

	  reValidator = global.RegExp(standardValidator),

	  reTrimSpaces = /^\s*|\s*$/g,

	  reSimpleNot = global.RegExp('^(' +
	    '(?!:not)' +
	    '([#.:]?' +
	    '|' + identifier +
	    '|\\([^()]*\\))+' +
	    '|\\[' + attributes + '\\]' +
	    ')$'),

	  reSplitGroup = /([^,\\()[\]]+|\[[^[\]]*\]|\[.*\]|\([^()]+\)|\(.*\)|\{[^{}]+\}|\{.*\}|\\.)+/g,

	  reSplitToken = global.RegExp('(' +
	    '\\[' + attributes + '\\]|' +
	    '\\(' + pseudoclass + '\\)|' +
	    '\\\\.|[^\\s>+~])+', 'g'),

	  reOptimizeSelector = global.RegExp(identifier + '|^$'),

	  QUIRKS_MODE,
	  XML_DOCUMENT,

	  GEBTN = 'getElementsByTagName' in doc,
	  GEBCN = 'getElementsByClassName' in doc,

	  LINK_NODES = global.Object({ a: 1, A: 1, area: 1, AREA: 1, link: 1, LINK: 1 }),

	  ATTR_BOOLEAN = global.Object({
	    checked: 1, disabled: 1, ismap: 1,
	    multiple: 1, readonly: 1, selected: 1
	  }),

	  ATTR_DEFAULT = global.Object({
	    value: 'defaultValue',
	    checked: 'defaultChecked',
	    selected: 'defaultSelected'
	  }),

	  ATTR_URIDATA = global.Object({
	    action: 2, cite: 2, codebase: 2, data: 2, href: 2,
	    longdesc: 2, lowsrc: 2, src: 2, usemap: 2
	  }),

	  Selectors = global.Object({
	  }),

	  Operators = global.Object({
	     '=': "n=='%m'",
	    '^=': "n.indexOf('%m')==0",
	    '*=': "n.indexOf('%m')>-1",
	    '|=': "(n+'-').indexOf('%m-')==0",
	    '~=': "(' '+n+' ').indexOf(' %m ')>-1",
	    '$=': "n.substr(n.length-'%m'.length)=='%m'"
	  }),

	  Optimize = global.Object({
	    ID: global.RegExp('^\\*?#(' + encoding + '+)|' + skipgroup),
	    TAG: global.RegExp('^(' + encoding + '+)|' + skipgroup),
	    CLASS: global.RegExp('^\\*?\\.(' + encoding + '+$)|' + skipgroup)
	  }),

	  Patterns = global.Object({
	    spseudos: /^\:(root|empty|(?:first|last|only)(?:-child|-of-type)|nth(?:-last)?(?:-child|-of-type)\(\s*(even|odd|(?:[-+]{0,1}\d*n\s*)?[-+]{0,1}\s*\d*)\s*\))?(.*)/i,
	    dpseudos: /^\:(link|visited|target|active|focus|hover|checked|disabled|enabled|selected|lang\(([-\w]{2,})\)|not\(([^()]*|.*)\))?(.*)/i,
	    attribute: global.RegExp('^\\[' + attrmatcher + '\\](.*)'),
	    children: /^\s*\>\s*(.*)/,
	    adjacent: /^\s*\+\s*(.*)/,
	    relative: /^\s*\~\s*(.*)/,
	    ancestor: /^\s+(.*)/,
	    universal: /^\*(.*)/,
	    id: global.RegExp('^#(' + encoding + '+)(.*)'),
	    tagName: global.RegExp('^(' + encoding + '+)(.*)'),
	    className: global.RegExp('^\\.(' + encoding + '+)(.*)')
	  }),

	  concatCall =
	    function(data, elements, callback) {
	      var i = -1, element;
	      while ((element = elements[++i])) {
	        if (false === callback(data[data.length] = element)) { break; }
	      }
	      return data;
	    },

	  switchContext =
	    function(from, force) {
	      var oldDoc = doc;
	      lastContext = from;
	      doc = from.ownerDocument || from;
	      if (force || oldDoc !== doc) {
	        root = doc.documentElement;
	        XML_DOCUMENT = doc.createElement('DiV').nodeName == 'DiV';
	        QUIRKS_MODE = !XML_DOCUMENT &&
	          typeof doc.compatMode == 'string' ?
	          doc.compatMode.indexOf('CSS') < 0 :
	          (function() {
	            var style = doc.createElement('div').style;
	            return style && (style.width = 1) && style.width == '1px';
	          })();

	        Config.CACHING && Dom.setCache(true, doc);
	      }
	    },

	  convertEscapes =
	    function(str) {
	      return str.replace(/\\([0-9a-fA-F]{1,6}\x20?|.)|([\x22\x27])/g, function(substring, p1, p2) {
	        var codePoint, highHex, highSurrogate, lowHex, lowSurrogate;

	        if (p2) {
	          return '\\' + p2;
	        }

	        if (/^[0-9a-fA-F]/.test(p1)) {
	          codePoint = parseInt(p1, 16);

	          if (codePoint < 0 || codePoint > 0x10ffff) {
	            return '\\ufffd';
	          }

	          if (codePoint <= 0xffff) {
	            lowHex = '000' + codePoint.toString(16);
	            return '\\u' + lowHex.substr(lowHex.length - 4);
	          }

	          codePoint -= 0x10000;
	          highSurrogate = (codePoint >> 10) + 0xd800;
	          lowSurrogate = (codePoint % 0x400) + 0xdc00;
	          highHex = '000' + highSurrogate.toString(16);
	          lowHex = '000' + lowSurrogate.toString(16);

	          return '\\u' + highHex.substr(highHex.length - 4) +
	            '\\u' + lowHex.substr(lowHex.length - 4);
	        }

	        if (/^[\\\x22\x27]/.test(p1)) {
	          return substring;
	        }

	        return p1;
	      });
	    },

	  byIdRaw =
	    function(id, elements) {
	      var i = -1, element = null;
	      while ((element = elements[++i])) {
	        if (element.getAttribute('id') == id) {
	          break;
	        }
	      }
	      return element;
	    },

	  _byId = !('fileSize' in doc) ?
	    function(id, from) {
	      id = id.replace(/\\([^\\]{1})/g, '$1');
	      return from.getElementById && from.getElementById(id) ||
	        byIdRaw(id, from.getElementsByTagName('*'));
	    } :
	    function(id, from) {
	      var element = null;
	      id = id.replace(/\\([^\\]{1})/g, '$1');
	      if (XML_DOCUMENT || from.nodeType != 9) {
	        return byIdRaw(id, from.getElementsByTagName('*'));
	      }
	      if ((element = from.getElementById(id)) &&
	        element.name == id && from.getElementsByName) {
	        return byIdRaw(id, from.getElementsByName(id));
	      }
	      return element;
	    },

	  byId =
	    function(id, from) {
	      from || (from = doc);
	      if (lastContext !== from) { switchContext(from); }
	      return _byId(id, from);
	    },

	  byTagRaw =
	    function(tag, from) {
	      var any = tag == '*', element = from, elements = global.Array(), next = element.firstChild;
	      any || (tag = tag.toUpperCase());
	      while ((element = next)) {
	        if (element.tagName > '@' && (any || element.tagName.toUpperCase() == tag)) {
	          elements[elements.length] = element;
	        }
	        if ((next = element.firstChild || element.nextSibling)) continue;
	        while (!next && (element = element.parentNode) && element !== from) {
	          next = element.nextSibling;
	        }
	      }
	      return elements;
	    },

	  contains = 'compareDocumentPosition' in root ?
	    function(container, element) {
	      return (container.compareDocumentPosition(element) & 16) == 16;
	    } : 'contains' in root ?
	    function(container, element) {
	      return element.nodeType == 1 && container.contains(element);
	    } :
	    function(container, element) {
	      while ((element = element.parentNode) && element.nodeType == 1) {
	        if (element === container) return true;
	      }
	      return false;
	    },

	  getAttribute =
	    function(node, attribute) {
	      attribute = attribute.toLowerCase();
	      if (typeof node[attribute] == 'object') {
	        return node.attributes[attribute] &&
	          node.attributes[attribute].value;
	      }
	      return (
	        attribute == 'type' ? node.getAttribute(attribute) :
	        ATTR_URIDATA[attribute] ? node.getAttribute(attribute, 2) :
	        ATTR_BOOLEAN[attribute] ? node.getAttribute(attribute) ? attribute : 'false' :
	          (node = node.getAttributeNode(attribute)) && node.value);
	    },

	  hasAttribute = root.hasAttribute ?
	    function(node, attribute) {
	      return node.hasAttribute(attribute);
	    } :
	    function(node, attribute) {
	      var obj = node.getAttributeNode(attribute = attribute.toLowerCase());
	      return ATTR_DEFAULT[attribute] && attribute != 'value' ?
	        node[ATTR_DEFAULT[attribute]] : obj && obj.specified;
	    },

	  isLink =
	    function(element) {
	      return element.getAttribute('href') && LINK_NODES[element.nodeName];
	    },

	  isEmpty =
	    function(node) {
	      node = node.firstChild;
	      while (node) {
	        if (node.nodeType == 3 || node.nodeName > '@') return false;
	        node = node.nextSibling;
	      }
	      return true;
	    },

	  nthElement =
	    function(element, last) {
	      var count = 1, succ = last ? 'nextSibling' : 'previousSibling';
	      while ((element = element[succ])) {
	        if (element.nodeName > '@') ++count;
	      }
	      return count;
	    },

	  nthOfType =
	    function(element, last) {
	      var count = 1, succ = last ? 'nextSibling' : 'previousSibling', type = element.nodeName;
	      while ((element = element[succ])) {
	        if (element.nodeName == type) ++count;
	      }
	      return count;
	    },

	  configure =
	    function(option) {
	      if (typeof option == 'string') { return Config[option] || Config; }
	      if (typeof option != 'object') { return false; }
	      for (var i in option) {
	        Config[i] = !!option[i];
	        if (i == 'SIMPLENOT') {
	          matchContexts = global.Object();
	          matchResolvers = global.Object();
	          selectContexts = global.Object();
	          selectResolvers = global.Object();
	        }
	      }
	      reValidator = global.RegExp(Config.SIMPLENOT ?
	        standardValidator : extendedValidator);
	      return true;
	    },

	  emit =
	    function(message) {
	      if (Config.VERBOSITY) { throw global.Error(message); }
	      if (global.console && global.console.log) {
	        global.console.log(message);
	      }
	    },

	  Config = global.Object({
	    CACHING: false,
	    SIMPLENOT: true,
	    UNIQUE_ID: true,
	    USE_HTML5: true,
	    VERBOSITY: true
	  }),

	  IE_LT_9 = typeof doc.addEventListener != 'function',

	  INSENSITIVE_MAP = global.Object({
	    href: 1, lang: 1, src: 1, style: 1, title: 1,
	    type: 1, xmlns: 1, 'xml:lang': 1, 'xml:space': 1
	  }),

	  TO_UPPER_CASE = IE_LT_9 ? '.toUpperCase()' : '',

	  ACCEPT_NODE = 'r[r.length]=c[k];if(f&&false===f(c[k]))break main;else continue main;',
	  REJECT_NODE = IE_LT_9 ? 'if(e.nodeName<"A")continue;' : '',

	  compile =
	    function(selector, source, mode) {

	      var parts = typeof selector == 'string' ? selector.match(reSplitGroup) : selector;

	      typeof source == 'string' || (source = '');

	      if (parts.length == 1) {
	        source += compileSelector(parts[0], mode ? ACCEPT_NODE : 'f&&f(k);return true;', mode);
	      } else {
	        var i = -1, seen = global.Object(), token;
	        while ((token = parts[++i])) {
	          token = token.replace(reTrimSpaces, '');
	          if (!seen[token] && (seen[token] = true)) {
	            source += compileSelector(token, mode ? ACCEPT_NODE : 'f&&f(k);return true;', mode);
	          }
	        }
	      }

	      if (mode) {
	        return global.Function('c,s,r,d,h,g,f,v',
	          'var N,n,x=0,k=-1,e;main:while((e=c[++k])){' + source + '}return r;');
	      } else {
	        return global.Function('e,s,r,d,h,g,f,v',
	          'var N,n,x=0,k=e;' + source + 'return false;');
	      }
	    },

	  FILTER =
	    'var z=v[@]||(v[@]=[]),l=z.length-1;' +
	    'while(l>=0&&z[l]!==e)--l;' +
	    'if(l!==-1){break;}' +
	    'z[z.length]=e;',

	  compileSelector =
	    function(selector, source, mode) {

	      var a, b, n, k = 0, expr, match, name, result, status, test, type;

	      while (selector) {

	        k++;

	        if ((match = selector.match(Patterns.universal))) {
	          expr = '';
	        }

	        else if ((match = selector.match(Patterns.id))) {
	          source = 'if(' + (XML_DOCUMENT ?
	            's.getAttribute(e,"id")' :
	            '(e.submit?s.getAttribute(e,"id"):e.id)') +
	            '=="' + match[1] + '"' +
	            '){' + source + '}';
	        }

	        else if ((match = selector.match(Patterns.tagName))) {
	          source = 'if(e.nodeName' + (XML_DOCUMENT ?
	            '=="' + match[1] + '"' : TO_UPPER_CASE +
	            '=="' + match[1].toUpperCase() + '"') +
	            '){' + source + '}';
	        }

	        else if ((match = selector.match(Patterns.className))) {
	          source = 'if((n=' + (XML_DOCUMENT ?
	            'e.getAttribute("class")' : 'e.className') +
	            ')&&n.length&&(" "+' + (QUIRKS_MODE ? 'n.toLowerCase()' : 'n') +
	            '.replace(/\\s+/g," ")+" ").indexOf(" ' +
	            (QUIRKS_MODE ? match[1].toLowerCase() : match[1]) + ' ")>-1' +
	            '){' + source + '}';
	        }

	        else if ((match = selector.match(Patterns.attribute))) {
	          if (match[2] && !Operators[match[2]]) {
	            emit('Unsupported operator in attribute selectors "' + selector + '"');
	            return '';
	          }
	          test = 'false';
	          if (match[2] && match[4] && (test = Operators[match[2]])) {
	            match[4] = convertEscapes(match[4]);
	            type = INSENSITIVE_MAP[match[1].toLowerCase()];
	            test = test.replace(/\%m/g, type ? match[4].toLowerCase() : match[4]);
	          } else if (match[2] == '!=' || match[2] == '=') {
	            test = 'n' + match[2] + '=""';
	          }
	          source = 'if(n=s.hasAttribute(e,"' + match[1] + '")){' +
	            (match[2] ? 'n=s.getAttribute(e,"' + match[1] + '")' : '') +
	            (type && match[2] ? '.toLowerCase();' : ';') +
	            'if(' + (match[2] ? test : 'n') + '){' + source + '}}';
	        }

	        else if ((match = selector.match(Patterns.adjacent))) {
	          source = (mode ? '' : FILTER.replace(/@/g, k)) + source;
	          source = 'var N' + k + '=e;while(e&&(e=e.previousSibling)){if(e.nodeName>"@"){' + source + 'break;}}e=N' + k + ';';
	        }

	        else if ((match = selector.match(Patterns.relative))) {
	          source = (mode ? '' : FILTER.replace(/@/g, k)) + source;
	          source = 'var N' + k + '=e;e=e.parentNode.firstChild;while(e&&e!==N' + k + '){if(e.nodeName>"@"){' + source + '}e=e.nextSibling;}e=N' + k + ';';
	        }

	        else if ((match = selector.match(Patterns.children))) {
	          source = (mode ? '' : FILTER.replace(/@/g, k)) + source;
	          source = 'var N' + k + '=e;while(e&&e!==h&&e!==g&&(e=e.parentNode)){' + source + 'break;}e=N' + k + ';';
	        }

	        else if ((match = selector.match(Patterns.ancestor))) {
	          source = (mode ? '' : FILTER.replace(/@/g, k)) + source;
	          source = 'var N' + k + '=e;while(e&&e!==h&&e!==g&&(e=e.parentNode)){' + source + '}e=N' + k + ';';
	        }

	        else if ((match = selector.match(Patterns.spseudos)) && match[1]) {
	          switch (match[1]) {
	            case 'root':
	              if (match[3]) {
	                source = 'if(e===h||s.contains(h,e)){' + source + '}';
	              } else {
	                source = 'if(e===h){' + source + '}';
	              }
	              break;
	            case 'empty':
	              source = 'if(s.isEmpty(e)){' + source + '}';
	              break;
	            default:
	              if (match[1] && match[2]) {
	                if (match[2] == 'n') {
	                  source = 'if(e!==h){' + source + '}';
	                  break;
	                } else if (match[2] == 'even') {
	                  a = 2;
	                  b = 0;
	                } else if (match[2] == 'odd') {
	                  a = 2;
	                  b = 1;
	                } else {
	                  b = ((n = match[2].match(/(-?\d+)$/)) ? global.parseInt(n[1], 10) : 0);
	                  a = ((n = match[2].match(/(-?\d*)n/i)) ? global.parseInt(n[1], 10) : 0);
	                  if (n && n[1] == '-') a = -1;
	                }
	                test = a > 1 ?
	                  (/last/i.test(match[1])) ? '(n-(' + b + '))%' + a + '==0' :
	                  'n>=' + b + '&&(n-(' + b + '))%' + a + '==0' : a < -1 ?
	                  (/last/i.test(match[1])) ? '(n-(' + b + '))%' + a + '==0' :
	                  'n<=' + b + '&&(n-(' + b + '))%' + a + '==0' : a === 0 ?
	                  'n==' + b : a == -1 ? 'n<=' + b : 'n>=' + b;
	                source =
	                  'if(e!==h){' +
	                    'n=s[' + (/-of-type/i.test(match[1]) ? '"nthOfType"' : '"nthElement"') + ']' +
	                      '(e,' + (/last/i.test(match[1]) ? 'true' : 'false') + ');' +
	                    'if(' + test + '){' + source + '}' +
	                  '}';
	              } else {
	                a = /first/i.test(match[1]) ? 'previous' : 'next';
	                n = /only/i.test(match[1]) ? 'previous' : 'next';
	                b = /first|last/i.test(match[1]);
	                type = /-of-type/i.test(match[1]) ? '&&n.nodeName!=e.nodeName' : '&&n.nodeName<"@"';
	                source = 'if(e!==h){' +
	                  ( 'n=e;while((n=n.' + a + 'Sibling)' + type + ');if(!n){' + (b ? source :
	                    'n=e;while((n=n.' + n + 'Sibling)' + type + ');if(!n){' + source + '}') + '}' ) + '}';
	              }
	              break;
	          }
	        }

	        else if ((match = selector.match(Patterns.dpseudos)) && match[1]) {
	          switch (match[1].match(/^\w+/)[0]) {
	            case 'not':
	              expr = match[3].replace(reTrimSpaces, '');
	              if (Config.SIMPLENOT && !reSimpleNot.test(expr)) {
	                emit('Negation pseudo-class only accepts simple selectors "' + match.join('') + '"');
	                return '';
	              } else {
	                if ('compatMode' in doc) {
	                  source = 'if(!' + compile(expr, '', false) + '(e,s,r,d,h,g)){' + source + '}';
	                } else {
	                  source = 'if(!s.match(e, "' + expr.replace(/\x22/g, '\\"') + '",g)){' + source +'}';
	                }
	              }
	              break;
	            case 'checked':
	              source = 'if((typeof e.form!=="undefined"&&(/^(?:radio|checkbox)$/i).test(e.type)&&e.checked)' +
	                (Config.USE_HTML5 ? '||(/^option$/i.test(e.nodeName)&&(e.selected||e.checked))' : '') +
	                '){' + source + '}';
	              break;
	            case 'disabled':
	              source = 'if(((typeof e.form!=="undefined"' +
	                (Config.USE_HTML5 ? '' : '&&!(/^hidden$/i).test(e.type)') +
	                ')||s.isLink(e))&&e.disabled===true){' + source + '}';
	              break;
	            case 'enabled':
	              source = 'if(((typeof e.form!=="undefined"' +
	                (Config.USE_HTML5 ? '' : '&&!(/^hidden$/i).test(e.type)') +
	                ')||s.isLink(e))&&e.disabled===false){' + source + '}';
	              break;
	            case 'lang':
	              test = '';
	              if (match[2]) test = match[2].substr(0, 2) + '-';
	              source = 'do{(n=e.lang||"").toLowerCase();' +
	                'if((n==""&&h.lang=="' + match[2].toLowerCase() + '")||' +
	                '(n&&(n=="' + match[2].toLowerCase() +
	                '"||n.substr(0,3)=="' + test.toLowerCase() + '")))' +
	                '{' + source + 'break;}}while((e=e.parentNode)&&e!==g);';
	              break;
	            case 'target':
	              source = 'if(e.id==d.location.hash.slice(1)){' + source + '}';
	              break;
	            case 'link':
	              source = 'if(s.isLink(e)&&!e.visited){' + source + '}';
	              break;
	            case 'visited':
	              source = 'if(s.isLink(e)&&e.visited){' + source + '}';
	              break;
	            case 'active':
	              source = 'if(e===d.activeElement){' + source + '}';
	              break;
	            case 'hover':
	              source = 'if(e===d.hoverElement){' + source + '}';
	              break;
	            case 'focus':
	              source = 'hasFocus' in doc ?
	                'if(e===d.activeElement&&d.hasFocus()&&(e.type||e.href||typeof e.tabIndex=="number")){' + source + '}' :
	                'if(e===d.activeElement&&(e.type||e.href)){' + source + '}';
	              break;
	            case 'selected':
	              source = 'if(/^option$/i.test(e.nodeName)&&(e.selected||e.checked)){' + source + '}';
	              break;
	            default:
	              break;
	          }
	        }

	        else {

	          expr = false;
	          status = false;
	          for (expr in Selectors) {
	            if ((match = selector.match(Selectors[expr].Expression)) && match[1]) {
	              result = Selectors[expr].Callback(match, source);
	              source = result.source;
	              status = result.status;
	              if (status) { break; }
	            }
	          }

	          if (!status) {
	            emit('Unknown pseudo-class selector "' + selector + '"');
	            return '';
	          }

	          if (!expr) {
	            emit('Unknown token in selector "' + selector + '"');
	            return '';
	          }

	        }

	        if (!match) {
	          emit('Invalid syntax in selector "' + selector + '"');
	          return '';
	        }

	        selector = match && match[match.length - 1];
	      }

	      return source;
	    },

	  match =
	    function(element, selector, from, callback) {

	      var parts;

	      if (!(element && element.nodeType == 1)) {
	        emit('Invalid element argument');
	        return false;
	      } else if (typeof selector != 'string') {
	        emit('Invalid selector argument');
	        return false;
	      } else if (lastContext !== from) {
	        switchContext(from || (from = element.ownerDocument));
	      }

	      selector = selector.replace(reTrimSpaces, '');

	      Config.SHORTCUTS && (selector = Dom.shortcuts(selector, element, from));

	      if (lastMatcher != selector) {
	        if ((parts = selector.match(reValidator)) && parts[0] == selector) {
	          isSingleMatch = (parts = selector.match(reSplitGroup)).length < 2;
	          lastMatcher = selector;
	          lastPartsMatch = parts;
	        } else {
	          emit('The string "' + selector + '", is not a valid CSS selector');
	          return false;
	        }
	      } else parts = lastPartsMatch;

	      if (!matchResolvers[selector] || matchContexts[selector] !== from) {
	        matchResolvers[selector] = compile(isSingleMatch ? [selector] : parts, '', false);
	        matchContexts[selector] = from;
	      }

	      return matchResolvers[selector](element, Snapshot, [ ], doc, root, from, callback, { });
	    },

	  first =
	    function(selector, from) {
	      return select(selector, from, function() { return false; })[0] || null;
	    },

	  select =
	    function(selector, from, callback) {

	      var i, changed, element, elements, parts, token, original = selector;

	      if (arguments.length === 0) {
	        emit('Not enough arguments');
	        return [ ];
	      } else if (typeof selector != 'string') {
	        return [ ];
	      } else if (from && !(/1|9|11/).test(from.nodeType)) {
	        emit('Invalid or illegal context element');
	        return [ ];
	      } else if (lastContext !== from) {
	        switchContext(from || (from = doc));
	      }

	      if (Config.CACHING && (elements = Dom.loadResults(original, from, doc, root))) {
	        return callback ? concatCall([ ], elements, callback) : elements;
	      }

	      selector = selector.replace(reTrimSpaces, '');

	      Config.SHORTCUTS && (selector = Dom.shortcuts(selector, from));

	      if ((changed = lastSelector != selector)) {
	        if ((parts = selector.match(reValidator)) && parts[0] == selector) {
	          isSingleSelect = (parts = selector.match(reSplitGroup)).length < 2;
	          lastSelector = selector;
	          lastPartsSelect = parts;
	        } else {
	          emit('The string "' + selector + '", is not a valid CSS selector');
	          return [ ];
	        }
	      } else parts = lastPartsSelect;

	      if (from.nodeType == 11) {

	        elements = byTagRaw('*', from);

	      } else if (isSingleSelect) {

	        if (changed) {
	          parts = selector.match(reSplitToken);
	          token = parts[parts.length - 1];
	          lastSlice = token.split(':not')[0];
	          lastPosition = selector.length - token.length;
	        }

	        if (Config.UNIQUE_ID && (parts = lastSlice.match(Optimize.ID)) && (token = parts[1])) {
	          if ((element = _byId(token, from))) {
	            if (match(element, selector)) {
	              callback && callback(element);
	              elements = global.Array(element);
	            } else elements = global.Array();
	          }
	        }

	        else if (Config.UNIQUE_ID && (parts = selector.match(Optimize.ID)) && (token = parts[1])) {
	          if ((element = _byId(token, doc))) {
	            if ('#' + token == selector) {
	              callback && callback(element);
	              elements = global.Array(element);
	            } else if (/[>+~]/.test(selector)) {
	              from = element.parentNode;
	            } else {
	              from = element;
	            }
	          } else elements = global.Array();
	        }

	        if (elements) {
	          Config.CACHING && Dom.saveResults(original, from, doc, elements);
	          return elements;
	        }

	        if (!XML_DOCUMENT && GEBTN && (parts = lastSlice.match(Optimize.TAG)) && (token = parts[1])) {
	          if ((elements = from.getElementsByTagName(token)).length === 0) { return [ ]; }
	          selector = selector.slice(0, lastPosition) + selector.slice(lastPosition).replace(token, '*');
	        }

	        else if (!XML_DOCUMENT && GEBCN && (parts = lastSlice.match(Optimize.CLASS)) && (token = parts[1])) {
	          if ((elements = from.getElementsByClassName(token.replace(/\\([^\\]{1})/g, '$1'))).length === 0) { return [ ]; }
	            selector = selector.slice(0, lastPosition) + selector.slice(lastPosition).replace('.' + token,
	              reOptimizeSelector.test(selector.charAt(selector.indexOf(token) - 1)) ? '' : '*');
	        }

	      }

	      if (!elements) {
	        if (IE_LT_9) {
	          elements = /^(?:applet|object)$/i.test(from.nodeName) ? from.childNodes : from.all;
	        } else {
	          elements = from.getElementsByTagName('*');
	        }
	      }

	      if (!selectResolvers[selector] || selectContexts[selector] !== from) {
	        selectResolvers[selector] = compile(isSingleSelect ? [selector] : parts, REJECT_NODE, true);
	        selectContexts[selector] = from;
	      }

	      elements = selectResolvers[selector](elements, Snapshot, [ ], doc, root, from, callback, { });

	      Config.CACHING && Dom.saveResults(original, from, doc, elements);

	      return elements;
	    },

	  FN = function(x) { return x; },

	  matchContexts = global.Object(),
	  matchResolvers = global.Object(),

	  selectContexts = global.Object(),
	  selectResolvers = global.Object(),

	  Snapshot = global.Object({
	    byId: _byId,
	    match: match,
	    select: select,
	    isLink: isLink,
	    isEmpty: isEmpty,
	    contains: contains,
	    nthOfType: nthOfType,
	    nthElement: nthElement,
	    getAttribute: getAttribute,
	    hasAttribute: hasAttribute
	  });

	  Dom.ACCEPT_NODE = ACCEPT_NODE;

	  Dom.byId = byId;
	  Dom.match = match;
	  Dom.first = first;
	  Dom.select = select;
	  Dom.compile = compile;
	  Dom.contains = contains;
	  Dom.configure = configure;
	  Dom.getAttribute = getAttribute;
	  Dom.hasAttribute = hasAttribute;

	  Dom.setCache = FN;
	  Dom.shortcuts = FN;
	  Dom.loadResults = FN;
	  Dom.saveResults = FN;

	  Dom.emit = emit;
	  Dom.Config = Config;
	  Dom.Snapshot = Snapshot;

	  Dom.Operators = Operators;
	  Dom.Selectors = Selectors;

	  Dom.Version = version;

	  Dom.registerOperator =
	    function(symbol, resolver) {
	      Operators[symbol] || (Operators[symbol] = resolver);
	    };

	  Dom.registerSelector =
	    function(name, rexp, func) {
	      Selectors[name] || (Selectors[name] = global.Object({
	        Expression: rexp,
	        Callback: func
	      }));
	    };

	  switchContext(doc, true);

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)(module)))

/***/ },
/* 597 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	var Parser = __webpack_require__(122),
	    ParsingUnit = __webpack_require__(598);

	//API
	exports.parseDocument = function (html, treeAdapter) {
	    //NOTE: this should be reentrant, so we create new parser here
	    var parser = new Parser(treeAdapter),
	        parsingUnit = new ParsingUnit(parser);

	    //NOTE: override parser loop method
	    parser._runParsingLoop = function () {
	        parsingUnit.parsingLoopLock = true;

	        while (!parsingUnit.suspended && !this.stopped)
	            this._iterateParsingLoop();

	        parsingUnit.parsingLoopLock = false;

	        if (this.stopped)
	            parsingUnit.callback(this.document);
	    };

	    //NOTE: wait while parserController will be adopted by calling code, then
	    //start parsing
	    process.nextTick(function () {
	        parser.parse(html);
	    });

	    return parsingUnit;
	};

	exports.parseInnerHtml = function (innerHtml, contextElement, treeAdapter) {
	    //NOTE: this should be reentrant, so we create new parser here
	    var parser = new Parser(treeAdapter);

	    return parser.parseFragment(innerHtml, contextElement);
	};
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 598 */
/***/ function(module, exports) {

	'use strict';

	var ParsingUnit = module.exports = function (parser) {
	    this.parser = parser;
	    this.suspended = false;
	    this.parsingLoopLock = false;
	    this.callback = null;
	};

	ParsingUnit.prototype._stateGuard = function (suspend) {
	    if (this.suspended && suspend)
	        throw new Error('parse5: Parser was already suspended. Please, check your control flow logic.');

	    else if (!this.suspended && !suspend)
	        throw new Error('parse5: Parser was already resumed. Please, check your control flow logic.');

	    return suspend;
	};

	ParsingUnit.prototype.suspend = function () {
	    this.suspended = this._stateGuard(true);

	    return this;
	};

	ParsingUnit.prototype.resume = function () {
	    this.suspended = this._stateGuard(false);

	    //NOTE: don't enter parsing loop if it is locked. Without this lock _runParsingLoop() may be called
	    //while parsing loop is still running. E.g. when suspend() and resume() called synchronously.
	    if (!this.parsingLoopLock)
	        this.parser._runParsingLoop();

	    return this;
	};

	ParsingUnit.prototype.documentWrite = function (html) {
	    this.parser.tokenizer.preprocessor.write(html);

	    return this;
	};

	ParsingUnit.prototype.handleScripts = function (scriptHandler) {
	    this.parser.scriptHandler = scriptHandler;

	    return this;
	};

	ParsingUnit.prototype.done = function (callback) {
	    this.callback = callback;

	    return this;
	};


/***/ },
/* 599 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var DefaultTreeAdapter = __webpack_require__(54),
	    Doctype = __webpack_require__(52),
	    Utils = __webpack_require__(53),
	    HTML = __webpack_require__(23);

	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES;

	//Default serializer options
	var DEFAULT_OPTIONS = {
	    encodeHtmlEntities: true
	};

	//Escaping regexes
	var AMP_REGEX = /&/g,
	    NBSP_REGEX = /\u00a0/g,
	    DOUBLE_QUOTE_REGEX = /"/g,
	    LT_REGEX = /</g,
	    GT_REGEX = />/g;

	//Escape string
	function escapeString(str, attrMode) {
	    str = str
	        .replace(AMP_REGEX, '&amp;')
	        .replace(NBSP_REGEX, '&nbsp;');

	    if (attrMode)
	        str = str.replace(DOUBLE_QUOTE_REGEX, '&quot;');

	    else {
	        str = str
	            .replace(LT_REGEX, '&lt;')
	            .replace(GT_REGEX, '&gt;');
	    }

	    return str;
	}


	//Enquote doctype ID



	//Serializer
	var Serializer = module.exports = function (treeAdapter, options) {
	    this.treeAdapter = treeAdapter || DefaultTreeAdapter;
	    this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
	};


	//API
	Serializer.prototype.serialize = function (node) {
	    this.html = '';
	    this._serializeChildNodes(node);

	    return this.html;
	};


	//Internals
	Serializer.prototype._serializeChildNodes = function (parentNode) {
	    var childNodes = this.treeAdapter.getChildNodes(parentNode);

	    if (childNodes) {
	        for (var i = 0, cnLength = childNodes.length; i < cnLength; i++) {
	            var currentNode = childNodes[i];

	            if (this.treeAdapter.isElementNode(currentNode))
	                this._serializeElement(currentNode);

	            else if (this.treeAdapter.isTextNode(currentNode))
	                this._serializeTextNode(currentNode);

	            else if (this.treeAdapter.isCommentNode(currentNode))
	                this._serializeCommentNode(currentNode);

	            else if (this.treeAdapter.isDocumentTypeNode(currentNode))
	                this._serializeDocumentTypeNode(currentNode);
	        }
	    }
	};

	Serializer.prototype._serializeElement = function (node) {
	    var tn = this.treeAdapter.getTagName(node),
	        ns = this.treeAdapter.getNamespaceURI(node);

	    this.html += '<' + tn;
	    this._serializeAttributes(node);
	    this.html += '>';

	    if (tn !== $.AREA && tn !== $.BASE && tn !== $.BASEFONT && tn !== $.BGSOUND && tn !== $.BR && tn !== $.BR &&
	        tn !== $.COL && tn !== $.EMBED && tn !== $.FRAME && tn !== $.HR && tn !== $.IMG && tn !== $.INPUT &&
	        tn !== $.KEYGEN && tn !== $.LINK && tn !== $.MENUITEM && tn !== $.META && tn !== $.PARAM && tn !== $.SOURCE &&
	        tn !== $.TRACK && tn !== $.WBR) {

	        if (tn === $.PRE || tn === $.TEXTAREA || tn === $.LISTING) {
	            var firstChild = this.treeAdapter.getFirstChild(node);

	            if (firstChild && this.treeAdapter.isTextNode(firstChild)) {
	                var content = this.treeAdapter.getTextNodeContent(firstChild);

	                if (content[0] === '\n')
	                    this.html += '\n';
	            }
	        }

	        var childNodesHolder = tn === $.TEMPLATE && ns === NS.HTML ?
	                               this.treeAdapter.getChildNodes(node)[0] :
	                               node;

	        this._serializeChildNodes(childNodesHolder);
	        this.html += '</' + tn + '>';
	    }
	};

	Serializer.prototype._serializeAttributes = function (node) {
	    var attrs = this.treeAdapter.getAttrList(node);

	    for (var i = 0, attrsLength = attrs.length; i < attrsLength; i++) {
	        var attr = attrs[i],
	            value = this.options.encodeHtmlEntities ? escapeString(attr.value, true) : attr.value;

	        this.html += ' ';

	        if (!attr.namespace)
	            this.html += attr.name;

	        else if (attr.namespace === NS.XML)
	            this.html += 'xml:' + attr.name;

	        else if (attr.namespace === NS.XMLNS) {
	            if (attr.name !== 'xmlns')
	                this.html += 'xmlns:';

	            this.html += attr.name;
	        }

	        else if (attr.namespace === NS.XLINK)
	            this.html += 'xlink:' + attr.name;

	        else
	            this.html += attr.namespace + ':' + attr.name;

	        this.html += '="' + value + '"';
	    }
	};

	Serializer.prototype._serializeTextNode = function (node) {
	    var content = this.treeAdapter.getTextNodeContent(node),
	        parent = this.treeAdapter.getParentNode(node),
	        parentTn = void 0;

	    if (parent && this.treeAdapter.isElementNode(parent))
	        parentTn = this.treeAdapter.getTagName(parent);

	    if (parentTn === $.STYLE || parentTn === $.SCRIPT || parentTn === $.XMP || parentTn === $.IFRAME ||
	        parentTn === $.NOEMBED || parentTn === $.NOFRAMES || parentTn === $.PLAINTEXT || parentTn === $.NOSCRIPT) {
	        this.html += content;
	    }

	    else
	        this.html += this.options.encodeHtmlEntities ? escapeString(content, false) : content;
	};

	Serializer.prototype._serializeCommentNode = function (node) {
	    this.html += '<!--' + this.treeAdapter.getCommentNodeContent(node) + '-->';
	};

	Serializer.prototype._serializeDocumentTypeNode = function (node) {
	    var name = this.treeAdapter.getDocumentTypeNodeName(node),
	        publicId = this.treeAdapter.getDocumentTypeNodePublicId(node),
	        systemId = this.treeAdapter.getDocumentTypeNodeSystemId(node);

	    this.html += '<' + Doctype.serializeContent(name, publicId, systemId) + '>';
	};


/***/ },
/* 600 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Tokenizer = __webpack_require__(30),
	    TokenizerProxy = __webpack_require__(601),
	    Utils = __webpack_require__(53);

	//Default options
	var DEFAULT_OPTIONS = {
	    decodeHtmlEntities: true,
	    locationInfo: false
	};

	//Skipping handler
	function skip() {
	    //NOTE: do nothing =)
	}

	//SimpleApiParser
	var SimpleApiParser = module.exports = function (handlers, options) {
	    this.options = Utils.mergeOptions(DEFAULT_OPTIONS, options);
	    this.handlers = {
	        doctype: this._wrapHandler(handlers.doctype),
	        startTag: this._wrapHandler(handlers.startTag),
	        endTag: this._wrapHandler(handlers.endTag),
	        text: this._wrapHandler(handlers.text),
	        comment: this._wrapHandler(handlers.comment)
	    };
	};

	SimpleApiParser.prototype._wrapHandler = function (handler) {
	    var parser = this;

	    handler = handler || skip;

	    if (this.options.locationInfo) {
	        return function () {
	            var args = Array.prototype.slice.call(arguments);
	            args.push(parser.currentTokenLocation);
	            handler.apply(handler, args);
	        };
	    }

	    return handler;
	};

	//API
	SimpleApiParser.prototype.parse = function (html) {
	    var token = null;

	    this._reset(html);

	    do {
	        token = this.tokenizerProxy.getNextToken();

	        if (token.type === Tokenizer.CHARACTER_TOKEN ||
	            token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN ||
	            token.type === Tokenizer.NULL_CHARACTER_TOKEN) {

	            if (this.options.locationInfo) {
	                if (this.pendingText === null)
	                    this.currentTokenLocation = token.location;

	                else
	                    this.currentTokenLocation.end = token.location.end;
	            }

	            this.pendingText = (this.pendingText || '') + token.chars;
	        }

	        else {
	            this._emitPendingText();
	            this._handleToken(token);
	        }
	    } while (token.type !== Tokenizer.EOF_TOKEN);
	};

	//Internals
	SimpleApiParser.prototype._handleToken = function (token) {
	    if (this.options.locationInfo)
	        this.currentTokenLocation = token.location;

	    if (token.type === Tokenizer.START_TAG_TOKEN)
	        this.handlers.startTag(token.tagName, token.attrs, token.selfClosing);

	    else if (token.type === Tokenizer.END_TAG_TOKEN)
	        this.handlers.endTag(token.tagName);

	    else if (token.type === Tokenizer.COMMENT_TOKEN)
	        this.handlers.comment(token.data);

	    else if (token.type === Tokenizer.DOCTYPE_TOKEN)
	        this.handlers.doctype(token.name, token.publicId, token.systemId);

	};

	SimpleApiParser.prototype._reset = function (html) {
	    this.tokenizerProxy = new TokenizerProxy(html, this.options);
	    this.pendingText = null;
	    this.currentTokenLocation = null;
	};

	SimpleApiParser.prototype._emitPendingText = function () {
	    if (this.pendingText !== null) {
	        this.handlers.text(this.pendingText);
	        this.pendingText = null;
	    }
	};


/***/ },
/* 601 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Tokenizer = __webpack_require__(30),
	    ForeignContent = __webpack_require__(120),
	    UNICODE = __webpack_require__(36),
	    HTML = __webpack_require__(23);

	//Aliases
	var $ = HTML.TAG_NAMES,
	    NS = HTML.NAMESPACES;


	//Tokenizer proxy
	//NOTE: this proxy simulates adjustment of the Tokenizer which performed by standard parser during tree construction.
	var TokenizerProxy = module.exports = function (html, options) {
	    this.tokenizer = new Tokenizer(html, options);

	    this.namespaceStack = [];
	    this.namespaceStackTop = -1;
	    this.currentNamespace = null;
	    this.inForeignContent = false;
	};

	//API
	TokenizerProxy.prototype.getNextToken = function () {
	    var token = this.tokenizer.getNextToken();

	    if (token.type === Tokenizer.START_TAG_TOKEN)
	        this._handleStartTagToken(token);

	    else if (token.type === Tokenizer.END_TAG_TOKEN)
	        this._handleEndTagToken(token);

	    else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN && this.inForeignContent) {
	        token.type = Tokenizer.CHARACTER_TOKEN;
	        token.chars = UNICODE.REPLACEMENT_CHARACTER;
	    }

	    return token;
	};

	//Namespace stack mutations
	TokenizerProxy.prototype._enterNamespace = function (namespace) {
	    this.namespaceStackTop++;
	    this.namespaceStack.push(namespace);

	    this.inForeignContent = namespace !== NS.HTML;
	    this.currentNamespace = namespace;
	    this.tokenizer.allowCDATA = this.inForeignContent;
	};

	TokenizerProxy.prototype._leaveCurrentNamespace = function () {
	    this.namespaceStackTop--;
	    this.namespaceStack.pop();

	    this.currentNamespace = this.namespaceStack[this.namespaceStackTop];
	    this.inForeignContent = this.currentNamespace !== NS.HTML;
	    this.tokenizer.allowCDATA = this.inForeignContent;
	};

	//Token handlers
	TokenizerProxy.prototype._ensureTokenizerMode = function (tn) {
	    if (tn === $.TEXTAREA || tn === $.TITLE)
	        this.tokenizer.state = Tokenizer.MODE.RCDATA;

	    else if (tn === $.PLAINTEXT)
	        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;

	    else if (tn === $.SCRIPT)
	        this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;

	    else if (tn === $.STYLE || tn === $.IFRAME || tn === $.XMP ||
	             tn === $.NOEMBED || tn === $.NOFRAMES || tn === $.NOSCRIPT) {
	        this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
	    }
	};

	TokenizerProxy.prototype._handleStartTagToken = function (token) {
	    var tn = token.tagName;

	    if (tn === $.SVG)
	        this._enterNamespace(NS.SVG);

	    else if (tn === $.MATH)
	        this._enterNamespace(NS.MATHML);

	    else {
	        if (this.inForeignContent) {
	            if (ForeignContent.causesExit(token))
	                this._leaveCurrentNamespace();

	            else if (ForeignContent.isMathMLTextIntegrationPoint(tn, this.currentNamespace) ||
	                     ForeignContent.isHtmlIntegrationPoint(tn, this.currentNamespace, token.attrs)) {
	                this._enterNamespace(NS.HTML);
	            }
	        }

	        else
	            this._ensureTokenizerMode(tn);
	    }
	};

	TokenizerProxy.prototype._handleEndTagToken = function (token) {
	    var tn = token.tagName;

	    if (!this.inForeignContent) {
	        var previousNs = this.namespaceStack[this.namespaceStackTop - 1];

	        //NOTE: check for exit from integration point
	        if (ForeignContent.isMathMLTextIntegrationPoint(tn, previousNs) ||
	            ForeignContent.isHtmlIntegrationPoint(tn, previousNs, token.attrs)) {
	            this._leaveCurrentNamespace();
	        }

	        else if (tn === $.SCRIPT)
	            this.tokenizer.state = Tokenizer.MODE.DATA;
	    }

	    else if ((tn === $.SVG && this.currentNamespace === NS.SVG) ||
	             (tn === $.MATH && this.currentNamespace === NS.MATHML))
	        this._leaveCurrentNamespace();
	};


/***/ },
/* 602 */
/***/ function(module, exports) {

	'use strict';

	exports.assign = function (tokenizer) {
	    //NOTE: obtain Tokenizer proto this way to avoid module circular references
	    var tokenizerProto = Object.getPrototypeOf(tokenizer);

	    tokenizer.tokenStartLoc = -1;

	    //NOTE: add location info builder method
	    tokenizer._attachLocationInfo = function (token) {
	        token.location = {
	            start: this.tokenStartLoc,
	            end: -1
	        };
	    };

	    //NOTE: patch token creation methods and attach location objects
	    tokenizer._createStartTagToken = function (tagNameFirstCh) {
	        tokenizerProto._createStartTagToken.call(this, tagNameFirstCh);
	        this._attachLocationInfo(this.currentToken);
	    };

	    tokenizer._createEndTagToken = function (tagNameFirstCh) {
	        tokenizerProto._createEndTagToken.call(this, tagNameFirstCh);
	        this._attachLocationInfo(this.currentToken);
	    };

	    tokenizer._createCommentToken = function () {
	        tokenizerProto._createCommentToken.call(this);
	        this._attachLocationInfo(this.currentToken);
	    };

	    tokenizer._createDoctypeToken = function (doctypeNameFirstCh) {
	        tokenizerProto._createDoctypeToken.call(this, doctypeNameFirstCh);
	        this._attachLocationInfo(this.currentToken);
	    };

	    tokenizer._createCharacterToken = function (type, ch) {
	        tokenizerProto._createCharacterToken.call(this, type, ch);
	        this._attachLocationInfo(this.currentCharacterToken);
	    };

	    //NOTE: patch token emission methods to determine end location
	    tokenizer._emitCurrentToken = function () {
	        //NOTE: if we have pending character token make it's end location equal to the
	        //current token's start location.
	        if (this.currentCharacterToken)
	            this.currentCharacterToken.location.end = this.currentToken.location.start;

	        this.currentToken.location.end = this.preprocessor.pos + 1;
	        tokenizerProto._emitCurrentToken.call(this);
	    };

	    tokenizer._emitCurrentCharacterToken = function () {
	        //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),
	        //then set it's location at the current preprocessor position
	        if (this.currentCharacterToken && this.currentCharacterToken.location.end === -1) {
	            //NOTE: we don't need to increment preprocessor position, since character token
	            //emission is always forced by the start of the next character token here.
	            //So, we already have advanced position.
	            this.currentCharacterToken.location.end = this.preprocessor.pos;
	        }

	        tokenizerProto._emitCurrentCharacterToken.call(this);
	    };

	    //NOTE: patch initial states for each mode to obtain token start position
	    Object.keys(tokenizerProto.MODE)

	        .map(function (modeName) {
	            return tokenizerProto.MODE[modeName];
	        })

	        .forEach(function (state) {
	            tokenizer[state] = function (cp) {
	                this.tokenStartLoc = this.preprocessor.pos;
	                tokenizerProto[state].call(this, cp);
	            };
	        });
	};


/***/ },
/* 603 */
/***/ function(module, exports) {

	'use strict';

	//NOTE: this file contains auto generated trie structure that is used for named entity references consumption
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tokenization.html#tokenizing-character-references and
	//http://www.whatwg.org/specs/web-apps/current-work/multipage/named-character-references.html#named-character-references)
	module.exports = {65:{l:{69:{l:{108:{l:{105:{l:{103:{l:{59:{c:[198]}},c:[198]}}}}}}},77:{l:{80:{l:{59:{c:[38]}},c:[38]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[193]}},c:[193]}}}}}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[258]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[194]}},c:[194]}}}}},121:{l:{59:{c:[1040]}}}}},102:{l:{114:{l:{59:{c:[120068]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[192]}},c:[192]}}}}}}}}},108:{l:{112:{l:{104:{l:{97:{l:{59:{c:[913]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[256]}}}}}}}}},110:{l:{100:{l:{59:{c:[10835]}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[260]}}}}}}},112:{l:{102:{l:{59:{c:[120120]}}}}}}},112:{l:{112:{l:{108:{l:{121:{l:{70:{l:{117:{l:{110:{l:{99:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8289]}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{110:{l:{103:{l:{59:{c:[197]}},c:[197]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119964]}}}}},115:{l:{105:{l:{103:{l:{110:{l:{59:{c:[8788]}}}}}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[195]}},c:[195]}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[196]}},c:[196]}}}}}}},66:{l:{97:{l:{99:{l:{107:{l:{115:{l:{108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8726]}}}}}}}}}}}}}}},114:{l:{118:{l:{59:{c:[10983]}}},119:{l:{101:{l:{100:{l:{59:{c:[8966]}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1041]}}}}},101:{l:{99:{l:{97:{l:{117:{l:{115:{l:{101:{l:{59:{c:[8757]}}}}}}}}}}},114:{l:{110:{l:{111:{l:{117:{l:{108:{l:{108:{l:{105:{l:{115:{l:{59:{c:[8492]}}}}}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[914]}}}}}}},102:{l:{114:{l:{59:{c:[120069]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120121]}}}}}}},114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[728]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8492]}}}}}}},117:{l:{109:{l:{112:{l:{101:{l:{113:{l:{59:{c:[8782]}}}}}}}}}}}}},67:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1063]}}}}}}},79:{l:{80:{l:{89:{l:{59:{c:[169]}},c:[169]}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[262]}}}}}}}}},112:{l:{59:{c:[8914]},105:{l:{116:{l:{97:{l:{108:{l:{68:{l:{105:{l:{102:{l:{102:{l:{101:{l:{114:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{68:{l:{59:{c:[8517]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},121:{l:{108:{l:{101:{l:{121:{l:{115:{l:{59:{c:[8493]}}}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[268]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[199]}},c:[199]}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[264]}}}}}}},111:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[8752]}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[266]}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{108:{l:{97:{l:{59:{c:[184]}}}}}}}}}}},110:{l:{116:{l:{101:{l:{114:{l:{68:{l:{111:{l:{116:{l:{59:{c:[183]}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[8493]}}}}},104:{l:{105:{l:{59:{c:[935]}}}}},105:{l:{114:{l:{99:{l:{108:{l:{101:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8857]}}}}}}},77:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8854]}}}}}}}}}}},80:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8853]}}}}}}}}},84:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8855]}}}}}}}}}}}}}}}}}}}}},108:{l:{111:{l:{99:{l:{107:{l:{119:{l:{105:{l:{115:{l:{101:{l:{67:{l:{111:{l:{110:{l:{116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8754]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{101:{l:{67:{l:{117:{l:{114:{l:{108:{l:{121:{l:{68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8221]}}}}}}}}}}}}}}}}}}}}}}},81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8217]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[8759]},101:{l:{59:{c:[10868]}}}}}}}}},110:{l:{103:{l:{114:{l:{117:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8801]}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8751]}}}}}}},116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8750]}}}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[8450]}}},114:{l:{111:{l:{100:{l:{117:{l:{99:{l:{116:{l:{59:{c:[8720]}}}}}}}}}}}}}}},117:{l:{110:{l:{116:{l:{101:{l:{114:{l:{67:{l:{108:{l:{111:{l:{99:{l:{107:{l:{119:{l:{105:{l:{115:{l:{101:{l:{67:{l:{111:{l:{110:{l:{116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8755]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{111:{l:{115:{l:{115:{l:{59:{c:[10799]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119966]}}}}}}},117:{l:{112:{l:{59:{c:[8915]},67:{l:{97:{l:{112:{l:{59:{c:[8781]}}}}}}}}}}}}},68:{l:{68:{l:{59:{c:[8517]},111:{l:{116:{l:{114:{l:{97:{l:{104:{l:{100:{l:{59:{c:[10513]}}}}}}}}}}}}}}},74:{l:{99:{l:{121:{l:{59:{c:[1026]}}}}}}},83:{l:{99:{l:{121:{l:{59:{c:[1029]}}}}}}},90:{l:{99:{l:{121:{l:{59:{c:[1039]}}}}}}},97:{l:{103:{l:{103:{l:{101:{l:{114:{l:{59:{c:[8225]}}}}}}}}},114:{l:{114:{l:{59:{c:[8609]}}}}},115:{l:{104:{l:{118:{l:{59:{c:[10980]}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[270]}}}}}}}}},121:{l:{59:{c:[1044]}}}}},101:{l:{108:{l:{59:{c:[8711]},116:{l:{97:{l:{59:{c:[916]}}}}}}}}},102:{l:{114:{l:{59:{c:[120071]}}}}},105:{l:{97:{l:{99:{l:{114:{l:{105:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{65:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[180]}}}}}}}}}}},68:{l:{111:{l:{116:{l:{59:{c:[729]}}},117:{l:{98:{l:{108:{l:{101:{l:{65:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[733]}}}}}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[96]}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[732]}}}}}}}}}}}}}}}}}}}}}}}}}}},109:{l:{111:{l:{110:{l:{100:{l:{59:{c:[8900]}}}}}}}}}}},102:{l:{102:{l:{101:{l:{114:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{68:{l:{59:{c:[8518]}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120123]}}}}},116:{l:{59:{c:[168]},68:{l:{111:{l:{116:{l:{59:{c:[8412]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8784]}}}}}}}}}}}}},117:{l:{98:{l:{108:{l:{101:{l:{67:{l:{111:{l:{110:{l:{116:{l:{111:{l:{117:{l:{114:{l:{73:{l:{110:{l:{116:{l:{101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8751]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},68:{l:{111:{l:{116:{l:{59:{c:[168]}}},119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8659]}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8656]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8660]}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[10980]}}}}}}}}}}}}},111:{l:{110:{l:{103:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10232]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10234]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10233]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8658]}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8872]}}}}}}}}}}}}}}}}},85:{l:{112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8657]}}}}}}}}}}},68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8661]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8741]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8595]},66:{l:{97:{l:{114:{l:{59:{c:[10515]}}}}}}},85:{l:{112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8693]}}}}}}}}}}}}}}}}}}}}}}}}},66:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[785]}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10576]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10590]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8637]},66:{l:{97:{l:{114:{l:{59:{c:[10582]}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10591]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8641]},66:{l:{97:{l:{114:{l:{59:{c:[10583]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8868]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8615]}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8659]}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119967]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[272]}}}}}}}}}}}}},69:{l:{78:{l:{71:{l:{59:{c:[330]}}}}},84:{l:{72:{l:{59:{c:[208]}},c:[208]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[201]}},c:[201]}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[282]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[202]}},c:[202]}}}}},121:{l:{59:{c:[1069]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[278]}}}}}}},102:{l:{114:{l:{59:{c:[120072]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[200]}},c:[200]}}}}}}}}},108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8712]}}}}}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[274]}}}}}}},112:{l:{116:{l:{121:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9723]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{121:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9643]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[280]}}}}}}},112:{l:{102:{l:{59:{c:[120124]}}}}}}},112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[917]}}}}}}}}}}}}},113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10869]},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8770]}}}}}}}}}}}}}}},105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[8652]}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8496]}}}}},105:{l:{109:{l:{59:{c:[10867]}}}}}}},116:{l:{97:{l:{59:{c:[919]}}}}},117:{l:{109:{l:{108:{l:{59:{c:[203]}},c:[203]}}}}},120:{l:{105:{l:{115:{l:{116:{l:{115:{l:{59:{c:[8707]}}}}}}}}},112:{l:{111:{l:{110:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{69:{l:{59:{c:[8519]}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{99:{l:{121:{l:{59:{c:[1060]}}}}},102:{l:{114:{l:{59:{c:[120073]}}}}},105:{l:{108:{l:{108:{l:{101:{l:{100:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9724]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{121:{l:{83:{l:{109:{l:{97:{l:{108:{l:{108:{l:{83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9642]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120125]}}}}},114:{l:{65:{l:{108:{l:{108:{l:{59:{c:[8704]}}}}}}}}},117:{l:{114:{l:{105:{l:{101:{l:{114:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8497]}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8497]}}}}}}}}},71:{l:{74:{l:{99:{l:{121:{l:{59:{c:[1027]}}}}}}},84:{l:{59:{c:[62]}},c:[62]},97:{l:{109:{l:{109:{l:{97:{l:{59:{c:[915]},100:{l:{59:{c:[988]}}}}}}}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[286]}}}}}}}}}}},99:{l:{101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[290]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[284]}}}}}}},121:{l:{59:{c:[1043]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[288]}}}}}}},102:{l:{114:{l:{59:{c:[120074]}}}}},103:{l:{59:{c:[8921]}}},111:{l:{112:{l:{102:{l:{59:{c:[120126]}}}}}}},114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8805]},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8923]}}}}}}}}}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8807]}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[10914]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8823]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10878]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8819]}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119970]}}}}}}},116:{l:{59:{c:[8811]}}}}},72:{l:{65:{l:{82:{l:{68:{l:{99:{l:{121:{l:{59:{c:[1066]}}}}}}}}}}},97:{l:{99:{l:{101:{l:{107:{l:{59:{c:[711]}}}}}}},116:{l:{59:{c:[94]}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[292]}}}}}}}}},102:{l:{114:{l:{59:{c:[8460]}}}}},105:{l:{108:{l:{98:{l:{101:{l:{114:{l:{116:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8459]}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8461]}}}}},114:{l:{105:{l:{122:{l:{111:{l:{110:{l:{116:{l:{97:{l:{108:{l:{76:{l:{105:{l:{110:{l:{101:{l:{59:{c:[9472]}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8459]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[294]}}}}}}}}}}},117:{l:{109:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{72:{l:{117:{l:{109:{l:{112:{l:{59:{c:[8782]}}}}}}}}}}}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8783]}}}}}}}}}}}}}}}}}}},73:{l:{69:{l:{99:{l:{121:{l:{59:{c:[1045]}}}}}}},74:{l:{108:{l:{105:{l:{103:{l:{59:{c:[306]}}}}}}}}},79:{l:{99:{l:{121:{l:{59:{c:[1025]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[205]}},c:[205]}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[206]}},c:[206]}}}}},121:{l:{59:{c:[1048]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[304]}}}}}}},102:{l:{114:{l:{59:{c:[8465]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[204]}},c:[204]}}}}}}}}},109:{l:{59:{c:[8465]},97:{l:{99:{l:{114:{l:{59:{c:[298]}}}}},103:{l:{105:{l:{110:{l:{97:{l:{114:{l:{121:{l:{73:{l:{59:{c:[8520]}}}}}}}}}}}}}}}}},112:{l:{108:{l:{105:{l:{101:{l:{115:{l:{59:{c:[8658]}}}}}}}}}}}}},110:{l:{116:{l:{59:{c:[8748]},101:{l:{103:{l:{114:{l:{97:{l:{108:{l:{59:{c:[8747]}}}}}}}}},114:{l:{115:{l:{101:{l:{99:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8898]}}}}}}}}}}}}}}}}}}}}},118:{l:{105:{l:{115:{l:{105:{l:{98:{l:{108:{l:{101:{l:{67:{l:{111:{l:{109:{l:{109:{l:{97:{l:{59:{c:[8291]}}}}}}}}}}},84:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8290]}}}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[302]}}}}}}},112:{l:{102:{l:{59:{c:[120128]}}}}},116:{l:{97:{l:{59:{c:[921]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8464]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[296]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1030]}}}}}}},109:{l:{108:{l:{59:{c:[207]}},c:[207]}}}}}}},74:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[308]}}}}}}},121:{l:{59:{c:[1049]}}}}},102:{l:{114:{l:{59:{c:[120077]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120129]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119973]}}}}},101:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1032]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1028]}}}}}}}}}}},75:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1061]}}}}}}},74:{l:{99:{l:{121:{l:{59:{c:[1036]}}}}}}},97:{l:{112:{l:{112:{l:{97:{l:{59:{c:[922]}}}}}}}}},99:{l:{101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[310]}}}}}}}}},121:{l:{59:{c:[1050]}}}}},102:{l:{114:{l:{59:{c:[120078]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120130]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119974]}}}}}}}}},76:{l:{74:{l:{99:{l:{121:{l:{59:{c:[1033]}}}}}}},84:{l:{59:{c:[60]}},c:[60]},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[313]}}}}}}}}},109:{l:{98:{l:{100:{l:{97:{l:{59:{c:[923]}}}}}}}}},110:{l:{103:{l:{59:{c:[10218]}}}}},112:{l:{108:{l:{97:{l:{99:{l:{101:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8466]}}}}}}}}}}}}}}}}},114:{l:{114:{l:{59:{c:[8606]}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[317]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[315]}}}}}}}}},121:{l:{59:{c:[1051]}}}}},101:{l:{102:{l:{116:{l:{65:{l:{110:{l:{103:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10216]}}}}}}}}}}}}}}}}}}}}}}},114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8592]},66:{l:{97:{l:{114:{l:{59:{c:[8676]}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8646]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},67:{l:{101:{l:{105:{l:{108:{l:{105:{l:{110:{l:{103:{l:{59:{c:[8968]}}}}}}}}}}}}}}},68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10214]}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10593]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8643]},66:{l:{97:{l:{114:{l:{59:{c:[10585]}}}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8970]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8596]}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10574]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8867]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8612]}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10586]}}}}}}}}}}}}}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8882]},66:{l:{97:{l:{114:{l:{59:{c:[10703]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8884]}}}}}}}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10577]}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10592]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8639]},66:{l:{97:{l:{114:{l:{59:{c:[10584]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8636]},66:{l:{97:{l:{114:{l:{59:{c:[10578]}}}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8656]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8660]}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{115:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8922]}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8806]}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8822]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10913]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10877]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8818]}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120079]}}}}},108:{l:{59:{c:[8920]},101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8666]}}}}}}}}}}}}}}}}}}},109:{l:{105:{l:{100:{l:{111:{l:{116:{l:{59:{c:[319]}}}}}}}}}}},111:{l:{110:{l:{103:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10229]}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10231]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10230]}}}}}}}}}}}}}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10232]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10234]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10233]}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[120131]}}}}},119:{l:{101:{l:{114:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8601]}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8600]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8466]}}}}},104:{l:{59:{c:[8624]}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[321]}}}}}}}}}}},116:{l:{59:{c:[8810]}}}}},77:{l:{97:{l:{112:{l:{59:{c:[10501]}}}}},99:{l:{121:{l:{59:{c:[1052]}}}}},101:{l:{100:{l:{105:{l:{117:{l:{109:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8287]}}}}}}}}}}}}}}}}}}},108:{l:{108:{l:{105:{l:{110:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8499]}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120080]}}}}},105:{l:{110:{l:{117:{l:{115:{l:{80:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8723]}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120132]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8499]}}}}}}},117:{l:{59:{c:[924]}}}}},78:{l:{74:{l:{99:{l:{121:{l:{59:{c:[1034]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[323]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[327]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[325]}}}}}}}}},121:{l:{59:{c:[1053]}}}}},101:{l:{103:{l:{97:{l:{116:{l:{105:{l:{118:{l:{101:{l:{77:{l:{101:{l:{100:{l:{105:{l:{117:{l:{109:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{104:{l:{105:{l:{99:{l:{107:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}},110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{121:{l:{84:{l:{104:{l:{105:{l:{110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{116:{l:{101:{l:{100:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8811]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8810]}}}}}}}}}}}}}}}}}}}}}}}}},119:{l:{76:{l:{105:{l:{110:{l:{101:{l:{59:{c:[10]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120081]}}}}},111:{l:{66:{l:{114:{l:{101:{l:{97:{l:{107:{l:{59:{c:[8288]}}}}}}}}}}},110:{l:{66:{l:{114:{l:{101:{l:{97:{l:{107:{l:{105:{l:{110:{l:{103:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[160]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[8469]}}}}},116:{l:{59:{c:[10988]},67:{l:{111:{l:{110:{l:{103:{l:{114:{l:{117:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8802]}}}}}}}}}}}}}}}}},117:{l:{112:{l:{67:{l:{97:{l:{112:{l:{59:{c:[8813]}}}}}}}}}}}}},68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{86:{l:{101:{l:{114:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8742]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},69:{l:{108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8713]}}}}}}}}}}}}},113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8800]},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8770,824]}}}}}}}}}}}}}}}}}}},120:{l:{105:{l:{115:{l:{116:{l:{115:{l:{59:{c:[8708]}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8815]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8817]}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8807,824]}}}}}}}}}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8811,824]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8825]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10878,824]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8821]}}}}}}}}}}}}}}}}}}}}}}}}},72:{l:{117:{l:{109:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{72:{l:{117:{l:{109:{l:{112:{l:{59:{c:[8782,824]}}}}}}}}}}}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8783,824]}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{84:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8938]},66:{l:{97:{l:{114:{l:{59:{c:[10703,824]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8940]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{115:{l:{59:{c:[8814]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8816]}}}}}}}}}}},71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[8824]}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8810,824]}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10877,824]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8820]}}}}}}}}}}}}}}}}}}},78:{l:{101:{l:{115:{l:{116:{l:{101:{l:{100:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{71:{l:{114:{l:{101:{l:{97:{l:{116:{l:{101:{l:{114:{l:{59:{c:[10914,824]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{115:{l:{115:{l:{76:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10913,824]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},80:{l:{114:{l:{101:{l:{99:{l:{101:{l:{100:{l:{101:{l:{115:{l:{59:{c:[8832]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10927,824]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8928]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},82:{l:{101:{l:{118:{l:{101:{l:{114:{l:{115:{l:{101:{l:{69:{l:{108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8716]}}}}}}}}}}}}}}}}}}}}}}}}}}},105:{l:{103:{l:{104:{l:{116:{l:{84:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8939]},66:{l:{97:{l:{114:{l:{59:{c:[10704,824]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8941]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},83:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{83:{l:{117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8847,824]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8930]}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8848,824]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8931]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8834,8402]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8840]}}}}}}}}}}}}}}}}}}},99:{l:{99:{l:{101:{l:{101:{l:{100:{l:{115:{l:{59:{c:[8833]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10928,824]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8929]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8831,824]}}}}}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8835,8402]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8841]}}}}}}}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8769]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8772]}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8775]}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8777]}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{114:{l:{116:{l:{105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8740]}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119977]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[209]}},c:[209]}}}}}}}}},117:{l:{59:{c:[925]}}}}},79:{l:{69:{l:{108:{l:{105:{l:{103:{l:{59:{c:[338]}}}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[211]}},c:[211]}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[212]}},c:[212]}}}}},121:{l:{59:{c:[1054]}}}}},100:{l:{98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[336]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120082]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[210]}},c:[210]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[332]}}}}}}},101:{l:{103:{l:{97:{l:{59:{c:[937]}}}}}}},105:{l:{99:{l:{114:{l:{111:{l:{110:{l:{59:{c:[927]}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120134]}}}}}}},112:{l:{101:{l:{110:{l:{67:{l:{117:{l:{114:{l:{108:{l:{121:{l:{68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8220]}}}}}}}}}}}}}}}}}}}}}}},81:{l:{117:{l:{111:{l:{116:{l:{101:{l:{59:{c:[8216]}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{59:{c:[10836]}}},115:{l:{99:{l:{114:{l:{59:{c:[119978]}}}}},108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[216]}},c:[216]}}}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[213]}},c:[213]}}}}},109:{l:{101:{l:{115:{l:{59:{c:[10807]}}}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[214]}},c:[214]}}}}},118:{l:{101:{l:{114:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8254]}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[9182]}}},107:{l:{101:{l:{116:{l:{59:{c:[9140]}}}}}}}}}}}}}}},80:{l:{97:{l:{114:{l:{101:{l:{110:{l:{116:{l:{104:{l:{101:{l:{115:{l:{105:{l:{115:{l:{59:{c:[9180]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},80:{l:{97:{l:{114:{l:{116:{l:{105:{l:{97:{l:{108:{l:{68:{l:{59:{c:[8706]}}}}}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1055]}}}}},102:{l:{114:{l:{59:{c:[120083]}}}}},104:{l:{105:{l:{59:{c:[934]}}}}},105:{l:{59:{c:[928]}}},108:{l:{117:{l:{115:{l:{77:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[177]}}}}}}}}}}}}}}}}},111:{l:{105:{l:{110:{l:{99:{l:{97:{l:{114:{l:{101:{l:{112:{l:{108:{l:{97:{l:{110:{l:{101:{l:{59:{c:[8460]}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[8473]}}}}}}},114:{l:{59:{c:[10939]},101:{l:{99:{l:{101:{l:{100:{l:{101:{l:{115:{l:{59:{c:[8826]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10927]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8828]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8830]}}}}}}}}}}}}}}}}}}}}}}},105:{l:{109:{l:{101:{l:{59:{c:[8243]}}}}}}},111:{l:{100:{l:{117:{l:{99:{l:{116:{l:{59:{c:[8719]}}}}}}}}},112:{l:{111:{l:{114:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8759]},97:{l:{108:{l:{59:{c:[8733]}}}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119979]}}}}},105:{l:{59:{c:[936]}}}}}}},81:{l:{85:{l:{79:{l:{84:{l:{59:{c:[34]}},c:[34]}}}}},102:{l:{114:{l:{59:{c:[120084]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8474]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119980]}}}}}}}}},82:{l:{66:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10512]}}}}}}}}},69:{l:{71:{l:{59:{c:[174]}},c:[174]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[340]}}}}}}}}},110:{l:{103:{l:{59:{c:[10219]}}}}},114:{l:{114:{l:{59:{c:[8608]},116:{l:{108:{l:{59:{c:[10518]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[344]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[342]}}}}}}}}},121:{l:{59:{c:[1056]}}}}},101:{l:{59:{c:[8476]},118:{l:{101:{l:{114:{l:{115:{l:{101:{l:{69:{l:{108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8715]}}}}}}}}}}}}},113:{l:{117:{l:{105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[8651]}}}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{69:{l:{113:{l:{117:{l:{105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[10607]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[8476]}}}}},104:{l:{111:{l:{59:{c:[929]}}}}},105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{110:{l:{103:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10217]}}}}}}}}}}}}}}}}}}}}}}},114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8594]},66:{l:{97:{l:{114:{l:{59:{c:[8677]}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8644]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},67:{l:{101:{l:{105:{l:{108:{l:{105:{l:{110:{l:{103:{l:{59:{c:[8969]}}}}}}}}}}}}}}},68:{l:{111:{l:{117:{l:{98:{l:{108:{l:{101:{l:{66:{l:{114:{l:{97:{l:{99:{l:{107:{l:{101:{l:{116:{l:{59:{c:[10215]}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10589]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8642]},66:{l:{97:{l:{114:{l:{59:{c:[10581]}}}}}}}}}}}}}}}}}}}}}}}}}}},70:{l:{108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8971]}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8866]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8614]}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10587]}}}}}}}}}}}}}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8883]},66:{l:{97:{l:{114:{l:{59:{c:[10704]}}}}}}},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8885]}}}}}}}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{68:{l:{111:{l:{119:{l:{110:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10575]}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10588]}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8638]},66:{l:{97:{l:{114:{l:{59:{c:[10580]}}}}}}}}}}}}}}}}}}}}}}},86:{l:{101:{l:{99:{l:{116:{l:{111:{l:{114:{l:{59:{c:[8640]},66:{l:{97:{l:{114:{l:{59:{c:[10579]}}}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8658]}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8477]}}}}},117:{l:{110:{l:{100:{l:{73:{l:{109:{l:{112:{l:{108:{l:{105:{l:{101:{l:{115:{l:{59:{c:[10608]}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8667]}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8475]}}}}},104:{l:{59:{c:[8625]}}}}},117:{l:{108:{l:{101:{l:{68:{l:{101:{l:{108:{l:{97:{l:{121:{l:{101:{l:{100:{l:{59:{c:[10740]}}}}}}}}}}}}}}}}}}}}}}},83:{l:{72:{l:{67:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1065]}}}}}}}}},99:{l:{121:{l:{59:{c:[1064]}}}}}}},79:{l:{70:{l:{84:{l:{99:{l:{121:{l:{59:{c:[1068]}}}}}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[346]}}}}}}}}}}},99:{l:{59:{c:[10940]},97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[352]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[350]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[348]}}}}}}},121:{l:{59:{c:[1057]}}}}},102:{l:{114:{l:{59:{c:[120086]}}}}},104:{l:{111:{l:{114:{l:{116:{l:{68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8595]}}}}}}}}}}}}}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8592]}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8594]}}}}}}}}}}}}}}}}}}}}},85:{l:{112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8593]}}}}}}}}}}}}}}}}}}}}}}},105:{l:{103:{l:{109:{l:{97:{l:{59:{c:[931]}}}}}}}}},109:{l:{97:{l:{108:{l:{108:{l:{67:{l:{105:{l:{114:{l:{99:{l:{108:{l:{101:{l:{59:{c:[8728]}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120138]}}}}}}},113:{l:{114:{l:{116:{l:{59:{c:[8730]}}}}},117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9633]},73:{l:{110:{l:{116:{l:{101:{l:{114:{l:{115:{l:{101:{l:{99:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8851]}}}}}}}}}}}}}}}}}}}}}}}}},83:{l:{117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8847]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8849]}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8848]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8850]}}}}}}}}}}}}}}}}}}}}}}}}}}},85:{l:{110:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8852]}}}}}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119982]}}}}}}},116:{l:{97:{l:{114:{l:{59:{c:[8902]}}}}}}},117:{l:{98:{l:{59:{c:[8912]},115:{l:{101:{l:{116:{l:{59:{c:[8912]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8838]}}}}}}}}}}}}}}}}}}},99:{l:{99:{l:{101:{l:{101:{l:{100:{l:{115:{l:{59:{c:[8827]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[10928]}}}}}}}}}}},83:{l:{108:{l:{97:{l:{110:{l:{116:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8829]}}}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8831]}}}}}}}}}}}}}}}}}}}}},104:{l:{84:{l:{104:{l:{97:{l:{116:{l:{59:{c:[8715]}}}}}}}}}}}}},109:{l:{59:{c:[8721]}}},112:{l:{59:{c:[8913]},101:{l:{114:{l:{115:{l:{101:{l:{116:{l:{59:{c:[8835]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8839]}}}}}}}}}}}}}}}}}}}}},115:{l:{101:{l:{116:{l:{59:{c:[8913]}}}}}}}}}}}}},84:{l:{72:{l:{79:{l:{82:{l:{78:{l:{59:{c:[222]}},c:[222]}}}}}}},82:{l:{65:{l:{68:{l:{69:{l:{59:{c:[8482]}}}}}}}}},83:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1035]}}}}}}},99:{l:{121:{l:{59:{c:[1062]}}}}}}},97:{l:{98:{l:{59:{c:[9]}}},117:{l:{59:{c:[932]}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[356]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[354]}}}}}}}}},121:{l:{59:{c:[1058]}}}}},102:{l:{114:{l:{59:{c:[120087]}}}}},104:{l:{101:{l:{114:{l:{101:{l:{102:{l:{111:{l:{114:{l:{101:{l:{59:{c:[8756]}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[920]}}}}}}},105:{l:{99:{l:{107:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8287,8202]}}}}}}}}}}}}}}},110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8201]}}}}}}}}}}}}}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8764]},69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8771]}}}}}}}}}}},70:{l:{117:{l:{108:{l:{108:{l:{69:{l:{113:{l:{117:{l:{97:{l:{108:{l:{59:{c:[8773]}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8776]}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120139]}}}}}}},114:{l:{105:{l:{112:{l:{108:{l:{101:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8411]}}}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119983]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[358]}}}}}}}}}}}}},85:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[218]}},c:[218]}}}}}}},114:{l:{114:{l:{59:{c:[8607]},111:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10569]}}}}}}}}}}}}}}},98:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1038]}}}}},101:{l:{118:{l:{101:{l:{59:{c:[364]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[219]}},c:[219]}}}}},121:{l:{59:{c:[1059]}}}}},100:{l:{98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[368]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120088]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[217]}},c:[217]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[362]}}}}}}}}},110:{l:{100:{l:{101:{l:{114:{l:{66:{l:{97:{l:{114:{l:{59:{c:[95]}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[9183]}}},107:{l:{101:{l:{116:{l:{59:{c:[9141]}}}}}}}}}}}}}}},80:{l:{97:{l:{114:{l:{101:{l:{110:{l:{116:{l:{104:{l:{101:{l:{115:{l:{105:{l:{115:{l:{59:{c:[9181]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},105:{l:{111:{l:{110:{l:{59:{c:[8899]},80:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8846]}}}}}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[370]}}}}}}},112:{l:{102:{l:{59:{c:[120140]}}}}}}},112:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8593]},66:{l:{97:{l:{114:{l:{59:{c:[10514]}}}}}}},68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8645]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},68:{l:{111:{l:{119:{l:{110:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8597]}}}}}}}}}}}}}}}}}}},69:{l:{113:{l:{117:{l:{105:{l:{108:{l:{105:{l:{98:{l:{114:{l:{105:{l:{117:{l:{109:{l:{59:{c:[10606]}}}}}}}}}}}}}}}}}}}}}}},84:{l:{101:{l:{101:{l:{59:{c:[8869]},65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8613]}}}}}}}}}}}}}}}}},97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8657]}}}}}}}}}}},100:{l:{111:{l:{119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8661]}}}}}}}}}}}}}}}}}}},112:{l:{101:{l:{114:{l:{76:{l:{101:{l:{102:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8598]}}}}}}}}}}}}}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{65:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8599]}}}}}}}}}}}}}}}}}}}}}}}}}}},115:{l:{105:{l:{59:{c:[978]},108:{l:{111:{l:{110:{l:{59:{c:[933]}}}}}}}}}}}}},114:{l:{105:{l:{110:{l:{103:{l:{59:{c:[366]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119984]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[360]}}}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[220]}},c:[220]}}}}}}},86:{l:{68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8875]}}}}}}}}},98:{l:{97:{l:{114:{l:{59:{c:[10987]}}}}}}},99:{l:{121:{l:{59:{c:[1042]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8873]},108:{l:{59:{c:[10982]}}}}}}}}}}},101:{l:{101:{l:{59:{c:[8897]}}},114:{l:{98:{l:{97:{l:{114:{l:{59:{c:[8214]}}}}}}},116:{l:{59:{c:[8214]},105:{l:{99:{l:{97:{l:{108:{l:{66:{l:{97:{l:{114:{l:{59:{c:[8739]}}}}}}},76:{l:{105:{l:{110:{l:{101:{l:{59:{c:[124]}}}}}}}}},83:{l:{101:{l:{112:{l:{97:{l:{114:{l:{97:{l:{116:{l:{111:{l:{114:{l:{59:{c:[10072]}}}}}}}}}}}}}}}}}}},84:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[8768]}}}}}}}}}}}}}}}}}}}}},121:{l:{84:{l:{104:{l:{105:{l:{110:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8202]}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120089]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120141]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119985]}}}}}}},118:{l:{100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8874]}}}}}}}}}}}}},87:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[372]}}}}}}}}},101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8896]}}}}}}}}},102:{l:{114:{l:{59:{c:[120090]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120142]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119986]}}}}}}}}},88:{l:{102:{l:{114:{l:{59:{c:[120091]}}}}},105:{l:{59:{c:[926]}}},111:{l:{112:{l:{102:{l:{59:{c:[120143]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119987]}}}}}}}}},89:{l:{65:{l:{99:{l:{121:{l:{59:{c:[1071]}}}}}}},73:{l:{99:{l:{121:{l:{59:{c:[1031]}}}}}}},85:{l:{99:{l:{121:{l:{59:{c:[1070]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[221]}},c:[221]}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[374]}}}}}}},121:{l:{59:{c:[1067]}}}}},102:{l:{114:{l:{59:{c:[120092]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120144]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119988]}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[376]}}}}}}}}},90:{l:{72:{l:{99:{l:{121:{l:{59:{c:[1046]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[377]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[381]}}}}}}}}},121:{l:{59:{c:[1047]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[379]}}}}}}},101:{l:{114:{l:{111:{l:{87:{l:{105:{l:{100:{l:{116:{l:{104:{l:{83:{l:{112:{l:{97:{l:{99:{l:{101:{l:{59:{c:[8203]}}}}}}}}}}}}}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[918]}}}}}}},102:{l:{114:{l:{59:{c:[8488]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[8484]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119989]}}}}}}}}},97:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[225]}},c:[225]}}}}}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[259]}}}}}}}}}}},99:{l:{59:{c:[8766]},69:{l:{59:{c:[8766,819]}}},100:{l:{59:{c:[8767]}}},105:{l:{114:{l:{99:{l:{59:{c:[226]}},c:[226]}}}}},117:{l:{116:{l:{101:{l:{59:{c:[180]}},c:[180]}}}}},121:{l:{59:{c:[1072]}}}}},101:{l:{108:{l:{105:{l:{103:{l:{59:{c:[230]}},c:[230]}}}}}}},102:{l:{59:{c:[8289]},114:{l:{59:{c:[120094]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[224]}},c:[224]}}}}}}}}},108:{l:{101:{l:{102:{l:{115:{l:{121:{l:{109:{l:{59:{c:[8501]}}}}}}}}},112:{l:{104:{l:{59:{c:[8501]}}}}}}},112:{l:{104:{l:{97:{l:{59:{c:[945]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[257]}}}}},108:{l:{103:{l:{59:{c:[10815]}}}}}}},112:{l:{59:{c:[38]}},c:[38]}}},110:{l:{100:{l:{59:{c:[8743]},97:{l:{110:{l:{100:{l:{59:{c:[10837]}}}}}}},100:{l:{59:{c:[10844]}}},115:{l:{108:{l:{111:{l:{112:{l:{101:{l:{59:{c:[10840]}}}}}}}}}}},118:{l:{59:{c:[10842]}}}}},103:{l:{59:{c:[8736]},101:{l:{59:{c:[10660]}}},108:{l:{101:{l:{59:{c:[8736]}}}}},109:{l:{115:{l:{100:{l:{59:{c:[8737]},97:{l:{97:{l:{59:{c:[10664]}}},98:{l:{59:{c:[10665]}}},99:{l:{59:{c:[10666]}}},100:{l:{59:{c:[10667]}}},101:{l:{59:{c:[10668]}}},102:{l:{59:{c:[10669]}}},103:{l:{59:{c:[10670]}}},104:{l:{59:{c:[10671]}}}}}}}}}}},114:{l:{116:{l:{59:{c:[8735]},118:{l:{98:{l:{59:{c:[8894]},100:{l:{59:{c:[10653]}}}}}}}}}}},115:{l:{112:{l:{104:{l:{59:{c:[8738]}}}}},116:{l:{59:{c:[197]}}}}},122:{l:{97:{l:{114:{l:{114:{l:{59:{c:[9084]}}}}}}}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[261]}}}}}}},112:{l:{102:{l:{59:{c:[120146]}}}}}}},112:{l:{59:{c:[8776]},69:{l:{59:{c:[10864]}}},97:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10863]}}}}}}}}},101:{l:{59:{c:[8778]}}},105:{l:{100:{l:{59:{c:[8779]}}}}},111:{l:{115:{l:{59:{c:[39]}}}}},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[8776]},101:{l:{113:{l:{59:{c:[8778]}}}}}}}}}}}}}}},114:{l:{105:{l:{110:{l:{103:{l:{59:{c:[229]}},c:[229]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119990]}}}}},116:{l:{59:{c:[42]}}},121:{l:{109:{l:{112:{l:{59:{c:[8776]},101:{l:{113:{l:{59:{c:[8781]}}}}}}}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[227]}},c:[227]}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[228]}},c:[228]}}}}},119:{l:{99:{l:{111:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[8755]}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[10769]}}}}}}}}}}},98:{l:{78:{l:{111:{l:{116:{l:{59:{c:[10989]}}}}}}},97:{l:{99:{l:{107:{l:{99:{l:{111:{l:{110:{l:{103:{l:{59:{c:[8780]}}}}}}}}},101:{l:{112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[1014]}}}}}}}}}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8245]}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8765]},101:{l:{113:{l:{59:{c:[8909]}}}}}}}}}}}}}}},114:{l:{118:{l:{101:{l:{101:{l:{59:{c:[8893]}}}}}}},119:{l:{101:{l:{100:{l:{59:{c:[8965]},103:{l:{101:{l:{59:{c:[8965]}}}}}}}}}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[9141]},116:{l:{98:{l:{114:{l:{107:{l:{59:{c:[9142]}}}}}}}}}}}}}}},99:{l:{111:{l:{110:{l:{103:{l:{59:{c:[8780]}}}}}}},121:{l:{59:{c:[1073]}}}}},100:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8222]}}}}}}}}},101:{l:{99:{l:{97:{l:{117:{l:{115:{l:{59:{c:[8757]},101:{l:{59:{c:[8757]}}}}}}}}}}},109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10672]}}}}}}}}}}},112:{l:{115:{l:{105:{l:{59:{c:[1014]}}}}}}},114:{l:{110:{l:{111:{l:{117:{l:{59:{c:[8492]}}}}}}}}},116:{l:{97:{l:{59:{c:[946]}}},104:{l:{59:{c:[8502]}}},119:{l:{101:{l:{101:{l:{110:{l:{59:{c:[8812]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120095]}}}}},105:{l:{103:{l:{99:{l:{97:{l:{112:{l:{59:{c:[8898]}}}}},105:{l:{114:{l:{99:{l:{59:{c:[9711]}}}}}}},117:{l:{112:{l:{59:{c:[8899]}}}}}}},111:{l:{100:{l:{111:{l:{116:{l:{59:{c:[10752]}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10753]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[10754]}}}}}}}}}}}}},115:{l:{113:{l:{99:{l:{117:{l:{112:{l:{59:{c:[10758]}}}}}}}}},116:{l:{97:{l:{114:{l:{59:{c:[9733]}}}}}}}}},116:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[9661]}}}}}}}}},117:{l:{112:{l:{59:{c:[9651]}}}}}}}}}}}}}}}}}}}}},117:{l:{112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10756]}}}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8897]}}}}}}},119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8896]}}}}}}}}}}}}}}},107:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10509]}}}}}}}}}}},108:{l:{97:{l:{99:{l:{107:{l:{108:{l:{111:{l:{122:{l:{101:{l:{110:{l:{103:{l:{101:{l:{59:{c:[10731]}}}}}}}}}}}}}}},115:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[9642]}}}}}}}}}}}}},116:{l:{114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[9652]},100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[9662]}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[9666]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[9656]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},110:{l:{107:{l:{59:{c:[9251]}}}}}}},107:{l:{49:{l:{50:{l:{59:{c:[9618]}}},52:{l:{59:{c:[9617]}}}}},51:{l:{52:{l:{59:{c:[9619]}}}}}}},111:{l:{99:{l:{107:{l:{59:{c:[9608]}}}}}}}}},110:{l:{101:{l:{59:{c:[61,8421]},113:{l:{117:{l:{105:{l:{118:{l:{59:{c:[8801,8421]}}}}}}}}}}},111:{l:{116:{l:{59:{c:[8976]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120147]}}}}},116:{l:{59:{c:[8869]},116:{l:{111:{l:{109:{l:{59:{c:[8869]}}}}}}}}},119:{l:{116:{l:{105:{l:{101:{l:{59:{c:[8904]}}}}}}}}},120:{l:{68:{l:{76:{l:{59:{c:[9559]}}},82:{l:{59:{c:[9556]}}},108:{l:{59:{c:[9558]}}},114:{l:{59:{c:[9555]}}}}},72:{l:{59:{c:[9552]},68:{l:{59:{c:[9574]}}},85:{l:{59:{c:[9577]}}},100:{l:{59:{c:[9572]}}},117:{l:{59:{c:[9575]}}}}},85:{l:{76:{l:{59:{c:[9565]}}},82:{l:{59:{c:[9562]}}},108:{l:{59:{c:[9564]}}},114:{l:{59:{c:[9561]}}}}},86:{l:{59:{c:[9553]},72:{l:{59:{c:[9580]}}},76:{l:{59:{c:[9571]}}},82:{l:{59:{c:[9568]}}},104:{l:{59:{c:[9579]}}},108:{l:{59:{c:[9570]}}},114:{l:{59:{c:[9567]}}}}},98:{l:{111:{l:{120:{l:{59:{c:[10697]}}}}}}},100:{l:{76:{l:{59:{c:[9557]}}},82:{l:{59:{c:[9554]}}},108:{l:{59:{c:[9488]}}},114:{l:{59:{c:[9484]}}}}},104:{l:{59:{c:[9472]},68:{l:{59:{c:[9573]}}},85:{l:{59:{c:[9576]}}},100:{l:{59:{c:[9516]}}},117:{l:{59:{c:[9524]}}}}},109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8863]}}}}}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8862]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8864]}}}}}}}}}}},117:{l:{76:{l:{59:{c:[9563]}}},82:{l:{59:{c:[9560]}}},108:{l:{59:{c:[9496]}}},114:{l:{59:{c:[9492]}}}}},118:{l:{59:{c:[9474]},72:{l:{59:{c:[9578]}}},76:{l:{59:{c:[9569]}}},82:{l:{59:{c:[9566]}}},104:{l:{59:{c:[9532]}}},108:{l:{59:{c:[9508]}}},114:{l:{59:{c:[9500]}}}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8245]}}}}}}}}}}},114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[728]}}}}}}},118:{l:{98:{l:{97:{l:{114:{l:{59:{c:[166]}},c:[166]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119991]}}}}},101:{l:{109:{l:{105:{l:{59:{c:[8271]}}}}}}},105:{l:{109:{l:{59:{c:[8765]},101:{l:{59:{c:[8909]}}}}}}},111:{l:{108:{l:{59:{c:[92]},98:{l:{59:{c:[10693]}}},104:{l:{115:{l:{117:{l:{98:{l:{59:{c:[10184]}}}}}}}}}}}}}}},117:{l:{108:{l:{108:{l:{59:{c:[8226]},101:{l:{116:{l:{59:{c:[8226]}}}}}}}}},109:{l:{112:{l:{59:{c:[8782]},69:{l:{59:{c:[10926]}}},101:{l:{59:{c:[8783]},113:{l:{59:{c:[8783]}}}}}}}}}}}}},99:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[263]}}}}}}}}},112:{l:{59:{c:[8745]},97:{l:{110:{l:{100:{l:{59:{c:[10820]}}}}}}},98:{l:{114:{l:{99:{l:{117:{l:{112:{l:{59:{c:[10825]}}}}}}}}}}},99:{l:{97:{l:{112:{l:{59:{c:[10827]}}}}},117:{l:{112:{l:{59:{c:[10823]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[10816]}}}}}}},115:{l:{59:{c:[8745,65024]}}}}},114:{l:{101:{l:{116:{l:{59:{c:[8257]}}}}},111:{l:{110:{l:{59:{c:[711]}}}}}}}}},99:{l:{97:{l:{112:{l:{115:{l:{59:{c:[10829]}}}}},114:{l:{111:{l:{110:{l:{59:{c:[269]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[231]}},c:[231]}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[265]}}}}}}},117:{l:{112:{l:{115:{l:{59:{c:[10828]},115:{l:{109:{l:{59:{c:[10832]}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[267]}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[184]}},c:[184]}}}}},109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10674]}}}}}}}}}}},110:{l:{116:{l:{59:{c:[162]},101:{l:{114:{l:{100:{l:{111:{l:{116:{l:{59:{c:[183]}}}}}}}}}}}},c:[162]}}}}},102:{l:{114:{l:{59:{c:[120096]}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1095]}}}}},101:{l:{99:{l:{107:{l:{59:{c:[10003]},109:{l:{97:{l:{114:{l:{107:{l:{59:{c:[10003]}}}}}}}}}}}}}}},105:{l:{59:{c:[967]}}}}},105:{l:{114:{l:{59:{c:[9675]},69:{l:{59:{c:[10691]}}},99:{l:{59:{c:[710]},101:{l:{113:{l:{59:{c:[8791]}}}}},108:{l:{101:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8634]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8635]}}}}}}}}}}}}}}}}}}}}},100:{l:{82:{l:{59:{c:[174]}}},83:{l:{59:{c:[9416]}}},97:{l:{115:{l:{116:{l:{59:{c:[8859]}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[8858]}}}}}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8861]}}}}}}}}}}}}}}}}},101:{l:{59:{c:[8791]}}},102:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10768]}}}}}}}}}}},109:{l:{105:{l:{100:{l:{59:{c:[10991]}}}}}}},115:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10690]}}}}}}}}}}}}},108:{l:{117:{l:{98:{l:{115:{l:{59:{c:[9827]},117:{l:{105:{l:{116:{l:{59:{c:[9827]}}}}}}}}}}}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[58]},101:{l:{59:{c:[8788]},113:{l:{59:{c:[8788]}}}}}}}}}}},109:{l:{109:{l:{97:{l:{59:{c:[44]},116:{l:{59:{c:[64]}}}}}}},112:{l:{59:{c:[8705]},102:{l:{110:{l:{59:{c:[8728]}}}}},108:{l:{101:{l:{109:{l:{101:{l:{110:{l:{116:{l:{59:{c:[8705]}}}}}}}}},120:{l:{101:{l:{115:{l:{59:{c:[8450]}}}}}}}}}}}}}}},110:{l:{103:{l:{59:{c:[8773]},100:{l:{111:{l:{116:{l:{59:{c:[10861]}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8750]}}}}}}}}},112:{l:{102:{l:{59:{c:[120148]}}},114:{l:{111:{l:{100:{l:{59:{c:[8720]}}}}}}},121:{l:{59:{c:[169]},115:{l:{114:{l:{59:{c:[8471]}}}}}},c:[169]}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8629]}}}}}}},111:{l:{115:{l:{115:{l:{59:{c:[10007]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119992]}}}}},117:{l:{98:{l:{59:{c:[10959]},101:{l:{59:{c:[10961]}}}}},112:{l:{59:{c:[10960]},101:{l:{59:{c:[10962]}}}}}}}}},116:{l:{100:{l:{111:{l:{116:{l:{59:{c:[8943]}}}}}}}}},117:{l:{100:{l:{97:{l:{114:{l:{114:{l:{108:{l:{59:{c:[10552]}}},114:{l:{59:{c:[10549]}}}}}}}}}}},101:{l:{112:{l:{114:{l:{59:{c:[8926]}}}}},115:{l:{99:{l:{59:{c:[8927]}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8630]},112:{l:{59:{c:[10557]}}}}}}}}}}},112:{l:{59:{c:[8746]},98:{l:{114:{l:{99:{l:{97:{l:{112:{l:{59:{c:[10824]}}}}}}}}}}},99:{l:{97:{l:{112:{l:{59:{c:[10822]}}}}},117:{l:{112:{l:{59:{c:[10826]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8845]}}}}}}},111:{l:{114:{l:{59:{c:[10821]}}}}},115:{l:{59:{c:[8746,65024]}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8631]},109:{l:{59:{c:[10556]}}}}}}}}},108:{l:{121:{l:{101:{l:{113:{l:{112:{l:{114:{l:{101:{l:{99:{l:{59:{c:[8926]}}}}}}}}},115:{l:{117:{l:{99:{l:{99:{l:{59:{c:[8927]}}}}}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8910]}}}}}}},119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8911]}}}}}}}}}}}}}}},114:{l:{101:{l:{110:{l:{59:{c:[164]}},c:[164]}}}}},118:{l:{101:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8630]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8631]}}}}}}}}}}}}}}}}}}}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8910]}}}}}}},119:{l:{101:{l:{100:{l:{59:{c:[8911]}}}}}}}}},119:{l:{99:{l:{111:{l:{110:{l:{105:{l:{110:{l:{116:{l:{59:{c:[8754]}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8753]}}}}}}}}},121:{l:{108:{l:{99:{l:{116:{l:{121:{l:{59:{c:[9005]}}}}}}}}}}}}},100:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8659]}}}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10597]}}}}}}},97:{l:{103:{l:{103:{l:{101:{l:{114:{l:{59:{c:[8224]}}}}}}}}},108:{l:{101:{l:{116:{l:{104:{l:{59:{c:[8504]}}}}}}}}},114:{l:{114:{l:{59:{c:[8595]}}}}},115:{l:{104:{l:{59:{c:[8208]},118:{l:{59:{c:[8867]}}}}}}}}},98:{l:{107:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10511]}}}}}}}}}}},108:{l:{97:{l:{99:{l:{59:{c:[733]}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[271]}}}}}}}}},121:{l:{59:{c:[1076]}}}}},100:{l:{59:{c:[8518]},97:{l:{103:{l:{103:{l:{101:{l:{114:{l:{59:{c:[8225]}}}}}}}}},114:{l:{114:{l:{59:{c:[8650]}}}}}}},111:{l:{116:{l:{115:{l:{101:{l:{113:{l:{59:{c:[10871]}}}}}}}}}}}}},101:{l:{103:{l:{59:{c:[176]}},c:[176]},108:{l:{116:{l:{97:{l:{59:{c:[948]}}}}}}},109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10673]}}}}}}}}}}}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10623]}}}}}}}}},114:{l:{59:{c:[120097]}}}}},104:{l:{97:{l:{114:{l:{108:{l:{59:{c:[8643]}}},114:{l:{59:{c:[8642]}}}}}}}}},105:{l:{97:{l:{109:{l:{59:{c:[8900]},111:{l:{110:{l:{100:{l:{59:{c:[8900]},115:{l:{117:{l:{105:{l:{116:{l:{59:{c:[9830]}}}}}}}}}}}}}}},115:{l:{59:{c:[9830]}}}}}}},101:{l:{59:{c:[168]}}},103:{l:{97:{l:{109:{l:{109:{l:{97:{l:{59:{c:[989]}}}}}}}}}}},115:{l:{105:{l:{110:{l:{59:{c:[8946]}}}}}}},118:{l:{59:{c:[247]},105:{l:{100:{l:{101:{l:{59:{c:[247]},111:{l:{110:{l:{116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8903]}}}}}}}}}}}}}}}},c:[247]}}}}},111:{l:{110:{l:{120:{l:{59:{c:[8903]}}}}}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1106]}}}}}}},108:{l:{99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8990]}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8973]}}}}}}}}}}},111:{l:{108:{l:{108:{l:{97:{l:{114:{l:{59:{c:[36]}}}}}}}}},112:{l:{102:{l:{59:{c:[120149]}}}}},116:{l:{59:{c:[729]},101:{l:{113:{l:{59:{c:[8784]},100:{l:{111:{l:{116:{l:{59:{c:[8785]}}}}}}}}}}},109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8760]}}}}}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8724]}}}}}}}}},115:{l:{113:{l:{117:{l:{97:{l:{114:{l:{101:{l:{59:{c:[8865]}}}}}}}}}}}}}}},117:{l:{98:{l:{108:{l:{101:{l:{98:{l:{97:{l:{114:{l:{119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8966]}}}}}}}}}}}}}}}}}}}}}}}}},119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8595]}}}}}}}}}}},100:{l:{111:{l:{119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8650]}}}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8643]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8642]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{98:{l:{107:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10512]}}}}}}}}}}}}},99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8991]}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8972]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119993]}}},121:{l:{59:{c:[1109]}}}}},111:{l:{108:{l:{59:{c:[10742]}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[273]}}}}}}}}}}},116:{l:{100:{l:{111:{l:{116:{l:{59:{c:[8945]}}}}}}},114:{l:{105:{l:{59:{c:[9663]},102:{l:{59:{c:[9662]}}}}}}}}},117:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8693]}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[10607]}}}}}}}}},119:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[10662]}}}}}}}}}}}}},122:{l:{99:{l:{121:{l:{59:{c:[1119]}}}}},105:{l:{103:{l:{114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10239]}}}}}}}}}}}}}}}}},101:{l:{68:{l:{68:{l:{111:{l:{116:{l:{59:{c:[10871]}}}}}}},111:{l:{116:{l:{59:{c:[8785]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[233]}},c:[233]}}}}}}},115:{l:{116:{l:{101:{l:{114:{l:{59:{c:[10862]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[283]}}}}}}}}},105:{l:{114:{l:{59:{c:[8790]},99:{l:{59:{c:[234]}},c:[234]}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[8789]}}}}}}}}},121:{l:{59:{c:[1101]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[279]}}}}}}},101:{l:{59:{c:[8519]}}},102:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8786]}}}}}}},114:{l:{59:{c:[120098]}}}}},103:{l:{59:{c:[10906]},114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[232]}},c:[232]}}}}}}},115:{l:{59:{c:[10902]},100:{l:{111:{l:{116:{l:{59:{c:[10904]}}}}}}}}}}},108:{l:{59:{c:[10905]},105:{l:{110:{l:{116:{l:{101:{l:{114:{l:{115:{l:{59:{c:[9191]}}}}}}}}}}}}},108:{l:{59:{c:[8467]}}},115:{l:{59:{c:[10901]},100:{l:{111:{l:{116:{l:{59:{c:[10903]}}}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[275]}}}}}}},112:{l:{116:{l:{121:{l:{59:{c:[8709]},115:{l:{101:{l:{116:{l:{59:{c:[8709]}}}}}}},118:{l:{59:{c:[8709]}}}}}}}}},115:{l:{112:{l:{49:{l:{51:{l:{59:{c:[8196]}}},52:{l:{59:{c:[8197]}}}}},59:{c:[8195]}}}}}}},110:{l:{103:{l:{59:{c:[331]}}},115:{l:{112:{l:{59:{c:[8194]}}}}}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[281]}}}}}}},112:{l:{102:{l:{59:{c:[120150]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[8917]},115:{l:{108:{l:{59:{c:[10723]}}}}}}}}},108:{l:{117:{l:{115:{l:{59:{c:[10865]}}}}}}},115:{l:{105:{l:{59:{c:[949]},108:{l:{111:{l:{110:{l:{59:{c:[949]}}}}}}},118:{l:{59:{c:[1013]}}}}}}}}},113:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[8790]}}}}}}},111:{l:{108:{l:{111:{l:{110:{l:{59:{c:[8789]}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8770]}}}}},108:{l:{97:{l:{110:{l:{116:{l:{103:{l:{116:{l:{114:{l:{59:{c:[10902]}}}}}}},108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10901]}}}}}}}}}}}}}}}}}}},117:{l:{97:{l:{108:{l:{115:{l:{59:{c:[61]}}}}}}},101:{l:{115:{l:{116:{l:{59:{c:[8799]}}}}}}},105:{l:{118:{l:{59:{c:[8801]},68:{l:{68:{l:{59:{c:[10872]}}}}}}}}}}},118:{l:{112:{l:{97:{l:{114:{l:{115:{l:{108:{l:{59:{c:[10725]}}}}}}}}}}}}}}},114:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8787]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10609]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8495]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8784]}}}}}}},105:{l:{109:{l:{59:{c:[8770]}}}}}}},116:{l:{97:{l:{59:{c:[951]}}},104:{l:{59:{c:[240]}},c:[240]}}},117:{l:{109:{l:{108:{l:{59:{c:[235]}},c:[235]}}},114:{l:{111:{l:{59:{c:[8364]}}}}}}},120:{l:{99:{l:{108:{l:{59:{c:[33]}}}}},105:{l:{115:{l:{116:{l:{59:{c:[8707]}}}}}}},112:{l:{101:{l:{99:{l:{116:{l:{97:{l:{116:{l:{105:{l:{111:{l:{110:{l:{59:{c:[8496]}}}}}}}}}}}}}}}}},111:{l:{110:{l:{101:{l:{110:{l:{116:{l:{105:{l:{97:{l:{108:{l:{101:{l:{59:{c:[8519]}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{97:{l:{108:{l:{108:{l:{105:{l:{110:{l:{103:{l:{100:{l:{111:{l:{116:{l:{115:{l:{101:{l:{113:{l:{59:{c:[8786]}}}}}}}}}}}}}}}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1092]}}}}},101:{l:{109:{l:{97:{l:{108:{l:{101:{l:{59:{c:[9792]}}}}}}}}}}},102:{l:{105:{l:{108:{l:{105:{l:{103:{l:{59:{c:[64259]}}}}}}}}},108:{l:{105:{l:{103:{l:{59:{c:[64256]}}}}},108:{l:{105:{l:{103:{l:{59:{c:[64260]}}}}}}}}},114:{l:{59:{c:[120099]}}}}},105:{l:{108:{l:{105:{l:{103:{l:{59:{c:[64257]}}}}}}}}},106:{l:{108:{l:{105:{l:{103:{l:{59:{c:[102,106]}}}}}}}}},108:{l:{97:{l:{116:{l:{59:{c:[9837]}}}}},108:{l:{105:{l:{103:{l:{59:{c:[64258]}}}}}}},116:{l:{110:{l:{115:{l:{59:{c:[9649]}}}}}}}}},110:{l:{111:{l:{102:{l:{59:{c:[402]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120151]}}}}},114:{l:{97:{l:{108:{l:{108:{l:{59:{c:[8704]}}}}}}},107:{l:{59:{c:[8916]},118:{l:{59:{c:[10969]}}}}}}}}},112:{l:{97:{l:{114:{l:{116:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10765]}}}}}}}}}}}}}}},114:{l:{97:{l:{99:{l:{49:{l:{50:{l:{59:{c:[189]}},c:[189]},51:{l:{59:{c:[8531]}}},52:{l:{59:{c:[188]}},c:[188]},53:{l:{59:{c:[8533]}}},54:{l:{59:{c:[8537]}}},56:{l:{59:{c:[8539]}}}}},50:{l:{51:{l:{59:{c:[8532]}}},53:{l:{59:{c:[8534]}}}}},51:{l:{52:{l:{59:{c:[190]}},c:[190]},53:{l:{59:{c:[8535]}}},56:{l:{59:{c:[8540]}}}}},52:{l:{53:{l:{59:{c:[8536]}}}}},53:{l:{54:{l:{59:{c:[8538]}}},56:{l:{59:{c:[8541]}}}}},55:{l:{56:{l:{59:{c:[8542]}}}}}}},115:{l:{108:{l:{59:{c:[8260]}}}}}}},111:{l:{119:{l:{110:{l:{59:{c:[8994]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119995]}}}}}}}}},103:{l:{69:{l:{59:{c:[8807]},108:{l:{59:{c:[10892]}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[501]}}}}}}}}},109:{l:{109:{l:{97:{l:{59:{c:[947]},100:{l:{59:{c:[989]}}}}}}}}},112:{l:{59:{c:[10886]}}}}},98:{l:{114:{l:{101:{l:{118:{l:{101:{l:{59:{c:[287]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[285]}}}}}}},121:{l:{59:{c:[1075]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[289]}}}}}}},101:{l:{59:{c:[8805]},108:{l:{59:{c:[8923]}}},113:{l:{59:{c:[8805]},113:{l:{59:{c:[8807]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10878]}}}}}}}}}}}}},115:{l:{59:{c:[10878]},99:{l:{99:{l:{59:{c:[10921]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[10880]},111:{l:{59:{c:[10882]},108:{l:{59:{c:[10884]}}}}}}}}}}},108:{l:{59:{c:[8923,65024]},101:{l:{115:{l:{59:{c:[10900]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120100]}}}}},103:{l:{59:{c:[8811]},103:{l:{59:{c:[8921]}}}}},105:{l:{109:{l:{101:{l:{108:{l:{59:{c:[8503]}}}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1107]}}}}}}},108:{l:{59:{c:[8823]},69:{l:{59:{c:[10898]}}},97:{l:{59:{c:[10917]}}},106:{l:{59:{c:[10916]}}}}},110:{l:{69:{l:{59:{c:[8809]}}},97:{l:{112:{l:{59:{c:[10890]},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10890]}}}}}}}}}}}}},101:{l:{59:{c:[10888]},113:{l:{59:{c:[10888]},113:{l:{59:{c:[8809]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8935]}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120152]}}}}}}},114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[96]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8458]}}}}},105:{l:{109:{l:{59:{c:[8819]},101:{l:{59:{c:[10894]}}},108:{l:{59:{c:[10896]}}}}}}}}},116:{l:{59:{c:[62]},99:{l:{99:{l:{59:{c:[10919]}}},105:{l:{114:{l:{59:{c:[10874]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8919]}}}}}}},108:{l:{80:{l:{97:{l:{114:{l:{59:{c:[10645]}}}}}}}}},113:{l:{117:{l:{101:{l:{115:{l:{116:{l:{59:{c:[10876]}}}}}}}}}}},114:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10886]}}}}}}}}}}},114:{l:{114:{l:{59:{c:[10616]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8919]}}}}}}},101:{l:{113:{l:{108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8923]}}}}}}}}},113:{l:{108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[10892]}}}}}}}}}}}}}}},108:{l:{101:{l:{115:{l:{115:{l:{59:{c:[8823]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8819]}}}}}}}}}},c:[62]},118:{l:{101:{l:{114:{l:{116:{l:{110:{l:{101:{l:{113:{l:{113:{l:{59:{c:[8809,65024]}}}}}}}}}}}}}}},110:{l:{69:{l:{59:{c:[8809,65024]}}}}}}}}},104:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8660]}}}}}}},97:{l:{105:{l:{114:{l:{115:{l:{112:{l:{59:{c:[8202]}}}}}}}}},108:{l:{102:{l:{59:{c:[189]}}}}},109:{l:{105:{l:{108:{l:{116:{l:{59:{c:[8459]}}}}}}}}},114:{l:{100:{l:{99:{l:{121:{l:{59:{c:[1098]}}}}}}},114:{l:{59:{c:[8596]},99:{l:{105:{l:{114:{l:{59:{c:[10568]}}}}}}},119:{l:{59:{c:[8621]}}}}}}}}},98:{l:{97:{l:{114:{l:{59:{c:[8463]}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[293]}}}}}}}}},101:{l:{97:{l:{114:{l:{116:{l:{115:{l:{59:{c:[9829]},117:{l:{105:{l:{116:{l:{59:{c:[9829]}}}}}}}}}}}}}}},108:{l:{108:{l:{105:{l:{112:{l:{59:{c:[8230]}}}}}}}}},114:{l:{99:{l:{111:{l:{110:{l:{59:{c:[8889]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120101]}}}}},107:{l:{115:{l:{101:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10533]}}}}}}}}}}},119:{l:{97:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10534]}}}}}}}}}}}}}}},111:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8703]}}}}}}},109:{l:{116:{l:{104:{l:{116:{l:{59:{c:[8763]}}}}}}}}},111:{l:{107:{l:{108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8617]}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8618]}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[120153]}}}}},114:{l:{98:{l:{97:{l:{114:{l:{59:{c:[8213]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119997]}}}}},108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8463]}}}}}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[295]}}}}}}}}}}},121:{l:{98:{l:{117:{l:{108:{l:{108:{l:{59:{c:[8259]}}}}}}}}},112:{l:{104:{l:{101:{l:{110:{l:{59:{c:[8208]}}}}}}}}}}}}},105:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[237]}},c:[237]}}}}}}}}},99:{l:{59:{c:[8291]},105:{l:{114:{l:{99:{l:{59:{c:[238]}},c:[238]}}}}},121:{l:{59:{c:[1080]}}}}},101:{l:{99:{l:{121:{l:{59:{c:[1077]}}}}},120:{l:{99:{l:{108:{l:{59:{c:[161]}},c:[161]}}}}}}},102:{l:{102:{l:{59:{c:[8660]}}},114:{l:{59:{c:[120102]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[236]}},c:[236]}}}}}}}}},105:{l:{59:{c:[8520]},105:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10764]}}}}}}},110:{l:{116:{l:{59:{c:[8749]}}}}}}},110:{l:{102:{l:{105:{l:{110:{l:{59:{c:[10716]}}}}}}}}},111:{l:{116:{l:{97:{l:{59:{c:[8489]}}}}}}}}},106:{l:{108:{l:{105:{l:{103:{l:{59:{c:[307]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[299]}}}}},103:{l:{101:{l:{59:{c:[8465]}}},108:{l:{105:{l:{110:{l:{101:{l:{59:{c:[8464]}}}}}}}}},112:{l:{97:{l:{114:{l:{116:{l:{59:{c:[8465]}}}}}}}}}}},116:{l:{104:{l:{59:{c:[305]}}}}}}},111:{l:{102:{l:{59:{c:[8887]}}}}},112:{l:{101:{l:{100:{l:{59:{c:[437]}}}}}}}}},110:{l:{59:{c:[8712]},99:{l:{97:{l:{114:{l:{101:{l:{59:{c:[8453]}}}}}}}}},102:{l:{105:{l:{110:{l:{59:{c:[8734]},116:{l:{105:{l:{101:{l:{59:{c:[10717]}}}}}}}}}}}}},111:{l:{100:{l:{111:{l:{116:{l:{59:{c:[305]}}}}}}}}},116:{l:{59:{c:[8747]},99:{l:{97:{l:{108:{l:{59:{c:[8890]}}}}}}},101:{l:{103:{l:{101:{l:{114:{l:{115:{l:{59:{c:[8484]}}}}}}}}},114:{l:{99:{l:{97:{l:{108:{l:{59:{c:[8890]}}}}}}}}}}},108:{l:{97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10775]}}}}}}}}}}},112:{l:{114:{l:{111:{l:{100:{l:{59:{c:[10812]}}}}}}}}}}}}},111:{l:{99:{l:{121:{l:{59:{c:[1105]}}}}},103:{l:{111:{l:{110:{l:{59:{c:[303]}}}}}}},112:{l:{102:{l:{59:{c:[120154]}}}}},116:{l:{97:{l:{59:{c:[953]}}}}}}},112:{l:{114:{l:{111:{l:{100:{l:{59:{c:[10812]}}}}}}}}},113:{l:{117:{l:{101:{l:{115:{l:{116:{l:{59:{c:[191]}},c:[191]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119998]}}}}},105:{l:{110:{l:{59:{c:[8712]},69:{l:{59:{c:[8953]}}},100:{l:{111:{l:{116:{l:{59:{c:[8949]}}}}}}},115:{l:{59:{c:[8948]},118:{l:{59:{c:[8947]}}}}},118:{l:{59:{c:[8712]}}}}}}}}},116:{l:{59:{c:[8290]},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[297]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1110]}}}}}}},109:{l:{108:{l:{59:{c:[239]}},c:[239]}}}}}}},106:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[309]}}}}}}},121:{l:{59:{c:[1081]}}}}},102:{l:{114:{l:{59:{c:[120103]}}}}},109:{l:{97:{l:{116:{l:{104:{l:{59:{c:[567]}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120155]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[119999]}}}}},101:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1112]}}}}}}}}}}},117:{l:{107:{l:{99:{l:{121:{l:{59:{c:[1108]}}}}}}}}}}},107:{l:{97:{l:{112:{l:{112:{l:{97:{l:{59:{c:[954]},118:{l:{59:{c:[1008]}}}}}}}}}}},99:{l:{101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[311]}}}}}}}}},121:{l:{59:{c:[1082]}}}}},102:{l:{114:{l:{59:{c:[120104]}}}}},103:{l:{114:{l:{101:{l:{101:{l:{110:{l:{59:{c:[312]}}}}}}}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1093]}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1116]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120156]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120000]}}}}}}}}},108:{l:{65:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8666]}}}}}}},114:{l:{114:{l:{59:{c:[8656]}}}}},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[10523]}}}}}}}}}}},66:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10510]}}}}}}}}},69:{l:{59:{c:[8806]},103:{l:{59:{c:[10891]}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10594]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[314]}}}}}}}}},101:{l:{109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10676]}}}}}}}}}}}}},103:{l:{114:{l:{97:{l:{110:{l:{59:{c:[8466]}}}}}}}}},109:{l:{98:{l:{100:{l:{97:{l:{59:{c:[955]}}}}}}}}},110:{l:{103:{l:{59:{c:[10216]},100:{l:{59:{c:[10641]}}},108:{l:{101:{l:{59:{c:[10216]}}}}}}}}},112:{l:{59:{c:[10885]}}},113:{l:{117:{l:{111:{l:{59:{c:[171]}},c:[171]}}}}},114:{l:{114:{l:{59:{c:[8592]},98:{l:{59:{c:[8676]},102:{l:{115:{l:{59:{c:[10527]}}}}}}},102:{l:{115:{l:{59:{c:[10525]}}}}},104:{l:{107:{l:{59:{c:[8617]}}}}},108:{l:{112:{l:{59:{c:[8619]}}}}},112:{l:{108:{l:{59:{c:[10553]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[10611]}}}}}}},116:{l:{108:{l:{59:{c:[8610]}}}}}}}}},116:{l:{59:{c:[10923]},97:{l:{105:{l:{108:{l:{59:{c:[10521]}}}}}}},101:{l:{59:{c:[10925]},115:{l:{59:{c:[10925,65024]}}}}}}}}},98:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10508]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10098]}}}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[123]}}},107:{l:{59:{c:[91]}}}}}}},107:{l:{101:{l:{59:{c:[10635]}}},115:{l:{108:{l:{100:{l:{59:{c:[10639]}}},117:{l:{59:{c:[10637]}}}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[318]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[316]}}}}}}},105:{l:{108:{l:{59:{c:[8968]}}}}}}},117:{l:{98:{l:{59:{c:[123]}}}}},121:{l:{59:{c:[1083]}}}}},100:{l:{99:{l:{97:{l:{59:{c:[10550]}}}}},113:{l:{117:{l:{111:{l:{59:{c:[8220]},114:{l:{59:{c:[8222]}}}}}}}}},114:{l:{100:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10599]}}}}}}}}},117:{l:{115:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10571]}}}}}}}}}}}}},115:{l:{104:{l:{59:{c:[8626]}}}}}}},101:{l:{59:{c:[8804]},102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8592]},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[8610]}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[8637]}}}}}}}}},117:{l:{112:{l:{59:{c:[8636]}}}}}}}}}}}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8647]}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8596]},115:{l:{59:{c:[8646]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{115:{l:{59:{c:[8651]}}}}}}}}}}}}}}}}},115:{l:{113:{l:{117:{l:{105:{l:{103:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8621]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},116:{l:{104:{l:{114:{l:{101:{l:{101:{l:{116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8907]}}}}}}}}}}}}}}}}}}}}}}}}},103:{l:{59:{c:[8922]}}},113:{l:{59:{c:[8804]},113:{l:{59:{c:[8806]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10877]}}}}}}}}}}}}},115:{l:{59:{c:[10877]},99:{l:{99:{l:{59:{c:[10920]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[10879]},111:{l:{59:{c:[10881]},114:{l:{59:{c:[10883]}}}}}}}}}}},103:{l:{59:{c:[8922,65024]},101:{l:{115:{l:{59:{c:[10899]}}}}}}},115:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10885]}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8918]}}}}}}},101:{l:{113:{l:{103:{l:{116:{l:{114:{l:{59:{c:[8922]}}}}}}},113:{l:{103:{l:{116:{l:{114:{l:{59:{c:[10891]}}}}}}}}}}}}},103:{l:{116:{l:{114:{l:{59:{c:[8822]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8818]}}}}}}}}}}}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10620]}}}}}}}}},108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8970]}}}}}}}}},114:{l:{59:{c:[120105]}}}}},103:{l:{59:{c:[8822]},69:{l:{59:{c:[10897]}}}}},104:{l:{97:{l:{114:{l:{100:{l:{59:{c:[8637]}}},117:{l:{59:{c:[8636]},108:{l:{59:{c:[10602]}}}}}}}}},98:{l:{108:{l:{107:{l:{59:{c:[9604]}}}}}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1113]}}}}}}},108:{l:{59:{c:[8810]},97:{l:{114:{l:{114:{l:{59:{c:[8647]}}}}}}},99:{l:{111:{l:{114:{l:{110:{l:{101:{l:{114:{l:{59:{c:[8990]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{100:{l:{59:{c:[10603]}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9722]}}}}}}}}},109:{l:{105:{l:{100:{l:{111:{l:{116:{l:{59:{c:[320]}}}}}}}}},111:{l:{117:{l:{115:{l:{116:{l:{59:{c:[9136]},97:{l:{99:{l:{104:{l:{101:{l:{59:{c:[9136]}}}}}}}}}}}}}}}}}}},110:{l:{69:{l:{59:{c:[8808]}}},97:{l:{112:{l:{59:{c:[10889]},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10889]}}}}}}}}}}}}},101:{l:{59:{c:[10887]},113:{l:{59:{c:[10887]},113:{l:{59:{c:[8808]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8934]}}}}}}}}},111:{l:{97:{l:{110:{l:{103:{l:{59:{c:[10220]}}}}},114:{l:{114:{l:{59:{c:[8701]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10214]}}}}}}},110:{l:{103:{l:{108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10229]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10231]}}}}}}}}}}}}}}}}}}}}}}}}}}}}},109:{l:{97:{l:{112:{l:{115:{l:{116:{l:{111:{l:{59:{c:[10236]}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[10230]}}}}}}}}}}}}}}}}}}}}}}}}},111:{l:{112:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8619]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8620]}}}}}}}}}}}}}}}}}}}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10629]}}}}},102:{l:{59:{c:[120157]}}},108:{l:{117:{l:{115:{l:{59:{c:[10797]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[10804]}}}}}}}}}}},119:{l:{97:{l:{115:{l:{116:{l:{59:{c:[8727]}}}}}}},98:{l:{97:{l:{114:{l:{59:{c:[95]}}}}}}}}},122:{l:{59:{c:[9674]},101:{l:{110:{l:{103:{l:{101:{l:{59:{c:[9674]}}}}}}}}},102:{l:{59:{c:[10731]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[40]},108:{l:{116:{l:{59:{c:[10643]}}}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8646]}}}}}}},99:{l:{111:{l:{114:{l:{110:{l:{101:{l:{114:{l:{59:{c:[8991]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[8651]},100:{l:{59:{c:[10605]}}}}}}}}},109:{l:{59:{c:[8206]}}},116:{l:{114:{l:{105:{l:{59:{c:[8895]}}}}}}}}},115:{l:{97:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8249]}}}}}}}}},99:{l:{114:{l:{59:{c:[120001]}}}}},104:{l:{59:{c:[8624]}}},105:{l:{109:{l:{59:{c:[8818]},101:{l:{59:{c:[10893]}}},103:{l:{59:{c:[10895]}}}}}}},113:{l:{98:{l:{59:{c:[91]}}},117:{l:{111:{l:{59:{c:[8216]},114:{l:{59:{c:[8218]}}}}}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[322]}}}}}}}}}}},116:{l:{59:{c:[60]},99:{l:{99:{l:{59:{c:[10918]}}},105:{l:{114:{l:{59:{c:[10873]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8918]}}}}}}},104:{l:{114:{l:{101:{l:{101:{l:{59:{c:[8907]}}}}}}}}},105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8905]}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10614]}}}}}}}}},113:{l:{117:{l:{101:{l:{115:{l:{116:{l:{59:{c:[10875]}}}}}}}}}}},114:{l:{80:{l:{97:{l:{114:{l:{59:{c:[10646]}}}}}}},105:{l:{59:{c:[9667]},101:{l:{59:{c:[8884]}}},102:{l:{59:{c:[9666]}}}}}}}},c:[60]},117:{l:{114:{l:{100:{l:{115:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10570]}}}}}}}}}}},117:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10598]}}}}}}}}}}}}},118:{l:{101:{l:{114:{l:{116:{l:{110:{l:{101:{l:{113:{l:{113:{l:{59:{c:[8808,65024]}}}}}}}}}}}}}}},110:{l:{69:{l:{59:{c:[8808,65024]}}}}}}}}},109:{l:{68:{l:{68:{l:{111:{l:{116:{l:{59:{c:[8762]}}}}}}}}},97:{l:{99:{l:{114:{l:{59:{c:[175]}},c:[175]}}},108:{l:{101:{l:{59:{c:[9794]}}},116:{l:{59:{c:[10016]},101:{l:{115:{l:{101:{l:{59:{c:[10016]}}}}}}}}}}},112:{l:{59:{c:[8614]},115:{l:{116:{l:{111:{l:{59:{c:[8614]},100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[8615]}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8612]}}}}}}}}},117:{l:{112:{l:{59:{c:[8613]}}}}}}}}}}}}},114:{l:{107:{l:{101:{l:{114:{l:{59:{c:[9646]}}}}}}}}}}},99:{l:{111:{l:{109:{l:{109:{l:{97:{l:{59:{c:[10793]}}}}}}}}},121:{l:{59:{c:[1084]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8212]}}}}}}}}},101:{l:{97:{l:{115:{l:{117:{l:{114:{l:{101:{l:{100:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[8737]}}}}}}}}}}}}}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120106]}}}}},104:{l:{111:{l:{59:{c:[8487]}}}}},105:{l:{99:{l:{114:{l:{111:{l:{59:{c:[181]}},c:[181]}}}}},100:{l:{59:{c:[8739]},97:{l:{115:{l:{116:{l:{59:{c:[42]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[10992]}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[183]}},c:[183]}}}}}}},110:{l:{117:{l:{115:{l:{59:{c:[8722]},98:{l:{59:{c:[8863]}}},100:{l:{59:{c:[8760]},117:{l:{59:{c:[10794]}}}}}}}}}}}}},108:{l:{99:{l:{112:{l:{59:{c:[10971]}}}}},100:{l:{114:{l:{59:{c:[8230]}}}}}}},110:{l:{112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[8723]}}}}}}}}}}},111:{l:{100:{l:{101:{l:{108:{l:{115:{l:{59:{c:[8871]}}}}}}}}},112:{l:{102:{l:{59:{c:[120158]}}}}}}},112:{l:{59:{c:[8723]}}},115:{l:{99:{l:{114:{l:{59:{c:[120002]}}}}},116:{l:{112:{l:{111:{l:{115:{l:{59:{c:[8766]}}}}}}}}}}},117:{l:{59:{c:[956]},108:{l:{116:{l:{105:{l:{109:{l:{97:{l:{112:{l:{59:{c:[8888]}}}}}}}}}}}}},109:{l:{97:{l:{112:{l:{59:{c:[8888]}}}}}}}}}}},110:{l:{71:{l:{103:{l:{59:{c:[8921,824]}}},116:{l:{59:{c:[8811,8402]},118:{l:{59:{c:[8811,824]}}}}}}},76:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8653]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8654]}}}}}}}}}}}}}}}}}}}}}}}}}}},108:{l:{59:{c:[8920,824]}}},116:{l:{59:{c:[8810,8402]},118:{l:{59:{c:[8810,824]}}}}}}},82:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8655]}}}}}}}}}}}}}}}}}}}}},86:{l:{68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8879]}}}}}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8878]}}}}}}}}}}},97:{l:{98:{l:{108:{l:{97:{l:{59:{c:[8711]}}}}}}},99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[324]}}}}}}}}},110:{l:{103:{l:{59:{c:[8736,8402]}}}}},112:{l:{59:{c:[8777]},69:{l:{59:{c:[10864,824]}}},105:{l:{100:{l:{59:{c:[8779,824]}}}}},111:{l:{115:{l:{59:{c:[329]}}}}},112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[8777]}}}}}}}}}}},116:{l:{117:{l:{114:{l:{59:{c:[9838]},97:{l:{108:{l:{59:{c:[9838]},115:{l:{59:{c:[8469]}}}}}}}}}}}}}}},98:{l:{115:{l:{112:{l:{59:{c:[160]}},c:[160]}}},117:{l:{109:{l:{112:{l:{59:{c:[8782,824]},101:{l:{59:{c:[8783,824]}}}}}}}}}}},99:{l:{97:{l:{112:{l:{59:{c:[10819]}}},114:{l:{111:{l:{110:{l:{59:{c:[328]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[326]}}}}}}}}},111:{l:{110:{l:{103:{l:{59:{c:[8775]},100:{l:{111:{l:{116:{l:{59:{c:[10861,824]}}}}}}}}}}}}},117:{l:{112:{l:{59:{c:[10818]}}}}},121:{l:{59:{c:[1085]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8211]}}}}}}}}},101:{l:{59:{c:[8800]},65:{l:{114:{l:{114:{l:{59:{c:[8663]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10532]}}}}},114:{l:{59:{c:[8599]},111:{l:{119:{l:{59:{c:[8599]}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8784,824]}}}}}}},113:{l:{117:{l:{105:{l:{118:{l:{59:{c:[8802]}}}}}}}}},115:{l:{101:{l:{97:{l:{114:{l:{59:{c:[10536]}}}}}}},105:{l:{109:{l:{59:{c:[8770,824]}}}}}}},120:{l:{105:{l:{115:{l:{116:{l:{59:{c:[8708]},115:{l:{59:{c:[8708]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120107]}}}}},103:{l:{69:{l:{59:{c:[8807,824]}}},101:{l:{59:{c:[8817]},113:{l:{59:{c:[8817]},113:{l:{59:{c:[8807,824]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10878,824]}}}}}}}}}}}}},115:{l:{59:{c:[10878,824]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8821]}}}}}}},116:{l:{59:{c:[8815]},114:{l:{59:{c:[8815]}}}}}}},104:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8654]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[8622]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10994]}}}}}}}}},105:{l:{59:{c:[8715]},115:{l:{59:{c:[8956]},100:{l:{59:{c:[8954]}}}}},118:{l:{59:{c:[8715]}}}}},106:{l:{99:{l:{121:{l:{59:{c:[1114]}}}}}}},108:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8653]}}}}}}},69:{l:{59:{c:[8806,824]}}},97:{l:{114:{l:{114:{l:{59:{c:[8602]}}}}}}},100:{l:{114:{l:{59:{c:[8229]}}}}},101:{l:{59:{c:[8816]},102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8602]}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8622]}}}}}}}}}}}}}}}}}}}}}}}}},113:{l:{59:{c:[8816]},113:{l:{59:{c:[8806,824]}}},115:{l:{108:{l:{97:{l:{110:{l:{116:{l:{59:{c:[10877,824]}}}}}}}}}}}}},115:{l:{59:{c:[10877,824]},115:{l:{59:{c:[8814]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8820]}}}}}}},116:{l:{59:{c:[8814]},114:{l:{105:{l:{59:{c:[8938]},101:{l:{59:{c:[8940]}}}}}}}}}}},109:{l:{105:{l:{100:{l:{59:{c:[8740]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120159]}}}}},116:{l:{59:{c:[172]},105:{l:{110:{l:{59:{c:[8713]},69:{l:{59:{c:[8953,824]}}},100:{l:{111:{l:{116:{l:{59:{c:[8949,824]}}}}}}},118:{l:{97:{l:{59:{c:[8713]}}},98:{l:{59:{c:[8951]}}},99:{l:{59:{c:[8950]}}}}}}}}},110:{l:{105:{l:{59:{c:[8716]},118:{l:{97:{l:{59:{c:[8716]}}},98:{l:{59:{c:[8958]}}},99:{l:{59:{c:[8957]}}}}}}}}}},c:[172]}}},112:{l:{97:{l:{114:{l:{59:{c:[8742]},97:{l:{108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8742]}}}}}}}}}}},115:{l:{108:{l:{59:{c:[11005,8421]}}}}},116:{l:{59:{c:[8706,824]}}}}}}},111:{l:{108:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10772]}}}}}}}}}}},114:{l:{59:{c:[8832]},99:{l:{117:{l:{101:{l:{59:{c:[8928]}}}}}}},101:{l:{59:{c:[10927,824]},99:{l:{59:{c:[8832]},101:{l:{113:{l:{59:{c:[10927,824]}}}}}}}}}}}}},114:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8655]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[8603]},99:{l:{59:{c:[10547,824]}}},119:{l:{59:{c:[8605,824]}}}}}}}}},105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8603]}}}}}}}}}}}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[8939]},101:{l:{59:{c:[8941]}}}}}}}}}}},115:{l:{99:{l:{59:{c:[8833]},99:{l:{117:{l:{101:{l:{59:{c:[8929]}}}}}}},101:{l:{59:{c:[10928,824]}}},114:{l:{59:{c:[120003]}}}}},104:{l:{111:{l:{114:{l:{116:{l:{109:{l:{105:{l:{100:{l:{59:{c:[8740]}}}}}}},112:{l:{97:{l:{114:{l:{97:{l:{108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8742]}}}}}}}}}}}}}}}}}}}}}}}}},105:{l:{109:{l:{59:{c:[8769]},101:{l:{59:{c:[8772]},113:{l:{59:{c:[8772]}}}}}}}}},109:{l:{105:{l:{100:{l:{59:{c:[8740]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[8742]}}}}}}},113:{l:{115:{l:{117:{l:{98:{l:{101:{l:{59:{c:[8930]}}}}},112:{l:{101:{l:{59:{c:[8931]}}}}}}}}}}},117:{l:{98:{l:{59:{c:[8836]},69:{l:{59:{c:[10949,824]}}},101:{l:{59:{c:[8840]}}},115:{l:{101:{l:{116:{l:{59:{c:[8834,8402]},101:{l:{113:{l:{59:{c:[8840]},113:{l:{59:{c:[10949,824]}}}}}}}}}}}}}}},99:{l:{99:{l:{59:{c:[8833]},101:{l:{113:{l:{59:{c:[10928,824]}}}}}}}}},112:{l:{59:{c:[8837]},69:{l:{59:{c:[10950,824]}}},101:{l:{59:{c:[8841]}}},115:{l:{101:{l:{116:{l:{59:{c:[8835,8402]},101:{l:{113:{l:{59:{c:[8841]},113:{l:{59:{c:[10950,824]}}}}}}}}}}}}}}}}}}},116:{l:{103:{l:{108:{l:{59:{c:[8825]}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[241]}},c:[241]}}}}}}},108:{l:{103:{l:{59:{c:[8824]}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8938]},101:{l:{113:{l:{59:{c:[8940]}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8939]},101:{l:{113:{l:{59:{c:[8941]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},117:{l:{59:{c:[957]},109:{l:{59:{c:[35]},101:{l:{114:{l:{111:{l:{59:{c:[8470]}}}}}}},115:{l:{112:{l:{59:{c:[8199]}}}}}}}}},118:{l:{68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8877]}}}}}}}}},72:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10500]}}}}}}}}},97:{l:{112:{l:{59:{c:[8781,8402]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8876]}}}}}}}}},103:{l:{101:{l:{59:{c:[8805,8402]}}},116:{l:{59:{c:[62,8402]}}}}},105:{l:{110:{l:{102:{l:{105:{l:{110:{l:{59:{c:[10718]}}}}}}}}}}},108:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10498]}}}}}}},101:{l:{59:{c:[8804,8402]}}},116:{l:{59:{c:[60,8402]},114:{l:{105:{l:{101:{l:{59:{c:[8884,8402]}}}}}}}}}}},114:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10499]}}}}}}},116:{l:{114:{l:{105:{l:{101:{l:{59:{c:[8885,8402]}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8764,8402]}}}}}}}}},119:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8662]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10531]}}}}},114:{l:{59:{c:[8598]},111:{l:{119:{l:{59:{c:[8598]}}}}}}}}}}},110:{l:{101:{l:{97:{l:{114:{l:{59:{c:[10535]}}}}}}}}}}}}},111:{l:{83:{l:{59:{c:[9416]}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[243]}},c:[243]}}}}}}},115:{l:{116:{l:{59:{c:[8859]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[8858]},99:{l:{59:{c:[244]}},c:[244]}}}}},121:{l:{59:{c:[1086]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8861]}}}}}}},98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[337]}}}}}}}}},105:{l:{118:{l:{59:{c:[10808]}}}}},111:{l:{116:{l:{59:{c:[8857]}}}}},115:{l:{111:{l:{108:{l:{100:{l:{59:{c:[10684]}}}}}}}}}}},101:{l:{108:{l:{105:{l:{103:{l:{59:{c:[339]}}}}}}}}},102:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10687]}}}}}}},114:{l:{59:{c:[120108]}}}}},103:{l:{111:{l:{110:{l:{59:{c:[731]}}}}},114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[242]}},c:[242]}}}}}}},116:{l:{59:{c:[10689]}}}}},104:{l:{98:{l:{97:{l:{114:{l:{59:{c:[10677]}}}}}}},109:{l:{59:{c:[937]}}}}},105:{l:{110:{l:{116:{l:{59:{c:[8750]}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8634]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[10686]}}}}},114:{l:{111:{l:{115:{l:{115:{l:{59:{c:[10683]}}}}}}}}}}},105:{l:{110:{l:{101:{l:{59:{c:[8254]}}}}}}},116:{l:{59:{c:[10688]}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[333]}}}}}}},101:{l:{103:{l:{97:{l:{59:{c:[969]}}}}}}},105:{l:{99:{l:{114:{l:{111:{l:{110:{l:{59:{c:[959]}}}}}}}}},100:{l:{59:{c:[10678]}}},110:{l:{117:{l:{115:{l:{59:{c:[8854]}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120160]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10679]}}}}},101:{l:{114:{l:{112:{l:{59:{c:[10681]}}}}}}},108:{l:{117:{l:{115:{l:{59:{c:[8853]}}}}}}}}},114:{l:{59:{c:[8744]},97:{l:{114:{l:{114:{l:{59:{c:[8635]}}}}}}},100:{l:{59:{c:[10845]},101:{l:{114:{l:{59:{c:[8500]},111:{l:{102:{l:{59:{c:[8500]}}}}}}}}},102:{l:{59:{c:[170]}},c:[170]},109:{l:{59:{c:[186]}},c:[186]}}},105:{l:{103:{l:{111:{l:{102:{l:{59:{c:[8886]}}}}}}}}},111:{l:{114:{l:{59:{c:[10838]}}}}},115:{l:{108:{l:{111:{l:{112:{l:{101:{l:{59:{c:[10839]}}}}}}}}}}},118:{l:{59:{c:[10843]}}}}},115:{l:{99:{l:{114:{l:{59:{c:[8500]}}}}},108:{l:{97:{l:{115:{l:{104:{l:{59:{c:[248]}},c:[248]}}}}}}},111:{l:{108:{l:{59:{c:[8856]}}}}}}},116:{l:{105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[245]}},c:[245]}}}}},109:{l:{101:{l:{115:{l:{59:{c:[8855]},97:{l:{115:{l:{59:{c:[10806]}}}}}}}}}}}}}}},117:{l:{109:{l:{108:{l:{59:{c:[246]}},c:[246]}}}}},118:{l:{98:{l:{97:{l:{114:{l:{59:{c:[9021]}}}}}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[8741]},97:{l:{59:{c:[182]},108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8741]}}}}}}}}}},c:[182]},115:{l:{105:{l:{109:{l:{59:{c:[10995]}}}}},108:{l:{59:{c:[11005]}}}}},116:{l:{59:{c:[8706]}}}}}}},99:{l:{121:{l:{59:{c:[1087]}}}}},101:{l:{114:{l:{99:{l:{110:{l:{116:{l:{59:{c:[37]}}}}}}},105:{l:{111:{l:{100:{l:{59:{c:[46]}}}}}}},109:{l:{105:{l:{108:{l:{59:{c:[8240]}}}}}}},112:{l:{59:{c:[8869]}}},116:{l:{101:{l:{110:{l:{107:{l:{59:{c:[8241]}}}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120109]}}}}},104:{l:{105:{l:{59:{c:[966]},118:{l:{59:{c:[981]}}}}},109:{l:{109:{l:{97:{l:{116:{l:{59:{c:[8499]}}}}}}}}},111:{l:{110:{l:{101:{l:{59:{c:[9742]}}}}}}}}},105:{l:{59:{c:[960]},116:{l:{99:{l:{104:{l:{102:{l:{111:{l:{114:{l:{107:{l:{59:{c:[8916]}}}}}}}}}}}}}}},118:{l:{59:{c:[982]}}}}},108:{l:{97:{l:{110:{l:{99:{l:{107:{l:{59:{c:[8463]},104:{l:{59:{c:[8462]}}}}}}},107:{l:{118:{l:{59:{c:[8463]}}}}}}}}},117:{l:{115:{l:{59:{c:[43]},97:{l:{99:{l:{105:{l:{114:{l:{59:{c:[10787]}}}}}}}}},98:{l:{59:{c:[8862]}}},99:{l:{105:{l:{114:{l:{59:{c:[10786]}}}}}}},100:{l:{111:{l:{59:{c:[8724]}}},117:{l:{59:{c:[10789]}}}}},101:{l:{59:{c:[10866]}}},109:{l:{110:{l:{59:{c:[177]}},c:[177]}}},115:{l:{105:{l:{109:{l:{59:{c:[10790]}}}}}}},116:{l:{119:{l:{111:{l:{59:{c:[10791]}}}}}}}}}}}}},109:{l:{59:{c:[177]}}},111:{l:{105:{l:{110:{l:{116:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10773]}}}}}}}}}}}}},112:{l:{102:{l:{59:{c:[120161]}}}}},117:{l:{110:{l:{100:{l:{59:{c:[163]}},c:[163]}}}}}}},114:{l:{59:{c:[8826]},69:{l:{59:{c:[10931]}}},97:{l:{112:{l:{59:{c:[10935]}}}}},99:{l:{117:{l:{101:{l:{59:{c:[8828]}}}}}}},101:{l:{59:{c:[10927]},99:{l:{59:{c:[8826]},97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10935]}}}}}}}}}}}}},99:{l:{117:{l:{114:{l:{108:{l:{121:{l:{101:{l:{113:{l:{59:{c:[8828]}}}}}}}}}}}}}}},101:{l:{113:{l:{59:{c:[10927]}}}}},110:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10937]}}}}}}}}}}}}},101:{l:{113:{l:{113:{l:{59:{c:[10933]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8936]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8830]}}}}}}}}}}},105:{l:{109:{l:{101:{l:{59:{c:[8242]},115:{l:{59:{c:[8473]}}}}}}}}},110:{l:{69:{l:{59:{c:[10933]}}},97:{l:{112:{l:{59:{c:[10937]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8936]}}}}}}}}},111:{l:{100:{l:{59:{c:[8719]}}},102:{l:{97:{l:{108:{l:{97:{l:{114:{l:{59:{c:[9006]}}}}}}}}},108:{l:{105:{l:{110:{l:{101:{l:{59:{c:[8978]}}}}}}}}},115:{l:{117:{l:{114:{l:{102:{l:{59:{c:[8979]}}}}}}}}}}},112:{l:{59:{c:[8733]},116:{l:{111:{l:{59:{c:[8733]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8830]}}}}}}},117:{l:{114:{l:{101:{l:{108:{l:{59:{c:[8880]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120005]}}}}},105:{l:{59:{c:[968]}}}}},117:{l:{110:{l:{99:{l:{115:{l:{112:{l:{59:{c:[8200]}}}}}}}}}}}}},113:{l:{102:{l:{114:{l:{59:{c:[120110]}}}}},105:{l:{110:{l:{116:{l:{59:{c:[10764]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120162]}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8279]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120006]}}}}}}},117:{l:{97:{l:{116:{l:{101:{l:{114:{l:{110:{l:{105:{l:{111:{l:{110:{l:{115:{l:{59:{c:[8461]}}}}}}}}}}}}}}},105:{l:{110:{l:{116:{l:{59:{c:[10774]}}}}}}}}}}},101:{l:{115:{l:{116:{l:{59:{c:[63]},101:{l:{113:{l:{59:{c:[8799]}}}}}}}}}}},111:{l:{116:{l:{59:{c:[34]}},c:[34]}}}}}}},114:{l:{65:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8667]}}}}}}},114:{l:{114:{l:{59:{c:[8658]}}}}},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[10524]}}}}}}}}}}},66:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10511]}}}}}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10596]}}}}}}},97:{l:{99:{l:{101:{l:{59:{c:[8765,817]}}},117:{l:{116:{l:{101:{l:{59:{c:[341]}}}}}}}}},100:{l:{105:{l:{99:{l:{59:{c:[8730]}}}}}}},101:{l:{109:{l:{112:{l:{116:{l:{121:{l:{118:{l:{59:{c:[10675]}}}}}}}}}}}}},110:{l:{103:{l:{59:{c:[10217]},100:{l:{59:{c:[10642]}}},101:{l:{59:{c:[10661]}}},108:{l:{101:{l:{59:{c:[10217]}}}}}}}}},113:{l:{117:{l:{111:{l:{59:{c:[187]}},c:[187]}}}}},114:{l:{114:{l:{59:{c:[8594]},97:{l:{112:{l:{59:{c:[10613]}}}}},98:{l:{59:{c:[8677]},102:{l:{115:{l:{59:{c:[10528]}}}}}}},99:{l:{59:{c:[10547]}}},102:{l:{115:{l:{59:{c:[10526]}}}}},104:{l:{107:{l:{59:{c:[8618]}}}}},108:{l:{112:{l:{59:{c:[8620]}}}}},112:{l:{108:{l:{59:{c:[10565]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[10612]}}}}}}},116:{l:{108:{l:{59:{c:[8611]}}}}},119:{l:{59:{c:[8605]}}}}}}},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[10522]}}}}}}},105:{l:{111:{l:{59:{c:[8758]},110:{l:{97:{l:{108:{l:{115:{l:{59:{c:[8474]}}}}}}}}}}}}}}}}},98:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10509]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10099]}}}}}}},114:{l:{97:{l:{99:{l:{101:{l:{59:{c:[125]}}},107:{l:{59:{c:[93]}}}}}}},107:{l:{101:{l:{59:{c:[10636]}}},115:{l:{108:{l:{100:{l:{59:{c:[10638]}}},117:{l:{59:{c:[10640]}}}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[345]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[343]}}}}}}},105:{l:{108:{l:{59:{c:[8969]}}}}}}},117:{l:{98:{l:{59:{c:[125]}}}}},121:{l:{59:{c:[1088]}}}}},100:{l:{99:{l:{97:{l:{59:{c:[10551]}}}}},108:{l:{100:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10601]}}}}}}}}}}},113:{l:{117:{l:{111:{l:{59:{c:[8221]},114:{l:{59:{c:[8221]}}}}}}}}},115:{l:{104:{l:{59:{c:[8627]}}}}}}},101:{l:{97:{l:{108:{l:{59:{c:[8476]},105:{l:{110:{l:{101:{l:{59:{c:[8475]}}}}}}},112:{l:{97:{l:{114:{l:{116:{l:{59:{c:[8476]}}}}}}}}},115:{l:{59:{c:[8477]}}}}}}},99:{l:{116:{l:{59:{c:[9645]}}}}},103:{l:{59:{c:[174]}},c:[174]}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10621]}}}}}}}}},108:{l:{111:{l:{111:{l:{114:{l:{59:{c:[8971]}}}}}}}}},114:{l:{59:{c:[120111]}}}}},104:{l:{97:{l:{114:{l:{100:{l:{59:{c:[8641]}}},117:{l:{59:{c:[8640]},108:{l:{59:{c:[10604]}}}}}}}}},111:{l:{59:{c:[961]},118:{l:{59:{c:[1009]}}}}}}},105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8594]},116:{l:{97:{l:{105:{l:{108:{l:{59:{c:[8611]}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[8641]}}}}}}}}},117:{l:{112:{l:{59:{c:[8640]}}}}}}}}}}}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8644]}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{115:{l:{59:{c:[8652]}}}}}}}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8649]}}}}}}}}}}}}}}}}}}}}}}},115:{l:{113:{l:{117:{l:{105:{l:{103:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8605]}}}}}}}}}}}}}}}}}}}}},116:{l:{104:{l:{114:{l:{101:{l:{101:{l:{116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8908]}}}}}}}}}}}}}}}}}}}}}}}}}}},110:{l:{103:{l:{59:{c:[730]}}}}},115:{l:{105:{l:{110:{l:{103:{l:{100:{l:{111:{l:{116:{l:{115:{l:{101:{l:{113:{l:{59:{c:[8787]}}}}}}}}}}}}}}}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8644]}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[8652]}}}}}}},109:{l:{59:{c:[8207]}}}}},109:{l:{111:{l:{117:{l:{115:{l:{116:{l:{59:{c:[9137]},97:{l:{99:{l:{104:{l:{101:{l:{59:{c:[9137]}}}}}}}}}}}}}}}}}}},110:{l:{109:{l:{105:{l:{100:{l:{59:{c:[10990]}}}}}}}}},111:{l:{97:{l:{110:{l:{103:{l:{59:{c:[10221]}}}}},114:{l:{114:{l:{59:{c:[8702]}}}}}}},98:{l:{114:{l:{107:{l:{59:{c:[10215]}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[10630]}}}}},102:{l:{59:{c:[120163]}}},108:{l:{117:{l:{115:{l:{59:{c:[10798]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[10805]}}}}}}}}}}}}},112:{l:{97:{l:{114:{l:{59:{c:[41]},103:{l:{116:{l:{59:{c:[10644]}}}}}}}}},112:{l:{111:{l:{108:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10770]}}}}}}}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8649]}}}}}}}}},115:{l:{97:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8250]}}}}}}}}},99:{l:{114:{l:{59:{c:[120007]}}}}},104:{l:{59:{c:[8625]}}},113:{l:{98:{l:{59:{c:[93]}}},117:{l:{111:{l:{59:{c:[8217]},114:{l:{59:{c:[8217]}}}}}}}}}}},116:{l:{104:{l:{114:{l:{101:{l:{101:{l:{59:{c:[8908]}}}}}}}}},105:{l:{109:{l:{101:{l:{115:{l:{59:{c:[8906]}}}}}}}}},114:{l:{105:{l:{59:{c:[9657]},101:{l:{59:{c:[8885]}}},102:{l:{59:{c:[9656]}}},108:{l:{116:{l:{114:{l:{105:{l:{59:{c:[10702]}}}}}}}}}}}}}}},117:{l:{108:{l:{117:{l:{104:{l:{97:{l:{114:{l:{59:{c:[10600]}}}}}}}}}}}}},120:{l:{59:{c:[8478]}}}}},115:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[347]}}}}}}}}}}},98:{l:{113:{l:{117:{l:{111:{l:{59:{c:[8218]}}}}}}}}},99:{l:{59:{c:[8827]},69:{l:{59:{c:[10932]}}},97:{l:{112:{l:{59:{c:[10936]}}},114:{l:{111:{l:{110:{l:{59:{c:[353]}}}}}}}}},99:{l:{117:{l:{101:{l:{59:{c:[8829]}}}}}}},101:{l:{59:{c:[10928]},100:{l:{105:{l:{108:{l:{59:{c:[351]}}}}}}}}},105:{l:{114:{l:{99:{l:{59:{c:[349]}}}}}}},110:{l:{69:{l:{59:{c:[10934]}}},97:{l:{112:{l:{59:{c:[10938]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8937]}}}}}}}}},112:{l:{111:{l:{108:{l:{105:{l:{110:{l:{116:{l:{59:{c:[10771]}}}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8831]}}}}}}},121:{l:{59:{c:[1089]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8901]},98:{l:{59:{c:[8865]}}},101:{l:{59:{c:[10854]}}}}}}}}},101:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8664]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10533]}}}}},114:{l:{59:{c:[8600]},111:{l:{119:{l:{59:{c:[8600]}}}}}}}}}}},99:{l:{116:{l:{59:{c:[167]}},c:[167]}}},109:{l:{105:{l:{59:{c:[59]}}}}},115:{l:{119:{l:{97:{l:{114:{l:{59:{c:[10537]}}}}}}}}},116:{l:{109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8726]}}}}}}}}},110:{l:{59:{c:[8726]}}}}}}},120:{l:{116:{l:{59:{c:[10038]}}}}}}},102:{l:{114:{l:{59:{c:[120112]},111:{l:{119:{l:{110:{l:{59:{c:[8994]}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{59:{c:[9839]}}}}}}},99:{l:{104:{l:{99:{l:{121:{l:{59:{c:[1097]}}}}}}},121:{l:{59:{c:[1096]}}}}},111:{l:{114:{l:{116:{l:{109:{l:{105:{l:{100:{l:{59:{c:[8739]}}}}}}},112:{l:{97:{l:{114:{l:{97:{l:{108:{l:{108:{l:{101:{l:{108:{l:{59:{c:[8741]}}}}}}}}}}}}}}}}}}}}}}},121:{l:{59:{c:[173]}},c:[173]}}},105:{l:{103:{l:{109:{l:{97:{l:{59:{c:[963]},102:{l:{59:{c:[962]}}},118:{l:{59:{c:[962]}}}}}}}}},109:{l:{59:{c:[8764]},100:{l:{111:{l:{116:{l:{59:{c:[10858]}}}}}}},101:{l:{59:{c:[8771]},113:{l:{59:{c:[8771]}}}}},103:{l:{59:{c:[10910]},69:{l:{59:{c:[10912]}}}}},108:{l:{59:{c:[10909]},69:{l:{59:{c:[10911]}}}}},110:{l:{101:{l:{59:{c:[8774]}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10788]}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10610]}}}}}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8592]}}}}}}}}},109:{l:{97:{l:{108:{l:{108:{l:{115:{l:{101:{l:{116:{l:{109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[8726]}}}}}}}}}}}}}}}}}}}}},115:{l:{104:{l:{112:{l:{59:{c:[10803]}}}}}}}}},101:{l:{112:{l:{97:{l:{114:{l:{115:{l:{108:{l:{59:{c:[10724]}}}}}}}}}}}}},105:{l:{100:{l:{59:{c:[8739]}}},108:{l:{101:{l:{59:{c:[8995]}}}}}}},116:{l:{59:{c:[10922]},101:{l:{59:{c:[10924]},115:{l:{59:{c:[10924,65024]}}}}}}}}},111:{l:{102:{l:{116:{l:{99:{l:{121:{l:{59:{c:[1100]}}}}}}}}},108:{l:{59:{c:[47]},98:{l:{59:{c:[10692]},97:{l:{114:{l:{59:{c:[9023]}}}}}}}}},112:{l:{102:{l:{59:{c:[120164]}}}}}}},112:{l:{97:{l:{100:{l:{101:{l:{115:{l:{59:{c:[9824]},117:{l:{105:{l:{116:{l:{59:{c:[9824]}}}}}}}}}}}}},114:{l:{59:{c:[8741]}}}}}}},113:{l:{99:{l:{97:{l:{112:{l:{59:{c:[8851]},115:{l:{59:{c:[8851,65024]}}}}}}},117:{l:{112:{l:{59:{c:[8852]},115:{l:{59:{c:[8852,65024]}}}}}}}}},115:{l:{117:{l:{98:{l:{59:{c:[8847]},101:{l:{59:{c:[8849]}}},115:{l:{101:{l:{116:{l:{59:{c:[8847]},101:{l:{113:{l:{59:{c:[8849]}}}}}}}}}}}}},112:{l:{59:{c:[8848]},101:{l:{59:{c:[8850]}}},115:{l:{101:{l:{116:{l:{59:{c:[8848]},101:{l:{113:{l:{59:{c:[8850]}}}}}}}}}}}}}}}}},117:{l:{59:{c:[9633]},97:{l:{114:{l:{101:{l:{59:{c:[9633]}}},102:{l:{59:{c:[9642]}}}}}}},102:{l:{59:{c:[9642]}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8594]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120008]}}}}},101:{l:{116:{l:{109:{l:{110:{l:{59:{c:[8726]}}}}}}}}},109:{l:{105:{l:{108:{l:{101:{l:{59:{c:[8995]}}}}}}}}},116:{l:{97:{l:{114:{l:{102:{l:{59:{c:[8902]}}}}}}}}}}},116:{l:{97:{l:{114:{l:{59:{c:[9734]},102:{l:{59:{c:[9733]}}}}}}},114:{l:{97:{l:{105:{l:{103:{l:{104:{l:{116:{l:{101:{l:{112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[1013]}}}}}}}}}}}}}}},112:{l:{104:{l:{105:{l:{59:{c:[981]}}}}}}}}}}}}}}}}},110:{l:{115:{l:{59:{c:[175]}}}}}}}}},117:{l:{98:{l:{59:{c:[8834]},69:{l:{59:{c:[10949]}}},100:{l:{111:{l:{116:{l:{59:{c:[10941]}}}}}}},101:{l:{59:{c:[8838]},100:{l:{111:{l:{116:{l:{59:{c:[10947]}}}}}}}}},109:{l:{117:{l:{108:{l:{116:{l:{59:{c:[10945]}}}}}}}}},110:{l:{69:{l:{59:{c:[10955]}}},101:{l:{59:{c:[8842]}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10943]}}}}}}}}},114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10617]}}}}}}}}},115:{l:{101:{l:{116:{l:{59:{c:[8834]},101:{l:{113:{l:{59:{c:[8838]},113:{l:{59:{c:[10949]}}}}}}},110:{l:{101:{l:{113:{l:{59:{c:[8842]},113:{l:{59:{c:[10955]}}}}}}}}}}}}},105:{l:{109:{l:{59:{c:[10951]}}}}},117:{l:{98:{l:{59:{c:[10965]}}},112:{l:{59:{c:[10963]}}}}}}}}},99:{l:{99:{l:{59:{c:[8827]},97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10936]}}}}}}}}}}}}},99:{l:{117:{l:{114:{l:{108:{l:{121:{l:{101:{l:{113:{l:{59:{c:[8829]}}}}}}}}}}}}}}},101:{l:{113:{l:{59:{c:[10928]}}}}},110:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[10938]}}}}}}}}}}}}},101:{l:{113:{l:{113:{l:{59:{c:[10934]}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8937]}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8831]}}}}}}}}}}},109:{l:{59:{c:[8721]}}},110:{l:{103:{l:{59:{c:[9834]}}}}},112:{l:{49:{l:{59:{c:[185]}},c:[185]},50:{l:{59:{c:[178]}},c:[178]},51:{l:{59:{c:[179]}},c:[179]},59:{c:[8835]},69:{l:{59:{c:[10950]}}},100:{l:{111:{l:{116:{l:{59:{c:[10942]}}}}},115:{l:{117:{l:{98:{l:{59:{c:[10968]}}}}}}}}},101:{l:{59:{c:[8839]},100:{l:{111:{l:{116:{l:{59:{c:[10948]}}}}}}}}},104:{l:{115:{l:{111:{l:{108:{l:{59:{c:[10185]}}}}},117:{l:{98:{l:{59:{c:[10967]}}}}}}}}},108:{l:{97:{l:{114:{l:{114:{l:{59:{c:[10619]}}}}}}}}},109:{l:{117:{l:{108:{l:{116:{l:{59:{c:[10946]}}}}}}}}},110:{l:{69:{l:{59:{c:[10956]}}},101:{l:{59:{c:[8843]}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10944]}}}}}}}}},115:{l:{101:{l:{116:{l:{59:{c:[8835]},101:{l:{113:{l:{59:{c:[8839]},113:{l:{59:{c:[10950]}}}}}}},110:{l:{101:{l:{113:{l:{59:{c:[8843]},113:{l:{59:{c:[10956]}}}}}}}}}}}}},105:{l:{109:{l:{59:{c:[10952]}}}}},117:{l:{98:{l:{59:{c:[10964]}}},112:{l:{59:{c:[10966]}}}}}}}}}}},119:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8665]}}}}}}},97:{l:{114:{l:{104:{l:{107:{l:{59:{c:[10534]}}}}},114:{l:{59:{c:[8601]},111:{l:{119:{l:{59:{c:[8601]}}}}}}}}}}},110:{l:{119:{l:{97:{l:{114:{l:{59:{c:[10538]}}}}}}}}}}},122:{l:{108:{l:{105:{l:{103:{l:{59:{c:[223]}},c:[223]}}}}}}}}},116:{l:{97:{l:{114:{l:{103:{l:{101:{l:{116:{l:{59:{c:[8982]}}}}}}}}},117:{l:{59:{c:[964]}}}}},98:{l:{114:{l:{107:{l:{59:{c:[9140]}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[357]}}}}}}}}},101:{l:{100:{l:{105:{l:{108:{l:{59:{c:[355]}}}}}}}}},121:{l:{59:{c:[1090]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[8411]}}}}}}},101:{l:{108:{l:{114:{l:{101:{l:{99:{l:{59:{c:[8981]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120113]}}}}},104:{l:{101:{l:{114:{l:{101:{l:{52:{l:{59:{c:[8756]}}},102:{l:{111:{l:{114:{l:{101:{l:{59:{c:[8756]}}}}}}}}}}}}},116:{l:{97:{l:{59:{c:[952]},115:{l:{121:{l:{109:{l:{59:{c:[977]}}}}}}},118:{l:{59:{c:[977]}}}}}}}}},105:{l:{99:{l:{107:{l:{97:{l:{112:{l:{112:{l:{114:{l:{111:{l:{120:{l:{59:{c:[8776]}}}}}}}}}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8764]}}}}}}}}}}},110:{l:{115:{l:{112:{l:{59:{c:[8201]}}}}}}}}},107:{l:{97:{l:{112:{l:{59:{c:[8776]}}}}},115:{l:{105:{l:{109:{l:{59:{c:[8764]}}}}}}}}},111:{l:{114:{l:{110:{l:{59:{c:[254]}},c:[254]}}}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[732]}}}}}}},109:{l:{101:{l:{115:{l:{59:{c:[215]},98:{l:{59:{c:[8864]},97:{l:{114:{l:{59:{c:[10801]}}}}}}},100:{l:{59:{c:[10800]}}}},c:[215]}}}}},110:{l:{116:{l:{59:{c:[8749]}}}}}}},111:{l:{101:{l:{97:{l:{59:{c:[10536]}}}}},112:{l:{59:{c:[8868]},98:{l:{111:{l:{116:{l:{59:{c:[9014]}}}}}}},99:{l:{105:{l:{114:{l:{59:{c:[10993]}}}}}}},102:{l:{59:{c:[120165]},111:{l:{114:{l:{107:{l:{59:{c:[10970]}}}}}}}}}}},115:{l:{97:{l:{59:{c:[10537]}}}}}}},112:{l:{114:{l:{105:{l:{109:{l:{101:{l:{59:{c:[8244]}}}}}}}}}}},114:{l:{97:{l:{100:{l:{101:{l:{59:{c:[8482]}}}}}}},105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[9653]},100:{l:{111:{l:{119:{l:{110:{l:{59:{c:[9663]}}}}}}}}},108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[9667]},101:{l:{113:{l:{59:{c:[8884]}}}}}}}}}}}}},113:{l:{59:{c:[8796]}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[9657]},101:{l:{113:{l:{59:{c:[8885]}}}}}}}}}}}}}}}}}}}}}}}}},100:{l:{111:{l:{116:{l:{59:{c:[9708]}}}}}}},101:{l:{59:{c:[8796]}}},109:{l:{105:{l:{110:{l:{117:{l:{115:{l:{59:{c:[10810]}}}}}}}}}}},112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10809]}}}}}}}}},115:{l:{98:{l:{59:{c:[10701]}}}}},116:{l:{105:{l:{109:{l:{101:{l:{59:{c:[10811]}}}}}}}}}}},112:{l:{101:{l:{122:{l:{105:{l:{117:{l:{109:{l:{59:{c:[9186]}}}}}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120009]}}},121:{l:{59:{c:[1094]}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1115]}}}}}}},116:{l:{114:{l:{111:{l:{107:{l:{59:{c:[359]}}}}}}}}}}},119:{l:{105:{l:{120:{l:{116:{l:{59:{c:[8812]}}}}}}},111:{l:{104:{l:{101:{l:{97:{l:{100:{l:{108:{l:{101:{l:{102:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8606]}}}}}}}}}}}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8608]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},117:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8657]}}}}}}},72:{l:{97:{l:{114:{l:{59:{c:[10595]}}}}}}},97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[250]}},c:[250]}}}}}}},114:{l:{114:{l:{59:{c:[8593]}}}}}}},98:{l:{114:{l:{99:{l:{121:{l:{59:{c:[1118]}}}}},101:{l:{118:{l:{101:{l:{59:{c:[365]}}}}}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[251]}},c:[251]}}}}},121:{l:{59:{c:[1091]}}}}},100:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8645]}}}}}}},98:{l:{108:{l:{97:{l:{99:{l:{59:{c:[369]}}}}}}}}},104:{l:{97:{l:{114:{l:{59:{c:[10606]}}}}}}}}},102:{l:{105:{l:{115:{l:{104:{l:{116:{l:{59:{c:[10622]}}}}}}}}},114:{l:{59:{c:[120114]}}}}},103:{l:{114:{l:{97:{l:{118:{l:{101:{l:{59:{c:[249]}},c:[249]}}}}}}}}},104:{l:{97:{l:{114:{l:{108:{l:{59:{c:[8639]}}},114:{l:{59:{c:[8638]}}}}}}},98:{l:{108:{l:{107:{l:{59:{c:[9600]}}}}}}}}},108:{l:{99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8988]},101:{l:{114:{l:{59:{c:[8988]}}}}}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8975]}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9720]}}}}}}}}},109:{l:{97:{l:{99:{l:{114:{l:{59:{c:[363]}}}}}}},108:{l:{59:{c:[168]}},c:[168]}}},111:{l:{103:{l:{111:{l:{110:{l:{59:{c:[371]}}}}}}},112:{l:{102:{l:{59:{c:[120166]}}}}}}},112:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8593]}}}}}}}}}}},100:{l:{111:{l:{119:{l:{110:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{59:{c:[8597]}}}}}}}}}}}}}}}}}}},104:{l:{97:{l:{114:{l:{112:{l:{111:{l:{111:{l:{110:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8639]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8638]}}}}}}}}}}}}}}}}}}}}}}}}},108:{l:{117:{l:{115:{l:{59:{c:[8846]}}}}}}},115:{l:{105:{l:{59:{c:[965]},104:{l:{59:{c:[978]}}},108:{l:{111:{l:{110:{l:{59:{c:[965]}}}}}}}}}}},117:{l:{112:{l:{97:{l:{114:{l:{114:{l:{111:{l:{119:{l:{115:{l:{59:{c:[8648]}}}}}}}}}}}}}}}}}}},114:{l:{99:{l:{111:{l:{114:{l:{110:{l:{59:{c:[8989]},101:{l:{114:{l:{59:{c:[8989]}}}}}}}}}}},114:{l:{111:{l:{112:{l:{59:{c:[8974]}}}}}}}}},105:{l:{110:{l:{103:{l:{59:{c:[367]}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9721]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120010]}}}}}}},116:{l:{100:{l:{111:{l:{116:{l:{59:{c:[8944]}}}}}}},105:{l:{108:{l:{100:{l:{101:{l:{59:{c:[361]}}}}}}}}},114:{l:{105:{l:{59:{c:[9653]},102:{l:{59:{c:[9652]}}}}}}}}},117:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8648]}}}}}}},109:{l:{108:{l:{59:{c:[252]}},c:[252]}}}}},119:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{59:{c:[10663]}}}}}}}}}}}}}}},118:{l:{65:{l:{114:{l:{114:{l:{59:{c:[8661]}}}}}}},66:{l:{97:{l:{114:{l:{59:{c:[10984]},118:{l:{59:{c:[10985]}}}}}}}}},68:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8872]}}}}}}}}},97:{l:{110:{l:{103:{l:{114:{l:{116:{l:{59:{c:[10652]}}}}}}}}},114:{l:{101:{l:{112:{l:{115:{l:{105:{l:{108:{l:{111:{l:{110:{l:{59:{c:[1013]}}}}}}}}}}}}}}},107:{l:{97:{l:{112:{l:{112:{l:{97:{l:{59:{c:[1008]}}}}}}}}}}},110:{l:{111:{l:{116:{l:{104:{l:{105:{l:{110:{l:{103:{l:{59:{c:[8709]}}}}}}}}}}}}}}},112:{l:{104:{l:{105:{l:{59:{c:[981]}}}}},105:{l:{59:{c:[982]}}},114:{l:{111:{l:{112:{l:{116:{l:{111:{l:{59:{c:[8733]}}}}}}}}}}}}},114:{l:{59:{c:[8597]},104:{l:{111:{l:{59:{c:[1009]}}}}}}},115:{l:{105:{l:{103:{l:{109:{l:{97:{l:{59:{c:[962]}}}}}}}}},117:{l:{98:{l:{115:{l:{101:{l:{116:{l:{110:{l:{101:{l:{113:{l:{59:{c:[8842,65024]},113:{l:{59:{c:[10955,65024]}}}}}}}}}}}}}}}}},112:{l:{115:{l:{101:{l:{116:{l:{110:{l:{101:{l:{113:{l:{59:{c:[8843,65024]},113:{l:{59:{c:[10956,65024]}}}}}}}}}}}}}}}}}}}}},116:{l:{104:{l:{101:{l:{116:{l:{97:{l:{59:{c:[977]}}}}}}}}},114:{l:{105:{l:{97:{l:{110:{l:{103:{l:{108:{l:{101:{l:{108:{l:{101:{l:{102:{l:{116:{l:{59:{c:[8882]}}}}}}}}},114:{l:{105:{l:{103:{l:{104:{l:{116:{l:{59:{c:[8883]}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},99:{l:{121:{l:{59:{c:[1074]}}}}},100:{l:{97:{l:{115:{l:{104:{l:{59:{c:[8866]}}}}}}}}},101:{l:{101:{l:{59:{c:[8744]},98:{l:{97:{l:{114:{l:{59:{c:[8891]}}}}}}},101:{l:{113:{l:{59:{c:[8794]}}}}}}},108:{l:{108:{l:{105:{l:{112:{l:{59:{c:[8942]}}}}}}}}},114:{l:{98:{l:{97:{l:{114:{l:{59:{c:[124]}}}}}}},116:{l:{59:{c:[124]}}}}}}},102:{l:{114:{l:{59:{c:[120115]}}}}},108:{l:{116:{l:{114:{l:{105:{l:{59:{c:[8882]}}}}}}}}},110:{l:{115:{l:{117:{l:{98:{l:{59:{c:[8834,8402]}}},112:{l:{59:{c:[8835,8402]}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120167]}}}}}}},112:{l:{114:{l:{111:{l:{112:{l:{59:{c:[8733]}}}}}}}}},114:{l:{116:{l:{114:{l:{105:{l:{59:{c:[8883]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120011]}}}}},117:{l:{98:{l:{110:{l:{69:{l:{59:{c:[10955,65024]}}},101:{l:{59:{c:[8842,65024]}}}}}}},112:{l:{110:{l:{69:{l:{59:{c:[10956,65024]}}},101:{l:{59:{c:[8843,65024]}}}}}}}}}}},122:{l:{105:{l:{103:{l:{122:{l:{97:{l:{103:{l:{59:{c:[10650]}}}}}}}}}}}}}}},119:{l:{99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[373]}}}}}}}}},101:{l:{100:{l:{98:{l:{97:{l:{114:{l:{59:{c:[10847]}}}}}}},103:{l:{101:{l:{59:{c:[8743]},113:{l:{59:{c:[8793]}}}}}}}}},105:{l:{101:{l:{114:{l:{112:{l:{59:{c:[8472]}}}}}}}}}}},102:{l:{114:{l:{59:{c:[120116]}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120168]}}}}}}},112:{l:{59:{c:[8472]}}},114:{l:{59:{c:[8768]},101:{l:{97:{l:{116:{l:{104:{l:{59:{c:[8768]}}}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120012]}}}}}}}}},120:{l:{99:{l:{97:{l:{112:{l:{59:{c:[8898]}}}}},105:{l:{114:{l:{99:{l:{59:{c:[9711]}}}}}}},117:{l:{112:{l:{59:{c:[8899]}}}}}}},100:{l:{116:{l:{114:{l:{105:{l:{59:{c:[9661]}}}}}}}}},102:{l:{114:{l:{59:{c:[120117]}}}}},104:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10234]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10231]}}}}}}}}},105:{l:{59:{c:[958]}}},108:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10232]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10229]}}}}}}}}},109:{l:{97:{l:{112:{l:{59:{c:[10236]}}}}}}},110:{l:{105:{l:{115:{l:{59:{c:[8955]}}}}}}},111:{l:{100:{l:{111:{l:{116:{l:{59:{c:[10752]}}}}}}},112:{l:{102:{l:{59:{c:[120169]}}},108:{l:{117:{l:{115:{l:{59:{c:[10753]}}}}}}}}},116:{l:{105:{l:{109:{l:{101:{l:{59:{c:[10754]}}}}}}}}}}},114:{l:{65:{l:{114:{l:{114:{l:{59:{c:[10233]}}}}}}},97:{l:{114:{l:{114:{l:{59:{c:[10230]}}}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120013]}}}}},113:{l:{99:{l:{117:{l:{112:{l:{59:{c:[10758]}}}}}}}}}}},117:{l:{112:{l:{108:{l:{117:{l:{115:{l:{59:{c:[10756]}}}}}}}}},116:{l:{114:{l:{105:{l:{59:{c:[9651]}}}}}}}}},118:{l:{101:{l:{101:{l:{59:{c:[8897]}}}}}}},119:{l:{101:{l:{100:{l:{103:{l:{101:{l:{59:{c:[8896]}}}}}}}}}}}}},121:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[253]}},c:[253]}}}}},121:{l:{59:{c:[1103]}}}}}}},99:{l:{105:{l:{114:{l:{99:{l:{59:{c:[375]}}}}}}},121:{l:{59:{c:[1099]}}}}},101:{l:{110:{l:{59:{c:[165]}},c:[165]}}},102:{l:{114:{l:{59:{c:[120118]}}}}},105:{l:{99:{l:{121:{l:{59:{c:[1111]}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120170]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120014]}}}}}}},117:{l:{99:{l:{121:{l:{59:{c:[1102]}}}}},109:{l:{108:{l:{59:{c:[255]}},c:[255]}}}}}}},122:{l:{97:{l:{99:{l:{117:{l:{116:{l:{101:{l:{59:{c:[378]}}}}}}}}}}},99:{l:{97:{l:{114:{l:{111:{l:{110:{l:{59:{c:[382]}}}}}}}}},121:{l:{59:{c:[1079]}}}}},100:{l:{111:{l:{116:{l:{59:{c:[380]}}}}}}},101:{l:{101:{l:{116:{l:{114:{l:{102:{l:{59:{c:[8488]}}}}}}}}},116:{l:{97:{l:{59:{c:[950]}}}}}}},102:{l:{114:{l:{59:{c:[120119]}}}}},104:{l:{99:{l:{121:{l:{59:{c:[1078]}}}}}}},105:{l:{103:{l:{114:{l:{97:{l:{114:{l:{114:{l:{59:{c:[8669]}}}}}}}}}}}}},111:{l:{112:{l:{102:{l:{59:{c:[120171]}}}}}}},115:{l:{99:{l:{114:{l:{59:{c:[120015]}}}}}}},119:{l:{106:{l:{59:{c:[8205]}}},110:{l:{106:{l:{59:{c:[8204]}}}}}}}}}};


/***/ },
/* 604 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var UNICODE = __webpack_require__(36);

	//Aliases
	var $ = UNICODE.CODE_POINTS;

	//Utils

	//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
	//this functions if they will be situated in another module due to context switch.
	//Always perform inlining check before modifying this functions ('node --trace-inlining').
	function isReservedCodePoint(cp) {
	    return cp >= 0xD800 && cp <= 0xDFFF || cp > 0x10FFFF;
	}

	function isSurrogatePair(cp1, cp2) {
	    return cp1 >= 0xD800 && cp1 <= 0xDBFF && cp2 >= 0xDC00 && cp2 <= 0xDFFF;
	}

	function getSurrogatePairCodePoint(cp1, cp2) {
	    return (cp1 - 0xD800) * 0x400 + 0x2400 + cp2;
	}

	//Preprocessor
	//NOTE: HTML input preprocessing
	//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
	var Preprocessor = module.exports = function (html) {
	    this.write(html);

	    //NOTE: one leading U+FEFF BYTE ORDER MARK character must be ignored if any are present in the input stream.
	    this.pos = this.html.charCodeAt(0) === $.BOM ? 0 : -1;

	    this.gapStack = [];
	    this.lastGapPos = -1;
	    this.skipNextNewLine = false;
	};

	Preprocessor.prototype.write = function (html) {
	    if (this.html) {
	        this.html = this.html.substring(0, this.pos + 1) +
	                    html +
	                    this.html.substring(this.pos + 1, this.html.length);

	    }
	    else
	        this.html = html;


	    this.lastCharPos = this.html.length - 1;
	};

	Preprocessor.prototype.advanceAndPeekCodePoint = function () {
	    this.pos++;

	    if (this.pos > this.lastCharPos)
	        return $.EOF;

	    var cp = this.html.charCodeAt(this.pos);

	    //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
	    //must be ignored.
	    if (this.skipNextNewLine && cp === $.LINE_FEED) {
	        this.skipNextNewLine = false;
	        this._addGap();
	        return this.advanceAndPeekCodePoint();
	    }

	    //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
	    if (cp === $.CARRIAGE_RETURN) {
	        this.skipNextNewLine = true;
	        return $.LINE_FEED;
	    }

	    this.skipNextNewLine = false;

	    //OPTIMIZATION: first perform check if the code point in the allowed range that covers most common
	    //HTML input (e.g. ASCII codes) to avoid performance-cost operations for high-range code points.
	    return cp >= 0xD800 ? this._processHighRangeCodePoint(cp) : cp;
	};

	Preprocessor.prototype._processHighRangeCodePoint = function (cp) {
	    //NOTE: try to peek a surrogate pair
	    if (this.pos !== this.lastCharPos) {
	        var nextCp = this.html.charCodeAt(this.pos + 1);

	        if (isSurrogatePair(cp, nextCp)) {
	            //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
	            this.pos++;
	            cp = getSurrogatePairCodePoint(cp, nextCp);

	            //NOTE: add gap that should be avoided during retreat
	            this._addGap();
	        }
	    }

	    if (isReservedCodePoint(cp))
	        cp = $.REPLACEMENT_CHARACTER;

	    return cp;
	};

	Preprocessor.prototype._addGap = function () {
	    this.gapStack.push(this.lastGapPos);
	    this.lastGapPos = this.pos;
	};

	Preprocessor.prototype.retreat = function () {
	    if (this.pos === this.lastGapPos) {
	        this.lastGapPos = this.gapStack.pop();
	        this.pos--;
	    }

	    this.pos--;
	};


/***/ },
/* 605 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var Doctype = __webpack_require__(52);

	//Conversion tables for DOM Level1 structure emulation
	var nodeTypes = {
	    element: 1,
	    text: 3,
	    cdata: 4,
	    comment: 8
	};

	var nodePropertyShorthands = {
	    tagName: 'name',
	    childNodes: 'children',
	    parentNode: 'parent',
	    previousSibling: 'prev',
	    nextSibling: 'next',
	    nodeValue: 'data'
	};

	//Node
	var Node = function (props) {
	    for (var key in props) {
	        if (props.hasOwnProperty(key))
	            this[key] = props[key];
	    }
	};

	Node.prototype = {
	    get firstChild() {
	        var children = this.children;
	        return children && children[0] || null;
	    },

	    get lastChild() {
	        var children = this.children;
	        return children && children[children.length - 1] || null;
	    },

	    get nodeType() {
	        return nodeTypes[this.type] || nodeTypes.element;
	    }
	};

	Object.keys(nodePropertyShorthands).forEach(function (key) {
	    var shorthand = nodePropertyShorthands[key];

	    Object.defineProperty(Node.prototype, key, {
	        get: function () {
	            return this[shorthand] || null;
	        },
	        set: function (val) {
	            this[shorthand] = val;
	            return val;
	        }
	    });
	});


	//Node construction
	exports.createDocument =
	exports.createDocumentFragment = function () {
	    return new Node({
	        type: 'root',
	        name: 'root',
	        parent: null,
	        prev: null,
	        next: null,
	        children: []
	    });
	};

	exports.createElement = function (tagName, namespaceURI, attrs) {
	    var attribs = {},
	        attribsNamespace = {},
	        attribsPrefix = {};

	    for (var i = 0; i < attrs.length; i++) {
	        var attrName = attrs[i].name;

	        attribs[attrName] = attrs[i].value;
	        attribsNamespace[attrName] = attrs[i].namespace;
	        attribsPrefix[attrName] = attrs[i].prefix;
	    }

	    return new Node({
	        type: tagName === 'script' || tagName === 'style' ? tagName : 'tag',
	        name: tagName,
	        namespace: namespaceURI,
	        attribs: attribs,
	        'x-attribsNamespace': attribsNamespace,
	        'x-attribsPrefix': attribsPrefix,
	        children: [],
	        parent: null,
	        prev: null,
	        next: null
	    });
	};

	exports.createCommentNode = function (data) {
	    return new Node({
	        type: 'comment',
	        data: data,
	        parent: null,
	        prev: null,
	        next: null
	    });
	};

	var createTextNode = function (value) {
	    return new Node({
	        type: 'text',
	        data: value,
	        parent: null,
	        prev: null,
	        next: null
	    });
	};


	//Tree mutation
	exports.setDocumentType = function (document, name, publicId, systemId) {
	    var data = Doctype.serializeContent(name, publicId, systemId),
	        doctypeNode = null;

	    for (var i = 0; i < document.children.length; i++) {
	        if (document.children[i].type === 'directive' && document.children[i].name === '!doctype') {
	            doctypeNode = document.children[i];
	            break;
	        }
	    }

	    if (doctypeNode) {
	        doctypeNode.data = data;
	        doctypeNode['x-name'] = name;
	        doctypeNode['x-publicId'] = publicId;
	        doctypeNode['x-systemId'] = systemId;
	    }

	    else {
	        appendChild(document, new Node({
	            type: 'directive',
	            name: '!doctype',
	            data: data,
	            'x-name': name,
	            'x-publicId': publicId,
	            'x-systemId': systemId
	        }));
	    }

	};

	exports.setQuirksMode = function (document) {
	    document.quirksMode = true;
	};

	exports.isQuirksMode = function (document) {
	    return document.quirksMode;
	};

	var appendChild = exports.appendChild = function (parentNode, newNode) {
	    var prev = parentNode.children[parentNode.children.length - 1];

	    if (prev) {
	        prev.next = newNode;
	        newNode.prev = prev;
	    }

	    parentNode.children.push(newNode);
	    newNode.parent = parentNode;
	};

	var insertBefore = exports.insertBefore = function (parentNode, newNode, referenceNode) {
	    var insertionIdx = parentNode.children.indexOf(referenceNode),
	        prev = referenceNode.prev;

	    if (prev) {
	        prev.next = newNode;
	        newNode.prev = prev;
	    }

	    referenceNode.prev = newNode;
	    newNode.next = referenceNode;

	    parentNode.children.splice(insertionIdx, 0, newNode);
	    newNode.parent = parentNode;
	};

	exports.detachNode = function (node) {
	    if (node.parent) {
	        var idx = node.parent.children.indexOf(node),
	            prev = node.prev,
	            next = node.next;

	        node.prev = null;
	        node.next = null;

	        if (prev)
	            prev.next = next;

	        if (next)
	            next.prev = prev;

	        node.parent.children.splice(idx, 1);
	        node.parent = null;
	    }
	};

	exports.insertText = function (parentNode, text) {
	    var lastChild = parentNode.children[parentNode.children.length - 1];

	    if (lastChild && lastChild.type === 'text')
	        lastChild.data += text;
	    else
	        appendChild(parentNode, createTextNode(text));
	};

	exports.insertTextBefore = function (parentNode, text, referenceNode) {
	    var prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];

	    if (prevNode && prevNode.type === 'text')
	        prevNode.data += text;
	    else
	        insertBefore(parentNode, createTextNode(text), referenceNode);
	};

	exports.adoptAttributes = function (recipientNode, attrs) {
	    for (var i = 0; i < attrs.length; i++) {
	        var attrName = attrs[i].name;

	        if (typeof recipientNode.attribs[attrName] === 'undefined') {
	            recipientNode.attribs[attrName] = attrs[i].value;
	            recipientNode['x-attribsNamespace'][attrName] = attrs[i].namespace;
	            recipientNode['x-attribsPrefix'][attrName] = attrs[i].prefix;
	        }
	    }
	};


	//Tree traversing
	exports.getFirstChild = function (node) {
	    return node.children[0];
	};

	exports.getChildNodes = function (node) {
	    return node.children;
	};

	exports.getParentNode = function (node) {
	    return node.parent;
	};

	exports.getAttrList = function (node) {
	    var attrList = [];

	    for (var name in node.attribs) {
	        if (node.attribs.hasOwnProperty(name)) {
	            attrList.push({
	                name: name,
	                value: node.attribs[name],
	                namespace: node['x-attribsNamespace'][name],
	                prefix: node['x-attribsPrefix'][name]
	            });
	        }
	    }

	    return attrList;
	};


	//Node data
	exports.getTagName = function (element) {
	    return element.name;
	};

	exports.getNamespaceURI = function (element) {
	    return element.namespace;
	};

	exports.getTextNodeContent = function (textNode) {
	    return textNode.data;
	};

	exports.getCommentNodeContent = function (commentNode) {
	    return commentNode.data;
	};

	exports.getDocumentTypeNodeName = function (doctypeNode) {
	    return doctypeNode['x-name'];
	};

	exports.getDocumentTypeNodePublicId = function (doctypeNode) {
	    return doctypeNode['x-publicId'];
	};

	exports.getDocumentTypeNodeSystemId = function (doctypeNode) {
	    return doctypeNode['x-systemId'];
	};


	//Node types
	exports.isTextNode = function (node) {
	    return node.type === 'text';
	};

	exports.isCommentNode = function (node) {
	    return node.type === 'comment';
	};

	exports.isDocumentTypeNode = function (node) {
	    return node.type === 'directive' && node.name === '!doctype';
	};

	exports.isElementNode = function (node) {
	    return !!node.attribs;
	};


/***/ },
/* 606 */
/***/ function(module, exports) {

	'use strict';

	//Const
	var NOAH_ARK_CAPACITY = 3;

	//List of formatting elements
	var FormattingElementList = module.exports = function (treeAdapter) {
	    this.length = 0;
	    this.entries = [];
	    this.treeAdapter = treeAdapter;
	    this.bookmark = null;
	};

	//Entry types
	FormattingElementList.MARKER_ENTRY = 'MARKER_ENTRY';
	FormattingElementList.ELEMENT_ENTRY = 'ELEMENT_ENTRY';

	//Noah Ark's condition
	//OPTIMIZATION: at first we try to find possible candidates for exclusion using
	//lightweight heuristics without thorough attributes check.
	FormattingElementList.prototype._getNoahArkConditionCandidates = function (newElement) {
	    var candidates = [];

	    if (this.length >= NOAH_ARK_CAPACITY) {
	        var neAttrsLength = this.treeAdapter.getAttrList(newElement).length,
	            neTagName = this.treeAdapter.getTagName(newElement),
	            neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

	        for (var i = this.length - 1; i >= 0; i--) {
	            var entry = this.entries[i];

	            if (entry.type === FormattingElementList.MARKER_ENTRY)
	                break;

	            var element = entry.element,
	                elementAttrs = this.treeAdapter.getAttrList(element);

	            if (this.treeAdapter.getTagName(element) === neTagName &&
	                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&
	                elementAttrs.length === neAttrsLength) {
	                candidates.push({idx: i, attrs: elementAttrs});
	            }
	        }
	    }

	    return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
	};

	FormattingElementList.prototype._ensureNoahArkCondition = function (newElement) {
	    var candidates = this._getNoahArkConditionCandidates(newElement),
	        cLength = candidates.length;

	    if (cLength) {
	        var neAttrs = this.treeAdapter.getAttrList(newElement),
	            neAttrsLength = neAttrs.length,
	            neAttrsMap = {};

	        //NOTE: build attrs map for the new element so we can perform fast lookups
	        for (var i = 0; i < neAttrsLength; i++) {
	            var neAttr = neAttrs[i];

	            neAttrsMap[neAttr.name] = neAttr.value;
	        }

	        for (var i = 0; i < neAttrsLength; i++) {
	            for (var j = 0; j < cLength; j++) {
	                var cAttr = candidates[j].attrs[i];

	                if (neAttrsMap[cAttr.name] !== cAttr.value) {
	                    candidates.splice(j, 1);
	                    cLength--;
	                }

	                if (candidates.length < NOAH_ARK_CAPACITY)
	                    return;
	            }
	        }

	        //NOTE: remove bottommost candidates until Noah's Ark condition will not be met
	        for (var i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
	            this.entries.splice(candidates[i].idx, 1);
	            this.length--;
	        }
	    }
	};

	//Mutations
	FormattingElementList.prototype.insertMarker = function () {
	    this.entries.push({type: FormattingElementList.MARKER_ENTRY});
	    this.length++;
	};

	FormattingElementList.prototype.pushElement = function (element, token) {
	    this._ensureNoahArkCondition(element);

	    this.entries.push({
	        type: FormattingElementList.ELEMENT_ENTRY,
	        element: element,
	        token: token
	    });

	    this.length++;
	};

	FormattingElementList.prototype.insertElementAfterBookmark = function (element, token) {
	    var bookmarkIdx = this.length - 1;

	    for (; bookmarkIdx >= 0; bookmarkIdx--) {
	        if (this.entries[bookmarkIdx] === this.bookmark)
	            break;
	    }

	    this.entries.splice(bookmarkIdx + 1, 0, {
	        type: FormattingElementList.ELEMENT_ENTRY,
	        element: element,
	        token: token
	    });

	    this.length++;
	};

	FormattingElementList.prototype.removeEntry = function (entry) {
	    for (var i = this.length - 1; i >= 0; i--) {
	        if (this.entries[i] === entry) {
	            this.entries.splice(i, 1);
	            this.length--;
	            break;
	        }
	    }
	};

	FormattingElementList.prototype.clearToLastMarker = function () {
	    while (this.length) {
	        var entry = this.entries.pop();

	        this.length--;

	        if (entry.type === FormattingElementList.MARKER_ENTRY)
	            break;
	    }
	};

	//Search
	FormattingElementList.prototype.getElementEntryInScopeWithTagName = function (tagName) {
	    for (var i = this.length - 1; i >= 0; i--) {
	        var entry = this.entries[i];

	        if (entry.type === FormattingElementList.MARKER_ENTRY)
	            return null;

	        if (this.treeAdapter.getTagName(entry.element) === tagName)
	            return entry;
	    }

	    return null;
	};

	FormattingElementList.prototype.getElementEntry = function (element) {
	    for (var i = this.length - 1; i >= 0; i--) {
	        var entry = this.entries[i];

	        if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element == element)
	            return entry;
	    }

	    return null;
	};


/***/ },
/* 607 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var OpenElementStack = __webpack_require__(121),
	    Tokenizer = __webpack_require__(30),
	    HTML = __webpack_require__(23);


	//Aliases
	var $ = HTML.TAG_NAMES;


	function setEndLocation(element, closingToken, treeAdapter) {
	    var loc = element.__location;

	    if (!loc)
	        return;

	    if (!loc.startTag) {
	        loc.startTag = {
	            start: loc.start,
	            end: loc.end
	        };
	    }

	    if (closingToken.location) {
	        var tn = treeAdapter.getTagName(element),
	            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing tag and
	            // for cases like <td> <p> </td> - 'p' closes without a closing tag
	            isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN &&
	                              tn === closingToken.tagName;

	        if (isClosingEndTag) {
	            loc.endTag = {
	                start: closingToken.location.start,
	                end: closingToken.location.end
	            };
	        }

	        loc.end = closingToken.location.end;
	    }
	}

	//NOTE: patch open elements stack, so we can assign end location for the elements
	function patchOpenElementsStack(stack, parser) {
	    var treeAdapter = parser.treeAdapter;

	    stack.pop = function () {
	        setEndLocation(this.current, parser.currentToken, treeAdapter);
	        OpenElementStack.prototype.pop.call(this);
	    };

	    stack.popAllUpToHtmlElement = function () {
	        for (var i = this.stackTop; i > 0; i--)
	            setEndLocation(this.items[i], parser.currentToken, treeAdapter);

	        OpenElementStack.prototype.popAllUpToHtmlElement.call(this);
	    };

	    stack.remove = function (element) {
	        setEndLocation(element, parser.currentToken, treeAdapter);
	        OpenElementStack.prototype.remove.call(this, element);
	    };
	}

	exports.assign = function (parser) {
	    //NOTE: obtain Parser proto this way to avoid module circular references
	    var parserProto = Object.getPrototypeOf(parser),
	        treeAdapter = parser.treeAdapter;


	    //NOTE: patch _reset method
	    parser._reset = function (html, document, fragmentContext) {
	        parserProto._reset.call(this, html, document, fragmentContext);

	        this.attachableElementLocation = null;
	        this.lastFosterParentingLocation = null;
	        this.currentToken = null;

	        patchOpenElementsStack(this.openElements, parser);
	    };

	    parser._processTokenInForeignContent = function (token) {
	        this.currentToken = token;
	        parserProto._processTokenInForeignContent.call(this, token);
	    };

	    parser._processToken = function (token) {
	        this.currentToken = token;
	        parserProto._processToken.call(this, token);

	        //NOTE: <body> and <html> are never popped from the stack, so we need to updated
	        //their end location explicitly.
	        if (token.type === Tokenizer.END_TAG_TOKEN &&
	            (token.tagName === $.HTML ||
	            (token.tagName === $.BODY && this.openElements.hasInScope($.BODY)))) {
	            for (var i = this.openElements.stackTop; i >= 0; i--) {
	                var element = this.openElements.items[i];

	                if (this.treeAdapter.getTagName(element) === token.tagName) {
	                    setEndLocation(element, token, treeAdapter);
	                    break;
	                }
	            }
	        }
	    };

	    //Doctype
	    parser._setDocumentType = function (token) {
	        parserProto._setDocumentType.call(this, token);

	        var documentChildren = this.treeAdapter.getChildNodes(this.document),
	            cnLength = documentChildren.length;

	        for (var i = 0; i < cnLength; i++) {
	            var node = documentChildren[i];

	            if (this.treeAdapter.isDocumentTypeNode(node)) {
	                node.__location = token.location;
	                break;
	            }
	        }
	    };

	    //Elements
	    parser._attachElementToTree = function (element) {
	        //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.
	        //So we will use token location stored in this methods for the element.
	        element.__location = this.attachableElementLocation || null;
	        this.attachableElementLocation = null;
	        parserProto._attachElementToTree.call(this, element);
	    };

	    parser._appendElement = function (token, namespaceURI) {
	        this.attachableElementLocation = token.location;
	        parserProto._appendElement.call(this, token, namespaceURI);
	    };

	    parser._insertElement = function (token, namespaceURI) {
	        this.attachableElementLocation = token.location;
	        parserProto._insertElement.call(this, token, namespaceURI);
	    };

	    parser._insertTemplate = function (token) {
	        this.attachableElementLocation = token.location;
	        parserProto._insertTemplate.call(this, token);

	        var tmplContent = this.treeAdapter.getChildNodes(this.openElements.current)[0];

	        tmplContent.__location = null;
	    };

	    parser._insertFakeRootElement = function () {
	        parserProto._insertFakeRootElement.call(this);
	        this.openElements.current.__location = null;
	    };

	    //Comments
	    parser._appendCommentNode = function (token, parent) {
	        parserProto._appendCommentNode.call(this, token, parent);

	        var children = this.treeAdapter.getChildNodes(parent),
	            commentNode = children[children.length - 1];

	        commentNode.__location = token.location;
	    };

	    //Text
	    parser._findFosterParentingLocation = function () {
	        //NOTE: store last foster parenting location, so we will be able to find inserted text
	        //in case of foster parenting
	        this.lastFosterParentingLocation = parserProto._findFosterParentingLocation.call(this);
	        return this.lastFosterParentingLocation;
	    };

	    parser._insertCharacters = function (token) {
	        parserProto._insertCharacters.call(this, token);

	        var hasFosterParent = this._shouldFosterParentOnInsertion(),
	            parentingLocation = this.lastFosterParentingLocation,
	            parent = (hasFosterParent && parentingLocation.parent) ||
	                     this.openElements.currentTmplContent ||
	                     this.openElements.current,
	            siblings = this.treeAdapter.getChildNodes(parent),
	            textNodeIdx = hasFosterParent && parentingLocation.beforeElement ?
	                          siblings.indexOf(parentingLocation.beforeElement) - 1 :
	                          siblings.length - 1,
	            textNode = siblings[textNodeIdx];

	        //NOTE: if we have location assigned by another token, then just update end position
	        if (textNode.__location)
	            textNode.__location.end = token.location.end;

	        else
	            textNode.__location = token.location;
	    };
	};



/***/ },
/* 608 */
/***/ function(module, exports) {

	module.exports = (function() {
	  /*
	   * Generated by PEG.js 0.8.0.
	   *
	   * http://pegjs.majda.cz/
	   */

	  function peg$subclass(child, parent) {
	    function ctor() { this.constructor = child; }
	    ctor.prototype = parent.prototype;
	    child.prototype = new ctor();
	  }

	  function SyntaxError(message, expected, found, offset, line, column) {
	    this.message  = message;
	    this.expected = expected;
	    this.found    = found;
	    this.offset   = offset;
	    this.line     = line;
	    this.column   = column;

	    this.name     = "SyntaxError";
	  }

	  peg$subclass(SyntaxError, Error);

	  function parse(input) {
	    var options = arguments.length > 1 ? arguments[1] : {},

	        peg$FAILED = {},

	        peg$startRuleFunctions = { Name: peg$parseName, QName: peg$parseQName },
	        peg$startRuleFunction  = peg$parseName,

	        peg$c0 = ":",
	        peg$c1 = { type: "literal", value: ":", description: "\":\"" },
	        peg$c2 = /^[A-Z]/,
	        peg$c3 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
	        peg$c4 = "_",
	        peg$c5 = { type: "literal", value: "_", description: "\"_\"" },
	        peg$c6 = /^[a-z]/,
	        peg$c7 = { type: "class", value: "[a-z]", description: "[a-z]" },
	        peg$c8 = /^[\xC0-\xD6]/,
	        peg$c9 = { type: "class", value: "[\\xC0-\\xD6]", description: "[\\xC0-\\xD6]" },
	        peg$c10 = /^[\xD8-\xF6]/,
	        peg$c11 = { type: "class", value: "[\\xD8-\\xF6]", description: "[\\xD8-\\xF6]" },
	        peg$c12 = /^[\xF8-\u02FF]/,
	        peg$c13 = { type: "class", value: "[\\xF8-\\u02FF]", description: "[\\xF8-\\u02FF]" },
	        peg$c14 = /^[\u0370-\u037D]/,
	        peg$c15 = { type: "class", value: "[\\u0370-\\u037D]", description: "[\\u0370-\\u037D]" },
	        peg$c16 = /^[\u037F-\u1FFF]/,
	        peg$c17 = { type: "class", value: "[\\u037F-\\u1FFF]", description: "[\\u037F-\\u1FFF]" },
	        peg$c18 = /^[\u200C-\u200D]/,
	        peg$c19 = { type: "class", value: "[\\u200C-\\u200D]", description: "[\\u200C-\\u200D]" },
	        peg$c20 = /^[\u2070-\u218F]/,
	        peg$c21 = { type: "class", value: "[\\u2070-\\u218F]", description: "[\\u2070-\\u218F]" },
	        peg$c22 = /^[\u2C00-\u2FEF]/,
	        peg$c23 = { type: "class", value: "[\\u2C00-\\u2FEF]", description: "[\\u2C00-\\u2FEF]" },
	        peg$c24 = /^[\u3001-\uD7FF]/,
	        peg$c25 = { type: "class", value: "[\\u3001-\\uD7FF]", description: "[\\u3001-\\uD7FF]" },
	        peg$c26 = /^[\uF900-\uFDCF]/,
	        peg$c27 = { type: "class", value: "[\\uF900-\\uFDCF]", description: "[\\uF900-\\uFDCF]" },
	        peg$c28 = /^[\uFDF0-\uFFFD]/,
	        peg$c29 = { type: "class", value: "[\\uFDF0-\\uFFFD]", description: "[\\uFDF0-\\uFFFD]" },
	        peg$c30 = peg$FAILED,
	        peg$c31 = /^[\uD800-\uDB7F]/,
	        peg$c32 = { type: "class", value: "[\\uD800-\\uDB7F]", description: "[\\uD800-\\uDB7F]" },
	        peg$c33 = /^[\uDC00-\uDFFF]/,
	        peg$c34 = { type: "class", value: "[\\uDC00-\\uDFFF]", description: "[\\uDC00-\\uDFFF]" },
	        peg$c35 = "-",
	        peg$c36 = { type: "literal", value: "-", description: "\"-\"" },
	        peg$c37 = ".",
	        peg$c38 = { type: "literal", value: ".", description: "\".\"" },
	        peg$c39 = /^[0-9]/,
	        peg$c40 = { type: "class", value: "[0-9]", description: "[0-9]" },
	        peg$c41 = "\xB7",
	        peg$c42 = { type: "literal", value: "\xB7", description: "\"\\xB7\"" },
	        peg$c43 = /^[\u0300-\u036F]/,
	        peg$c44 = { type: "class", value: "[\\u0300-\\u036F]", description: "[\\u0300-\\u036F]" },
	        peg$c45 = /^[\u203F-\u2040]/,
	        peg$c46 = { type: "class", value: "[\\u203F-\\u2040]", description: "[\\u203F-\\u2040]" },
	        peg$c47 = [],

	        peg$currPos          = 0,
	        peg$reportedPos      = 0,
	        peg$cachedPos        = 0,
	        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
	        peg$maxFailPos       = 0,
	        peg$maxFailExpected  = [],
	        peg$silentFails      = 0,

	        peg$result;

	    if ("startRule" in options) {
	      if (!(options.startRule in peg$startRuleFunctions)) {
	        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	      }

	      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	    }

	    function text() {
	      return input.substring(peg$reportedPos, peg$currPos);
	    }

	    function offset() {
	      return peg$reportedPos;
	    }

	    function line() {
	      return peg$computePosDetails(peg$reportedPos).line;
	    }

	    function column() {
	      return peg$computePosDetails(peg$reportedPos).column;
	    }

	    function expected(description) {
	      throw peg$buildException(
	        null,
	        [{ type: "other", description: description }],
	        peg$reportedPos
	      );
	    }

	    function error(message) {
	      throw peg$buildException(message, null, peg$reportedPos);
	    }

	    function peg$computePosDetails(pos) {
	      function advance(details, startPos, endPos) {
	        var p, ch;

	        for (p = startPos; p < endPos; p++) {
	          ch = input.charAt(p);
	          if (ch === "\n") {
	            if (!details.seenCR) { details.line++; }
	            details.column = 1;
	            details.seenCR = false;
	          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	            details.line++;
	            details.column = 1;
	            details.seenCR = true;
	          } else {
	            details.column++;
	            details.seenCR = false;
	          }
	        }
	      }

	      if (peg$cachedPos !== pos) {
	        if (peg$cachedPos > pos) {
	          peg$cachedPos = 0;
	          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
	        }
	        advance(peg$cachedPosDetails, peg$cachedPos, pos);
	        peg$cachedPos = pos;
	      }

	      return peg$cachedPosDetails;
	    }

	    function peg$fail(expected) {
	      if (peg$currPos < peg$maxFailPos) { return; }

	      if (peg$currPos > peg$maxFailPos) {
	        peg$maxFailPos = peg$currPos;
	        peg$maxFailExpected = [];
	      }

	      peg$maxFailExpected.push(expected);
	    }

	    function peg$buildException(message, expected, pos) {
	      function cleanupExpected(expected) {
	        var i = 1;

	        expected.sort(function(a, b) {
	          if (a.description < b.description) {
	            return -1;
	          } else if (a.description > b.description) {
	            return 1;
	          } else {
	            return 0;
	          }
	        });

	        while (i < expected.length) {
	          if (expected[i - 1] === expected[i]) {
	            expected.splice(i, 1);
	          } else {
	            i++;
	          }
	        }
	      }

	      function buildMessage(expected, found) {
	        function stringEscape(s) {
	          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

	          return s
	            .replace(/\\/g,   '\\\\')
	            .replace(/"/g,    '\\"')
	            .replace(/\x08/g, '\\b')
	            .replace(/\t/g,   '\\t')
	            .replace(/\n/g,   '\\n')
	            .replace(/\f/g,   '\\f')
	            .replace(/\r/g,   '\\r')
	            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
	            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
	            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
	            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
	        }

	        var expectedDescs = new Array(expected.length),
	            expectedDesc, foundDesc, i;

	        for (i = 0; i < expected.length; i++) {
	          expectedDescs[i] = expected[i].description;
	        }

	        expectedDesc = expected.length > 1
	          ? expectedDescs.slice(0, -1).join(", ")
	              + " or "
	              + expectedDescs[expected.length - 1]
	          : expectedDescs[0];

	        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

	        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
	      }

	      var posDetails = peg$computePosDetails(pos),
	          found      = pos < input.length ? input.charAt(pos) : null;

	      if (expected !== null) {
	        cleanupExpected(expected);
	      }

	      return new SyntaxError(
	        message !== null ? message : buildMessage(expected, found),
	        expected,
	        found,
	        pos,
	        posDetails.line,
	        posDetails.column
	      );
	    }

	    function peg$parseNameStartChar() {
	      var s0, s1, s2;

	      if (input.charCodeAt(peg$currPos) === 58) {
	        s0 = peg$c0;
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c1); }
	      }
	      if (s0 === peg$FAILED) {
	        if (peg$c2.test(input.charAt(peg$currPos))) {
	          s0 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c3); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 95) {
	            s0 = peg$c4;
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c5); }
	          }
	          if (s0 === peg$FAILED) {
	            if (peg$c6.test(input.charAt(peg$currPos))) {
	              s0 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c7); }
	            }
	            if (s0 === peg$FAILED) {
	              if (peg$c8.test(input.charAt(peg$currPos))) {
	                s0 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c9); }
	              }
	              if (s0 === peg$FAILED) {
	                if (peg$c10.test(input.charAt(peg$currPos))) {
	                  s0 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c11); }
	                }
	                if (s0 === peg$FAILED) {
	                  if (peg$c12.test(input.charAt(peg$currPos))) {
	                    s0 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s0 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c13); }
	                  }
	                  if (s0 === peg$FAILED) {
	                    if (peg$c14.test(input.charAt(peg$currPos))) {
	                      s0 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s0 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c15); }
	                    }
	                    if (s0 === peg$FAILED) {
	                      if (peg$c16.test(input.charAt(peg$currPos))) {
	                        s0 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                      } else {
	                        s0 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c17); }
	                      }
	                      if (s0 === peg$FAILED) {
	                        if (peg$c18.test(input.charAt(peg$currPos))) {
	                          s0 = input.charAt(peg$currPos);
	                          peg$currPos++;
	                        } else {
	                          s0 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c19); }
	                        }
	                        if (s0 === peg$FAILED) {
	                          if (peg$c20.test(input.charAt(peg$currPos))) {
	                            s0 = input.charAt(peg$currPos);
	                            peg$currPos++;
	                          } else {
	                            s0 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c21); }
	                          }
	                          if (s0 === peg$FAILED) {
	                            if (peg$c22.test(input.charAt(peg$currPos))) {
	                              s0 = input.charAt(peg$currPos);
	                              peg$currPos++;
	                            } else {
	                              s0 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c23); }
	                            }
	                            if (s0 === peg$FAILED) {
	                              if (peg$c24.test(input.charAt(peg$currPos))) {
	                                s0 = input.charAt(peg$currPos);
	                                peg$currPos++;
	                              } else {
	                                s0 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c25); }
	                              }
	                              if (s0 === peg$FAILED) {
	                                if (peg$c26.test(input.charAt(peg$currPos))) {
	                                  s0 = input.charAt(peg$currPos);
	                                  peg$currPos++;
	                                } else {
	                                  s0 = peg$FAILED;
	                                  if (peg$silentFails === 0) { peg$fail(peg$c27); }
	                                }
	                                if (s0 === peg$FAILED) {
	                                  if (peg$c28.test(input.charAt(peg$currPos))) {
	                                    s0 = input.charAt(peg$currPos);
	                                    peg$currPos++;
	                                  } else {
	                                    s0 = peg$FAILED;
	                                    if (peg$silentFails === 0) { peg$fail(peg$c29); }
	                                  }
	                                  if (s0 === peg$FAILED) {
	                                    s0 = peg$currPos;
	                                    if (peg$c31.test(input.charAt(peg$currPos))) {
	                                      s1 = input.charAt(peg$currPos);
	                                      peg$currPos++;
	                                    } else {
	                                      s1 = peg$FAILED;
	                                      if (peg$silentFails === 0) { peg$fail(peg$c32); }
	                                    }
	                                    if (s1 !== peg$FAILED) {
	                                      if (peg$c33.test(input.charAt(peg$currPos))) {
	                                        s2 = input.charAt(peg$currPos);
	                                        peg$currPos++;
	                                      } else {
	                                        s2 = peg$FAILED;
	                                        if (peg$silentFails === 0) { peg$fail(peg$c34); }
	                                      }
	                                      if (s2 !== peg$FAILED) {
	                                        s1 = [s1, s2];
	                                        s0 = s1;
	                                      } else {
	                                        peg$currPos = s0;
	                                        s0 = peg$c30;
	                                      }
	                                    } else {
	                                      peg$currPos = s0;
	                                      s0 = peg$c30;
	                                    }
	                                  }
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseNameChar() {
	      var s0;

	      s0 = peg$parseNameStartChar();
	      if (s0 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 45) {
	          s0 = peg$c35;
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c36); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 46) {
	            s0 = peg$c37;
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c38); }
	          }
	          if (s0 === peg$FAILED) {
	            if (peg$c39.test(input.charAt(peg$currPos))) {
	              s0 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c40); }
	            }
	            if (s0 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 183) {
	                s0 = peg$c41;
	                peg$currPos++;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c42); }
	              }
	              if (s0 === peg$FAILED) {
	                if (peg$c43.test(input.charAt(peg$currPos))) {
	                  s0 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
	                }
	                if (s0 === peg$FAILED) {
	                  if (peg$c45.test(input.charAt(peg$currPos))) {
	                    s0 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s0 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseName() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$parseNameStartChar();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$parseNameChar();
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parseNameChar();
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c30;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c30;
	      }

	      return s0;
	    }

	    function peg$parseQName() {
	      var s0;

	      s0 = peg$parsePrefixedName();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseNCName();
	      }

	      return s0;
	    }

	    function peg$parsePrefixedName() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$parseNCName();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 58) {
	          s2 = peg$c0;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c1); }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseNCName();
	          if (s3 !== peg$FAILED) {
	            s1 = [s1, s2, s3];
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$c30;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c30;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c30;
	      }

	      return s0;
	    }

	    function peg$parseNCNameStartChar() {
	      var s0, s1, s2;

	      if (peg$c2.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) { peg$fail(peg$c3); }
	      }
	      if (s0 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 95) {
	          s0 = peg$c4;
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c5); }
	        }
	        if (s0 === peg$FAILED) {
	          if (peg$c6.test(input.charAt(peg$currPos))) {
	            s0 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c7); }
	          }
	          if (s0 === peg$FAILED) {
	            if (peg$c8.test(input.charAt(peg$currPos))) {
	              s0 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c9); }
	            }
	            if (s0 === peg$FAILED) {
	              if (peg$c10.test(input.charAt(peg$currPos))) {
	                s0 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c11); }
	              }
	              if (s0 === peg$FAILED) {
	                if (peg$c12.test(input.charAt(peg$currPos))) {
	                  s0 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c13); }
	                }
	                if (s0 === peg$FAILED) {
	                  if (peg$c14.test(input.charAt(peg$currPos))) {
	                    s0 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s0 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c15); }
	                  }
	                  if (s0 === peg$FAILED) {
	                    if (peg$c16.test(input.charAt(peg$currPos))) {
	                      s0 = input.charAt(peg$currPos);
	                      peg$currPos++;
	                    } else {
	                      s0 = peg$FAILED;
	                      if (peg$silentFails === 0) { peg$fail(peg$c17); }
	                    }
	                    if (s0 === peg$FAILED) {
	                      if (peg$c18.test(input.charAt(peg$currPos))) {
	                        s0 = input.charAt(peg$currPos);
	                        peg$currPos++;
	                      } else {
	                        s0 = peg$FAILED;
	                        if (peg$silentFails === 0) { peg$fail(peg$c19); }
	                      }
	                      if (s0 === peg$FAILED) {
	                        if (peg$c20.test(input.charAt(peg$currPos))) {
	                          s0 = input.charAt(peg$currPos);
	                          peg$currPos++;
	                        } else {
	                          s0 = peg$FAILED;
	                          if (peg$silentFails === 0) { peg$fail(peg$c21); }
	                        }
	                        if (s0 === peg$FAILED) {
	                          if (peg$c22.test(input.charAt(peg$currPos))) {
	                            s0 = input.charAt(peg$currPos);
	                            peg$currPos++;
	                          } else {
	                            s0 = peg$FAILED;
	                            if (peg$silentFails === 0) { peg$fail(peg$c23); }
	                          }
	                          if (s0 === peg$FAILED) {
	                            if (peg$c24.test(input.charAt(peg$currPos))) {
	                              s0 = input.charAt(peg$currPos);
	                              peg$currPos++;
	                            } else {
	                              s0 = peg$FAILED;
	                              if (peg$silentFails === 0) { peg$fail(peg$c25); }
	                            }
	                            if (s0 === peg$FAILED) {
	                              if (peg$c26.test(input.charAt(peg$currPos))) {
	                                s0 = input.charAt(peg$currPos);
	                                peg$currPos++;
	                              } else {
	                                s0 = peg$FAILED;
	                                if (peg$silentFails === 0) { peg$fail(peg$c27); }
	                              }
	                              if (s0 === peg$FAILED) {
	                                if (peg$c28.test(input.charAt(peg$currPos))) {
	                                  s0 = input.charAt(peg$currPos);
	                                  peg$currPos++;
	                                } else {
	                                  s0 = peg$FAILED;
	                                  if (peg$silentFails === 0) { peg$fail(peg$c29); }
	                                }
	                                if (s0 === peg$FAILED) {
	                                  s0 = peg$currPos;
	                                  if (peg$c31.test(input.charAt(peg$currPos))) {
	                                    s1 = input.charAt(peg$currPos);
	                                    peg$currPos++;
	                                  } else {
	                                    s1 = peg$FAILED;
	                                    if (peg$silentFails === 0) { peg$fail(peg$c32); }
	                                  }
	                                  if (s1 !== peg$FAILED) {
	                                    if (peg$c33.test(input.charAt(peg$currPos))) {
	                                      s2 = input.charAt(peg$currPos);
	                                      peg$currPos++;
	                                    } else {
	                                      s2 = peg$FAILED;
	                                      if (peg$silentFails === 0) { peg$fail(peg$c34); }
	                                    }
	                                    if (s2 !== peg$FAILED) {
	                                      s1 = [s1, s2];
	                                      s0 = s1;
	                                    } else {
	                                      peg$currPos = s0;
	                                      s0 = peg$c30;
	                                    }
	                                  } else {
	                                    peg$currPos = s0;
	                                    s0 = peg$c30;
	                                  }
	                                }
	                              }
	                            }
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseNCNameChar() {
	      var s0;

	      s0 = peg$parseNCNameStartChar();
	      if (s0 === peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 45) {
	          s0 = peg$c35;
	          peg$currPos++;
	        } else {
	          s0 = peg$FAILED;
	          if (peg$silentFails === 0) { peg$fail(peg$c36); }
	        }
	        if (s0 === peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 46) {
	            s0 = peg$c37;
	            peg$currPos++;
	          } else {
	            s0 = peg$FAILED;
	            if (peg$silentFails === 0) { peg$fail(peg$c38); }
	          }
	          if (s0 === peg$FAILED) {
	            if (peg$c39.test(input.charAt(peg$currPos))) {
	              s0 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s0 = peg$FAILED;
	              if (peg$silentFails === 0) { peg$fail(peg$c40); }
	            }
	            if (s0 === peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 183) {
	                s0 = peg$c41;
	                peg$currPos++;
	              } else {
	                s0 = peg$FAILED;
	                if (peg$silentFails === 0) { peg$fail(peg$c42); }
	              }
	              if (s0 === peg$FAILED) {
	                if (peg$c43.test(input.charAt(peg$currPos))) {
	                  s0 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s0 = peg$FAILED;
	                  if (peg$silentFails === 0) { peg$fail(peg$c44); }
	                }
	                if (s0 === peg$FAILED) {
	                  if (peg$c45.test(input.charAt(peg$currPos))) {
	                    s0 = input.charAt(peg$currPos);
	                    peg$currPos++;
	                  } else {
	                    s0 = peg$FAILED;
	                    if (peg$silentFails === 0) { peg$fail(peg$c46); }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }

	      return s0;
	    }

	    function peg$parseNCName() {
	      var s0, s1, s2, s3;

	      s0 = peg$currPos;
	      s1 = peg$parseNCNameStartChar();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$parseNCNameChar();
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parseNCNameChar();
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$c30;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$c30;
	      }

	      return s0;
	    }

	    peg$result = peg$startRuleFunction();

	    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	      return peg$result;
	    } else {
	      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	        peg$fail({ type: "end", description: "end of input" });
	      }

	      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
	    }
	  }

	  return {
	    SyntaxError: SyntaxError,
	    parse:       parse
	  };
	})()

/***/ },
/* 609 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var parser = __webpack_require__(608);

	exports.name = function (potentialName) {
	    parser.parse(potentialName, { startRule: "Name" });
	};

	exports.qname = function (potentialQname) {
	    parser.parse(potentialQname, { startRule: "QName" });
	};

	exports.SyntaxError = parser.SyntaxError;


/***/ },
/* 610 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, process) {/**
	 * Wrapper for built-in http.js to emulate the browser XMLHttpRequest object.
	 *
	 * This can be used with JS designed for browsers to improve reuse of code and
	 * allow the use of existing libraries.
	 *
	 * Usage: include("XMLHttpRequest.js") and use XMLHttpRequest per W3C specs.
	 *
	 * @author Dan DeFelippi <dan@driverdan.com>
	 * @contributor David Ellis <d.f.ellis@ieee.org>
	 * @license MIT
	 */

	var Url = __webpack_require__(9);
	var spawn = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"child_process\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).spawn;
	var fs = __webpack_require__(38);

	exports.XMLHttpRequest = function() {
	  "use strict";

	  /**
	   * Private variables
	   */
	  var self = this;
	  var http = __webpack_require__(39);
	  var https = __webpack_require__(40);

	  // Holds http.js objects
	  var request;
	  var response;

	  // Request settings
	  var settings = {};

	  // Disable header blacklist.
	  // Not part of XHR specs.
	  var disableHeaderCheck = false;

	  // Set some default headers
	  var defaultHeaders = {
	    "User-Agent": "node-XMLHttpRequest",
	    "Accept": "*/*",
	  };

	  var headers = {};
	  var headersCase = {};

	  // These headers are not user setable.
	  // The following are allowed but banned in the spec:
	  // * user-agent
	  var forbiddenRequestHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "content-transfer-encoding",
	    "cookie",
	    "cookie2",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "via"
	  ];

	  // These request methods are not allowed
	  var forbiddenRequestMethods = [
	    "TRACE",
	    "TRACK",
	    "CONNECT"
	  ];

	  // Send flag
	  var sendFlag = false;
	  // Error flag, used when errors occur or abort is called
	  var errorFlag = false;

	  // Event listeners
	  var listeners = {};

	  /**
	   * Constants
	   */

	  this.UNSENT = 0;
	  this.OPENED = 1;
	  this.HEADERS_RECEIVED = 2;
	  this.LOADING = 3;
	  this.DONE = 4;

	  /**
	   * Public vars
	   */

	  // Current state
	  this.readyState = this.UNSENT;

	  // default ready state change handler in case one is not set or is set late
	  this.onreadystatechange = null;

	  // Result & response
	  this.responseText = "";
	  this.responseXML = "";
	  this.status = null;
	  this.statusText = null;
	  
	  // Whether cross-site Access-Control requests should be made using
	  // credentials such as cookies or authorization headers
	  this.withCredentials = false;

	  /**
	   * Private methods
	   */

	  /**
	   * Check if the specified header is allowed.
	   *
	   * @param string header Header to validate
	   * @return boolean False if not allowed, otherwise true
	   */
	  var isAllowedHttpHeader = function(header) {
	    return disableHeaderCheck || (header && forbiddenRequestHeaders.indexOf(header.toLowerCase()) === -1);
	  };

	  /**
	   * Check if the specified method is allowed.
	   *
	   * @param string method Request method to validate
	   * @return boolean False if not allowed, otherwise true
	   */
	  var isAllowedHttpMethod = function(method) {
	    return (method && forbiddenRequestMethods.indexOf(method) === -1);
	  };

	  /**
	   * Public methods
	   */

	  /**
	   * Open the connection. Currently supports local server requests.
	   *
	   * @param string method Connection method (eg GET, POST)
	   * @param string url URL for the connection.
	   * @param boolean async Asynchronous connection. Default is true.
	   * @param string user Username for basic authentication (optional)
	   * @param string password Password for basic authentication (optional)
	   */
	  this.open = function(method, url, async, user, password) {
	    this.abort();
	    errorFlag = false;

	    // Check for valid request method
	    if (!isAllowedHttpMethod(method)) {
	      throw new Error("SecurityError: Request method not allowed");
	    }

	    settings = {
	      "method": method,
	      "url": url.toString(),
	      "async": (typeof async !== "boolean" ? true : async),
	      "user": user || null,
	      "password": password || null
	    };

	    setState(this.OPENED);
	  };

	  /**
	   * Disables or enables isAllowedHttpHeader() check the request. Enabled by default.
	   * This does not conform to the W3C spec.
	   *
	   * @param boolean state Enable or disable header checking.
	   */
	  this.setDisableHeaderCheck = function(state) {
	    disableHeaderCheck = state;
	  };

	  /**
	   * Sets a header for the request or appends the value if one is already set.
	   *
	   * @param string header Header name
	   * @param string value Header value
	   */
	  this.setRequestHeader = function(header, value) {
	    if (this.readyState !== this.OPENED) {
	      throw new Error("INVALID_STATE_ERR: setRequestHeader can only be called when state is OPEN");
	    }
	    if (!isAllowedHttpHeader(header)) {
	      console.warn("Refused to set unsafe header \"" + header + "\"");
	      return;
	    }
	    if (sendFlag) {
	      throw new Error("INVALID_STATE_ERR: send flag is true");
	    }
	    header = headersCase[header.toLowerCase()] || header;
	    headersCase[header.toLowerCase()] = header;
	    headers[header] = headers[header] ? headers[header] + ', ' + value : value;
	  };

	  /**
	   * Gets a header from the server response.
	   *
	   * @param string header Name of header to get.
	   * @return string Text of the header or null if it doesn't exist.
	   */
	  this.getResponseHeader = function(header) {
	    if (typeof header === "string"
	      && this.readyState > this.OPENED
	      && response
	      && response.headers
	      && response.headers[header.toLowerCase()]
	      && !errorFlag
	    ) {
	      return response.headers[header.toLowerCase()];
	    }

	    return null;
	  };

	  /**
	   * Gets all the response headers.
	   *
	   * @return string A string with all response headers separated by CR+LF
	   */
	  this.getAllResponseHeaders = function() {
	    if (this.readyState < this.HEADERS_RECEIVED || errorFlag) {
	      return "";
	    }
	    var result = "";

	    for (var i in response.headers) {
	      // Cookie headers are excluded
	      if (i !== "set-cookie" && i !== "set-cookie2") {
	        result += i + ": " + response.headers[i] + "\r\n";
	      }
	    }
	    return result.substr(0, result.length - 2);
	  };

	  /**
	   * Gets a request header
	   *
	   * @param string name Name of header to get
	   * @return string Returns the request header or empty string if not set
	   */
	  this.getRequestHeader = function(name) {
	    if (typeof name === "string" && headersCase[name.toLowerCase()]) {
	      return headers[headersCase[name.toLowerCase()]];
	    }

	    return "";
	  };

	  /**
	   * Sends the request to the server.
	   *
	   * @param string data Optional data to send as request body.
	   */
	  this.send = function(data) {
	    if (this.readyState !== this.OPENED) {
	      throw new Error("INVALID_STATE_ERR: connection must be opened before send() is called");
	    }

	    if (sendFlag) {
	      throw new Error("INVALID_STATE_ERR: send has already been called");
	    }

	    var ssl = false, local = false;
	    var url = Url.parse(settings.url);
	    var host;
	    // Determine the server
	    switch (url.protocol) {
	      case "https:":
	        ssl = true;
	        // SSL & non-SSL both need host, no break here.
	      case "http:":
	        host = url.hostname;
	        break;

	      case "file:":
	        local = true;
	        break;

	      case undefined:
	      case null:
	      case "":
	        host = "localhost";
	        break;

	      default:
	        throw new Error("Protocol not supported.");
	    }

	    // Load files off the local filesystem (file://)
	    if (local) {
	      if (settings.method !== "GET") {
	        throw new Error("XMLHttpRequest: Only GET method is supported");
	      }

	      if (settings.async) {
	        fs.readFile(url.pathname, "utf8", function(error, data) {
	          if (error) {
	            self.handleError(error);
	          } else {
	            self.status = 200;
	            self.responseText = data;
	            setState(self.DONE);
	          }
	        });
	      } else {
	        try {
	          this.responseText = fs.readFileSync(url.pathname, "utf8");
	          this.status = 200;
	          setState(self.DONE);
	        } catch(e) {
	          this.handleError(e);
	        }
	      }

	      return;
	    }

	    // Default to port 80. If accessing localhost on another port be sure
	    // to use http://localhost:port/path
	    var port = url.port || (ssl ? 443 : 80);
	    // Add query string if one is used
	    var uri = url.pathname + (url.search ? url.search : "");

	    // Set the defaults if they haven't been set
	    for (var name in defaultHeaders) {
	      if (!headersCase[name.toLowerCase()]) {
	        headers[name] = defaultHeaders[name];
	      }
	    }

	    // Set the Host header or the server may reject the request
	    headers.Host = host;
	    if (!((ssl && port === 443) || port === 80)) {
	      headers.Host += ":" + url.port;
	    }

	    // Set Basic Auth if necessary
	    if (settings.user) {
	      if (typeof settings.password === "undefined") {
	        settings.password = "";
	      }
	      var authBuf = new Buffer(settings.user + ":" + settings.password);
	      headers.Authorization = "Basic " + authBuf.toString("base64");
	    }

	    // Set content length header
	    if (settings.method === "GET" || settings.method === "HEAD") {
	      data = null;
	    } else if (data) {
	      headers["Content-Length"] = Buffer.isBuffer(data) ? data.length : Buffer.byteLength(data);

	      if (!headers["Content-Type"]) {
	        headers["Content-Type"] = "text/plain;charset=UTF-8";
	      }
	    } else if (settings.method === "POST") {
	      // For a post with no data set Content-Length: 0.
	      // This is required by buggy servers that don't meet the specs.
	      headers["Content-Length"] = 0;
	    }

	    var options = {
	      host: host,
	      port: port,
	      path: uri,
	      method: settings.method,
	      headers: headers,
	      agent: false,
	      withCredentials: self.withCredentials
	    };

	    // Reset error flag
	    errorFlag = false;

	    // Handle async requests
	    if (settings.async) {
	      // Use the proper protocol
	      var doRequest = ssl ? https.request : http.request;

	      // Request is being sent, set send flag
	      sendFlag = true;

	      // As per spec, this is called here for historical reasons.
	      self.dispatchEvent("readystatechange");

	      // Handler for the response
	      var responseHandler = function responseHandler(resp) {
	        // Set response var to the response we got back
	        // This is so it remains accessable outside this scope
	        response = resp;
	        // Check for redirect
	        // @TODO Prevent looped redirects
	        if (response.statusCode === 301 || response.statusCode === 302 || response.statusCode === 303 || response.statusCode === 307) {
	          // Change URL to the redirect location
	          settings.url = response.headers.location;
	          var url = Url.parse(settings.url);
	          // Set host var in case it's used later
	          host = url.hostname;
	          // Options for the new request
	          var newOptions = {
	            hostname: url.hostname,
	            port: url.port,
	            path: url.path,
	            method: response.statusCode === 303 ? "GET" : settings.method,
	            headers: headers,
	            withCredentials: self.withCredentials
	          };

	          // Issue the new request
	          request = doRequest(newOptions, responseHandler).on("error", errorHandler);
	          request.end();
	          // @TODO Check if an XHR event needs to be fired here
	          return;
	        }

	        response.setEncoding("utf8");

	        setState(self.HEADERS_RECEIVED);
	        self.status = response.statusCode;

	        response.on("data", function(chunk) {
	          // Make sure there's some data
	          if (chunk) {
	            self.responseText += chunk;
	          }
	          // Don't emit state changes if the connection has been aborted.
	          if (sendFlag) {
	            setState(self.LOADING);
	          }
	        });

	        response.on("end", function() {
	          if (sendFlag) {
	            // Discard the end event if the connection has been aborted
	            setState(self.DONE);
	            sendFlag = false;
	          }
	        });

	        response.on("error", function(error) {
	          self.handleError(error);
	        });
	      };

	      // Error handler for the request
	      var errorHandler = function errorHandler(error) {
	        self.handleError(error);
	      };

	      // Create the request
	      request = doRequest(options, responseHandler).on("error", errorHandler);

	      // Node 0.4 and later won't accept empty data. Make sure it's needed.
	      if (data) {
	        request.write(data);
	      }

	      request.end();

	      self.dispatchEvent("loadstart");
	    } else { // Synchronous
	      // Create a temporary file for communication with the other Node process
	      var contentFile = ".node-xmlhttprequest-content-" + process.pid;
	      var syncFile = ".node-xmlhttprequest-sync-" + process.pid;
	      fs.writeFileSync(syncFile, "", "utf8");
	      // The async request the other Node process executes
	      var execString = "var http = require('http'), https = require('https'), fs = require('fs');"
	        + "var doRequest = http" + (ssl ? "s" : "") + ".request;"
	        + "var options = " + JSON.stringify(options) + ";"
	        + "var responseText = '';"
	        + "var req = doRequest(options, function(response) {"
	        + "response.setEncoding('utf8');"
	        + "response.on('data', function(chunk) {"
	        + "  responseText += chunk;"
	        + "});"
	        + "response.on('end', function() {"
	        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: null, data: {statusCode: response.statusCode, headers: response.headers, text: responseText}}), 'utf8');"
	        + "fs.unlinkSync('" + syncFile + "');"
	        + "});"
	        + "response.on('error', function(error) {"
	        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
	        + "fs.unlinkSync('" + syncFile + "');"
	        + "});"
	        + "}).on('error', function(error) {"
	        + "fs.writeFileSync('" + contentFile + "', JSON.stringify({err: error}), 'utf8');"
	        + "fs.unlinkSync('" + syncFile + "');"
	        + "});"
	        + (data ? "req.write('" + JSON.stringify(data).slice(1,-1).replace(/'/g, "\\'") + "');":"")
	        + "req.end();";
	      // Start the other Node Process, executing this string
	      var syncProc = spawn(process.argv[0], ["-e", execString]);
	      while(fs.existsSync(syncFile)) {
	        // Wait while the sync file is empty
	      }
	      var resp = JSON.parse(fs.readFileSync(contentFile, 'utf8'));
	      // Kill the child process once the file has data
	      syncProc.stdin.end();
	      // Remove the temporary file
	      fs.unlinkSync(contentFile);

	      if (resp.err) {
	        self.handleError(resp.err);
	      } else {
	        response = resp.data;
	        self.status = resp.data.statusCode;
	        self.responseText = resp.data.text;
	        setState(self.DONE);
	      }
	    }
	  };

	  /**
	   * Called when an error is encountered to deal with it.
	   */
	  this.handleError = function(error) {
	    this.status = 0;
	    this.statusText = error;
	    this.responseText = error.stack;
	    errorFlag = true;
	    setState(this.DONE);
	    this.dispatchEvent('error');
	  };

	  /**
	   * Aborts a request.
	   */
	  this.abort = function() {
	    if (request) {
	      request.abort();
	      request = null;
	    }

	    headers = defaultHeaders;
	    this.status = 0;
	    this.responseText = "";
	    this.responseXML = "";

	    errorFlag = true;

	    if (this.readyState !== this.UNSENT
	        && (this.readyState !== this.OPENED || sendFlag)
	        && this.readyState !== this.DONE) {
	      sendFlag = false;
	      setState(this.DONE);
	    }
	    this.readyState = this.UNSENT;
	    this.dispatchEvent('abort');
	  };

	  /**
	   * Adds an event listener. Preferred method of binding to events.
	   */
	  this.addEventListener = function(event, callback) {
	    if (!(event in listeners)) {
	      listeners[event] = [];
	    }
	    // Currently allows duplicate callbacks. Should it?
	    listeners[event].push(callback);
	  };

	  /**
	   * Remove an event callback that has already been bound.
	   * Only works on the matching funciton, cannot be a copy.
	   */
	  this.removeEventListener = function(event, callback) {
	    if (event in listeners) {
	      // Filter will return a new array with the callback removed
	      listeners[event] = listeners[event].filter(function(ev) {
	        return ev !== callback;
	      });
	    }
	  };

	  /**
	   * Dispatch any events, including both "on" methods and events attached using addEventListener.
	   */
	  this.dispatchEvent = function(event) {
	    if (typeof self["on" + event] === "function") {
	      self["on" + event]();
	    }
	    if (event in listeners) {
	      for (var i = 0, len = listeners[event].length; i < len; i++) {
	        listeners[event][i].call(self);
	      }
	    }
	  };

	  /**
	   * Changes readyState and calls onreadystatechange.
	   *
	   * @param int state New state
	   */
	  var setState = function(state) {
	    if (state == self.LOADING || self.readyState !== state) {
	      self.readyState = state;

	      if (settings.async || self.readyState < self.OPENED || self.readyState === self.DONE) {
	        self.dispatchEvent("readystatechange");
	      }

	      if (self.readyState === self.DONE && !errorFlag) {
	        self.dispatchEvent("load");
	        // @TODO figure out InspectorInstrumentation::didLoadXHR(cookie)
	        self.dispatchEvent("loadend");
	      }
	    }
	  };
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer, __webpack_require__(4)))

/***/ },
/* 611 */
/***/ function(module, exports) {

	module.exports = {
		"name": "escodegen",
		"description": "ECMAScript code generator",
		"homepage": "http://github.com/estools/escodegen",
		"main": "escodegen.js",
		"bin": {
			"esgenerate": "./bin/esgenerate.js",
			"escodegen": "./bin/escodegen.js"
		},
		"files": [
			"LICENSE.BSD",
			"LICENSE.source-map",
			"README.md",
			"bin",
			"escodegen.js",
			"package.json"
		],
		"version": "1.7.1",
		"engines": {
			"node": ">=0.12.0"
		},
		"maintainers": [
			{
				"name": "constellation",
				"email": "utatane.tea@gmail.com"
			},
			{
				"name": "michaelficarra",
				"email": "npm@michael.ficarra.me"
			}
		],
		"repository": {
			"type": "git",
			"url": "git+ssh://git@github.com/estools/escodegen.git"
		},
		"dependencies": {
			"estraverse": "^1.9.1",
			"esutils": "^2.0.2",
			"esprima": "^1.2.2",
			"optionator": "^0.5.0",
			"source-map": "~0.2.0"
		},
		"optionalDependencies": {
			"source-map": "~0.2.0"
		},
		"devDependencies": {
			"acorn-6to5": "^0.11.1-25",
			"bluebird": "^2.3.11",
			"bower-registry-client": "^0.2.1",
			"chai": "^1.10.0",
			"commonjs-everywhere": "^0.9.7",
			"gulp": "^3.8.10",
			"gulp-eslint": "^0.2.0",
			"gulp-mocha": "^2.0.0",
			"semver": "^5.1.0"
		},
		"license": "BSD-2-Clause",
		"scripts": {
			"test": "gulp travis",
			"unit-test": "gulp test",
			"lint": "gulp lint",
			"release": "node tools/release.js",
			"build-min": "cjsify -ma path: tools/entry-point.js > escodegen.browser.min.js",
			"build": "cjsify -a path: tools/entry-point.js > escodegen.browser.js"
		},
		"gitHead": "f48fa71ce638ec32943c42c2377a08cefe9d8576",
		"bugs": {
			"url": "https://github.com/estools/escodegen/issues"
		},
		"_id": "escodegen@1.7.1",
		"_shasum": "30ecfcf66ca98dc67cd2fd162abeb6eafa8ce6fc",
		"_from": "escodegen@>=1.6.1 <2.0.0",
		"_npmVersion": "2.14.7",
		"_nodeVersion": "4.2.2",
		"_npmUser": {
			"name": "michaelficarra",
			"email": "npm@michael.ficarra.me"
		},
		"dist": {
			"shasum": "30ecfcf66ca98dc67cd2fd162abeb6eafa8ce6fc",
			"tarball": "http://registry.npmjs.org/escodegen/-/escodegen-1.7.1.tgz"
		},
		"directories": {},
		"_resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.7.1.tgz",
		"readme": "ERROR: No README data found!"
	};

/***/ },
/* 612 */
/***/ function(module, exports) {

	module.exports = {
		"0": 65533,
		"128": 8364,
		"130": 8218,
		"131": 402,
		"132": 8222,
		"133": 8230,
		"134": 8224,
		"135": 8225,
		"136": 710,
		"137": 8240,
		"138": 352,
		"139": 8249,
		"140": 338,
		"142": 381,
		"145": 8216,
		"146": 8217,
		"147": 8220,
		"148": 8221,
		"149": 8226,
		"150": 8211,
		"151": 8212,
		"152": 732,
		"153": 8482,
		"154": 353,
		"155": 8250,
		"156": 339,
		"158": 382,
		"159": 376
	};

/***/ },
/* 613 */
/***/ function(module, exports) {

	module.exports = {
		"rules": {
			"*/*": {
				"endpoint": "{service}.{region}.amazonaws.com"
			},
			"cn-*/*": {
				"endpoint": "{service}.{region}.amazonaws.com.cn"
			},
			"*/cloudfront": "globalSSL",
			"*/iam": "globalSSL",
			"*/sts": "globalSSL",
			"*/importexport": {
				"endpoint": "{service}.amazonaws.com",
				"signatureVersion": "v2",
				"globalEndpoint": true
			},
			"*/route53": {
				"endpoint": "https://{service}.amazonaws.com",
				"signatureVersion": "v3https",
				"globalEndpoint": true
			},
			"*/waf": "globalSSL",
			"us-gov-*/iam": "globalGovCloud",
			"us-gov-*/sts": {
				"endpoint": "{service}.{region}.amazonaws.com"
			},
			"us-gov-west-1/s3": "s3dash",
			"us-west-1/s3": "s3dash",
			"us-west-2/s3": "s3dash",
			"eu-west-1/s3": "s3dash",
			"ap-southeast-1/s3": "s3dash",
			"ap-southeast-2/s3": "s3dash",
			"ap-northeast-1/s3": "s3dash",
			"sa-east-1/s3": "s3dash",
			"us-east-1/s3": {
				"endpoint": "{service}.amazonaws.com",
				"signatureVersion": "s3"
			},
			"us-east-1/sdb": {
				"endpoint": "{service}.amazonaws.com",
				"signatureVersion": "v2"
			},
			"*/sdb": {
				"endpoint": "{service}.{region}.amazonaws.com",
				"signatureVersion": "v2"
			}
		},
		"patterns": {
			"globalSSL": {
				"endpoint": "https://{service}.amazonaws.com",
				"globalEndpoint": true
			},
			"globalGovCloud": {
				"endpoint": "{service}.us-gov.amazonaws.com"
			},
			"s3dash": {
				"endpoint": "{service}-{region}.amazonaws.com",
				"signatureVersion": "s3"
			}
		}
	};

/***/ },
/* 614 */
/***/ function(module, exports, __webpack_require__) {

	Object.defineProperty(exports, '__esModule', {
		value: true
	});

	var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

	var _request = __webpack_require__(127);

	var _request2 = _interopRequireDefault(_request);

	var _logger = __webpack_require__(24);

	var _logger2 = _interopRequireDefault(_logger);

	var _dom = __webpack_require__(125);

	var _dom2 = _interopRequireDefault(_dom);

	// import hello from 'hellojs'; //Modifies objects to have id parameter?
	// import hello from 'hellojs'; //After es version of module is created
	//Private object containing clientIds
	var clientIds = {};

	var ProviderAuth = (function () {
		function ProviderAuth(actionData) {
			_classCallCheck(this, ProviderAuth);

			this.app = actionData.app ? actionData.app : null;
			this.redirectUri = actionData.redirectUri ? actionData.redirectUri : 'redirect.html';
			this.provider = actionData.provider ? actionData.provider : null;
		}

		/** Load hellojs library script into DOM
	  */

		_createClass(ProviderAuth, [{
			key: 'loadHello',
			value: function loadHello() {
				//Load hellojs script
				//TODO: Replace this with es6ified version
				if (typeof window != 'undefined' && !window.hello) {
					return _dom2['default'].asyncLoadJs('https://s3.amazonaws.com/kyper-cdn/js/hello.js');
				} else {
					return Promise.reject();
				}
			}
		}, {
			key: 'helloLoginListener',
			value: function helloLoginListener() {
				//Login Listener
				window.hello.on('auth.login', function (auth) {
					_logger2['default'].info({ description: 'User logged in to google.', func: 'loadHello', obj: 'Google' });
					// Call user information, for the given network
					window.hello(auth.network).api('/me').then(function (r) {
						// Inject it into the container
						//TODO:Send account informaiton to server
						var userData = r;
						userData.provider = auth.network;
						//Login or Signup endpoint
						return _request2['default'].post(this.endpoint + '/provider', userData).then(function (response) {
							_logger2['default'].log({ description: 'Provider request successful.', response: response, func: 'signup', obj: 'GoogleUtil' });
							return response;
						})['catch'](function (errRes) {
							_logger2['default'].error({ description: 'Error requesting login.', error: errRes, func: 'signup', obj: 'Matter' });
							return Promise.reject(errRes);
						});
					});
				});
			}

			/** Initialize hellojs library and request app providers
	   */
		}, {
			key: 'initHello',
			value: function initHello() {
				var _this = this;

				return this.loadHello().then(function () {
					return _request2['default'].get(_this.app.endpoint + '/providers').then(function (response) {
						_logger2['default'].log({
							description: 'Provider request successful.', response: response,
							func: 'initHello', obj: 'ProviderAuth'
						});
						var provider = response[_this.provider];
						if (!provider) {
							_logger2['default'].error({
								description: 'Provider is not setup.\n' + 'Visit build.kyper.io to enter your client id for ' + _this.provider,
								provider: _this.provider, clientIds: clientIds,
								func: 'login', obj: 'ProviderAuth'
							});
							return Promise.reject({ message: 'Provider is not setup.' });
						}
						_logger2['default'].log({
							description: 'Providers config built', providersConfig: response,
							func: 'initHello', obj: 'ProviderAuth'
						});
						return window.hello.init(response, { redirect_uri: 'redirect.html' });
					}, function (errRes) {
						_logger2['default'].error({
							description: 'Error loading hellojs.', error: errRes,
							func: 'initHello', obj: 'ProviderAuth'
						});
						return Promise.reject({ message: 'Error requesting application third party providers.' });
					})['catch'](function (errRes) {
						_logger2['default'].error({
							description: 'Error loading hellojs.', error: errRes, func: 'initHello', obj: 'ProviderAuth'
						});
						return Promise.reject({ message: 'Error loading third party login capability.' });
					});
				});
			}

			/** External provider login
	   * @example
	   * //Login to account that was started through external account signup (Google, Facebook, Github)
	   * ProviderAuth('google').login().then(function(loginRes){
	   * 		console.log('Successful login:', loginRes)
	   * }, function(err){
	   * 		console.error('Error with provider login:', err);
	   * });
	   */
		}, {
			key: 'login',
			value: function login() {
				var _this2 = this;

				return this.initHello().then(function () {
					return window.hello.login(_this2.provider);
				}, function (err) {
					_logger2['default'].error({ description: 'Error initalizing hellojs.', error: err, func: 'login', obj: 'Matter' });
					return Promise.reject({ message: 'Error with third party login.' });
				});
			}

			/** Signup using external provider account (Google, Facebook, Github)
	    * @example
	    * //Signup using external account (Google, Facebook, Github)
	    * ProviderAuth('google').signup().then(function(signupRes){
	    * 		console.log('Successful signup:', signupRes)
	    * }, function(err){
	    * 		console.error('Error with provider signup:', err);
	    * });
	   */
		}, {
			key: 'signup',
			value: function signup() {
				//TODO: send info to server
				return this.login();
			}
		}]);

		return ProviderAuth;
	})();

	exports['default'] = ProviderAuth;
	module.exports = exports['default'];

/***/ },
/* 615 */
/***/ function(module, exports, __webpack_require__) {

	var Base64 = __webpack_require__(618);

	module.exports = function(str) {
	  var output = str.replace(/-/g, "+").replace(/_/g, "/");
	  switch (output.length % 4) {
	    case 0:
	      break;
	    case 2:
	      output += "==";
	      break;
	    case 3:
	      output += "=";
	      break;
	    default:
	      throw "Illegal base64url string!";
	  }

	  var result = Base64.atob(output);

	  try{
	    return decodeURIComponent(escape(result));
	  } catch (err) {
	    return result;
	  }
	};


/***/ },
/* 616 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var base64_url_decode = __webpack_require__(615);
	var json_parse = __webpack_require__(617);

	module.exports = function (token) {
	  if (!token) {
	    throw new Error('Invalid token specified');
	  }
	  
	  return json_parse(base64_url_decode(token.split('.')[1]));
	};


/***/ },
/* 617 */
/***/ function(module, exports) {

	module.exports = function (str) {
	  var parsed;
	  if (typeof JSON === 'object') {
	    parsed = JSON.parse(str);
	  } else {
	    parsed = eval('(' + str + ')');
	  }
	  return parsed;
	};


/***/ },
/* 618 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {

	  var
	    object =  true ? exports : this, // #8: web workers
	    chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
	    INVALID_CHARACTER_ERR = (function () {
	      // fabricate a suitable error object
	      try { document.createElement('$'); }
	      catch (error) { return error; }}());

	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) throw INVALID_CHARACTER_ERR;
	      block = block << 8 | charCode;
	    }
	    return output;
	  });

	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '')
	    if (input.length % 4 == 1) throw INVALID_CHARACTER_ERR;
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });

	}());


/***/ },
/* 619 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Module dependencies.
	 */

	var Emitter = __webpack_require__(620);
	var reduce = __webpack_require__(621);

	/**
	 * Root reference for iframes.
	 */

	var root;
	if (typeof window !== 'undefined') { // Browser window
	  root = window;
	} else if (typeof self !== 'undefined') { // Web Worker
	  root = self;
	} else { // Other environments
	  root = this;
	}

	/**
	 * Noop.
	 */

	function noop(){};

	/**
	 * Check if `obj` is a host object,
	 * we don't want to serialize these :)
	 *
	 * TODO: future proof, move to compoent land
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isHost(obj) {
	  var str = {}.toString.call(obj);

	  switch (str) {
	    case '[object File]':
	    case '[object Blob]':
	    case '[object FormData]':
	      return true;
	    default:
	      return false;
	  }
	}

	/**
	 * Determine XHR.
	 */

	request.getXHR = function () {
	  if (root.XMLHttpRequest
	      && (!root.location || 'file:' != root.location.protocol
	          || !root.ActiveXObject)) {
	    return new XMLHttpRequest;
	  } else {
	    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
	    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
	  }
	  return false;
	};

	/**
	 * Removes leading and trailing whitespace, added to support IE.
	 *
	 * @param {String} s
	 * @return {String}
	 * @api private
	 */

	var trim = ''.trim
	  ? function(s) { return s.trim(); }
	  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

	/**
	 * Check if `obj` is an object.
	 *
	 * @param {Object} obj
	 * @return {Boolean}
	 * @api private
	 */

	function isObject(obj) {
	  return obj === Object(obj);
	}

	/**
	 * Serialize the given `obj`.
	 *
	 * @param {Object} obj
	 * @return {String}
	 * @api private
	 */

	function serialize(obj) {
	  if (!isObject(obj)) return obj;
	  var pairs = [];
	  for (var key in obj) {
	    if (null != obj[key]) {
	      pushEncodedKeyValuePair(pairs, key, obj[key]);
	        }
	      }
	  return pairs.join('&');
	}

	/**
	 * Helps 'serialize' with serializing arrays.
	 * Mutates the pairs array.
	 *
	 * @param {Array} pairs
	 * @param {String} key
	 * @param {Mixed} val
	 */

	function pushEncodedKeyValuePair(pairs, key, val) {
	  if (Array.isArray(val)) {
	    return val.forEach(function(v) {
	      pushEncodedKeyValuePair(pairs, key, v);
	    });
	  }
	  pairs.push(encodeURIComponent(key)
	    + '=' + encodeURIComponent(val));
	}

	/**
	 * Expose serialization method.
	 */

	 request.serializeObject = serialize;

	 /**
	  * Parse the given x-www-form-urlencoded `str`.
	  *
	  * @param {String} str
	  * @return {Object}
	  * @api private
	  */

	function parseString(str) {
	  var obj = {};
	  var pairs = str.split('&');
	  var parts;
	  var pair;

	  for (var i = 0, len = pairs.length; i < len; ++i) {
	    pair = pairs[i];
	    parts = pair.split('=');
	    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
	  }

	  return obj;
	}

	/**
	 * Expose parser.
	 */

	request.parseString = parseString;

	/**
	 * Default MIME type map.
	 *
	 *     superagent.types.xml = 'application/xml';
	 *
	 */

	request.types = {
	  html: 'text/html',
	  json: 'application/json',
	  xml: 'application/xml',
	  urlencoded: 'application/x-www-form-urlencoded',
	  'form': 'application/x-www-form-urlencoded',
	  'form-data': 'application/x-www-form-urlencoded'
	};

	/**
	 * Default serialization map.
	 *
	 *     superagent.serialize['application/xml'] = function(obj){
	 *       return 'generated xml here';
	 *     };
	 *
	 */

	 request.serialize = {
	   'application/x-www-form-urlencoded': serialize,
	   'application/json': JSON.stringify
	 };

	 /**
	  * Default parsers.
	  *
	  *     superagent.parse['application/xml'] = function(str){
	  *       return { object parsed from str };
	  *     };
	  *
	  */

	request.parse = {
	  'application/x-www-form-urlencoded': parseString,
	  'application/json': JSON.parse
	};

	/**
	 * Parse the given header `str` into
	 * an object containing the mapped fields.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function parseHeader(str) {
	  var lines = str.split(/\r?\n/);
	  var fields = {};
	  var index;
	  var line;
	  var field;
	  var val;

	  lines.pop(); // trailing CRLF

	  for (var i = 0, len = lines.length; i < len; ++i) {
	    line = lines[i];
	    index = line.indexOf(':');
	    field = line.slice(0, index).toLowerCase();
	    val = trim(line.slice(index + 1));
	    fields[field] = val;
	  }

	  return fields;
	}

	/**
	 * Return the mime type for the given `str`.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function type(str){
	  return str.split(/ *; */).shift();
	};

	/**
	 * Return header field parameters.
	 *
	 * @param {String} str
	 * @return {Object}
	 * @api private
	 */

	function params(str){
	  return reduce(str.split(/ *; */), function(obj, str){
	    var parts = str.split(/ *= */)
	      , key = parts.shift()
	      , val = parts.shift();

	    if (key && val) obj[key] = val;
	    return obj;
	  }, {});
	};

	/**
	 * Initialize a new `Response` with the given `xhr`.
	 *
	 *  - set flags (.ok, .error, etc)
	 *  - parse header
	 *
	 * Examples:
	 *
	 *  Aliasing `superagent` as `request` is nice:
	 *
	 *      request = superagent;
	 *
	 *  We can use the promise-like API, or pass callbacks:
	 *
	 *      request.get('/').end(function(res){});
	 *      request.get('/', function(res){});
	 *
	 *  Sending data can be chained:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' })
	 *        .end(function(res){});
	 *
	 *  Or passed to `.send()`:
	 *
	 *      request
	 *        .post('/user')
	 *        .send({ name: 'tj' }, function(res){});
	 *
	 *  Or passed to `.post()`:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' })
	 *        .end(function(res){});
	 *
	 * Or further reduced to a single call for simple cases:
	 *
	 *      request
	 *        .post('/user', { name: 'tj' }, function(res){});
	 *
	 * @param {XMLHTTPRequest} xhr
	 * @param {Object} options
	 * @api private
	 */

	function Response(req, options) {
	  options = options || {};
	  this.req = req;
	  this.xhr = this.req.xhr;
	  // responseText is accessible only if responseType is '' or 'text' and on older browsers
	  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')
	     ? this.xhr.responseText
	     : null;
	  this.statusText = this.req.xhr.statusText;
	  this.setStatusProperties(this.xhr.status);
	  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
	  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
	  // getResponseHeader still works. so we get content-type even if getting
	  // other headers fails.
	  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
	  this.setHeaderProperties(this.header);
	  this.body = this.req.method != 'HEAD'
	    ? this.parseBody(this.text ? this.text : this.xhr.response)
	    : null;
	}

	/**
	 * Get case-insensitive `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api public
	 */

	Response.prototype.get = function(field){
	  return this.header[field.toLowerCase()];
	};

	/**
	 * Set header related properties:
	 *
	 *   - `.type` the content type without params
	 *
	 * A response of "Content-Type: text/plain; charset=utf-8"
	 * will provide you with a `.type` of "text/plain".
	 *
	 * @param {Object} header
	 * @api private
	 */

	Response.prototype.setHeaderProperties = function(header){
	  // content-type
	  var ct = this.header['content-type'] || '';
	  this.type = type(ct);

	  // params
	  var obj = params(ct);
	  for (var key in obj) this[key] = obj[key];
	};

	/**
	 * Parse the given body `str`.
	 *
	 * Used for auto-parsing of bodies. Parsers
	 * are defined on the `superagent.parse` object.
	 *
	 * @param {String} str
	 * @return {Mixed}
	 * @api private
	 */

	Response.prototype.parseBody = function(str){
	  var parse = request.parse[this.type];
	  return parse && str && (str.length || str instanceof Object)
	    ? parse(str)
	    : null;
	};

	/**
	 * Set flags such as `.ok` based on `status`.
	 *
	 * For example a 2xx response will give you a `.ok` of __true__
	 * whereas 5xx will be __false__ and `.error` will be __true__. The
	 * `.clientError` and `.serverError` are also available to be more
	 * specific, and `.statusType` is the class of error ranging from 1..5
	 * sometimes useful for mapping respond colors etc.
	 *
	 * "sugar" properties are also defined for common cases. Currently providing:
	 *
	 *   - .noContent
	 *   - .badRequest
	 *   - .unauthorized
	 *   - .notAcceptable
	 *   - .notFound
	 *
	 * @param {Number} status
	 * @api private
	 */

	Response.prototype.setStatusProperties = function(status){
	  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request
	  if (status === 1223) {
	    status = 204;
	  }

	  var type = status / 100 | 0;

	  // status / class
	  this.status = this.statusCode = status;
	  this.statusType = type;

	  // basics
	  this.info = 1 == type;
	  this.ok = 2 == type;
	  this.clientError = 4 == type;
	  this.serverError = 5 == type;
	  this.error = (4 == type || 5 == type)
	    ? this.toError()
	    : false;

	  // sugar
	  this.accepted = 202 == status;
	  this.noContent = 204 == status;
	  this.badRequest = 400 == status;
	  this.unauthorized = 401 == status;
	  this.notAcceptable = 406 == status;
	  this.notFound = 404 == status;
	  this.forbidden = 403 == status;
	};

	/**
	 * Return an `Error` representative of this response.
	 *
	 * @return {Error}
	 * @api public
	 */

	Response.prototype.toError = function(){
	  var req = this.req;
	  var method = req.method;
	  var url = req.url;

	  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';
	  var err = new Error(msg);
	  err.status = this.status;
	  err.method = method;
	  err.url = url;

	  return err;
	};

	/**
	 * Expose `Response`.
	 */

	request.Response = Response;

	/**
	 * Initialize a new `Request` with the given `method` and `url`.
	 *
	 * @param {String} method
	 * @param {String} url
	 * @api public
	 */

	function Request(method, url) {
	  var self = this;
	  Emitter.call(this);
	  this._query = this._query || [];
	  this.method = method;
	  this.url = url;
	  this.header = {};
	  this._header = {};
	  this.on('end', function(){
	    var err = null;
	    var res = null;

	    try {
	      res = new Response(self);
	    } catch(e) {
	      err = new Error('Parser is unable to parse the response');
	      err.parse = true;
	      err.original = e;
	      return self.callback(err);
	    }

	    self.emit('response', res);

	    if (err) {
	      return self.callback(err, res);
	    }

	    if (res.status >= 200 && res.status < 300) {
	      return self.callback(err, res);
	    }

	    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');
	    new_err.original = err;
	    new_err.response = res;
	    new_err.status = res.status;

	    self.callback(new_err, res);
	  });
	}

	/**
	 * Mixin `Emitter`.
	 */

	Emitter(Request.prototype);

	/**
	 * Allow for extension
	 */

	Request.prototype.use = function(fn) {
	  fn(this);
	  return this;
	}

	/**
	 * Set timeout to `ms`.
	 *
	 * @param {Number} ms
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.timeout = function(ms){
	  this._timeout = ms;
	  return this;
	};

	/**
	 * Clear previous timeout.
	 *
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.clearTimeout = function(){
	  this._timeout = 0;
	  clearTimeout(this._timer);
	  return this;
	};

	/**
	 * Abort the request, and clear potential timeout.
	 *
	 * @return {Request}
	 * @api public
	 */

	Request.prototype.abort = function(){
	  if (this.aborted) return;
	  this.aborted = true;
	  this.xhr.abort();
	  this.clearTimeout();
	  this.emit('abort');
	  return this;
	};

	/**
	 * Set header `field` to `val`, or multiple fields with one object.
	 *
	 * Examples:
	 *
	 *      req.get('/')
	 *        .set('Accept', 'application/json')
	 *        .set('X-API-Key', 'foobar')
	 *        .end(callback);
	 *
	 *      req.get('/')
	 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
	 *        .end(callback);
	 *
	 * @param {String|Object} field
	 * @param {String} val
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.set = function(field, val){
	  if (isObject(field)) {
	    for (var key in field) {
	      this.set(key, field[key]);
	    }
	    return this;
	  }
	  this._header[field.toLowerCase()] = val;
	  this.header[field] = val;
	  return this;
	};

	/**
	 * Remove header `field`.
	 *
	 * Example:
	 *
	 *      req.get('/')
	 *        .unset('User-Agent')
	 *        .end(callback);
	 *
	 * @param {String} field
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.unset = function(field){
	  delete this._header[field.toLowerCase()];
	  delete this.header[field];
	  return this;
	};

	/**
	 * Get case-insensitive header `field` value.
	 *
	 * @param {String} field
	 * @return {String}
	 * @api private
	 */

	Request.prototype.getHeader = function(field){
	  return this._header[field.toLowerCase()];
	};

	/**
	 * Set Content-Type to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.xml = 'application/xml';
	 *
	 *      request.post('/')
	 *        .type('xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 *      request.post('/')
	 *        .type('application/xml')
	 *        .send(xmlstring)
	 *        .end(callback);
	 *
	 * @param {String} type
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.type = function(type){
	  this.set('Content-Type', request.types[type] || type);
	  return this;
	};

	/**
	 * Force given parser
	 *
	 * Sets the body parser no matter type.
	 *
	 * @param {Function}
	 * @api public
	 */

	Request.prototype.parse = function(fn){
	  this._parser = fn;
	  return this;
	};

	/**
	 * Set Accept to `type`, mapping values from `request.types`.
	 *
	 * Examples:
	 *
	 *      superagent.types.json = 'application/json';
	 *
	 *      request.get('/agent')
	 *        .accept('json')
	 *        .end(callback);
	 *
	 *      request.get('/agent')
	 *        .accept('application/json')
	 *        .end(callback);
	 *
	 * @param {String} accept
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.accept = function(type){
	  this.set('Accept', request.types[type] || type);
	  return this;
	};

	/**
	 * Set Authorization field value with `user` and `pass`.
	 *
	 * @param {String} user
	 * @param {String} pass
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.auth = function(user, pass){
	  var str = btoa(user + ':' + pass);
	  this.set('Authorization', 'Basic ' + str);
	  return this;
	};

	/**
	* Add query-string `val`.
	*
	* Examples:
	*
	*   request.get('/shoes')
	*     .query('size=10')
	*     .query({ color: 'blue' })
	*
	* @param {Object|String} val
	* @return {Request} for chaining
	* @api public
	*/

	Request.prototype.query = function(val){
	  if ('string' != typeof val) val = serialize(val);
	  if (val) this._query.push(val);
	  return this;
	};

	/**
	 * Write the field `name` and `val` for "multipart/form-data"
	 * request bodies.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .field('foo', 'bar')
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} name
	 * @param {String|Blob|File} val
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.field = function(name, val){
	  if (!this._formData) this._formData = new root.FormData();
	  this._formData.append(name, val);
	  return this;
	};

	/**
	 * Queue the given `file` as an attachment to the specified `field`,
	 * with optional `filename`.
	 *
	 * ``` js
	 * request.post('/upload')
	 *   .attach(new Blob(['<a id="a"><b id="b">hey!</b></a>'], { type: "text/html"}))
	 *   .end(callback);
	 * ```
	 *
	 * @param {String} field
	 * @param {Blob|File} file
	 * @param {String} filename
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.attach = function(field, file, filename){
	  if (!this._formData) this._formData = new root.FormData();
	  this._formData.append(field, file, filename);
	  return this;
	};

	/**
	 * Send `data`, defaulting the `.type()` to "json" when
	 * an object is given.
	 *
	 * Examples:
	 *
	 *       // querystring
	 *       request.get('/search')
	 *         .end(callback)
	 *
	 *       // multiple data "writes"
	 *       request.get('/search')
	 *         .send({ search: 'query' })
	 *         .send({ range: '1..5' })
	 *         .send({ order: 'desc' })
	 *         .end(callback)
	 *
	 *       // manual json
	 *       request.post('/user')
	 *         .type('json')
	 *         .send('{"name":"tj"}')
	 *         .end(callback)
	 *
	 *       // auto json
	 *       request.post('/user')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // manual x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send('name=tj')
	 *         .end(callback)
	 *
	 *       // auto x-www-form-urlencoded
	 *       request.post('/user')
	 *         .type('form')
	 *         .send({ name: 'tj' })
	 *         .end(callback)
	 *
	 *       // defaults to x-www-form-urlencoded
	  *      request.post('/user')
	  *        .send('name=tobi')
	  *        .send('species=ferret')
	  *        .end(callback)
	 *
	 * @param {String|Object} data
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.send = function(data){
	  var obj = isObject(data);
	  var type = this.getHeader('Content-Type');

	  // merge
	  if (obj && isObject(this._data)) {
	    for (var key in data) {
	      this._data[key] = data[key];
	    }
	  } else if ('string' == typeof data) {
	    if (!type) this.type('form');
	    type = this.getHeader('Content-Type');
	    if ('application/x-www-form-urlencoded' == type) {
	      this._data = this._data
	        ? this._data + '&' + data
	        : data;
	    } else {
	      this._data = (this._data || '') + data;
	    }
	  } else {
	    this._data = data;
	  }

	  if (!obj || isHost(data)) return this;
	  if (!type) this.type('json');
	  return this;
	};

	/**
	 * Invoke the callback with `err` and `res`
	 * and handle arity check.
	 *
	 * @param {Error} err
	 * @param {Response} res
	 * @api private
	 */

	Request.prototype.callback = function(err, res){
	  var fn = this._callback;
	  this.clearTimeout();
	  fn(err, res);
	};

	/**
	 * Invoke callback with x-domain error.
	 *
	 * @api private
	 */

	Request.prototype.crossDomainError = function(){
	  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');
	  err.crossDomain = true;
	  this.callback(err);
	};

	/**
	 * Invoke callback with timeout error.
	 *
	 * @api private
	 */

	Request.prototype.timeoutError = function(){
	  var timeout = this._timeout;
	  var err = new Error('timeout of ' + timeout + 'ms exceeded');
	  err.timeout = timeout;
	  this.callback(err);
	};

	/**
	 * Enable transmission of cookies with x-domain requests.
	 *
	 * Note that for this to work the origin must not be
	 * using "Access-Control-Allow-Origin" with a wildcard,
	 * and also must set "Access-Control-Allow-Credentials"
	 * to "true".
	 *
	 * @api public
	 */

	Request.prototype.withCredentials = function(){
	  this._withCredentials = true;
	  return this;
	};

	/**
	 * Initiate request, invoking callback `fn(res)`
	 * with an instanceof `Response`.
	 *
	 * @param {Function} fn
	 * @return {Request} for chaining
	 * @api public
	 */

	Request.prototype.end = function(fn){
	  var self = this;
	  var xhr = this.xhr = request.getXHR();
	  var query = this._query.join('&');
	  var timeout = this._timeout;
	  var data = this._formData || this._data;

	  // store callback
	  this._callback = fn || noop;

	  // state change
	  xhr.onreadystatechange = function(){
	    if (4 != xhr.readyState) return;

	    // In IE9, reads to any property (e.g. status) off of an aborted XHR will
	    // result in the error "Could not complete the operation due to error c00c023f"
	    var status;
	    try { status = xhr.status } catch(e) { status = 0; }

	    if (0 == status) {
	      if (self.timedout) return self.timeoutError();
	      if (self.aborted) return;
	      return self.crossDomainError();
	    }
	    self.emit('end');
	  };

	  // progress
	  var handleProgress = function(e){
	    if (e.total > 0) {
	      e.percent = e.loaded / e.total * 100;
	    }
	    self.emit('progress', e);
	  };
	  if (this.hasListeners('progress')) {
	    xhr.onprogress = handleProgress;
	  }
	  try {
	    if (xhr.upload && this.hasListeners('progress')) {
	      xhr.upload.onprogress = handleProgress;
	    }
	  } catch(e) {
	    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.
	    // Reported here:
	    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context
	  }

	  // timeout
	  if (timeout && !this._timer) {
	    this._timer = setTimeout(function(){
	      self.timedout = true;
	      self.abort();
	    }, timeout);
	  }

	  // querystring
	  if (query) {
	    query = request.serializeObject(query);
	    this.url += ~this.url.indexOf('?')
	      ? '&' + query
	      : '?' + query;
	  }

	  // initiate request
	  xhr.open(this.method, this.url, true);

	  // CORS
	  if (this._withCredentials) xhr.withCredentials = true;

	  // body
	  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
	    // serialize stuff
	    var contentType = this.getHeader('Content-Type');
	    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];
	    if (serialize) data = serialize(data);
	  }

	  // set header fields
	  for (var field in this.header) {
	    if (null == this.header[field]) continue;
	    xhr.setRequestHeader(field, this.header[field]);
	  }

	  // send stuff
	  this.emit('request', this);

	  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)
	  // We need null here if data is undefined
	  xhr.send(typeof data !== 'undefined' ? data : null);
	  return this;
	};

	/**
	 * Faux promise support
	 *
	 * @param {Function} fulfill
	 * @param {Function} reject
	 * @return {Request}
	 */

	Request.prototype.then = function (fulfill, reject) {
	  return this.end(function(err, res) {
	    err ? reject(err) : fulfill(res);
	  });
	}

	/**
	 * Expose `Request`.
	 */

	request.Request = Request;

	/**
	 * Issue a request:
	 *
	 * Examples:
	 *
	 *    request('GET', '/users').end(callback)
	 *    request('/users').end(callback)
	 *    request('/users', callback)
	 *
	 * @param {String} method
	 * @param {String|Function} url or callback
	 * @return {Request}
	 * @api public
	 */

	function request(method, url) {
	  // callback
	  if ('function' == typeof url) {
	    return new Request('GET', method).end(url);
	  }

	  // url first
	  if (1 == arguments.length) {
	    return new Request('GET', method);
	  }

	  return new Request(method, url);
	}

	/**
	 * GET `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.get = function(url, data, fn){
	  var req = request('GET', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.query(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * HEAD `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.head = function(url, data, fn){
	  var req = request('HEAD', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * DELETE `url` with optional callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	function del(url, fn){
	  var req = request('DELETE', url);
	  if (fn) req.end(fn);
	  return req;
	};

	request.del = del;
	request.delete = del;

	/**
	 * PATCH `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.patch = function(url, data, fn){
	  var req = request('PATCH', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * POST `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed} data
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.post = function(url, data, fn){
	  var req = request('POST', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * PUT `url` with optional `data` and callback `fn(res)`.
	 *
	 * @param {String} url
	 * @param {Mixed|Function} data or fn
	 * @param {Function} fn
	 * @return {Request}
	 * @api public
	 */

	request.put = function(url, data, fn){
	  var req = request('PUT', url);
	  if ('function' == typeof data) fn = data, data = null;
	  if (data) req.send(data);
	  if (fn) req.end(fn);
	  return req;
	};

	/**
	 * Expose `request`.
	 */

	module.exports = request;


/***/ },
/* 620 */
/***/ function(module, exports) {

	
	/**
	 * Expose `Emitter`.
	 */

	module.exports = Emitter;

	/**
	 * Initialize a new `Emitter`.
	 *
	 * @api public
	 */

	function Emitter(obj) {
	  if (obj) return mixin(obj);
	};

	/**
	 * Mixin the emitter properties.
	 *
	 * @param {Object} obj
	 * @return {Object}
	 * @api private
	 */

	function mixin(obj) {
	  for (var key in Emitter.prototype) {
	    obj[key] = Emitter.prototype[key];
	  }
	  return obj;
	}

	/**
	 * Listen on the given `event` with `fn`.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.on =
	Emitter.prototype.addEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};
	  (this._callbacks[event] = this._callbacks[event] || [])
	    .push(fn);
	  return this;
	};

	/**
	 * Adds an `event` listener that will be invoked a single
	 * time then automatically removed.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.once = function(event, fn){
	  var self = this;
	  this._callbacks = this._callbacks || {};

	  function on() {
	    self.off(event, on);
	    fn.apply(this, arguments);
	  }

	  on.fn = fn;
	  this.on(event, on);
	  return this;
	};

	/**
	 * Remove the given callback for `event` or all
	 * registered callbacks.
	 *
	 * @param {String} event
	 * @param {Function} fn
	 * @return {Emitter}
	 * @api public
	 */

	Emitter.prototype.off =
	Emitter.prototype.removeListener =
	Emitter.prototype.removeAllListeners =
	Emitter.prototype.removeEventListener = function(event, fn){
	  this._callbacks = this._callbacks || {};

	  // all
	  if (0 == arguments.length) {
	    this._callbacks = {};
	    return this;
	  }

	  // specific event
	  var callbacks = this._callbacks[event];
	  if (!callbacks) return this;

	  // remove all handlers
	  if (1 == arguments.length) {
	    delete this._callbacks[event];
	    return this;
	  }

	  // remove specific handler
	  var cb;
	  for (var i = 0; i < callbacks.length; i++) {
	    cb = callbacks[i];
	    if (cb === fn || cb.fn === fn) {
	      callbacks.splice(i, 1);
	      break;
	    }
	  }
	  return this;
	};

	/**
	 * Emit `event` with the given args.
	 *
	 * @param {String} event
	 * @param {Mixed} ...
	 * @return {Emitter}
	 */

	Emitter.prototype.emit = function(event){
	  this._callbacks = this._callbacks || {};
	  var args = [].slice.call(arguments, 1)
	    , callbacks = this._callbacks[event];

	  if (callbacks) {
	    callbacks = callbacks.slice(0);
	    for (var i = 0, len = callbacks.length; i < len; ++i) {
	      callbacks[i].apply(this, args);
	    }
	  }

	  return this;
	};

	/**
	 * Return array of callbacks for `event`.
	 *
	 * @param {String} event
	 * @return {Array}
	 * @api public
	 */

	Emitter.prototype.listeners = function(event){
	  this._callbacks = this._callbacks || {};
	  return this._callbacks[event] || [];
	};

	/**
	 * Check if this emitter has `event` handlers.
	 *
	 * @param {String} event
	 * @return {Boolean}
	 * @api public
	 */

	Emitter.prototype.hasListeners = function(event){
	  return !! this.listeners(event).length;
	};


/***/ },
/* 621 */
/***/ function(module, exports) {

	
	/**
	 * Reduce `arr` with `fn`.
	 *
	 * @param {Array} arr
	 * @param {Function} fn
	 * @param {Mixed} initial
	 *
	 * TODO: combatible error handling?
	 */

	module.exports = function(arr, fn, initial){  
	  var idx = 0;
	  var len = arr.length;
	  var curr = arguments.length == 3
	    ? initial
	    : arr[idx++];

	  while (idx < len) {
	    curr = fn.call(null, curr, arr[idx], ++idx, arr);
	  }
	  
	  return curr;
	};

/***/ },
/* 622 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(2);
	module.exports = AWS;

	// Use default API loader function
	AWS.apiLoader = __webpack_require__(130).load;

	// Load the xml2js XML parser
	AWS.XML.Parser = __webpack_require__(655);

	// Load Node HTTP client
	__webpack_require__(636);

	// Load all service classes
	__webpack_require__(646);

	// Load custom credential providers
	__webpack_require__(625);
	__webpack_require__(626);
	__webpack_require__(627);
	__webpack_require__(629);

	// Setup default chain providers
	AWS.CredentialProviderChain.defaultProviders = [
	  function () { return new AWS.EnvironmentCredentials('AWS'); },
	  function () { return new AWS.EnvironmentCredentials('AMAZON'); },
	  function () { return new AWS.SharedIniFileCredentials(); },
	  function () { return new AWS.EC2MetadataCredentials(); }
	];

	// Update configuration keys
	AWS.util.update(AWS.Config.prototype.keys, {
	  credentials: function () {
	    var credentials = null;
	    new AWS.CredentialProviderChain([
	      function () { return new AWS.EnvironmentCredentials('AWS'); },
	      function () { return new AWS.EnvironmentCredentials('AMAZON'); },
	      function () { return new AWS.SharedIniFileCredentials(); }
	    ]).resolve(function(err, creds) {
	      if (!err) credentials = creds;
	    });
	    return credentials;
	  },
	  credentialProvider: function() {
	    return new AWS.CredentialProviderChain();
	  },
	  region: function() {
	    return process.env.AWS_REGION || process.env.AMAZON_REGION;
	  }
	});

	// Reset configuration
	AWS.config = new AWS.Config();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 623 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	__webpack_require__(131);
	__webpack_require__(132);

	/**
	 * The main configuration class used by all service objects to set
	 * the region, credentials, and other options for requests.
	 *
	 * By default, credentials and region settings are left unconfigured.
	 * This should be configured by the application before using any
	 * AWS service APIs.
	 *
	 * In order to set global configuration options, properties should
	 * be assigned to the global {AWS.config} object.
	 *
	 * @see AWS.config
	 *
	 * @!group General Configuration Options
	 *
	 * @!attribute credentials
	 *   @return [AWS.Credentials] the AWS credentials to sign requests with.
	 *
	 * @!attribute region
	 *   @example Set the global region setting to us-west-2
	 *     AWS.config.update({region: 'us-west-2'});
	 *   @return [AWS.Credentials] The region to send service requests to.
	 *   @see http://docs.amazonwebservices.com/general/latest/gr/rande.html
	 *     A list of available endpoints for each AWS service
	 *
	 * @!attribute maxRetries
	 *   @return [Integer] the maximum amount of retries to perform for a
	 *     service request. By default this value is calculated by the specific
	 *     service object that the request is being made to.
	 *
	 * @!attribute maxRedirects
	 *   @return [Integer] the maximum amount of redirects to follow for a
	 *     service request. Defaults to 10.
	 *
	 * @!attribute paramValidation
	 *   @return [Boolean] whether input parameters should be validated against
	 *     the operation description before sending the request. Defaults to true.
	 *
	 * @!attribute computeChecksums
	 *   @return [Boolean] whether to compute checksums for payload bodies when
	 *     the service accepts it (currently supported in S3 only).
	 *
	 * @!attribute convertResponseTypes
	 *   @return [Boolean] whether types are converted when parsing response data.
	 *     Currently only supported for JSON based services. Turning this off may
	 *     improve performance on large response payloads. Defaults to `true`.
	 *
	 * @!attribute correctClockSkew
	 *   @return [Boolean] whether to apply a clock skew correction and retry
	 *     requests that fail because of an skewed client clock. Defaults to
	 *     `false`.
	 *
	 * @!attribute sslEnabled
	 *   @return [Boolean] whether SSL is enabled for requests
	 *
	 * @!attribute s3ForcePathStyle
	 *   @return [Boolean] whether to force path style URLs for S3 objects
	 *
	 * @!attribute s3BucketEndpoint
	 *   @note Setting this configuration option requires an `endpoint` to be
	 *     provided explicitly to the service constructor.
	 *   @return [Boolean] whether the provided endpoint addresses an individual
	 *     bucket (false if it addresses the root API endpoint).
	 *
	 * @!attribute httpOptions
	 *   @return [map] A set of options to pass to the low-level HTTP request.
	 *     Currently supported options are:
	 *
	 *     * **proxy** [String] &mdash; the URL to proxy requests through
	 *     * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
	 *       HTTP requests with. Used for connection pooling. Defaults to the global
	 *       agent (`http.globalAgent`) for non-SSL connections. Note that for
	 *       SSL connections, a special Agent object is used in order to enable
	 *       peer certificate verification. This feature is only supported in the
	 *       Node.js environment.
	 *     * **timeout** [Integer] &mdash; The number of milliseconds to wait before
	 *       giving up on a connection attempt. Defaults to two minutes (120000).
	 *     * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
	 *       HTTP requests. Used in the browser environment only. Set to false to
	 *       send requests synchronously. Defaults to true (async on).
	 *     * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
	 *       property of an XMLHttpRequest object. Used in the browser environment
	 *       only. Defaults to false.
	 * @!attribute logger
	 *   @return [#write,#log] an object that responds to .write() (like a stream)
	 *     or .log() (like the console object) in order to log information about
	 *     requests
	 *
	 * @!attribute systemClockOffset
	 *   @return [Number] an offset value in milliseconds to apply to all signing
	 *     times. Use this to compensate for clock skew when your system may be
	 *     out of sync with the service time. Note that this configuration option
	 *     can only be applied to the global `AWS.config` object and cannot be
	 *     overridden in service-specific configuration. Defaults to 0 milliseconds.
	 *
	 * @!attribute signatureVersion
	 *   @return [String] the signature version to sign requests with (overriding
	 *     the API configuration). Possible values are: 'v2', 'v3', 'v4'.
	 *
	 * @!attribute signatureCache
	 *   @return [Boolean] whether the signature to sign requests with (overriding
	 *     the API configuration) is cached. Only applies to the signature version 'v4'.
	 *     Defaults to `true`.
	 */
	AWS.Config = AWS.util.inherit({
	  /**
	   * @!endgroup
	   */

	  /**
	   * Creates a new configuration object. This is the object that passes
	   * option data along to service requests, including credentials, security,
	   * region information, and some service specific settings.
	   *
	   * @example Creating a new configuration object with credentials and region
	   *   var config = new AWS.Config({
	   *     accessKeyId: 'AKID', secretAccessKey: 'SECRET', region: 'us-west-2'
	   *   });
	   * @option options accessKeyId [String] your AWS access key ID.
	   * @option options secretAccessKey [String] your AWS secret access key.
	   * @option options sessionToken [AWS.Credentials] the optional AWS
	   *   session token to sign requests with.
	   * @option options credentials [AWS.Credentials] the AWS credentials
	   *   to sign requests with. You can either specify this object, or
	   *   specify the accessKeyId and secretAccessKey options directly.
	   * @option options credentialProvider [AWS.CredentialProviderChain] the
	   *   provider chain used to resolve credentials if no static `credentials`
	   *   property is set.
	   * @option options region [String] the region to send service requests to.
	   *   See {region} for more information.
	   * @option options maxRetries [Integer] the maximum amount of retries to
	   *   attempt with a request. See {maxRetries} for more information.
	   * @option options maxRedirects [Integer] the maximum amount of redirects to
	   *   follow with a request. See {maxRedirects} for more information.
	   * @option options sslEnabled [Boolean] whether to enable SSL for
	   *   requests.
	   * @option options paramValidation [Boolean] whether parameter validation
	   *   is on.
	   * @option options computeChecksums [Boolean] whether to compute checksums
	   *   for payload bodies when the service accepts it (currently supported
	   *   in S3 only)
	   * @option options convertResponseTypes [Boolean] whether types are converted
	   *     when parsing response data. Currently only supported for JSON based
	   *     services. Turning this off may improve performance on large response
	   *     payloads. Defaults to `true`.
	   * @option options correctClockSkew [Boolean] whether to apply a clock skew
	   *     correction and retry requests that fail because of an skewed client
	   *     clock. Defaults to `false`.
	   * @option options s3ForcePathStyle [Boolean] whether to force path
	   *   style URLs for S3 objects.
	   * @option options s3BucketEndpoint [Boolean] whether the provided endpoint
	   *   addresses an individual bucket (false if it addresses the root API
	   *   endpoint). Note that setting this configuration option requires an
	   *   `endpoint` to be provided explicitly to the service constructor.
	   * @option options httpOptions [map] A set of options to pass to the low-level
	   *   HTTP request. Currently supported options are:
	   *
	   *   * **proxy** [String] &mdash; the URL to proxy requests through
	   *   * **agent** [http.Agent, https.Agent] &mdash; the Agent object to perform
	   *     HTTP requests with. Used for connection pooling. Defaults to the global
	   *     agent (`http.globalAgent`) for non-SSL connections. Note that for
	   *     SSL connections, a special Agent object is used in order to enable
	   *     peer certificate verification. This feature is only available in the
	   *     Node.js environment.
	   *   * **timeout** [Integer] &mdash; Sets the socket to timeout after timeout
	   *     milliseconds of inactivity on the socket. Defaults to two minutes
	   *     (120000).
	   *   * **xhrAsync** [Boolean] &mdash; Whether the SDK will send asynchronous
	   *     HTTP requests. Used in the browser environment only. Set to false to
	   *     send requests synchronously. Defaults to true (async on).
	   *   * **xhrWithCredentials** [Boolean] &mdash; Sets the "withCredentials"
	   *     property of an XMLHttpRequest object. Used in the browser environment
	   *     only. Defaults to false.
	   * @option options apiVersion [String, Date] a String in YYYY-MM-DD format
	   *   (or a date) that represents the latest possible API version that can be
	   *   used in all services (unless overridden by `apiVersions`). Specify
	   *   'latest' to use the latest possible version.
	   * @option options apiVersions [map<String, String|Date>] a map of service
	   *   identifiers (the lowercase service class name) with the API version to
	   *   use when instantiating a service. Specify 'latest' for each individual
	   *   that can use the latest available version.
	   * @option options logger [#write,#log] an object that responds to .write()
	   *   (like a stream) or .log() (like the console object) in order to log
	   *   information about requests
	   * @option options systemClockOffset [Number] an offset value in milliseconds
	   *   to apply to all signing times. Use this to compensate for clock skew
	   *   when your system may be out of sync with the service time. Note that
	   *   this configuration option can only be applied to the global `AWS.config`
	   *   object and cannot be overridden in service-specific configuration.
	   *   Defaults to 0 milliseconds.
	   * @option options signatureVersion [String] the signature version to sign
	   *   requests with (overriding the API configuration). Possible values are:
	   *   'v2', 'v3', 'v4'.
	   * @option options signatureCache [Boolean] whether the signature to sign
	   *   requests with (overriding the API configuration) is cached. Only applies
	   *   to the signature version 'v4'. Defaults to `true`.
	   */
	  constructor: function Config(options) {
	    if (options === undefined) options = {};
	    options = this.extractCredentials(options);

	    AWS.util.each.call(this, this.keys, function (key, value) {
	      this.set(key, options[key], value);
	    });
	  },

	  /**
	   * @!group Managing Credentials
	   */

	  /**
	   * Loads credentials from the configuration object. This is used internally
	   * by the SDK to ensure that refreshable {Credentials} objects are properly
	   * refreshed and loaded when sending a request. If you want to ensure that
	   * your credentials are loaded prior to a request, you can use this method
	   * directly to provide accurate credential data stored in the object.
	   *
	   * @note If you configure the SDK with static or environment credentials,
	   *   the credential data should already be present in {credentials} attribute.
	   *   This method is primarily necessary to load credentials from asynchronous
	   *   sources, or sources that can refresh credentials periodically.
	   * @example Getting your access key
	   *   AWS.config.getCredentials(function(err) {
	   *     if (err) console.log(err.stack); // credentials not loaded
	   *     else console.log("Access Key:", AWS.config.credentials.accessKeyId);
	   *   })
	   * @callback callback function(err)
	   *   Called when the {credentials} have been properly set on the configuration
	   *   object.
	   *
	   *   @param err [Error] if this is set, credentials were not successfuly
	   *     loaded and this error provides information why.
	   * @see credentials
	   * @see Credentials
	   */
	  getCredentials: function getCredentials(callback) {
	    var self = this;

	    function finish(err) {
	      callback(err, err ? null : self.credentials);
	    }

	    function credError(msg, err) {
	      return new AWS.util.error(err || new Error(), {
	        code: 'CredentialsError', message: msg
	      });
	    }

	    function getAsyncCredentials() {
	      self.credentials.get(function(err) {
	        if (err) {
	          var msg = 'Could not load credentials from ' +
	            self.credentials.constructor.name;
	          err = credError(msg, err);
	        }
	        finish(err);
	      });
	    }

	    function getStaticCredentials() {
	      var err = null;
	      if (!self.credentials.accessKeyId || !self.credentials.secretAccessKey) {
	        err = credError('Missing credentials');
	      }
	      finish(err);
	    }

	    if (self.credentials) {
	      if (typeof self.credentials.get === 'function') {
	        getAsyncCredentials();
	      } else { // static credentials
	        getStaticCredentials();
	      }
	    } else if (self.credentialProvider) {
	      self.credentialProvider.resolve(function(err, creds) {
	        if (err) {
	          err = credError('Could not load credentials from any providers', err);
	        }
	        self.credentials = creds;
	        finish(err);
	      });
	    } else {
	      finish(credError('No credentials to load'));
	    }
	  },

	  /**
	   * @!group Loading and Setting Configuration Options
	   */

	  /**
	   * @overload update(options, allowUnknownKeys = false)
	   *   Updates the current configuration object with new options.
	   *
	   *   @example Update maxRetries property of a configuration object
	   *     config.update({maxRetries: 10});
	   *   @param [Object] options a map of option keys and values.
	   *   @param [Boolean] allowUnknownKeys whether unknown keys can be set on
	   *     the configuration object. Defaults to `false`.
	   *   @see constructor
	   */
	  update: function update(options, allowUnknownKeys) {
	    allowUnknownKeys = allowUnknownKeys || false;
	    options = this.extractCredentials(options);
	    AWS.util.each.call(this, options, function (key, value) {
	      if (allowUnknownKeys || this.keys.hasOwnProperty(key) ||
	          AWS.Service.hasService(key)) {
	        this.set(key, value);
	      }
	    });
	  },

	  /**
	   * Loads configuration data from a JSON file into this config object.
	   * @note Loading configuration will reset all existing configuration
	   *   on the object.
	   * @!macro nobrowser
	   * @param path [String] the path relative to your process's current
	   *    working directory to load configuration from.
	   * @return [AWS.Config] the same configuration object
	   */
	  loadFromPath: function loadFromPath(path) {
	    this.clear();

	    var options = JSON.parse(AWS.util.readFileSync(path));
	    var fileSystemCreds = new AWS.FileSystemCredentials(path);
	    var chain = new AWS.CredentialProviderChain();
	    chain.providers.unshift(fileSystemCreds);
	    chain.resolve(function (err, creds) {
	      if (err) throw err;
	      else options.credentials = creds;
	    });

	    this.constructor(options);

	    return this;
	  },

	  /**
	   * Clears configuration data on this object
	   *
	   * @api private
	   */
	  clear: function clear() {
	    /*jshint forin:false */
	    AWS.util.each.call(this, this.keys, function (key) {
	      delete this[key];
	    });

	    // reset credential provider
	    this.set('credentials', undefined);
	    this.set('credentialProvider', undefined);
	  },

	  /**
	   * Sets a property on the configuration object, allowing for a
	   * default value
	   * @api private
	   */
	  set: function set(property, value, defaultValue) {
	    if (value === undefined) {
	      if (defaultValue === undefined) {
	        defaultValue = this.keys[property];
	      }
	      if (typeof defaultValue === 'function') {
	        this[property] = defaultValue.call(this);
	      } else {
	        this[property] = defaultValue;
	      }
	    } else if (property === 'httpOptions' && this[property]) {
	      // deep merge httpOptions
	      this[property] = AWS.util.merge(this[property], value);
	    } else {
	      this[property] = value;
	    }
	  },

	  /**
	   * All of the keys with their default values.
	   *
	   * @constant
	   * @api private
	   */
	  keys: {
	    credentials: null,
	    credentialProvider: null,
	    region: null,
	    logger: null,
	    apiVersions: {},
	    apiVersion: null,
	    endpoint: undefined,
	    httpOptions: {
	      timeout: 120000
	    },
	    maxRetries: undefined,
	    maxRedirects: 10,
	    paramValidation: true,
	    sslEnabled: true,
	    s3ForcePathStyle: false,
	    s3BucketEndpoint: false,
	    computeChecksums: true,
	    convertResponseTypes: true,
	    correctClockSkew: false,
	    dynamoDbCrc32: true,
	    systemClockOffset: 0,
	    signatureVersion: null,
	    signatureCache: true
	  },

	  /**
	   * Extracts accessKeyId, secretAccessKey and sessionToken
	   * from a configuration hash.
	   *
	   * @api private
	   */
	  extractCredentials: function extractCredentials(options) {
	    if (options.accessKeyId && options.secretAccessKey) {
	      options = AWS.util.copy(options);
	      options.credentials = new AWS.Credentials(options);
	    }
	    return options;
	  }
	});

	/**
	 * @return [AWS.Config] The global configuration object singleton instance
	 * @readonly
	 * @see AWS.Config
	 */
	AWS.config = new AWS.Config();


/***/ },
/* 624 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Represents credentials retrieved from STS Web Identity Federation using
	 * the Amazon Cognito Identity service.
	 *
	 * By default this provider gets credentials using the
	 * {AWS.CognitoIdentity.getCredentialsForIdentity} service operation,
	 * after first getting an `IdentityId` from {AWS.CognitoIdentity.getId}. This
	 * operation requires an `IdentityPoolId` (Amazon Cognito Identity Pool ID).
	 * If a `RoleArn` is provided, then this provider gets credentials using the
	 * {AWS.STS.assumeRoleWithWebIdentity} service operation, after first getting
	 * an Open ID token from {AWS.CognitoIdentity.getOpenIdToken}. These operations
	 * require an `IdentityPoolId` (Amazon Cognito Identity Pool ID), and `RoleArn`
	 * containing the ARN of the IAM trust policy for the Amazon Cognito role that
	 * the user will log into.
	 *
	 * In addition, if this credential provider is used to provide authenticated
	 * login, the `Logins` map may be set to the tokens provided by the respective
	 * identity providers. See {constructor} for an example on creating a credentials
	 * object with proper property values.
	 *
	 * ## Refreshing Credentials from Identity Service
	 *
	 * In addition to AWS credentials expiring after a given amount of time, the
	 * login token from the identity provider will also expire. Once this token
	 * expires, it will not be usable to refresh AWS credentials, and another
	 * token will be needed. The SDK does not manage refreshing of the token value,
	 * but this can be done through a "refresh token" supported by most identity
	 * providers. Consult the documentation for the identity provider for refreshing
	 * tokens. Once the refreshed token is acquired, you should make sure to update
	 * this new token in the credentials object's {params} property. The following
	 * code will update the WebIdentityToken, assuming you have retrieved an updated
	 * token from the identity provider:
	 *
	 * ```javascript
	 * AWS.config.credentials.params.Logins['graph.facebook.com'] = updatedToken;
	 * ```
	 *
	 * Future calls to `credentials.refresh()` will now use the new token.
	 *
	 * @!attribute params
	 *   @return [map] the map of params passed to
	 *     {AWS.CognitoIdentity.getId},
	 *     {AWS.CognitoIdentity.getOpenIdToken}, and
	 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
	 *     `params.WebIdentityToken` property.
	 * @!attribute data
	 *   @return [map] the raw data response from the call to
	 *     {AWS.CognitoIdentity.getCredentialsForIdentity}, or
	 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
	 *     access to other properties from the response.
	 * @!attribute identityId
	 *   @return [String] the Cognito ID returned by the last call to
	 *     {AWS.CognitoIdentity.getOpenIdToken}. This ID represents the actual
	 *     final resolved identity ID from Amazon Cognito.
	 */
	AWS.CognitoIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * @api private
	   */
	  localStorageKey: {
	    id: 'aws.cognito.identity-id.',
	    providers: 'aws.cognito.identity-providers.'
	  },

	  /**
	   * Creates a new credentials object.
	   * @param (see AWS.CognitoIdentity.getId)
	   * @param (see AWS.STS.assumeRoleWithWebIdentity)
	   * @param (see AWS.CognitoIdentity.getOpenIdToken)
	   * @example Creating a new credentials object
	   *   AWS.config.credentials = new AWS.CognitoIdentityCredentials({
	   *     IdentityPoolId: 'us-east-1:1699ebc0-7900-4099-b910-2df94f52a030',
	   *     // optional, only necessary when the identity pool is not configured
	   *     // to use IAM roles in the Amazon Cognito Console
	   *     RoleArn: 'arn:aws:iam::1234567890:role/MYAPP-CognitoIdentity',
	   *     Logins: { // optional tokens, used for authenticated login
	   *       'graph.facebook.com': 'FBTOKEN',
	   *       'www.amazon.com': 'AMAZONTOKEN',
	   *       'accounts.google.com': 'GOOGLETOKEN'
	   *     },
	   *     RoleSessionName: 'web' // optional name, defaults to web-identity,
	   *     // optional, only necessary when application runs in a browser
	   *     // and multiple users are signed in at once
	   *     LoginId: 'example@gmail.com'
	   *   });
	   * @see AWS.STS.assumeRoleWithWebIdentity
	   * @see AWS.CognitoIdentity.getCredentialsForIdentity
	   */
	  constructor: function CognitoIdentityCredentials(params) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	    this.data = null;
	    this.identityId = null;
	    this.loadCachedId();
	  },

	  /**
	   * Refreshes credentials using {AWS.CognitoIdentity.getCredentialsForIdentity},
	   * or {AWS.STS.assumeRoleWithWebIdentity}.
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    self.data = null;
	    self.identityId = null;
	    self.getId(function(err) {
	      if (!err) {
	        if (!self.params.RoleArn) {
	          self.getCredentialsForIdentity(callback);
	        } else {
	          self.getCredentialsFromSTS(callback);
	        }
	      } else {
	        self.clearCachedId();
	        callback(err);
	      }
	    });
	  },

	  /**
	   * Clears the cached Cognito ID associated with the currently configured
	   * identity pool ID. Use this to manually invalidate your cache if
	   * the identity pool ID was deleted.
	   */
	  clearCachedId: function clearCache() {
	    this.identityId = null;
	    delete this.params.IdentityId;

	    var poolId = this.params.IdentityPoolId;
	    var loginId = this.params.LoginId || '';
	    delete this.storage[this.localStorageKey.id + poolId + loginId];
	    delete this.storage[this.localStorageKey.providers + poolId + loginId];
	  },

	  /**
	   * Retrieves a Cognito ID, loading from cache if it was already retrieved
	   * on this device.
	   *
	   * @callback callback function(err, identityId)
	   *   @param err [Error, null] an error object if the call failed or null if
	   *     it succeeded.
	   *   @param identityId [String, null] if successful, the callback will return
	   *     the Cognito ID.
	   * @note If not loaded explicitly, the Cognito ID is loaded and stored in
	   *   localStorage in the browser environment of a device.
	   * @api private
	   */
	  getId: function getId(callback) {
	    var self = this;
	    if (typeof self.params.IdentityId === 'string') {
	      return callback(null, self.params.IdentityId);
	    }

	    self.cognito.getId(function(err, data) {
	      if (!err && data.IdentityId) {
	        self.params.IdentityId = data.IdentityId;
	        callback(null, data.IdentityId);
	      } else {
	        callback(err);
	      }
	    });
	  },


	  /**
	   * @api private
	   */
	  loadCredentials: function loadCredentials(data, credentials) {
	    if (!data || !credentials) return;
	    credentials.expired = false;
	    credentials.accessKeyId = data.Credentials.AccessKeyId;
	    credentials.secretAccessKey = data.Credentials.SecretKey;
	    credentials.sessionToken = data.Credentials.SessionToken;
	    credentials.expireTime = data.Credentials.Expiration;
	  },

	  /**
	   * @api private
	   */
	  getCredentialsForIdentity: function getCredentialsForIdentity(callback) {
	    var self = this;
	    self.cognito.getCredentialsForIdentity(function(err, data) {
	      if (!err) {
	        self.cacheId(data);
	        self.data = data;
	        self.loadCredentials(self.data, self);
	      } else {
	        self.clearCachedId();
	      }
	      callback(err);
	    });
	  },

	  /**
	   * @api private
	   */
	  getCredentialsFromSTS: function getCredentialsFromSTS(callback) {
	    var self = this;
	    self.cognito.getOpenIdToken(function(err, data) {
	      if (!err) {
	        self.cacheId(data);
	        self.params.WebIdentityToken = data.Token;
	        self.webIdentityCredentials.refresh(function(webErr) {
	          if (!webErr) {
	            self.data = self.webIdentityCredentials.data;
	            self.sts.credentialsFrom(self.data, self);
	          } else {
	            self.clearCachedId();
	          }
	          callback(webErr);
	        });
	      } else {
	        self.clearCachedId();
	        callback(err);
	      }
	    });
	  },

	  /**
	   * @api private
	   */
	  loadCachedId: function loadCachedId() {
	    var self = this;

	    // in the browser we source default IdentityId from localStorage
	    if (AWS.util.isBrowser() && !self.params.IdentityId) {
	      var id = self.getStorage('id');
	      if (id && self.params.Logins) {
	        var actualProviders = Object.keys(self.params.Logins);
	        var cachedProviders =
	          (self.getStorage('providers') || '').split(',');

	        // only load ID if at least one provider used this ID before
	        var intersect = cachedProviders.filter(function(n) {
	          return actualProviders.indexOf(n) !== -1;
	        });
	        if (intersect.length !== 0) {
	          self.params.IdentityId = id;
	        }
	      } else if (id) {
	        self.params.IdentityId = id;
	      }
	    }
	  },

	  /**
	   * @api private
	   */
	  createClients: function() {
	    this.webIdentityCredentials = this.webIdentityCredentials ||
	      new AWS.WebIdentityCredentials(this.params);
	    this.cognito = this.cognito ||
	      new AWS.CognitoIdentity({params: this.params});
	    this.sts = this.sts || new AWS.STS();
	  },

	  /**
	   * @api private
	   */
	  cacheId: function cacheId(data) {
	    this.identityId = data.IdentityId;
	    this.params.IdentityId = this.identityId;

	    // cache this IdentityId in browser localStorage if possible
	    if (AWS.util.isBrowser()) {
	      this.setStorage('id', data.IdentityId);

	      if (this.params.Logins) {
	        this.setStorage('providers', Object.keys(this.params.Logins).join(','));
	      }
	    }
	  },

	  /**
	   * @api private
	   */
	  getStorage: function getStorage(key) {
	    return this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')];
	  },

	  /**
	   * @api private
	   */
	  setStorage: function setStorage(key, val) {
	    try {
	      this.storage[this.localStorageKey[key] + this.params.IdentityPoolId + (this.params.LoginId || '')] = val;
	    } catch (_) {}
	  },

	  /**
	   * @api private
	   */
	  storage: (function() {
	    try {
	      return AWS.util.isBrowser() && window.localStorage !== null && typeof window.localStorage === 'object' ?
	             window.localStorage : {};
	    } catch (_) {
	      return {};
	    }
	  })()
	});


/***/ },
/* 625 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	__webpack_require__(637);

	/**
	 * Represents credentials received from the metadata service on an EC2 instance.
	 *
	 * By default, this class will connect to the metadata service using
	 * {AWS.MetadataService} and attempt to load any available credentials. If it
	 * can connect, and credentials are available, these will be used with zero
	 * configuration.
	 *
	 * This credentials class will timeout after 1 second of inactivity by default.
	 * If your requests to the EC2 metadata service are timing out, you can increase
	 * the value by configuring them directly:
	 *
	 * ```javascript
	 * AWS.config.credentials = new AWS.EC2MetadataCredentials({
	 *   httpOptions: { timeout: 5000 } // 5 second timeout
	 * });
	 * ```
	 *
	 * @!macro nobrowser
	 */
	AWS.EC2MetadataCredentials = AWS.util.inherit(AWS.Credentials, {
	  constructor: function EC2MetadataCredentials(options) {
	    AWS.Credentials.call(this);

	    options = options ? AWS.util.copy(options) : {};
	    if (!options.httpOptions) options.httpOptions = {};
	    options.httpOptions = AWS.util.merge(
	      {timeout: this.defaultTimeout}, options.httpOptions);

	    this.metadataService = new AWS.MetadataService(options);
	    this.metadata = {};
	  },

	  /**
	   * @api private
	   */
	  defaultTimeout: 1000,

	  /**
	   * Loads the credentials from the instance metadata service
	   *
	   * @callback callback function(err)
	   *   Called when the instance metadata service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    var self = this;
	    if (!callback) callback = function(err) { if (err) throw err; };

	    self.metadataService.loadCredentials(function (err, creds) {
	      if (!err) {
	        self.expired = false;
	        self.metadata = creds;
	        self.accessKeyId = creds.AccessKeyId;
	        self.secretAccessKey = creds.SecretAccessKey;
	        self.sessionToken = creds.Token;
	        self.expireTime = new Date(creds.Expiration);
	      }
	      callback(err);
	    });
	  }
	});


/***/ },
/* 626 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(2);

	/**
	 * Represents credentials from the environment.
	 *
	 * By default, this class will look for the matching environment variables
	 * prefixed by a given {envPrefix}. The un-prefixed environment variable names
	 * for each credential value is listed below:
	 *
	 * ```javascript
	 * accessKeyId: ACCESS_KEY_ID
	 * secretAccessKey: SECRET_ACCESS_KEY
	 * sessionToken: SESSION_TOKEN
	 * ```
	 *
	 * With the default prefix of 'AWS', the environment variables would be:
	 *
	 *     AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN
	 *
	 * @!attribute envPrefix
	 *   @readonly
	 *   @return [String] the prefix for the environment variable names excluding
	 *     the separating underscore ('_').
	 */
	AWS.EnvironmentCredentials = AWS.util.inherit(AWS.Credentials, {

	  /**
	   * Creates a new EnvironmentCredentials class with a given variable
	   * prefix {envPrefix}. For example, to load credentials using the 'AWS'
	   * prefix:
	   *
	   * ```javascript
	   * var creds = new AWS.EnvironmentCredentials('AWS');
	   * creds.accessKeyId == 'AKID' // from AWS_ACCESS_KEY_ID env var
	   * ```
	   *
	   * @param envPrefix [String] the prefix to use (e.g., 'AWS') for environment
	   *   variables. Do not include the separating underscore.
	   */
	  constructor: function EnvironmentCredentials(envPrefix) {
	    AWS.Credentials.call(this);
	    this.envPrefix = envPrefix;
	    this.get(function() {});
	  },

	  /**
	   * Loads credentials from the environment using the prefixed
	   * environment variables.
	   *
	   * @callback callback function(err)
	   *   Called after the (prefixed) ACCESS_KEY_ID, SECRET_ACCESS_KEY, and
	   *   SESSION_TOKEN environment variables are read. When this callback is
	   *   called with no error, it means that the credentials information has
	   *   been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
	   *   and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    if (!callback) callback = function(err) { if (err) throw err; };

	    if (process === undefined) {
	      callback(new Error('No process info available'));
	      return;
	    }

	    var keys = ['ACCESS_KEY_ID', 'SECRET_ACCESS_KEY', 'SESSION_TOKEN'];
	    var values = [];

	    for (var i = 0; i < keys.length; i++) {
	      var prefix = '';
	      if (this.envPrefix) prefix = this.envPrefix + '_';
	      values[i] = process.env[prefix + keys[i]];
	      if (!values[i] && keys[i] !== 'SESSION_TOKEN') {
	        callback(new Error('Variable ' + prefix + keys[i] + ' not set.'));
	        return;
	      }
	    }

	    this.expired = false;
	    AWS.Credentials.apply(this, values);
	    callback();
	  }

	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 627 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Represents credentials from a JSON file on disk.
	 * If the credentials expire, the SDK can {refresh} the credentials
	 * from the file.
	 *
	 * The format of the file should be similar to the options passed to
	 * {AWS.Config}:
	 *
	 * ```javascript
	 * {accessKeyId: 'akid', secretAccessKey: 'secret', sessionToken: 'optional'}
	 * ```
	 *
	 * @example Loading credentials from disk
	 *   var creds = new AWS.FileSystemCredentials('./configuration.json');
	 *   creds.accessKeyId == 'AKID'
	 *
	 * @!attribute filename
	 *   @readonly
	 *   @return [String] the path to the JSON file on disk containing the
	 *     credentials.
	 * @!macro nobrowser
	 */
	AWS.FileSystemCredentials = AWS.util.inherit(AWS.Credentials, {

	  /**
	   * @overload AWS.FileSystemCredentials(filename)
	   *   Creates a new FileSystemCredentials object from a filename
	   *
	   *   @param filename [String] the path on disk to the JSON file to load.
	   */
	  constructor: function FileSystemCredentials(filename) {
	    AWS.Credentials.call(this);
	    this.filename = filename;
	    this.get(function() {});
	  },

	  /**
	   * Loads the credentials from the {filename} on disk.
	   *
	   * @callback callback function(err)
	   *   Called after the JSON file on disk is read and parsed. When this callback
	   *   is called with no error, it means that the credentials information
	   *   has been loaded into the object (as the `accessKeyId`, `secretAccessKey`,
	   *   and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    if (!callback) callback = function(err) { if (err) throw err; };
	    try {
	      var creds = JSON.parse(AWS.util.readFileSync(this.filename));
	      AWS.Credentials.call(this, creds);
	      if (!this.accessKeyId || !this.secretAccessKey) {
	        throw new Error('Credentials not set in ' + this.filename);
	      }
	      this.expired = false;
	      callback();
	    } catch (err) {
	      callback(err);
	    }
	  }

	});


/***/ },
/* 628 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Represents credentials retrieved from STS SAML support.
	 *
	 * By default this provider gets credentials using the
	 * {AWS.STS.assumeRoleWithSAML} service operation. This operation
	 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
	 * application for which credentials will be given, as well as a `PrincipalArn`
	 * representing the ARN for the SAML identity provider. In addition, the
	 * `SAMLAssertion` must be set to the token provided by the identity
	 * provider. See {constructor} for an example on creating a credentials
	 * object with proper `RoleArn`, `PrincipalArn`, and `SAMLAssertion` values.
	 *
	 * ## Refreshing Credentials from Identity Service
	 *
	 * In addition to AWS credentials expiring after a given amount of time, the
	 * login token from the identity provider will also expire. Once this token
	 * expires, it will not be usable to refresh AWS credentials, and another
	 * token will be needed. The SDK does not manage refreshing of the token value,
	 * but this can be done through a "refresh token" supported by most identity
	 * providers. Consult the documentation for the identity provider for refreshing
	 * tokens. Once the refreshed token is acquired, you should make sure to update
	 * this new token in the credentials object's {params} property. The following
	 * code will update the SAMLAssertion, assuming you have retrieved an updated
	 * token from the identity provider:
	 *
	 * ```javascript
	 * AWS.config.credentials.params.SAMLAssertion = updatedToken;
	 * ```
	 *
	 * Future calls to `credentials.refresh()` will now use the new token.
	 *
	 * @!attribute params
	 *   @return [map] the map of params passed to
	 *     {AWS.STS.assumeRoleWithSAML}. To update the token, set the
	 *     `params.SAMLAssertion` property.
	 */
	AWS.SAMLCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new credentials object.
	   * @param (see AWS.STS.assumeRoleWithSAML)
	   * @example Creating a new credentials object
	   *   AWS.config.credentials = new AWS.SAMLCredentials({
	   *     RoleArn: 'arn:aws:iam::1234567890:role/SAMLRole',
	   *     PrincipalArn: 'arn:aws:iam::1234567890:role/SAMLPrincipal',
	   *     SAMLAssertion: 'base64-token', // base64-encoded token from IdP
	   *   });
	   * @see AWS.STS.assumeRoleWithSAML
	   */
	  constructor: function SAMLCredentials(params) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	  },

	  /**
	   * Refreshes credentials using {AWS.STS.assumeRoleWithSAML}
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    if (!callback) callback = function(err) { if (err) throw err; };

	    self.service.assumeRoleWithSAML(function (err, data) {
	      if (!err) {
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },

	  /**
	   * @api private
	   */
	  createClients: function() {
	    this.service = this.service || new AWS.STS({params: this.params});
	  }

	});


/***/ },
/* 629 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(2);
	var path = __webpack_require__(14);

	/**
	 * Represents credentials loaded from shared credentials file
	 * (defaulting to ~/.aws/credentials).
	 *
	 * ## Using the shared credentials file
	 *
	 * This provider is checked by default in the Node.js environment. To use the
	 * credentials file provider, simply add your access and secret keys to the
	 * ~/.aws/credentials file in the following format:
	 *
	 *     [default]
	 *     aws_access_key_id = AKID...
	 *     aws_secret_access_key = YOUR_SECRET_KEY
	 *
	 * ## Using custom profiles
	 *
	 * The SDK supports loading credentials for separate profiles. This can be done
	 * in two ways:
	 *
	 * 1. Set the `AWS_PROFILE` environment variable in your process prior to
	 *    loading the SDK.
	 * 2. Directly load the AWS.SharedIniFileCredentials provider:
	 *
	 * ```javascript
	 * var creds = new AWS.SharedIniFileCredentials({profile: 'myprofile'});
	 * AWS.config.credentials = creds;
	 * ```
	 *
	 * @!macro nobrowser
	 */
	AWS.SharedIniFileCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new SharedIniFileCredentials object.
	   *
	   * @param options [map] a set of options
	   * @option options profile [String] (AWS_PROFILE env var or 'default')
	   *   the name of the profile to load.
	   * @option options filename [String] ('~/.aws/credentials') the filename
	   *   to use when loading credentials.
	   */
	  constructor: function SharedIniFileCredentials(options) {
	    AWS.Credentials.call(this);

	    options = options || {};

	    this.filename = options.filename;
	    this.profile = options.profile || process.env.AWS_PROFILE || 'default';
	    this.get(function() {});
	  },

	  /**
	   * Loads the credentials from the instance metadata service
	   *
	   * @callback callback function(err)
	   *   Called after the shared INI file on disk is read and parsed. When this
	   *   callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    if (!callback) callback = function(err) { if (err) throw err; };
	    try {
	      if (!this.filename) this.loadDefaultFilename();
	      var creds = AWS.util.ini.parse(AWS.util.readFileSync(this.filename));
	      if (typeof creds[this.profile] === 'object') {
	        this.accessKeyId = creds[this.profile]['aws_access_key_id'];
	        this.secretAccessKey = creds[this.profile]['aws_secret_access_key'];
	        this.sessionToken = creds[this.profile]['aws_session_token'];
	      }

	      if (!this.accessKeyId || !this.secretAccessKey) {
	        throw new Error('Credentials not set in ' + this.filename +
	                        ' using profile ' + this.profile);
	      }
	      this.expired = false;
	      callback();
	    } catch (err) {
	      callback(err);
	    }
	  },

	  /**
	   * @api private
	   */
	  loadDefaultFilename: function loadDefaultFilename() {
	    var env = process.env;
	    var home = env.HOME ||
	               env.USERPROFILE ||
	               (env.HOMEPATH ? ((env.HOMEDRIVE || 'C:/') + env.HOMEPATH) : null);
	    if (!home) {
	      throw AWS.util.error(
	        new Error('Cannot load credentials, HOME path not set'));
	    }

	    this.filename = path.join(home, '.aws', 'credentials');
	  }
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 630 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Represents temporary credentials retrieved from {AWS.STS}. Without any
	 * extra parameters, credentials will be fetched from the
	 * {AWS.STS.getSessionToken} operation. If an IAM role is provided, the
	 * {AWS.STS.assumeRole} operation will be used to fetch credentials for the
	 * role instead.
	 *
	 * To setup temporary credentials, configure a set of master credentials
	 * using the standard credentials providers (environment, EC2 instance metadata,
	 * or from the filesystem), then set the global credentials to a new
	 * temporary credentials object:
	 *
	 * ```javascript
	 * // Note that environment credentials are loaded by default,
	 * // the following line is shown for clarity:
	 * AWS.config.credentials = new AWS.EnvironmentCredentials('AWS');
	 *
	 * // Now set temporary credentials seeded from the master credentials
	 * AWS.config.credentials = new AWS.TemporaryCredentials();
	 *
	 * // subsequent requests will now use temporary credentials from AWS STS.
	 * new AWS.S3().listBucket(function(err, data) { ... });
	 * ```
	 *
	 * @!attribute masterCredentials
	 *   @return [AWS.Credentials] the master (non-temporary) credentials used to
	 *     get and refresh temporary credentials from AWS STS.
	 * @note (see constructor)
	 */
	AWS.TemporaryCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new temporary credentials object.
	   *
	   * @note In order to create temporary credentials, you first need to have
	   *   "master" credentials configured in {AWS.Config.credentials}. These
	   *   master credentials are necessary to retrieve the temporary credentials,
	   *   as well as refresh the credentials when they expire.
	   * @param params [map] a map of options that are passed to the
	   *   {AWS.STS.assumeRole} or {AWS.STS.getSessionToken} operations.
	   *   If a `RoleArn` parameter is passed in, credentials will be based on the
	   *   IAM role.
	   * @example Creating a new credentials object for generic temporary credentials
	   *   AWS.config.credentials = new AWS.TemporaryCredentials();
	   * @example Creating a new credentials object for an IAM role
	   *   AWS.config.credentials = new AWS.TemporaryCredentials({
	   *     RoleArn: 'arn:aws:iam::1234567890:role/TemporaryCredentials',
	   *   });
	   * @see AWS.STS.assumeRole
	   * @see AWS.STS.getSessionToken
	   */
	  constructor: function TemporaryCredentials(params) {
	    AWS.Credentials.call(this);
	    this.loadMasterCredentials();
	    this.expired = true;

	    this.params = params || {};
	    if (this.params.RoleArn) {
	      this.params.RoleSessionName =
	        this.params.RoleSessionName || 'temporary-credentials';
	    }
	  },

	  /**
	   * Refreshes credentials using {AWS.STS.assumeRole} or
	   * {AWS.STS.getSessionToken}, depending on whether an IAM role ARN was passed
	   * to the credentials {constructor}.
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    if (!callback) callback = function(err) { if (err) throw err; };

	    self.service.config.credentials = self.masterCredentials;
	    var operation = self.params.RoleArn ?
	      self.service.assumeRole : self.service.getSessionToken;
	    operation.call(self.service, function (err, data) {
	      if (!err) {
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },

	  /**
	   * @api private
	   */
	  loadMasterCredentials: function loadMasterCredentials() {
	    this.masterCredentials = AWS.config.credentials;
	    while (this.masterCredentials.masterCredentials) {
	      this.masterCredentials = this.masterCredentials.masterCredentials;
	    }
	  },

	  /**
	   * @api private
	   */
	  createClients: function() {
	    this.service = this.service || new AWS.STS({params: this.params});
	  }

	});


/***/ },
/* 631 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * Represents credentials retrieved from STS Web Identity Federation support.
	 *
	 * By default this provider gets credentials using the
	 * {AWS.STS.assumeRoleWithWebIdentity} service operation. This operation
	 * requires a `RoleArn` containing the ARN of the IAM trust policy for the
	 * application for which credentials will be given. In addition, the
	 * `WebIdentityToken` must be set to the token provided by the identity
	 * provider. See {constructor} for an example on creating a credentials
	 * object with proper `RoleArn` and `WebIdentityToken` values.
	 *
	 * ## Refreshing Credentials from Identity Service
	 *
	 * In addition to AWS credentials expiring after a given amount of time, the
	 * login token from the identity provider will also expire. Once this token
	 * expires, it will not be usable to refresh AWS credentials, and another
	 * token will be needed. The SDK does not manage refreshing of the token value,
	 * but this can be done through a "refresh token" supported by most identity
	 * providers. Consult the documentation for the identity provider for refreshing
	 * tokens. Once the refreshed token is acquired, you should make sure to update
	 * this new token in the credentials object's {params} property. The following
	 * code will update the WebIdentityToken, assuming you have retrieved an updated
	 * token from the identity provider:
	 *
	 * ```javascript
	 * AWS.config.credentials.params.WebIdentityToken = updatedToken;
	 * ```
	 *
	 * Future calls to `credentials.refresh()` will now use the new token.
	 *
	 * @!attribute params
	 *   @return [map] the map of params passed to
	 *     {AWS.STS.assumeRoleWithWebIdentity}. To update the token, set the
	 *     `params.WebIdentityToken` property.
	 * @!attribute data
	 *   @return [map] the raw data response from the call to
	 *     {AWS.STS.assumeRoleWithWebIdentity}. Use this if you want to get
	 *     access to other properties from the response.
	 */
	AWS.WebIdentityCredentials = AWS.util.inherit(AWS.Credentials, {
	  /**
	   * Creates a new credentials object.
	   * @param (see AWS.STS.assumeRoleWithWebIdentity)
	   * @example Creating a new credentials object
	   *   AWS.config.credentials = new AWS.WebIdentityCredentials({
	   *     RoleArn: 'arn:aws:iam::1234567890:role/WebIdentity',
	   *     WebIdentityToken: 'ABCDEFGHIJKLMNOP', // token from identity service
	   *     RoleSessionName: 'web' // optional name, defaults to web-identity
	   *   });
	   * @see AWS.STS.assumeRoleWithWebIdentity
	   */
	  constructor: function WebIdentityCredentials(params) {
	    AWS.Credentials.call(this);
	    this.expired = true;
	    this.params = params;
	    this.params.RoleSessionName = this.params.RoleSessionName || 'web-identity';
	    this.data = null;
	  },

	  /**
	   * Refreshes credentials using {AWS.STS.assumeRoleWithWebIdentity}
	   *
	   * @callback callback function(err)
	   *   Called when the STS service responds (or fails). When
	   *   this callback is called with no error, it means that the credentials
	   *   information has been loaded into the object (as the `accessKeyId`,
	   *   `secretAccessKey`, and `sessionToken` properties).
	   *   @param err [Error] if an error occurred, this value will be filled
	   * @see get
	   */
	  refresh: function refresh(callback) {
	    var self = this;
	    self.createClients();
	    if (!callback) callback = function(err) { if (err) throw err; };

	    self.service.assumeRoleWithWebIdentity(function (err, data) {
	      self.data = null;
	      if (!err) {
	        self.data = data;
	        self.service.credentialsFrom(data, self);
	      }
	      callback(err);
	    });
	  },

	  /**
	   * @api private
	   */
	  createClients: function() {
	    this.service = this.service || new AWS.STS({params: this.params});
	  }

	});


/***/ },
/* 632 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(2).util;
	var typeOf = __webpack_require__(134).typeOf;
	var DynamoDBSet = __webpack_require__(133);

	function convertInput(data) {
	  if (typeOf(data) === 'Object') {
	    var map = {M: {}};
	    for (var key in data) {
	      map['M'][key] = convertInput(data[key]);
	    }
	    return map;
	  } else if (typeOf(data) === 'Array') {
	    var list = {L: []};
	    for (var i = 0; i < data.length; i++) {
	      list['L'].push(convertInput(data[i]));
	    }
	    return list;
	  } else if (typeOf(data) === 'Set') {
	    return formatSet(data);
	  } else if (typeOf(data) === 'String') {
	    return { 'S': data };
	  } else if (typeOf(data) === 'Number') {
	    return { 'N': data.toString() };
	  } else if (typeOf(data) === 'Binary') {
	    return { 'B': data };
	  } else if (typeOf(data) === 'Boolean') {
	    return {'BOOL': data};
	  } else if (typeOf(data) === 'null') {
	    return {'NULL': true};
	  }
	}

	function formatSet(data) {
	  var map = {};
	  switch (data.type) {
	    case 'String': map['SS'] = data.values; break;
	    case 'Binary': map['BS'] = data.values; break;
	    case 'Number': map['NS'] = data.values.map(function (value) {
	      return value.toString();
	    });
	  }
	  return map;
	}

	function convertOutput(data) {
	  var list, map, i;
	  for (var type in data) {
	    var values = data[type];
	    if (type === 'M') {
	      map = {};
	      for (var key in values) {
	        map[key] = convertOutput(values[key]);
	      }
	      return map;
	    } else if (type === 'L') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(convertOutput(values[i]));
	      }
	      return list;
	    } else if (type === 'SS') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(values[i] + '');
	      }
	      return new DynamoDBSet(list);
	    } else if (type === 'NS') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(Number(values[i]));
	      }
	      return new DynamoDBSet(list);
	    } else if (type === 'BS') {
	      list = [];
	      for (i = 0; i < values.length; i++) {
	        list.push(new util.Buffer(values[i]));
	      }
	      return new DynamoDBSet(list);
	    } else if (type === 'S') {
	      return values + '';
	    } else if (type === 'N') {
	      return Number(values);
	    } else if (type === 'B') {
	      return new util.Buffer(values);
	    } else if (type === 'BOOL') {
	      return (values === 'true' || values === 'TRUE' || values === true);
	    } else if (type === 'NULL') {
	      return null;
	    }
	  }
	}

	module.exports = {
	  input: convertInput,
	  output: convertOutput
	};


/***/ },
/* 633 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var Translator = __webpack_require__(634);
	var DynamoDBSet = __webpack_require__(133);

	/**
	 * The document client simplifies working with items in Amazon DynamoDB
	 * by abstracting away the notion of attribute values. This abstraction
	 * annotates native JavaScript types supplied as input parameters, as well
	 * as converts annotated response data to native JavaScript types.
	 *
	 * ## Marshalling Input and Unmarshalling Response Data
	 *
	 * The document client affords developers the use of native JavaScript types
	 * instead of `AttributeValue`s to simplify the JavaScript development
	 * experience with Amazon DynamoDB. JavaScript objects passed in as parameters
	 * are marshalled into `AttributeValue` shapes required by Amazon DynamoDB.
	 * Responses from DynamoDB are unmarshalled into plain JavaScript objects
	 * by the `DocumentClient`. The `DocumentClient`, does not accept
	 * `AttributeValue`s in favor of native JavaScript types.
	 *
	 * |                             JavaScript Type                            | DynamoDB AttributeValue |
	 * |:----------------------------------------------------------------------:|-------------------------|
	 * | String                                                                 | S                       |
	 * | Number                                                                 | N                       |
	 * | Boolean                                                                | BOOL                    |
	 * | null                                                                   | NULL                    |
	 * | Array                                                                  | L                       |
	 * | Object                                                                 | M                       |
	 * | Buffer, File, Blob, ArrayBuffer, DataView, and JavaScript typed arrays | B                       |
	 *
	 * ## Support for Sets
	 *
	 * The `DocumentClient` offers a convenient way to create sets from
	 * JavaScript Arrays. The type of set is inferred from the first element
	 * in the array. DynamoDB supports string, number, and binary sets. To
	 * learn more about supported types see the
	 * [Amazon DynamoDB Data Model Documentation](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html)
	 * For more information see {AWS.DynamoDB.DocumentClient.createSet}
	 *
	 */
	AWS.DynamoDB.DocumentClient = AWS.util.inherit({

	  /**
	   * @api private
	   */
	  operations: {
	    batchGetItem: 'batchGet',
	    batchWriteItem: 'batchWrite',
	    putItem: 'put',
	    getItem: 'get',
	    deleteItem: 'delete',
	    updateItem: 'update',
	    scan: 'scan',
	    query: 'query'
	  },

	  /**
	   * Creates a DynamoDB document client with a set of configuration options.
	   *
	   * @option options params [map] An optional map of parameters to bind to every
	   *   request sent by this service object.
	   * @option options service [AWS.DynamoDB] An optional pre-configured instance
	   *  of the AWS.DynamoDB service object to use for requests. The object may
	   *  bound parameters used by the document client.
	   * @see AWS.DynamoDB.constructor
	   *
	   */
	  constructor: function DocumentClient(options) {
	    var self = this;
	    self.options = options || {};
	    self.configure(self.options);
	  },

	  /**
	   * @api private
	   */
	  configure: function configure(options) {
	    var self = this;
	    self.service = options.service;
	    self.bindServiceObject(options);
	    self.attrValue =
	      self.service.api.operations.putItem.input.members.Item.value.shape;
	  },

	  /**
	   * @api private
	   */
	  bindServiceObject: function bindServiceObject(options) {
	    var self = this;
	    options = options || {};

	    if (!self.service) {
	      self.service = new AWS.DynamoDB(options);
	    } else {
	      var config = AWS.util.copy(self.service.config);
	      self.service = new self.service.constructor.__super__(config);
	      self.service.config.params =
	        AWS.util.merge(self.service.config.params || {}, options.params);
	    }
	  },

	  /**
	   * Returns the attributes of one or more items from one or more tables
	   * by delegating to `AWS.DynamoDB.batchGetItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.batchGetItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.batchGetItem
	   * @example Get items from multiple tables
	   *  var params = {
	   *    RequestItems: {
	   *      'Table-1': {
	   *        Keys: [
	   *          {
	   *             HashKey: 'haskey',
	   *             NumberRangeKey: 1
	   *          }
	   *        ]
	   *      },
	   *      'Table-2': {
	   *        Keys: [
	   *          { foo: 'bar' },
	   *        ]
	   *      }
	   *    }
	   *  };
	   *
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  docClient.batchGet(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  batchGet: function(params, callback) {
	    var self = this;
	    var request = self.service.batchGetItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * Puts or deletes multiple items in one or more tables by delegating
	   * to `AWS.DynamoDB.batchWriteItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.batchWriteItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.batchWriteItem
	   * @example Write to and delete from a table
	   *  var params = {
	   *    RequestItems: {
	   *      'Table-1': [
	   *        {
	   *          DeleteRequest: {
	   *            Key: { HashKey: 'someKey' }
	   *          }
	   *        },
	   *        {
	   *          PutRequest: {
	   *            Item: {
	   *              HashKey: 'anotherKey',
	   *              NumAttribute: 1,
	   *              BoolAttribute: true,
	   *              ListAttribute: [1, 'two', false],
	   *              MapAttribute: { foo: 'bar' }
	   *            }
	   *          }
	   *        }
	   *      ]
	   *    }
	   *  };
	   *
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  docClient.batchWrite(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  batchWrite: function(params, callback) {
	    var self = this;
	    var request = self.service.batchWriteItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * Deletes a single item in a table by primary key by delegating to
	   * `AWS.DynamoDB.deleteItem()`
	   *
	   * Supply the same parameters as {AWS.DynamoDB.deleteItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.deleteItem
	   * @example Delete an item from a table
	   *  var params = {
	   *    TableName = 'Table',
	   *    Key: {
	   *      HashKey: 'hashkey',
	   *      NumberRangeKey: 1
	   *    }
	   *  };
	   *
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  docClient.delete(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  delete: function(params, callback) {
	    var self = this;
	    var request = self.service.deleteItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * Returns a set of attributes for the item with the given primary key
	   * by delegating to `AWS.DynamoDB.getItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.getItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.getItem
	   * @example Get an item from a table
	   *  var params = {
	   *    TableName = 'Table',
	   *    Key: {
	   *      HashKey: 'hashkey'
	   *    }
	   *  };
	   *
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  docClient.get(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  get: function(params, callback) {
	    var self = this;
	    var request = self.service.getItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * Creates a new item, or replaces an old item with a new item by
	   * delegating to `AWS.DynamoDB.putItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.putItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.putItem
	   * @example Create a new item in a table
	   *  var params = {
	   *    TableName = 'Table',
	   *    Item: {
	   *       HashKey: 'haskey',
	   *       NumAttribute: 1,
	   *       BoolAttribute: true,
	   *       ListAttribute: [1, 'two', false],
	   *       MapAttribute: { foo: 'bar'},
	   *       NullAttribute: null
	   *    }
	   *  };
	   *
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  docClient.put(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  put: function put(params, callback) {
	    var self = this;
	    var request = self.service.putItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * Edits an existing item's attributes, or adds a new item to the table if
	   * it does not already exist by delegating to `AWS.DynamoDB.updateItem()`.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.updateItem} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.updateItem
	   * @example Update an item with expressions
	   *  var params = {
	   *    TableName: 'Table',
	   *    Key: { HashKey : 'hashkey' },
	   *    UpdateExpression: 'set #a = :x + :y',
	   *    ConditionExpression: '#a < :MAX',
	   *    ExpressionAttributeNames: {'#a' : 'Sum'},
	   *    ExpressionAttributeValues: {
	   *      ':x' : 20,
	   *      ':y' : 45,
	   *      ':MAX' : 100,
	   *    }
	   *  };
	   *
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  docClient.update(params, function(err, data) {
	   *     if (err) console.log(err);
	   *     else console.log(data);
	   *  });
	   *
	   */
	  update: function(params, callback) {
	    var self = this;
	    var request = self.service.updateItem(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * Returns one or more items and item attributes by accessing every item
	   * in a table or a secondary index.
	   *
	   * Supply the same parameters as {AWS.DynamoDB.scan} with
	   * `AttributeValue`s substituted by native JavaScript types.
	   *
	   * @see AWS.DynamoDB.scan
	   * @example Scan the table with a filter expression
	   *  var params = {
	   *    TableName = 'Table',
	   *    FilterExpression = 'Year = :this_year',
	   *    ExpressionAttributeValues = {':this_year' = 2015}
	   *  };
	   *
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  docClient.scan(params, function(err, data) {
	   *     if (err) console.log(err);
	   *     else console.log(data);
	   *  });
	   *
	   */
	  scan: function(params, callback) {
	    var self = this;
	    var request = self.service.scan(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	   /**
	    * Directly access items from a table by primary key or a secondary index.
	    *
	    * Supply the same parameters as {AWS.DynamoDB.query} with
	    * `AttributeValue`s substituted by native JavaScript types.
	    *
	    * @see AWS.DynamoDB.query
	    * @example Query an index
	    *  var params = {
	    *    TableName: 'Table',
	    *    IndexName: 'Index',
	    *    KeyConditionExpression: 'HashKey = :hkey and RangeKey > :rkey',
	    *    ExpressionAttributeValues: {
	    *      ':hkey': 'key',
	    *      ':rkey': 2015
	    *    }
	    *  };
	    *
	    *  var docClient = new AWS.DynamoDB.DocumentClient();
	    *
	    *  docClient.query(params, function(err, data) {
	    *     if (err) console.log(err);
	    *     else console.log(data);
	    *  });
	    *
	    */
	  query: function(params, callback) {
	    var self = this;
	    var request = self.service.query(params);
	    self.setupRequest(request);
	    self.setupResponse(request);
	    if (typeof callback === 'function') {
	      request.send(callback);
	    }
	    return request;
	  },

	  /**
	   * Creates a set of elements inferring the type of set from
	   * the type of the first element. Amazon DynamoDB currently supports
	   * the number sets, string sets, and binary sets. For more information
	   * about DynamoDB data types see the documentation on the
	   * [Amazon DynamoDB Data Model](http://docs.aws.amazon.com/amazondynamodb/latest/developerguide/DataModel.html#DataModel.DataTypes).
	   *
	   * @param list [Array] Collection to represent your DynamoDB Set
	   * @param options [map]
	   *  * **validate** [Boolean] set to true if you want to validate the type
	   *    of each element in the set. Defaults to `false`.
	   * @example Creating a number set
	   *  var docClient = new AWS.DynamoDB.DocumentClient();
	   *
	   *  var params = {
	   *    Item: {
	   *      hashkey: 'hashkey'
	   *      numbers: docClient.createSet([1, 2, 3]);
	   *    }
	   *  };
	   *
	   *  docClient.put(params, function(err, data) {
	   *    if (err) console.log(err);
	   *    else console.log(data);
	   *  });
	   *
	   */
	  createSet: function(list, options) {
	    options = options || {};
	    return new DynamoDBSet(list, options);
	  },

	  /**
	   * @api private
	   */
	  getTranslator: function() {
	    return new Translator({attrValue: this.attrValue});
	  },

	  /**
	   * @api private
	   */
	  setupRequest: function setupRequest(request) {
	    var self = this;
	    var translator = self.getTranslator();
	    var operation = request.operation;
	    var inputShape = request.service.api.operations[operation].input;
	    request._events.validate.unshift(function(req) {
	      req.rawParams = AWS.util.copy(req.params);
	      req.params = translator.translateInput(req.rawParams, inputShape);
	    });
	  },

	  /**
	   * @api private
	   */
	  setupResponse: function setupResponse(request) {
	    var self = this;
	    var translator = self.getTranslator();
	    var outputShape = self.service.api.operations[request.operation].output;
	    request.on('extractData', function(response) {
	      response.data = translator.translateOutput(response.data, outputShape);
	    });

	    var response = request.response;
	    response.nextPage = function(cb) {
	      var resp = this;
	      var req = resp.request;
	      var config;
	      var service = req.service;
	      var operation = req.operation;
	      try {
	        config = service.paginationConfig(operation, true);
	      } catch (e) { resp.error = e; }

	      if (!resp.hasNextPage()) {
	        if (cb) cb(resp.error, null);
	        else if (resp.error) throw resp.error;
	        return null;
	      }

	      var params = AWS.util.copy(req.rawParams);
	      if (!resp.nextPageTokens) {
	        return cb ? cb(null, null) : null;
	      } else {
	        var inputTokens = config.inputToken;
	        if (typeof inputTokens === 'string') inputTokens = [inputTokens];
	        for (var i = 0; i < inputTokens.length; i++) {
	          params[inputTokens[i]] = resp.nextPageTokens[i];
	        }
	        return self[operation](params, cb);
	      }
	    };
	  }

	});

	module.exports = AWS.DynamoDB.DocumentClient;


/***/ },
/* 634 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(2).util;
	var convert = __webpack_require__(632);

	var Translator = function(options) {
	  options = options || {};
	  this.attrValue = options.attrValue;
	};

	Translator.prototype.translateInput = function(value, shape) {
	  this.mode = 'input';
	  return this.translate(value, shape);
	};

	Translator.prototype.translateOutput = function(value, shape) {
	  this.mode = 'output';
	  return this.translate(value, shape);
	};

	Translator.prototype.translate = function(value, shape) {
	  var self = this;
	  if (!shape || value === undefined) return undefined;

	  if (shape.shape === self.attrValue) {
	    return convert[self.mode](value);
	  }
	  switch (shape.type) {
	    case 'structure': return self.translateStructure(value, shape);
	    case 'map': return self.translateMap(value, shape);
	    case 'list': return self.translateList(value, shape);
	    default: return self.translateScalar(value, shape);
	  }
	};

	Translator.prototype.translateStructure = function(structure, shape) {
	  var self = this;
	  if (structure == null) return undefined;

	  var struct = {};
	  util.each(structure, function(name, value) {
	    var memberShape = shape.members[name];
	    if (memberShape) {
	      var result = self.translate(value, memberShape);
	      if (result !== undefined) struct[name] = result;
	    }
	  });
	  return struct;
	};

	Translator.prototype.translateList = function(list, shape) {
	  var self = this;
	  if (list == null) return undefined;

	  var out = [];
	  util.arrayEach(list, function(value) {
	    var result = self.translate(value, shape.member);
	    if (result === undefined) out.push(null);
	    else out.push(result);
	  });
	  return out;
	};

	Translator.prototype.translateMap = function(map, shape) {
	  var self = this;
	  if (map == null) return undefined;

	  var out = {};
	  util.each(map, function(key, value) {
	    var result = self.translate(value, shape.value);
	    if (result === undefined) out[key] = null;
	    else out[key] = result;
	  });
	  return out;
	};

	Translator.prototype.translateScalar = function(value, shape) {
	  return shape.toType(value);
	};

	module.exports = Translator;


/***/ },
/* 635 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var SequentialExecutor = __webpack_require__(143);

	/**
	 * The namespace used to register global event listeners for request building
	 * and sending.
	 */
	AWS.EventListeners = {
	  /**
	   * @!attribute VALIDATE_CREDENTIALS
	   *   A request listener that validates whether the request is being
	   *   sent with credentials.
	   *   Handles the {AWS.Request~validate 'validate' Request event}
	   *   @example Sending a request without validating credentials
	   *     var listener = AWS.EventListeners.Core.VALIDATE_CREDENTIALS;
	   *     request.removeListener('validate', listener);
	   *   @readonly
	   *   @return [Function]
	   * @!attribute VALIDATE_REGION
	   *   A request listener that validates whether the region is set
	   *   for a request.
	   *   Handles the {AWS.Request~validate 'validate' Request event}
	   *   @example Sending a request without validating region configuration
	   *     var listener = AWS.EventListeners.Core.VALIDATE_REGION;
	   *     request.removeListener('validate', listener);
	   *   @readonly
	   *   @return [Function]
	   * @!attribute VALIDATE_PARAMETERS
	   *   A request listener that validates input parameters in a request.
	   *   Handles the {AWS.Request~validate 'validate' Request event}
	   *   @example Sending a request without validating parameters
	   *     var listener = AWS.EventListeners.Core.VALIDATE_PARAMETERS;
	   *     request.removeListener('validate', listener);
	   *   @example Disable parameter validation globally
	   *     AWS.EventListeners.Core.removeListener('validate',
	   *       AWS.EventListeners.Core.VALIDATE_REGION);
	   *   @readonly
	   *   @return [Function]
	   * @!attribute SEND
	   *   A request listener that initiates the HTTP connection for a
	   *   request being sent. Handles the {AWS.Request~send 'send' Request event}
	   *   @example Replacing the HTTP handler
	   *     var listener = AWS.EventListeners.Core.SEND;
	   *     request.removeListener('send', listener);
	   *     request.on('send', function(response) {
	   *       customHandler.send(response);
	   *     });
	   *   @return [Function]
	   *   @readonly
	   * @!attribute HTTP_DATA
	   *   A request listener that reads data from the HTTP connection in order
	   *   to build the response data.
	   *   Handles the {AWS.Request~httpData 'httpData' Request event}.
	   *   Remove this handler if you are overriding the 'httpData' event and
	   *   do not want extra data processing and buffering overhead.
	   *   @example Disabling default data processing
	   *     var listener = AWS.EventListeners.Core.HTTP_DATA;
	   *     request.removeListener('httpData', listener);
	   *   @return [Function]
	   *   @readonly
	   */
	  Core: {} /* doc hack */
	};

	AWS.EventListeners = {
	  Core: new SequentialExecutor().addNamedListeners(function(add, addAsync) {
	    addAsync('VALIDATE_CREDENTIALS', 'validate',
	        function VALIDATE_CREDENTIALS(req, done) {
	      if (!req.service.api.signatureVersion) return done(); // none
	      req.service.config.getCredentials(function(err) {
	        if (err) {
	          req.response.error = AWS.util.error(err,
	            {code: 'CredentialsError', message: 'Missing credentials in config'});
	        }
	        done();
	      });
	    });

	    add('VALIDATE_REGION', 'validate', function VALIDATE_REGION(req) {
	      if (!req.service.config.region && !req.service.isGlobalEndpoint) {
	        req.response.error = AWS.util.error(new Error(),
	          {code: 'ConfigError', message: 'Missing region in config'});
	      }
	    });

	    add('VALIDATE_PARAMETERS', 'validate', function VALIDATE_PARAMETERS(req) {
	      var rules = req.service.api.operations[req.operation].input;
	      new AWS.ParamValidator().validate(rules, req.params);
	    });

	    addAsync('COMPUTE_SHA256', 'afterBuild', function COMPUTE_SHA256(req, done) {
	      req.haltHandlersOnError();
	      if (!req.service.api.signatureVersion) return done(); // none
	      if (req.service.getSignerClass(req) === AWS.Signers.V4) {
	        var body = req.httpRequest.body || '';
	        AWS.util.computeSha256(body, function(err, sha) {
	          if (err) {
	            done(err);
	          }
	          else {
	            req.httpRequest.headers['X-Amz-Content-Sha256'] = sha;
	            done();
	          }
	        });
	      } else {
	        done();
	      }
	    });

	    add('SET_CONTENT_LENGTH', 'afterBuild', function SET_CONTENT_LENGTH(req) {
	      if (req.httpRequest.headers['Content-Length'] === undefined) {
	        var length = AWS.util.string.byteLength(req.httpRequest.body);
	        req.httpRequest.headers['Content-Length'] = length;
	      }
	    });

	    add('SET_HTTP_HOST', 'afterBuild', function SET_HTTP_HOST(req) {
	      req.httpRequest.headers['Host'] = req.httpRequest.endpoint.host;
	    });

	    add('RESTART', 'restart', function RESTART() {
	      var err = this.response.error;
	      if (!err || !err.retryable) return;

	      this.httpRequest = new AWS.HttpRequest(
	        this.service.endpoint,
	        this.service.region
	      );

	      if (this.response.retryCount < this.service.config.maxRetries) {
	        this.response.retryCount++;
	      } else {
	        this.response.error = null;
	      }
	    });

	    addAsync('SIGN', 'sign', function SIGN(req, done) {
	      if (!req.service.api.signatureVersion) return done(); // none

	      req.service.config.getCredentials(function (err, credentials) {
	        if (err) {
	          req.response.error = err;
	          return done();
	        }

	        try {
	          var date = AWS.util.date.getDate();
	          var SignerClass = req.service.getSignerClass(req);
	          var signer = new SignerClass(req.httpRequest,
	            req.service.api.signingName || req.service.api.endpointPrefix,
	            req.service.config.signatureCache);

	          // clear old authorization headers
	          delete req.httpRequest.headers['Authorization'];
	          delete req.httpRequest.headers['Date'];
	          delete req.httpRequest.headers['X-Amz-Date'];

	          // add new authorization
	          signer.addAuthorization(credentials, date);
	          req.signedAt = date;
	        } catch (e) {
	          req.response.error = e;
	        }
	        done();
	      });
	    });

	    add('VALIDATE_RESPONSE', 'validateResponse', function VALIDATE_RESPONSE(resp) {
	      if (this.service.successfulResponse(resp, this)) {
	        resp.data = {};
	        resp.error = null;
	      } else {
	        resp.data = null;
	        resp.error = AWS.util.error(new Error(),
	          {code: 'UnknownError', message: 'An unknown error occurred.'});
	      }
	    });

	    addAsync('SEND', 'send', function SEND(resp, done) {
	      resp.httpResponse._abortCallback = done;
	      resp.error = null;
	      resp.data = null;

	      function callback(httpResp) {
	        resp.httpResponse.stream = httpResp;

	        httpResp.on('headers', function onHeaders(statusCode, headers) {
	          resp.request.emit('httpHeaders', [statusCode, headers, resp]);

	          if (!resp.httpResponse.streaming) {
	            if (AWS.HttpClient.streamsApiVersion === 2) { // streams2 API check
	              httpResp.on('readable', function onReadable() {
	                var data = httpResp.read();
	                if (data !== null) {
	                  resp.request.emit('httpData', [data, resp]);
	                }
	              });
	            } else { // legacy streams API
	              httpResp.on('data', function onData(data) {
	                resp.request.emit('httpData', [data, resp]);
	              });
	            }
	          }
	        });

	        httpResp.on('end', function onEnd() {
	          resp.request.emit('httpDone');
	          done();
	        });
	      }

	      function progress(httpResp) {
	        httpResp.on('sendProgress', function onSendProgress(value) {
	          resp.request.emit('httpUploadProgress', [value, resp]);
	        });

	        httpResp.on('receiveProgress', function onReceiveProgress(value) {
	          resp.request.emit('httpDownloadProgress', [value, resp]);
	        });
	      }

	      function error(err) {
	        resp.error = AWS.util.error(err, {
	          code: 'NetworkingError',
	          region: resp.request.httpRequest.region,
	          hostname: resp.request.httpRequest.endpoint.hostname,
	          retryable: true
	        });
	        resp.request.emit('httpError', [resp.error, resp], function() {
	          done();
	        });
	      }

	      function executeSend() {
	        var http = AWS.HttpClient.getInstance();
	        var httpOptions = resp.request.service.config.httpOptions || {};
	        try {
	          var stream = http.handleRequest(resp.request.httpRequest, httpOptions,
	                                          callback, error);
	          progress(stream);
	        } catch (err) {
	          error(err);
	        }
	      }

	      var timeDiff = (AWS.util.date.getDate() - this.signedAt) / 1000;
	      if (timeDiff >= 60 * 10) { // if we signed 10min ago, re-sign
	        this.emit('sign', [this], function(err) {
	          if (err) done(err);
	          else executeSend();
	        });
	      } else {
	        executeSend();
	      }
	    });

	    add('HTTP_HEADERS', 'httpHeaders',
	        function HTTP_HEADERS(statusCode, headers, resp) {
	      resp.httpResponse.statusCode = statusCode;
	      resp.httpResponse.headers = headers;
	      resp.httpResponse.body = new AWS.util.Buffer('');
	      resp.httpResponse.buffers = [];
	      resp.httpResponse.numBytes = 0;
	      var dateHeader = headers.date || headers.Date;
	      if (dateHeader) {
	        var serverTime = Date.parse(dateHeader);
	        if (resp.request.service.config.correctClockSkew
	            && AWS.util.isClockSkewed(serverTime)) {
	          AWS.util.applyClockOffset(serverTime);
	        }
	      }
	    });

	    add('HTTP_DATA', 'httpData', function HTTP_DATA(chunk, resp) {
	      if (chunk) {
	        if (AWS.util.isNode()) {
	          resp.httpResponse.numBytes += chunk.length;

	          var total = resp.httpResponse.headers['content-length'];
	          var progress = { loaded: resp.httpResponse.numBytes, total: total };
	          resp.request.emit('httpDownloadProgress', [progress, resp]);
	        }

	        resp.httpResponse.buffers.push(new AWS.util.Buffer(chunk));
	      }
	    });

	    add('HTTP_DONE', 'httpDone', function HTTP_DONE(resp) {
	      // convert buffers array into single buffer
	      if (resp.httpResponse.buffers && resp.httpResponse.buffers.length > 0) {
	        var body = AWS.util.buffer.concat(resp.httpResponse.buffers);
	        resp.httpResponse.body = body;
	      }
	      delete resp.httpResponse.numBytes;
	      delete resp.httpResponse.buffers;
	    });

	    add('FINALIZE_ERROR', 'retry', function FINALIZE_ERROR(resp) {
	      if (resp.httpResponse.statusCode) {
	        resp.error.statusCode = resp.httpResponse.statusCode;
	        if (resp.error.retryable === undefined) {
	          resp.error.retryable = this.service.retryableError(resp.error, this);
	        }
	      }
	    });

	    add('INVALIDATE_CREDENTIALS', 'retry', function INVALIDATE_CREDENTIALS(resp) {
	      if (!resp.error) return;
	      switch (resp.error.code) {
	        case 'RequestExpired': // EC2 only
	        case 'ExpiredTokenException':
	        case 'ExpiredToken':
	          resp.error.retryable = true;
	          resp.request.service.config.credentials.expired = true;
	      }
	    });

	    add('EXPIRED_SIGNATURE', 'retry', function EXPIRED_SIGNATURE(resp) {
	      var err = resp.error;
	      if (!err) return;
	      if (typeof err.code === 'string' && typeof err.message === 'string') {
	        if (err.code.match(/Signature/) && err.message.match(/expired/)) {
	          resp.error.retryable = true;
	        }
	      }
	    });

	    add('CLOCK_SKEWED', 'retry', function CLOCK_SKEWED(resp) {
	      if (!resp.error) return;
	      if (this.service.clockSkewError(resp.error)
	          && this.service.config.correctClockSkew
	          && AWS.config.isClockSkewed) {
	        resp.error.retryable = true;
	      }
	    });

	    add('REDIRECT', 'retry', function REDIRECT(resp) {
	      if (resp.error && resp.error.statusCode >= 300 &&
	          resp.error.statusCode < 400 && resp.httpResponse.headers['location']) {
	        this.httpRequest.endpoint =
	          new AWS.Endpoint(resp.httpResponse.headers['location']);
	        this.httpRequest.headers['Host'] = this.httpRequest.endpoint.host;
	        resp.error.redirect = true;
	        resp.error.retryable = true;
	      }
	    });

	    add('RETRY_CHECK', 'retry', function RETRY_CHECK(resp) {
	      if (resp.error) {
	        if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
	          resp.error.retryDelay = 0;
	        } else if (resp.retryCount < resp.maxRetries) {
	          var delays = this.service.retryDelays();
	          resp.error.retryDelay = delays[resp.retryCount] || 0;
	        }
	      }
	    });

	    addAsync('RESET_RETRY_STATE', 'afterRetry', function RESET_RETRY_STATE(resp, done) {
	      var delay, willRetry = false;

	      if (resp.error) {
	        delay = resp.error.retryDelay || 0;
	        if (resp.error.retryable && resp.retryCount < resp.maxRetries) {
	          resp.retryCount++;
	          willRetry = true;
	        } else if (resp.error.redirect && resp.redirectCount < resp.maxRedirects) {
	          resp.redirectCount++;
	          willRetry = true;
	        }
	      }

	      if (willRetry) {
	        resp.error = null;
	        setTimeout(done, delay);
	      } else {
	        done();
	      }
	    });
	  }),

	  CorePost: new SequentialExecutor().addNamedListeners(function(add) {
	    add('EXTRACT_REQUEST_ID', 'extractData', AWS.util.extractRequestId);
	    add('EXTRACT_REQUEST_ID', 'extractError', AWS.util.extractRequestId);

	    add('ENOTFOUND_ERROR', 'httpError', function ENOTFOUND_ERROR(err) {
	      if (err.code === 'NetworkingError' && err.errno === 'ENOTFOUND') {
	        var message = 'Inaccessible host: `' + err.hostname +
	          '\'. This service may not be available in the `' + err.region +
	          '\' region.';
	        this.response.error = AWS.util.error(new Error(message), {
	          code: 'UnknownEndpoint',
	          region: err.region,
	          hostname: err.hostname,
	          retryable: true,
	          originalError: err
	        });
	      }
	    });
	  }),

	  Logger: new SequentialExecutor().addNamedListeners(function(add) {
	    add('LOG_REQUEST', 'complete', function LOG_REQUEST(resp) {
	      var req = resp.request;
	      var logger = req.service.config.logger;
	      if (!logger) return;

	      function buildMessage() {
	        var time = AWS.util.date.getDate().getTime();
	        var delta = (time - req.startTime.getTime()) / 1000;
	        var ansi = logger.isTTY ? true : false;
	        var status = resp.httpResponse.statusCode;
	        var params = __webpack_require__(10).inspect(req.params, true, null);

	        var message = '';
	        if (ansi) message += '\x1B[33m';
	        message += '[AWS ' + req.service.serviceIdentifier + ' ' + status;
	        message += ' ' + delta.toString() + 's ' + resp.retryCount + ' retries]';
	        if (ansi) message += '\x1B[0;1m';
	        message += ' ' + AWS.util.string.lowerFirst(req.operation);
	        message += '(' + params + ')';
	        if (ansi) message += '\x1B[0m';
	        return message;
	      }

	      var line = buildMessage();
	      if (typeof logger.log === 'function') {
	        logger.log(line);
	      } else if (typeof logger.write === 'function') {
	        logger.write(line + '\n');
	      }
	    });
	  }),

	  Json: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = __webpack_require__(61);
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),

	  Rest: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = __webpack_require__(37);
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),

	  RestJson: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = __webpack_require__(141);
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),

	  RestXml: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = __webpack_require__(142);
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  }),

	  Query: new SequentialExecutor().addNamedListeners(function(add) {
	    var svc = __webpack_require__(140);
	    add('BUILD', 'build', svc.buildRequest);
	    add('EXTRACT_DATA', 'extractData', svc.extractData);
	    add('EXTRACT_ERROR', 'extractError', svc.extractError);
	  })
	};


/***/ },
/* 636 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var Stream = AWS.util.nodeRequire('stream').Stream;
	var WritableStream = AWS.util.nodeRequire('stream').Writable;
	var ReadableStream = AWS.util.nodeRequire('stream').Readable;
	__webpack_require__(58);

	/**
	 * @api private
	 */
	AWS.NodeHttpClient = AWS.util.inherit({
	  handleRequest: function handleRequest(httpRequest, httpOptions, callback, errCallback) {
	    var self = this;
	    var cbAlreadyCalled = false;
	    var endpoint = httpRequest.endpoint;
	    var pathPrefix = '';
	    if (!httpOptions) httpOptions = {};
	    if (httpOptions.proxy) {
	      pathPrefix = endpoint.protocol + '//' + endpoint.hostname;
	      if (endpoint.port !== 80 && endpoint.port !== 443) {
	        pathPrefix += ':' + endpoint.port;
	      }
	      endpoint = new AWS.Endpoint(httpOptions.proxy);
	    }

	    var useSSL = endpoint.protocol === 'https:';
	    var http = useSSL ? __webpack_require__(40) : __webpack_require__(39);
	    var options = {
	      host: endpoint.hostname,
	      port: endpoint.port,
	      method: httpRequest.method,
	      headers: httpRequest.headers,
	      path: pathPrefix + httpRequest.path
	    };

	    if (useSSL && !httpOptions.agent) {
	      options.agent = this.sslAgent();
	    }

	    AWS.util.update(options, httpOptions);
	    delete options.proxy; // proxy isn't an HTTP option
	    delete options.timeout; // timeout isn't an HTTP option

	    var stream = http.request(options, function (httpResp) {
	      if (cbAlreadyCalled) return; cbAlreadyCalled = true;

	      callback(httpResp);
	      httpResp.emit('headers', httpResp.statusCode, httpResp.headers);
	    });
	    httpRequest.stream = stream; // attach stream to httpRequest

	    // timeout support
	    stream.setTimeout(httpOptions.timeout || 0, function() {
	      if (cbAlreadyCalled) return; cbAlreadyCalled = true;

	      var msg = 'Connection timed out after ' + httpOptions.timeout + 'ms';
	      errCallback(AWS.util.error(new Error(msg), {code: 'TimeoutError'}));
	      stream.abort();
	    });

	    stream.on('error', function() {
	      if (cbAlreadyCalled) return; cbAlreadyCalled = true;
	      errCallback.apply(this, arguments);
	    });

	    var expect = httpRequest.headers.Expect || httpRequest.headers.expect;
	    if (expect === '100-continue') {
	      stream.on('continue', function() {
	        self.writeBody(stream, httpRequest);
	      });
	    } else {
	      this.writeBody(stream, httpRequest);
	    }

	    return stream;
	  },

	  writeBody: function writeBody(stream, httpRequest) {
	    var body = httpRequest.body;

	    if (body && WritableStream && ReadableStream) { // progress support
	      if (!(body instanceof Stream)) body = AWS.util.buffer.toStream(body);
	      body.pipe(this.progressStream(stream, httpRequest));
	    }

	    if (body instanceof Stream) {
	      body.pipe(stream);
	    } else if (body) {
	      stream.end(body);
	    } else {
	      stream.end();
	    }
	  },

	  sslAgent: function sslAgent() {
	    var https = __webpack_require__(40);

	    if (!AWS.NodeHttpClient.sslAgent) {
	      AWS.NodeHttpClient.sslAgent = new https.Agent({rejectUnauthorized: true});
	      AWS.NodeHttpClient.sslAgent.setMaxListeners(0);

	      // delegate maxSockets to globalAgent
	      Object.defineProperty(AWS.NodeHttpClient.sslAgent, 'maxSockets', {
	        enumerable: true,
	        get: function() { return https.globalAgent.maxSockets; }
	      });
	    }
	    return AWS.NodeHttpClient.sslAgent;
	  },

	  progressStream: function progressStream(stream, httpRequest) {
	    var numBytes = 0;
	    var totalBytes = httpRequest.headers['Content-Length'];
	    var writer = new WritableStream();
	    writer._write = function(chunk, encoding, callback) {
	      if (chunk) {
	        numBytes += chunk.length;
	        stream.emit('sendProgress', {
	          loaded: numBytes, total: totalBytes
	        });
	      }
	      callback();
	    };
	    return writer;
	  },

	  emitter: null
	});

	/**
	 * @!ignore
	 */

	/**
	 * @api private
	 */
	AWS.HttpClient.prototype = AWS.NodeHttpClient.prototype;

	/**
	 * @api private
	 */
	AWS.HttpClient.streamsApiVersion = ReadableStream ? 2 : 1;


/***/ },
/* 637 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(2);
	__webpack_require__(58);
	var inherit = AWS.util.inherit;

	/**
	 * Represents a metadata service available on EC2 instances. Using the
	 * {request} method, you can receieve metadata about any available resource
	 * on the metadata service.
	 *
	 * @!attribute [r] httpOptions
	 *   @return [map] a map of options to pass to the underlying HTTP request:
	 *
	 *     * **timeout** (Number) &mdash; a timeout value in milliseconds to wait
	 *       before aborting the connection. Set to 0 for no timeout.
	 *
	 * @!macro nobrowser
	 */
	AWS.MetadataService = inherit({
	  /**
	   * @return [String] the hostname of the instance metadata service
	   */
	  host: '169.254.169.254',

	  /**
	   * @!ignore
	   */

	  /**
	   * Default HTTP options. By default, the metadata service is set to not
	   * timeout on long requests. This means that on non-EC2 machines, this
	   * request will never return. If you are calling this operation from an
	   * environment that may not always run on EC2, set a `timeout` value so
	   * the SDK will abort the request after a given number of milliseconds.
	   */
	  httpOptions: { timeout: 0 },

	  /**
	   * Creates a new MetadataService object with a given set of options.
	   *
	   * @option options host [String] the hostname of the instance metadata
	   *   service
	   * @option options httpOptions [map] a map of options to pass to the
	   *   underlying HTTP request:
	   *
	   *   * **timeout** (Number) &mdash; a timeout value in milliseconds to wait
	   *     before aborting the connection. Set to 0 for no timeout.
	   */
	  constructor: function MetadataService(options) {
	    AWS.util.update(this, options);
	  },

	  /**
	   * Sends a request to the instance metadata service for a given resource.
	   *
	   * @param path [String] the path of the resource to get
	   * @callback callback function(err, data)
	   *   Called when a response is available from the service.
	   *   @param err [Error, null] if an error occurred, this value will be set
	   *   @param data [String, null] if the request was successful, the body of
	   *     the response
	   */
	  request: function request(path, callback) {
	    path = path || '/';

	    var data = '';
	    var http = AWS.HttpClient.getInstance();
	    var httpRequest = new AWS.HttpRequest('http://' + this.host + path);
	    httpRequest.method = 'GET';
	    var httpOptions = this.httpOptions;

	    process.nextTick(function() {
	      http.handleRequest(httpRequest, httpOptions, function(httpResponse) {
	        httpResponse.on('data', function(chunk) { data += chunk.toString(); });
	        httpResponse.on('end', function() { callback(null, data); });
	      }, callback);
	    });
	  },

	  /**
	  * @api private
	  */
	  loadCredentialsCallbacks: [],

	  /**
	   * Loads a set of credentials stored in the instance metadata service
	   *
	   * @api private
	   * @callback callback function(err, credentials)
	   *   Called when credentials are loaded from the resource
	   *   @param err [Error] if an error occurred, this value will be set
	   *   @param credentials [Object] the raw JSON object containing all
	   *     metadata from the credentials resource
	   */
	  loadCredentials: function loadCredentials(callback) {
	    var self = this;
	    var basePath = '/latest/meta-data/iam/security-credentials/';
	    self.loadCredentialsCallbacks.push(callback);
	    if (self.loadCredentialsCallbacks.length > 1) { return; }

	    function callbacks(err, creds) {
	      var cb;
	      while ((cb = self.loadCredentialsCallbacks.shift()) !== undefined) {
	        cb(err, creds);
	      }
	    }

	    self.request(basePath, function (err, roleName) {
	      if (err) callbacks(err);
	      else {
	        roleName = roleName.split('\n')[0]; // grab first (and only) role
	        self.request(basePath + roleName, function (credErr, credData) {
	          if (credErr) callbacks(credErr);
	          else {
	            try {
	              var credentials = JSON.parse(credData);
	              callbacks(null, credentials);
	            } catch (parseError) {
	              callbacks(parseError);
	            }
	          }
	        });
	      }
	    });
	  }
	});

	module.exports = AWS.MetadataService;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 638 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);

	/**
	 * @api private
	 */
	AWS.ParamValidator = AWS.util.inherit({
	  validate: function validate(shape, params, context) {
	    this.errors = [];
	    this.validateMember(shape, params || {}, context || 'params');

	    if (this.errors.length > 1) {
	      var msg = this.errors.join('\n* ');
	      if (this.errors.length > 1) {
	        msg = 'There were ' + this.errors.length +
	              ' validation errors:\n* ' + msg;
	        throw AWS.util.error(new Error(msg),
	          {code: 'MultipleValidationErrors', errors: this.errors});
	      }
	    } else if (this.errors.length === 1) {
	      throw this.errors[0];
	    } else {
	      return true;
	    }
	  },

	  validateStructure: function validateStructure(shape, params, context) {
	    this.validateType(context, params, ['object'], 'structure');

	    var paramName;
	    for (var i = 0; shape.required && i < shape.required.length; i++) {
	      paramName = shape.required[i];
	      var value = params[paramName];
	      if (value === undefined || value === null) {
	        this.fail('MissingRequiredParameter',
	          'Missing required key \'' + paramName + '\' in ' + context);
	      }
	    }

	    // validate hash members
	    for (paramName in params) {
	      if (!params.hasOwnProperty(paramName)) continue;

	      var paramValue = params[paramName],
	          memberShape = shape.members[paramName];

	      if (memberShape !== undefined) {
	        var memberContext = [context, paramName].join('.');
	        this.validateMember(memberShape, paramValue, memberContext);
	      } else {
	        this.fail('UnexpectedParameter',
	          'Unexpected key \'' + paramName + '\' found in ' + context);
	      }
	    }

	    return true;
	  },

	  validateMember: function validateMember(shape, param, context) {
	    switch (shape.type) {
	      case 'structure':
	        return this.validateStructure(shape, param, context);
	      case 'list':
	        return this.validateList(shape, param, context);
	      case 'map':
	        return this.validateMap(shape, param, context);
	      default:
	        return this.validateScalar(shape, param, context);
	    }
	  },

	  validateList: function validateList(shape, params, context) {
	    this.validateType(context, params, [Array]);

	    // validate array members
	    for (var i = 0; i < params.length; i++) {
	      this.validateMember(shape.member, params[i], context + '[' + i + ']');
	    }
	  },

	  validateMap: function validateMap(shape, params, context) {
	    this.validateType(context, params, ['object'], 'map');

	    for (var param in params) {
	      if (!params.hasOwnProperty(param)) continue;
	      this.validateMember(shape.value, params[param],
	                          context + '[\'' + param + '\']');
	    }
	  },

	  validateScalar: function validateScalar(shape, value, context) {
	    switch (shape.type) {
	      case null:
	      case undefined:
	      case 'string':
	        return this.validateType(context, value, ['string']);
	      case 'base64':
	      case 'binary':
	        return this.validatePayload(context, value);
	      case 'integer':
	      case 'float':
	        return this.validateNumber(context, value);
	      case 'boolean':
	        return this.validateType(context, value, ['boolean']);
	      case 'timestamp':
	        return this.validateType(context, value, [Date,
	          /^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(\.\d+)?Z$/, 'number'],
	          'Date object, ISO-8601 string, or a UNIX timestamp');
	      default:
	        return this.fail('UnkownType', 'Unhandled type ' +
	                         shape.type + ' for ' + context);
	    }
	  },

	  fail: function fail(code, message) {
	    this.errors.push(AWS.util.error(new Error(message), {code: code}));
	  },

	  validateType: function validateType(context, value, acceptedTypes, type) {
	    if (value === null || value === undefined) return;

	    var foundInvalidType = false;
	    for (var i = 0; i < acceptedTypes.length; i++) {
	      if (typeof acceptedTypes[i] === 'string') {
	        if (typeof value === acceptedTypes[i]) return;
	      } else if (acceptedTypes[i] instanceof RegExp) {
	        if ((value || '').toString().match(acceptedTypes[i])) return;
	      } else {
	        if (value instanceof acceptedTypes[i]) return;
	        if (AWS.util.isType(value, acceptedTypes[i])) return;
	        if (!type && !foundInvalidType) acceptedTypes = acceptedTypes.slice();
	        acceptedTypes[i] = AWS.util.typeName(acceptedTypes[i]);
	      }
	      foundInvalidType = true;
	    }

	    var acceptedType = type;
	    if (!acceptedType) {
	      acceptedType = acceptedTypes.join(', ').replace(/,([^,]+)$/, ', or$1');
	    }

	    var vowel = acceptedType.match(/^[aeiou]/i) ? 'n' : '';
	    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a' +
	              vowel + ' ' + acceptedType);
	  },

	  validateNumber: function validateNumber(context, value) {
	    if (value === null || value === undefined) return;
	    if (typeof value === 'string') {
	      var castedValue = parseFloat(value);
	      if (castedValue.toString() === value) value = castedValue;
	    }
	    this.validateType(context, value, ['number']);
	  },

	  validatePayload: function validatePayload(context, value) {
	    if (value === null || value === undefined) return;
	    if (typeof value === 'string') return;
	    if (value && typeof value.byteLength === 'number') return; // typed arrays
	    if (AWS.util.isNode()) { // special check for buffer/stream in Node.js
	      var Stream = AWS.util.nodeRequire('stream').Stream;
	      if (AWS.util.Buffer.isBuffer(value) || value instanceof Stream) return;
	    }

	    var types = ['Buffer', 'Stream', 'File', 'Blob', 'ArrayBuffer', 'DataView'];
	    if (value) {
	      for (var i = 0; i < types.length; i++) {
	        if (AWS.util.isType(value, types[i])) return;
	        if (AWS.util.typeName(value.constructor) === types[i]) return;
	      }
	    }

	    this.fail('InvalidParameterType', 'Expected ' + context + ' to be a ' +
	      'string, Buffer, Stream, Blob, or typed array object');
	  }
	});


/***/ },
/* 639 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);

	function QueryParamSerializer() {
	}

	QueryParamSerializer.prototype.serialize = function(params, shape, fn) {
	  serializeStructure('', params, shape, fn);
	};

	function ucfirst(shape) {
	  if (shape.isQueryName || shape.api.protocol !== 'ec2') {
	    return shape.name;
	  } else {
	    return shape.name[0].toUpperCase() + shape.name.substr(1);
	  }
	}

	function serializeStructure(prefix, struct, rules, fn) {
	  util.each(rules.members, function(name, member) {
	    var value = struct[name];
	    if (value === null || value === undefined) return;

	    var memberName = ucfirst(member);
	    memberName = prefix ? prefix + '.' + memberName : memberName;
	    serializeMember(memberName, value, member, fn);
	  });
	}

	function serializeMap(name, map, rules, fn) {
	  var i = 1;
	  util.each(map, function (key, value) {
	    var prefix = rules.flattened ? '.' : '.entry.';
	    var position = prefix + (i++) + '.';
	    var keyName = position + (rules.key.name || 'key');
	    var valueName = position + (rules.value.name || 'value');
	    serializeMember(name + keyName, key, rules.key, fn);
	    serializeMember(name + valueName, value, rules.value, fn);
	  });
	}

	function serializeList(name, list, rules, fn) {
	  var memberRules = rules.member || {};

	  if (list.length === 0) {
	    fn.call(this, name, null);
	    return;
	  }

	  util.arrayEach(list, function (v, n) {
	    var suffix = '.' + (n + 1);
	    if (rules.api.protocol === 'ec2') {
	      // Do nothing for EC2
	      suffix = suffix + ''; // make linter happy
	    } else if (rules.flattened) {
	      if (memberRules.name) {
	        var parts = name.split('.');
	        parts.pop();
	        parts.push(ucfirst(memberRules));
	        name = parts.join('.');
	      }
	    } else {
	      suffix = '.member' + suffix;
	    }
	    serializeMember(name + suffix, v, memberRules, fn);
	  });
	}

	function serializeMember(name, value, rules, fn) {
	  if (value === null || value === undefined) return;
	  if (rules.type === 'structure') {
	    serializeStructure(name, value, rules, fn);
	  } else if (rules.type === 'list') {
	    serializeList(name, value, rules, fn);
	  } else if (rules.type === 'map') {
	    serializeMap(name, value, rules, fn);
	  } else {
	    fn(name, rules.toWireFormat(value).toString());
	  }
	}

	module.exports = QueryParamSerializer;


/***/ },
/* 640 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);
	var regionConfig = __webpack_require__(613);

	function generateRegionPrefix(region) {
	  if (!region) return null;

	  var parts = region.split('-');
	  if (parts.length < 3) return null;
	  return parts.slice(0, parts.length - 2).join('-') + '-*';
	}

	function derivedKeys(service) {
	  var region = service.config.region;
	  var regionPrefix = generateRegionPrefix(region);
	  var endpointPrefix = service.api.endpointPrefix;

	  return [
	    [region, endpointPrefix],
	    [regionPrefix, endpointPrefix],
	    [region, '*'],
	    [regionPrefix, '*'],
	    ['*', endpointPrefix],
	    ['*', '*']
	  ].map(function(item) {
	    return item[0] && item[1] ? item.join('/') : null;
	  });
	}

	function applyConfig(service, config) {
	  util.each(config, function(key, value) {
	    if (key === 'globalEndpoint') return;
	    if (service.config[key] === undefined || service.config[key] === null) {
	      service.config[key] = value;
	    }
	  });
	}

	function configureEndpoint(service) {
	  var keys = derivedKeys(service);
	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];
	    if (!key) continue;

	    if (regionConfig.rules.hasOwnProperty(key)) {
	      var config = regionConfig.rules[key];
	      if (typeof config === 'string') {
	        config = regionConfig.patterns[config];
	      }

	      // set global endpoint
	      service.isGlobalEndpoint = !!config.globalEndpoint;

	      // signature version
	      if (!config.signatureVersion) config.signatureVersion = 'v4';

	      // merge config
	      applyConfig(service, config);
	      return;
	    }
	  }
	}

	module.exports = configureEndpoint;


/***/ },
/* 641 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var AWS = __webpack_require__(2);
	var AcceptorStateMachine = __webpack_require__(653);
	var inherit = AWS.util.inherit;
	var domain = AWS.util.nodeRequire('domain');

	/**
	 * @api private
	 */
	var hardErrorStates = {success: 1, error: 1, complete: 1};

	function isTerminalState(machine) {
	  return hardErrorStates.hasOwnProperty(machine._asm.currentState);
	}

	var fsm = new AcceptorStateMachine();
	fsm.setupStates = function() {
	  var transition = function(_, done) {
	    var self = this;
	    self._haltHandlersOnError = false;

	    self.emit(self._asm.currentState, function(err) {
	      if (err) {
	        if (isTerminalState(self)) {
	          if (domain && self.domain instanceof domain.Domain) {
	            err.domainEmitter = self;
	            err.domain = self.domain;
	            err.domainThrown = false;
	            self.domain.emit('error', err);
	          } else {
	            throw err;
	          }
	        } else {
	          self.response.error = err;
	          done(err);
	        }
	      } else {
	        done(self.response.error);
	      }
	    });

	  };

	  this.addState('validate', 'build', 'error', transition);
	  this.addState('build', 'afterBuild', 'restart', transition);
	  this.addState('afterBuild', 'sign', 'restart', transition);
	  this.addState('sign', 'send', 'retry', transition);
	  this.addState('retry', 'afterRetry', 'afterRetry', transition);
	  this.addState('afterRetry', 'sign', 'error', transition);
	  this.addState('send', 'validateResponse', 'retry', transition);
	  this.addState('validateResponse', 'extractData', 'extractError', transition);
	  this.addState('extractError', 'extractData', 'retry', transition);
	  this.addState('extractData', 'success', 'retry', transition);
	  this.addState('restart', 'build', 'error', transition);
	  this.addState('success', 'complete', 'complete', transition);
	  this.addState('error', 'complete', 'complete', transition);
	  this.addState('complete', null, null, transition);
	};
	fsm.setupStates();

	/**
	 * ## Asynchronous Requests
	 *
	 * All requests made through the SDK are asynchronous and use a
	 * callback interface. Each service method that kicks off a request
	 * returns an `AWS.Request` object that you can use to register
	 * callbacks.
	 *
	 * For example, the following service method returns the request
	 * object as "request", which can be used to register callbacks:
	 *
	 * ```javascript
	 * // request is an AWS.Request object
	 * var request = ec2.describeInstances();
	 *
	 * // register callbacks on request to retrieve response data
	 * request.on('success', function(response) {
	 *   console.log(response.data);
	 * });
	 * ```
	 *
	 * When a request is ready to be sent, the {send} method should
	 * be called:
	 *
	 * ```javascript
	 * request.send();
	 * ```
	 *
	 * ## Removing Default Listeners for Events
	 *
	 * Request objects are built with default listeners for the various events,
	 * depending on the service type. In some cases, you may want to remove
	 * some built-in listeners to customize behaviour. Doing this requires
	 * access to the built-in listener functions, which are exposed through
	 * the {AWS.EventListeners.Core} namespace. For instance, you may
	 * want to customize the HTTP handler used when sending a request. In this
	 * case, you can remove the built-in listener associated with the 'send'
	 * event, the {AWS.EventListeners.Core.SEND} listener and add your own.
	 *
	 * ## Multiple Callbacks and Chaining
	 *
	 * You can register multiple callbacks on any request object. The
	 * callbacks can be registered for different events, or all for the
	 * same event. In addition, you can chain callback registration, for
	 * example:
	 *
	 * ```javascript
	 * request.
	 *   on('success', function(response) {
	 *     console.log("Success!");
	 *   }).
	 *   on('error', function(response) {
	 *     console.log("Error!");
	 *   }).
	 *   on('complete', function(response) {
	 *     console.log("Always!");
	 *   }).
	 *   send();
	 * ```
	 *
	 * The above example will print either "Success! Always!", or "Error! Always!",
	 * depending on whether the request succeeded or not.
	 *
	 * @!attribute httpRequest
	 *   @readonly
	 *   @!group HTTP Properties
	 *   @return [AWS.HttpRequest] the raw HTTP request object
	 *     containing request headers and body information
	 *     sent by the service.
	 *
	 * @!attribute startTime
	 *   @readonly
	 *   @!group Operation Properties
	 *   @return [Date] the time that the request started
	 *
	 * @!group Request Building Events
	 *
	 * @!event validate(request)
	 *   Triggered when a request is being validated. Listeners
	 *   should throw an error if the request should not be sent.
	 *   @param request [Request] the request object being sent
	 *   @see AWS.EventListeners.Core.VALIDATE_CREDENTIALS
	 *   @see AWS.EventListeners.Core.VALIDATE_REGION
	 *   @example Ensuring that a certain parameter is set before sending a request
	 *     var req = s3.putObject(params);
	 *     req.on('validate', function() {
	 *       if (!req.params.Body.match(/^Hello\s/)) {
	 *         throw new Error('Body must start with "Hello "');
	 *       }
	 *     });
	 *     req.send(function(err, data) { ... });
	 *
	 * @!event build(request)
	 *   Triggered when the request payload is being built. Listeners
	 *   should fill the necessary information to send the request
	 *   over HTTP.
	 *   @param (see AWS.Request~validate)
	 *   @example Add a custom HTTP header to a request
	 *     var req = s3.putObject(params);
	 *     req.on('build', function() {
	 *       req.httpRequest.headers['Custom-Header'] = 'value';
	 *     });
	 *     req.send(function(err, data) { ... });
	 *
	 * @!event sign(request)
	 *   Triggered when the request is being signed. Listeners should
	 *   add the correct authentication headers and/or adjust the body,
	 *   depending on the authentication mechanism being used.
	 *   @param (see AWS.Request~validate)
	 *
	 * @!group Request Sending Events
	 *
	 * @!event send(response)
	 *   Triggered when the request is ready to be sent. Listeners
	 *   should call the underlying transport layer to initiate
	 *   the sending of the request.
	 *   @param response [Response] the response object
	 *   @context [Request] the request object that was sent
	 *   @see AWS.EventListeners.Core.SEND
	 *
	 * @!event retry(response)
	 *   Triggered when a request failed and might need to be retried or redirected.
	 *   If the response is retryable, the listener should set the
	 *   `response.error.retryable` property to `true`, and optionally set
	 *   `response.error.retryCount` to the millisecond delay for the next attempt.
	 *   In the case of a redirect, `response.error.redirect` should be set to
	 *   `true` with `retryCount` set to an optional delay on the next request.
	 *
	 *   If a listener decides that a request should not be retried,
	 *   it should set both `retryable` and `redirect` to false.
	 *
	 *   Note that a retryable error will be retried at most
	 *   {AWS.Config.maxRetries} times (based on the service object's config).
	 *   Similarly, a request that is redirected will only redirect at most
	 *   {AWS.Config.maxRedirects} times.
	 *
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *   @example Adding a custom retry for a 404 response
	 *     request.on('retry', function(response) {
	 *       // this resource is not yet available, wait 10 seconds to get it again
	 *       if (response.httpResponse.statusCode === 404 && response.error) {
	 *         response.error.retryable = true;   // retry this error
	 *         response.error.retryCount = 10000; // wait 10 seconds
	 *       }
	 *     });
	 *
	 * @!group Data Parsing Events
	 *
	 * @!event extractError(response)
	 *   Triggered on all non-2xx requests so that listeners can extract
	 *   error details from the response body. Listeners to this event
	 *   should set the `response.error` property.
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @!event extractData(response)
	 *   Triggered in successful requests to allow listeners to
	 *   de-serialize the response body into `response.data`.
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @!group Completion Events
	 *
	 * @!event success(response)
	 *   Triggered when the request completed successfully.
	 *   `response.data` will contain the response data and
	 *   `response.error` will be null.
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @!event error(error, response)
	 *   Triggered when an error occurs at any point during the
	 *   request. `response.error` will contain details about the error
	 *   that occurred. `response.data` will be null.
	 *   @param error [Error] the error object containing details about
	 *     the error that occurred.
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @!event complete(response)
	 *   Triggered whenever a request cycle completes. `response.error`
	 *   should be checked, since the request may have failed.
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @!group HTTP Events
	 *
	 * @!event httpHeaders(statusCode, headers, response)
	 *   Triggered when headers are sent by the remote server
	 *   @param statusCode [Integer] the HTTP response code
	 *   @param headers [map<String,String>] the response headers
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @!event httpData(chunk, response)
	 *   Triggered when data is sent by the remote server
	 *   @param chunk [Buffer] the buffer data containing the next data chunk
	 *     from the server
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *   @see AWS.EventListeners.Core.HTTP_DATA
	 *
	 * @!event httpUploadProgress(progress, response)
	 *   Triggered when the HTTP request has uploaded more data
	 *   @param progress [map] An object containing the `loaded` and `total` bytes
	 *     of the request.
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *   @note This event will not be emitted in Node.js 0.8.x.
	 *
	 * @!event httpDownloadProgress(progress, response)
	 *   Triggered when the HTTP request has downloaded more data
	 *   @param progress [map] An object containing the `loaded` and `total` bytes
	 *     of the request.
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *   @note This event will not be emitted in Node.js 0.8.x.
	 *
	 * @!event httpError(error, response)
	 *   Triggered when the HTTP request failed
	 *   @param error [Error] the error object that was thrown
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @!event httpDone(response)
	 *   Triggered when the server is finished sending data
	 *   @param (see AWS.Request~send)
	 *   @context (see AWS.Request~send)
	 *
	 * @see AWS.Response
	 */
	AWS.Request = inherit({

	  /**
	   * Creates a request for an operation on a given service with
	   * a set of input parameters.
	   *
	   * @param service [AWS.Service] the service to perform the operation on
	   * @param operation [String] the operation to perform on the service
	   * @param params [Object] parameters to send to the operation.
	   *   See the operation's documentation for the format of the
	   *   parameters.
	   */
	  constructor: function Request(service, operation, params) {
	    var endpoint = service.endpoint;
	    var region = service.config.region;

	    // global endpoints sign as us-east-1
	    if (service.isGlobalEndpoint) region = 'us-east-1';

	    this.domain = domain && domain.active;
	    this.service = service;
	    this.operation = operation;
	    this.params = params || {};
	    this.httpRequest = new AWS.HttpRequest(endpoint, region);
	    this.startTime = AWS.util.date.getDate();

	    this.response = new AWS.Response(this);
	    this._asm = new AcceptorStateMachine(fsm.states, 'validate');
	    this._haltHandlersOnError = false;

	    AWS.SequentialExecutor.call(this);
	    this.emit = this.emitEvent;
	  },

	  /**
	   * @!group Sending a Request
	   */

	  /**
	   * @overload send(callback = null)
	   *   Sends the request object.
	   *
	   *   @callback callback function(err, data)
	   *     If a callback is supplied, it is called when a response is returned
	   *     from the service.
	   *     @context [AWS.Request] the request object being sent.
	   *     @param err [Error] the error object returned from the request.
	   *       Set to `null` if the request is successful.
	   *     @param data [Object] the de-serialized data returned from
	   *       the request. Set to `null` if a request error occurs.
	   *   @example Sending a request with a callback
	   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
	   *     request.send(function(err, data) { console.log(err, data); });
	   *   @example Sending a request with no callback (using event handlers)
	   *     request = s3.putObject({Bucket: 'bucket', Key: 'key'});
	   *     request.on('complete', function(response) { ... }); // register a callback
	   *     request.send();
	   */
	  send: function send(callback) {
	    if (callback) {
	      this.on('complete', function (resp) {
	        callback.call(resp, resp.error, resp.data);
	      });
	    }
	    this.runTo();

	    return this.response;
	  },

	  /**
	   * @api private
	   */
	  build: function build(callback) {
	    return this.runTo('send', callback);
	  },

	  /**
	   * @api private
	   */
	  runTo: function runTo(state, done) {
	    this._asm.runTo(state, done, this);
	    return this;
	  },

	  /**
	   * Aborts a request, emitting the error and complete events.
	   *
	   * @!macro nobrowser
	   * @example Aborting a request after sending
	   *   var params = {
	   *     Bucket: 'bucket', Key: 'key',
	   *     Body: new Buffer(1024 * 1024 * 5) // 5MB payload
	   *   };
	   *   var request = s3.putObject(params);
	   *   request.send(function (err, data) {
	   *     if (err) console.log("Error:", err.code, err.message);
	   *     else console.log(data);
	   *   });
	   *
	   *   // abort request in 1 second
	   *   setTimeout(request.abort.bind(request), 1000);
	   *
	   *   // prints "Error: RequestAbortedError Request aborted by user"
	   * @return [AWS.Request] the same request object, for chaining.
	   * @since v1.4.0
	   */
	  abort: function abort() {
	    this.removeAllListeners('validateResponse');
	    this.removeAllListeners('extractError');
	    this.on('validateResponse', function addAbortedError(resp) {
	      resp.error = AWS.util.error(new Error('Request aborted by user'), {
	         code: 'RequestAbortedError', retryable: false
	      });
	    });

	    if (this.httpRequest.stream) { // abort HTTP stream
	      this.httpRequest.stream.abort();
	      if (this.httpRequest._abortCallback) {
	         this.httpRequest._abortCallback();
	      } else {
	        this.removeAllListeners('send'); // haven't sent yet, so let's not
	      }
	    }

	    return this;
	  },

	  /**
	   * Iterates over each page of results given a pageable request, calling
	   * the provided callback with each page of data. After all pages have been
	   * retrieved, the callback is called with `null` data.
	   *
	   * @note This operation can generate multiple requests to a service.
	   * @example Iterating over multiple pages of objects in an S3 bucket
	   *   var pages = 1;
	   *   s3.listObjects().eachPage(function(err, data) {
	   *     if (err) return;
	   *     console.log("Page", pages++);
	   *     console.log(data);
	   *   });
	   * @example Iterating over multiple pages with an asynchronous callback
	   *   s3.listObjects(params).eachPage(function(err, data, done) {
	   *     doSomethingAsyncAndOrExpensive(function() {
	   *       // The next page of results isn't fetched until done is called
	   *       done();
	   *     });
	   *   });
	   * @callback callback function(err, data, [doneCallback])
	   *   Called with each page of resulting data from the request. If the
	   *   optional `doneCallback` is provided in the function, it must be called
	   *   when the callback is complete.
	   *
	   *   @param err [Error] an error object, if an error occurred.
	   *   @param data [Object] a single page of response data. If there is no
	   *     more data, this object will be `null`.
	   *   @param doneCallback [Function] an optional done callback. If this
	   *     argument is defined in the function declaration, it should be called
	   *     when the next page is ready to be retrieved. This is useful for
	   *     controlling serial pagination across asynchronous operations.
	   *   @return [Boolean] if the callback returns `false`, pagination will
	   *     stop.
	   *
	   * @see AWS.Request.eachItem
	   * @see AWS.Response.nextPage
	   * @since v1.4.0
	   */
	  eachPage: function eachPage(callback) {
	    // Make all callbacks async-ish
	    callback = AWS.util.fn.makeAsync(callback, 3);

	    function wrappedCallback(response) {
	      callback.call(response, response.error, response.data, function (result) {
	        if (result === false) return;

	        if (response.hasNextPage()) {
	          response.nextPage().on('complete', wrappedCallback).send();
	        } else {
	          callback.call(response, null, null, AWS.util.fn.noop);
	        }
	      });
	    }

	    this.on('complete', wrappedCallback).send();
	  },

	  /**
	   * Enumerates over individual items of a request, paging the responses if
	   * necessary.
	   *
	   * @api experimental
	   * @since v1.4.0
	   */
	  eachItem: function eachItem(callback) {
	    var self = this;
	    function wrappedCallback(err, data) {
	      if (err) return callback(err, null);
	      if (data === null) return callback(null, null);

	      var config = self.service.paginationConfig(self.operation);
	      var resultKey = config.resultKey;
	      if (Array.isArray(resultKey)) resultKey = resultKey[0];
	      var results = AWS.util.jamespath.query(resultKey, data);
	      AWS.util.arrayEach(results, function(result) {
	        AWS.util.arrayEach(result, function(item) { callback(null, item); });
	      });
	    }

	    this.eachPage(wrappedCallback);
	  },

	  /**
	   * @return [Boolean] whether the operation can return multiple pages of
	   *   response data.
	   * @see AWS.Response.eachPage
	   * @since v1.4.0
	   */
	  isPageable: function isPageable() {
	    return this.service.paginationConfig(this.operation) ? true : false;
	  },

	  /**
	   * Converts the request object into a readable stream that
	   * can be read from or piped into a writable stream.
	   *
	   * @note The data read from a readable stream contains only
	   *   the raw HTTP body contents.
	   * @example Manually reading from a stream
	   *   request.createReadStream().on('data', function(data) {
	   *     console.log("Got data:", data.toString());
	   *   });
	   * @example Piping a request body into a file
	   *   var out = fs.createWriteStream('/path/to/outfile.jpg');
	   *   s3.service.getObject(params).createReadStream().pipe(out);
	   * @return [Stream] the readable stream object that can be piped
	   *   or read from (by registering 'data' event listeners).
	   * @!macro nobrowser
	   */
	  createReadStream: function createReadStream() {
	    var streams = AWS.util.nodeRequire('stream');
	    var req = this;
	    var stream = null;

	    if (AWS.HttpClient.streamsApiVersion === 2) {
	      stream = new streams.PassThrough();
	      req.send();
	    } else {
	      stream = new streams.Stream();
	      stream.readable = true;

	      stream.sent = false;
	      stream.on('newListener', function(event) {
	        if (!stream.sent && event === 'data') {
	          stream.sent = true;
	          process.nextTick(function() { req.send(); });
	        }
	      });
	    }

	    this.on('httpHeaders', function streamHeaders(statusCode, headers, resp) {
	      if (statusCode < 300) {
	        req.removeListener('httpData', AWS.EventListeners.Core.HTTP_DATA);
	        req.removeListener('httpError', AWS.EventListeners.Core.HTTP_ERROR);
	        req.on('httpError', function streamHttpError(error) {
	          resp.error = error;
	          resp.error.retryable = false;
	        });

	        var httpStream = resp.httpResponse.createUnbufferedStream();
	        if (AWS.HttpClient.streamsApiVersion === 2) {
	          httpStream.pipe(stream);
	        } else {
	          httpStream.on('data', function(arg) {
	            stream.emit('data', arg);
	          });
	          httpStream.on('end', function() {
	            stream.emit('end');
	          });
	        }

	        httpStream.on('error', function(err) {
	          stream.emit('error', err);
	        });
	      }
	    });

	    this.on('error', function(err) {
	      stream.emit('error', err);
	    });

	    return stream;
	  },

	  /**
	   * @param [Array,Response] args This should be the response object,
	   *   or an array of args to send to the event.
	   * @api private
	   */
	  emitEvent: function emit(eventName, args, done) {
	    if (typeof args === 'function') { done = args; args = null; }
	    if (!done) done = function() { };
	    if (!args) args = this.eventParameters(eventName, this.response);

	    var origEmit = AWS.SequentialExecutor.prototype.emit;
	    origEmit.call(this, eventName, args, function (err) {
	      if (err) this.response.error = err;
	      done.call(this, err);
	    });
	  },

	  /**
	   * @api private
	   */
	  eventParameters: function eventParameters(eventName) {
	    switch (eventName) {
	      case 'restart':
	      case 'validate':
	      case 'sign':
	      case 'build':
	      case 'afterValidate':
	      case 'afterBuild':
	        return [this];
	      case 'error':
	        return [this.response.error, this.response];
	      default:
	        return [this.response];
	    }
	  },

	  /**
	   * @api private
	   */
	  presign: function presign(expires, callback) {
	    if (!callback && typeof expires === 'function') {
	      callback = expires;
	      expires = null;
	    }
	    return new AWS.Signers.Presign().sign(this.toGet(), expires, callback);
	  },

	  /**
	   * @api private
	   */
	  toUnauthenticated: function toUnauthenticated() {
	    this.removeListener('validate', AWS.EventListeners.Core.VALIDATE_CREDENTIALS);
	    this.removeListener('sign', AWS.EventListeners.Core.SIGN);
	    return this.toGet();
	  },

	  /**
	   * @api private
	   */
	  toGet: function toGet() {
	    if (this.service.api.protocol === 'query' ||
	        this.service.api.protocol === 'ec2') {
	      this.removeListener('build', this.buildAsGet);
	      this.addListener('build', this.buildAsGet);
	    }
	    return this;
	  },

	  /**
	   * @api private
	   */
	  buildAsGet: function buildAsGet(request) {
	    request.httpRequest.method = 'GET';
	    request.httpRequest.path = request.service.endpoint.path +
	                               '?' + request.httpRequest.body;
	    request.httpRequest.body = '';

	    // don't need these headers on a GET request
	    delete request.httpRequest.headers['Content-Length'];
	    delete request.httpRequest.headers['Content-Type'];
	  },

	  /**
	   * @api private
	   */
	  haltHandlersOnError: function haltHandlersOnError() {
	    this._haltHandlersOnError = true;
	  }
	});

	AWS.util.mixin(AWS.Request, AWS.SequentialExecutor);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 642 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2012-2013 Amazon.com, Inc. or its affiliates. All Rights Reserved.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License"). You
	 * may not use this file except in compliance with the License. A copy of
	 * the License is located at
	 *
	 *     http://aws.amazon.com/apache2.0/
	 *
	 * or in the "license" file accompanying this file. This file is
	 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF
	 * ANY KIND, either express or implied. See the License for the specific
	 * language governing permissions and limitations under the License.
	 */

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * @api private
	 */
	AWS.ResourceWaiter = inherit({
	  /**
	   * Waits for a given state on a service object
	   * @param service [Service] the service object to wait on
	   * @param state [String] the state (defined in waiter configuration) to wait
	   *   for.
	   * @example Create a waiter for running EC2 instances
	   *   var ec2 = new AWS.EC2;
	   *   var waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');
	   */
	  constructor: function constructor(service, state) {
	    this.service = service;
	    this.state = state;

	    if (typeof this.state === 'object') {
	      AWS.util.each.call(this, this.state, function (key, value) {
	        this.state = key;
	        this.expectedValue = value;
	      });
	    }

	    this.loadWaiterConfig(this.state);
	    if (!this.expectedValue) {
	      this.expectedValue = this.config.successValue;
	    }
	  },

	  service: null,

	  state: null,

	  expectedValue: null,

	  config: null,

	  waitDone: false,

	  Listeners: {
	    retry: new AWS.SequentialExecutor().addNamedListeners(function(add) {
	      add('RETRY_CHECK', 'retry', function(resp) {
	        var waiter = resp.request._waiter;
	        if (resp.error && resp.error.code === 'ResourceNotReady') {
	          resp.error.retryDelay = waiter.config.interval * 1000;
	        }
	      });
	    }),

	    output: new AWS.SequentialExecutor().addNamedListeners(function(add) {
	      add('CHECK_OUT_ERROR', 'extractError', function CHECK_OUT_ERROR(resp) {
	        if (resp.error) {
	          resp.request._waiter.setError(resp, true);
	        }
	      });

	      add('CHECK_OUTPUT', 'extractData', function CHECK_OUTPUT(resp) {
	        var waiter = resp.request._waiter;
	        var success = waiter.checkSuccess(resp);
	        if (!success) {
	          waiter.setError(resp, success === null ? false : true);
	        } else {
	          resp.error = null;
	        }
	      });
	    }),

	    error: new AWS.SequentialExecutor().addNamedListeners(function(add) {
	      add('CHECK_ERROR', 'extractError', function CHECK_ERROR(resp) {
	        var waiter = resp.request._waiter;
	        var success = waiter.checkError(resp);
	        if (!success) {
	          waiter.setError(resp, success === null ? false : true);
	        } else {
	          resp.error = null;
	          resp.data = {};
	          resp.request.removeAllListeners('extractData');
	        }
	      });

	      add('CHECK_ERR_OUTPUT', 'extractData', function CHECK_ERR_OUTPUT(resp) {
	        resp.request._waiter.setError(resp, true);
	      });
	    })
	  },

	  /**
	   * @return [AWS.Request]
	   */
	  wait: function wait(params, callback) {
	    if (typeof params === 'function') {
	      callback = params; params = undefined;
	    }

	    var request = this.service.makeRequest(this.config.operation, params);
	    var listeners = this.Listeners[this.config.successType];
	    request._waiter = this;
	    request.response.maxRetries = this.config.maxAttempts;
	    request.addListeners(this.Listeners.retry);
	    if (listeners) request.addListeners(listeners);

	    if (callback) request.send(callback);
	    return request;
	  },

	  setError: function setError(resp, retryable) {
	    resp.data = null;
	    resp.error = AWS.util.error(resp.error || new Error(), {
	      code: 'ResourceNotReady',
	      message: 'Resource is not in the state ' + this.state,
	      retryable: retryable
	    });
	  },

	  /**
	   * Checks if the terminal expected success state has been met
	   * @return [Boolean]
	   */
	  checkSuccess: function checkSuccess(resp) {
	    if (!this.config.successPath) {
	      return resp.httpResponse.statusCode < 300;
	    }

	    var r = AWS.util.jamespath.find(this.config.successPath, resp.data);

	    if (this.config.failureValue &&
	        this.config.failureValue.indexOf(r) >= 0) {
	      return null; // fast fail
	    }

	    if (this.expectedValue) {
	      return r === this.expectedValue;
	    } else {
	      return r ? true : false;
	    }
	  },

	  /**
	   * Checks if the terminal expected error state has been met
	   * @return [Boolean]
	   */
	  checkError: function checkError(resp) {
	    var value = this.config.successValue;
	    if (typeof value === 'number') {
	      return resp.httpResponse.statusCode === value;
	    } else {
	      return resp.error && resp.error.code === value;
	    }
	  },

	  /**
	   * Loads waiter configuration from API configuration and deals with inherited
	   * properties.
	   *
	   * @api private
	   */
	  loadWaiterConfig: function loadWaiterConfig(state, noException) {
	    if (!this.service.api.waiters[state]) {
	      if (noException) return;
	      throw new AWS.util.error(new Error(), {
	        code: 'StateNotFoundError',
	        message: 'State ' + state + ' not found.'
	      });
	    }

	    this.config = this.service.api.waiters[state];
	    var config = this.config;

	    // inherit acceptor data
	    (function () { // anonymous function to avoid max complexity count
	      config.successType = config.successType || config.acceptorType;
	      config.successPath = config.successPath || config.acceptorPath;
	      config.successValue = config.successValue || config.acceptorValue;
	      config.failureType = config.failureType || config.acceptorType;
	      config.failurePath = config.failurePath || config.acceptorPath;
	      config.failureValue = config.failureValue || config.acceptorValue;
	    })();
	  }
	});


/***/ },
/* 643 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * This class encapsulates the response information
	 * from a service request operation sent through {AWS.Request}.
	 * The response object has two main properties for getting information
	 * back from a request:
	 *
	 * ## The `data` property
	 *
	 * The `response.data` property contains the serialized object data
	 * retrieved from the service request. For instance, for an
	 * Amazon DynamoDB `listTables` method call, the response data might
	 * look like:
	 *
	 * ```
	 * > resp.data
	 * { TableNames:
	 *    [ 'table1', 'table2', ... ] }
	 * ```
	 *
	 * The `data` property can be null if an error occurs (see below).
	 *
	 * ## The `error` property
	 *
	 * In the event of a service error (or transfer error), the
	 * `response.error` property will be filled with the given
	 * error data in the form:
	 *
	 * ```
	 * { code: 'SHORT_UNIQUE_ERROR_CODE',
	 *   message: 'Some human readable error message' }
	 * ```
	 *
	 * In the case of an error, the `data` property will be `null`.
	 * Note that if you handle events that can be in a failure state,
	 * you should always check whether `response.error` is set
	 * before attempting to access the `response.data` property.
	 *
	 * @!attribute data
	 *   @readonly
	 *   @!group Data Properties
	 *   @note Inside of a {AWS.Request~httpData} event, this
	 *     property contains a single raw packet instead of the
	 *     full de-serialized service response.
	 *   @return [Object] the de-serialized response data
	 *     from the service.
	 *
	 * @!attribute error
	 *   An structure containing information about a service
	 *   or networking error.
	 *   @readonly
	 *   @!group Data Properties
	 *   @note This attribute is only filled if a service or
	 *     networking error occurs.
	 *   @return [Error]
	 *     * code [String] a unique short code representing the
	 *       error that was emitted.
	 *     * message [String] a longer human readable error message
	 *     * retryable [Boolean] whether the error message is
	 *       retryable.
	 *     * statusCode [Numeric] in the case of a request that reached the service,
	 *       this value contains the response status code.
	 *     * time [Date] the date time object when the error occurred.
	 *     * hostname [String] set when a networking error occurs to easily
	 *       identify the endpoint of the request.
	 *     * region [String] set when a networking error occurs to easily
	 *       identify the region of the request.
	 *
	 * @!attribute requestId
	 *   @readonly
	 *   @!group Data Properties
	 *   @return [String] the unique request ID associated with the response.
	 *     Log this value when debugging requests for AWS support.
	 *
	 * @!attribute retryCount
	 *   @readonly
	 *   @!group Operation Properties
	 *   @return [Integer] the number of retries that were
	 *     attempted before the request was completed.
	 *
	 * @!attribute redirectCount
	 *   @readonly
	 *   @!group Operation Properties
	 *   @return [Integer] the number of redirects that were
	 *     followed before the request was completed.
	 *
	 * @!attribute httpResponse
	 *   @readonly
	 *   @!group HTTP Properties
	 *   @return [AWS.HttpResponse] the raw HTTP response object
	 *     containing the response headers and body information
	 *     from the server.
	 *
	 * @see AWS.Request
	 */
	AWS.Response = inherit({

	  /**
	   * @api private
	   */
	  constructor: function Response(request) {
	    this.request = request;
	    this.data = null;
	    this.error = null;
	    this.retryCount = 0;
	    this.redirectCount = 0;
	    this.httpResponse = new AWS.HttpResponse();
	    if (request) {
	      this.maxRetries = request.service.numRetries();
	      this.maxRedirects = request.service.config.maxRedirects;
	    }
	  },

	  /**
	   * Creates a new request for the next page of response data, calling the
	   * callback with the page data if a callback is provided.
	   *
	   * @callback callback function(err, data)
	   *   Called when a page of data is returned from the next request.
	   *
	   *   @param err [Error] an error object, if an error occurred in the request
	   *   @param data [Object] the next page of data, or null, if there are no
	   *     more pages left.
	   * @return [AWS.Request] the request object for the next page of data
	   * @return [null] if no callback is provided and there are no pages left
	   *   to retrieve.
	   * @since v1.4.0
	   */
	  nextPage: function nextPage(callback) {
	    var config;
	    var service = this.request.service;
	    var operation = this.request.operation;
	    try {
	      config = service.paginationConfig(operation, true);
	    } catch (e) { this.error = e; }

	    if (!this.hasNextPage()) {
	      if (callback) callback(this.error, null);
	      else if (this.error) throw this.error;
	      return null;
	    }

	    var params = AWS.util.copy(this.request.params);
	    if (!this.nextPageTokens) {
	      return callback ? callback(null, null) : null;
	    } else {
	      var inputTokens = config.inputToken;
	      if (typeof inputTokens === 'string') inputTokens = [inputTokens];
	      for (var i = 0; i < inputTokens.length; i++) {
	        params[inputTokens[i]] = this.nextPageTokens[i];
	      }
	      return service.makeRequest(this.request.operation, params, callback);
	    }
	  },

	  /**
	   * @return [Boolean] whether more pages of data can be returned by further
	   *   requests
	   * @since v1.4.0
	   */
	  hasNextPage: function hasNextPage() {
	    this.cacheNextPageTokens();
	    if (this.nextPageTokens) return true;
	    if (this.nextPageTokens === undefined) return undefined;
	    else return false;
	  },

	  /**
	   * @api private
	   */
	  cacheNextPageTokens: function cacheNextPageTokens() {
	    if (this.hasOwnProperty('nextPageTokens')) return this.nextPageTokens;
	    this.nextPageTokens = undefined;

	    var config = this.request.service.paginationConfig(this.request.operation);
	    if (!config) return this.nextPageTokens;

	    this.nextPageTokens = null;
	    if (config.moreResults) {
	      if (!AWS.util.jamespath.find(config.moreResults, this.data)) {
	        return this.nextPageTokens;
	      }
	    }

	    var exprs = config.outputToken;
	    if (typeof exprs === 'string') exprs = [exprs];
	    AWS.util.arrayEach.call(this, exprs, function (expr) {
	      var output = AWS.util.jamespath.find(expr, this.data);
	      if (output) {
	        this.nextPageTokens = this.nextPageTokens || [];
	        this.nextPageTokens.push(output);
	      }
	    });

	    return this.nextPageTokens;
	  }

	});


/***/ },
/* 644 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var AWS = __webpack_require__(2);
	var byteLength = AWS.util.string.byteLength;

	/**
	 * The managed uploader allows for easy and efficient uploading of buffers,
	 * blobs, or streams, using a configurable amount of concurrency to perform
	 * multipart uploads where possible. This abstraction also enables uploading
	 * streams of unknown size due to the use of multipart uploads.
	 *
	 * To construct a managed upload object, see the {constructor} function.
	 *
	 * ## Tracking upload progress
	 *
	 * The managed upload object can also track progress by attaching an
	 * 'httpUploadProgress' listener to the upload manager. This event is similar
	 * to {AWS.Request~httpUploadProgress} but groups all concurrent upload progress
	 * into a single event. See {AWS.S3.ManagedUpload~httpUploadProgress} for more
	 * information.
	 *
	 * ## Handling Multipart Cleanup
	 *
	 * By default, this class will automatically clean up any multipart uploads
	 * when an individual part upload fails. This behavior can be disabled in order
	 * to manually handle failures by setting the `leavePartsOnError` configuration
	 * option to `true` when initializing the upload object.
	 *
	 * @!event httpUploadProgress(progress)
	 *   Triggered when the uploader has uploaded more data.
	 *   @note The `total` property may not be set if the stream being uploaded has
	 *     not yet finished chunking. In this case the `total` will be undefined
	 *     until the total stream size is known.
	 *   @note This event will not be emitted in Node.js 0.8.x.
	 *   @param progress [map] An object containing the `loaded` and `total` bytes
	 *     of the request and the `key` of the S3 object. Note that `total` may be undefined until the payload
	 *     size is known.
	 *   @context (see AWS.Request~send)
	 */
	AWS.S3.ManagedUpload = AWS.util.inherit({
	  /**
	   * Creates a managed upload object with a set of configuration options.
	   *
	   * @note A "Body" parameter is required to be set prior to calling {send}.
	   * @option options params [map] a map of parameters to pass to the upload
	   *   requests. The "Body" parameter is required to be specified either on
	   *   the service or in the params option.
	   * @note ContentMD5 should not be provided when using the managed upload object.
	   *   Instead, setting "computeChecksums" to true will enable automatic ContentMD5 generation
	   *   by the managed upload object.
	   * @option options queueSize [Number] (4) the size of the concurrent queue
	   *   manager to upload parts in parallel. Set to 1 for synchronous uploading
	   *   of parts. Note that the uploader will buffer at most queueSize * partSize
	   *   bytes into memory at any given time.
	   * @option options partSize [Number] (5mb) the size in bytes for each
	   *   individual part to be uploaded. Adjust the part size to ensure the number
	   *   of parts does not exceed {maxTotalParts}. See {minPartSize} for the
	   *   minimum allowed part size.
	   * @option options leavePartsOnError [Boolean] (false) whether to abort the
	   *   multipart upload if an error occurs. Set to true if you want to handle
	   *   failures manually.
	   * @option options service [AWS.S3] an optional S3 service object to use for
	   *   requests. This object might have bound parameters used by the uploader.
	   * @example Creating a default uploader for a stream object
	   *   var upload = new AWS.S3.ManagedUpload({
	   *     params: {Bucket: 'bucket', Key: 'key', Body: stream}
	   *   });
	   * @example Creating an uploader with concurrency of 1 and partSize of 10mb
	   *   var upload = new AWS.S3.ManagedUpload({
	   *     partSize: 10 * 1024 * 1024, queueSize: 1,
	   *     params: {Bucket: 'bucket', Key: 'key', Body: stream}
	   *   });
	   * @see send
	   */
	  constructor: function ManagedUpload(options) {
	    var self = this;
	    AWS.SequentialExecutor.call(self);
	    self.body = null;
	    self.sliceFn = null;
	    self.callback = null;
	    self.parts = {};
	    self.completeInfo = [];
	    self.fillQueue = function() {
	      self.callback(new Error('Unsupported body payload ' + typeof self.body));
	    };

	    self.configure(options);
	  },

	  /**
	   * @api private
	   */
	  configure: function configure(options) {
	    options = options || {};
	    this.partSize = this.minPartSize;

	    if (options.queueSize) this.queueSize = options.queueSize;
	    if (options.partSize) this.partSize = options.partSize;
	    if (options.leavePartsOnError) this.leavePartsOnError = true;

	    if (this.partSize < this.minPartSize) {
	      throw new Error('partSize must be greater than ' +
	                      this.minPartSize);
	    }

	    this.service = options.service;
	    this.bindServiceObject(options.params);
	    this.validateBody();
	    this.adjustTotalBytes();
	  },

	  /**
	   * @api private
	   */
	  leavePartsOnError: false,

	  /**
	   * @api private
	   */
	  queueSize: 4,

	  /**
	   * @api private
	   */
	  partSize: null,

	  /**
	   * @readonly
	   * @return [Number] the minimum number of bytes for an individual part
	   *   upload.
	   */
	  minPartSize: 1024 * 1024 * 5,

	  /**
	   * @readonly
	   * @return [Number] the maximum allowed number of parts in a multipart upload.
	   */
	  maxTotalParts: 10000,

	  /**
	   * Initiates the managed upload for the payload.
	   *
	   * @callback callback function(err, data)
	   *   @param err [Error] an error or null if no error occurred.
	   *   @param data [map] The response data from the successful upload:
	   *     * `Location` (String) the URL of the uploaded object
	   *     * `ETag` (String) the ETag of the uploaded object
	   * @example Sending a managed upload object
	   *   var params = {Bucket: 'bucket', Key: 'key', Body: stream};
	   *   var upload = new AWS.S3.ManagedUpload({params: params});
	   *   upload.send(function(err, data) {
	   *     console.log(err, data);
	   *   });
	   */
	  send: function(callback) {
	    var self = this;
	    self.failed = false;
	    self.callback = callback || function(err) { if (err) throw err; };

	    var runFill = true;
	    if (self.sliceFn) {
	      self.fillQueue = self.fillBuffer;
	    } else if (AWS.util.isNode()) {
	      var Stream = AWS.util.nodeRequire('stream').Stream;
	      if (self.body instanceof Stream) {
	        runFill = false;
	        self.fillQueue = self.fillStream;
	        self.partBuffers = [];
	        self.body.
	          on('readable', function() { self.fillQueue(); }).
	          on('end', function() {
	            self.isDoneChunking = true;
	            self.numParts = self.totalPartNumbers;
	            self.fillQueue.call(self);
	          });
	      }
	    }

	    if (runFill) self.fillQueue.call(self);
	  },

	  /**
	   * Aborts a managed upload, including all concurrent upload requests.
	   * @note By default, calling this function will cleanup a multipart upload
	   *   if one was created. To leave the multipart upload around after aborting
	   *   a request, configure `leavePartsOnError` to `true` in the {constructor}.
	   * @!macro nobrowser
	   * @example Aborting an upload
	   *   var params = {
	   *     Bucket: 'bucket', Key: 'key',
	   *     Body: new Buffer(1024 * 1024 * 25) // 25MB payload
	   *   };
	   *   var upload = s3.upload(params);
	   *   upload.send(function (err, data) {
	   *     if (err) console.log("Error:", err.code, err.message);
	   *     else console.log(data);
	   *   });
	   *
	   *   // abort request in 1 second
	   *   setTimeout(upload.abort.bind(upload), 1000);
	   */
	  abort: function() {
	    this.cleanup(AWS.util.error(new Error('Request aborted by user'), {
	      code: 'RequestAbortedError', retryable: false
	    }));
	  },

	  /**
	   * @api private
	   */
	  validateBody: function validateBody() {
	    var self = this;
	    self.body = self.service.config.params.Body;
	    if (!self.body) throw new Error('params.Body is required');
	    if (typeof self.body === 'string') {
	      self.body = new AWS.util.Buffer(self.body);
	    }
	    self.sliceFn = AWS.util.arraySliceFn(self.body);
	  },

	  /**
	   * @api private
	   */
	  bindServiceObject: function bindServiceObject(params) {
	    params = params || {};
	    var self = this;

	    // bind parameters to new service object
	    if (!self.service) {
	      self.service = new AWS.S3({params: params});
	    } else {
	      var config = AWS.util.copy(self.service.config);
	      self.service = new self.service.constructor.__super__(config);
	      self.service.config.params =
	        AWS.util.merge(self.service.config.params || {}, params);
	    }
	  },

	  /**
	   * @api private
	   */
	  adjustTotalBytes: function adjustTotalBytes() {
	    var self = this;
	    try { // try to get totalBytes
	      self.totalBytes = byteLength(self.body);
	    } catch (e) { }

	    // try to adjust partSize if we know payload length
	    if (self.totalBytes) {
	      var newPartSize = Math.ceil(self.totalBytes / self.maxTotalParts);
	      if (newPartSize > self.partSize) self.partSize = newPartSize;
	    } else {
	      self.totalBytes = undefined;
	    }
	  },

	  /**
	   * @api private
	   */
	  isDoneChunking: false,

	  /**
	   * @api private
	   */
	  partPos: 0,

	  /**
	   * @api private
	   */
	  totalChunkedBytes: 0,

	  /**
	   * @api private
	   */
	  totalUploadedBytes: 0,

	  /**
	   * @api private
	   */
	  totalBytes: undefined,

	  /**
	   * @api private
	   */
	  numParts: 0,

	  /**
	   * @api private
	   */
	  totalPartNumbers: 0,

	  /**
	   * @api private
	   */
	  activeParts: 0,

	  /**
	   * @api private
	   */
	  doneParts: 0,

	  /**
	   * @api private
	   */
	  parts: null,

	  /**
	   * @api private
	   */
	  completeInfo: null,

	  /**
	   * @api private
	   */
	  failed: false,

	  /**
	   * @api private
	   */
	  multipartReq: null,

	  /**
	   * @api private
	   */
	  partBuffers: null,

	  /**
	   * @api private
	   */
	  partBufferLength: 0,

	  /**
	   * @api private
	   */
	  fillBuffer: function fillBuffer() {
	    var self = this;
	    var bodyLen = byteLength(self.body);

	    if (bodyLen === 0) {
	      self.isDoneChunking = true;
	      self.numParts = 1;
	      self.nextChunk(self.body);
	      return;
	    }

	    while (self.activeParts < self.queueSize && self.partPos < bodyLen) {
	      var endPos = Math.min(self.partPos + self.partSize, bodyLen);
	      var buf = self.sliceFn.call(self.body, self.partPos, endPos);
	      self.partPos += self.partSize;

	      if (byteLength(buf) < self.partSize || self.partPos === bodyLen) {
	        self.isDoneChunking = true;
	        self.numParts = self.totalPartNumbers + 1;
	      }
	      self.nextChunk(buf);
	    }
	  },

	  /**
	   * @api private
	   */
	  fillStream: function fillStream() {
	    var self = this;
	    if (self.activeParts >= self.queueSize) return;

	    var buf = self.body.read(self.partSize - self.partBufferLength) ||
	              self.body.read();
	    if (buf) {
	      self.partBuffers.push(buf);
	      self.partBufferLength += buf.length;
	      self.totalChunkedBytes += buf.length;
	    }

	    if (self.partBufferLength >= self.partSize) {
	      var pbuf = Buffer.concat(self.partBuffers);
	      self.partBuffers = [];
	      self.partBufferLength = 0;

	      // if we have more than partSize, push the rest back on the queue
	      if (pbuf.length > self.partSize) {
	        var rest = pbuf.slice(self.partSize);
	        self.partBuffers.push(rest);
	        self.partBufferLength += rest.length;
	        pbuf = pbuf.slice(0, self.partSize);
	      }

	      self.nextChunk(pbuf);
	    }

	    if (self.isDoneChunking && !self.isDoneSending) {
	      pbuf = Buffer.concat(self.partBuffers);
	      self.partBuffers = [];
	      self.partBufferLength = 0;
	      self.totalBytes = self.totalChunkedBytes;
	      self.isDoneSending = true;

	      if (self.numParts === 0 || pbuf.length > 0) {
	        self.numParts++;
	        self.nextChunk(pbuf);
	      }
	    }

	    self.body.read(0);
	  },

	  /**
	   * @api private
	   */
	  nextChunk: function nextChunk(chunk) {
	    var self = this;
	    if (self.failed) return null;

	    var partNumber = ++self.totalPartNumbers;
	    if (self.isDoneChunking && partNumber === 1) {
	      var req = self.service.putObject({Body: chunk});
	      req._managedUpload = self;
	      req.on('httpUploadProgress', self.progress).send(self.finishSinglePart);
	      return null;
	    } else if (self.service.config.params.ContentMD5) {
	      var err = AWS.util.error(new Error('The Content-MD5 you specified is invalid for multi-part uploads.'), {
	        code: 'InvalidDigest', retryable: false
	      });

	      self.cleanup(err);
	      return null;
	    }

	    if (self.completeInfo[partNumber] && self.completeInfo[partNumber].ETag !== null) {
	      return null; // Already uploaded this part.
	    }

	    self.activeParts++;
	    if (!self.service.config.params.UploadId) {

	      if (!self.multipartReq) { // create multipart
	        self.multipartReq = self.service.createMultipartUpload();
	        self.multipartReq.on('success', function(resp) {
	          self.service.config.params.UploadId = resp.data.UploadId;
	          self.multipartReq = null;
	        });
	        self.queueChunks(chunk, partNumber);
	        self.multipartReq.on('error', function(err) {
	          self.cleanup(err);
	        });
	        self.multipartReq.send();
	      } else {
	        self.queueChunks(chunk, partNumber);
	      }
	    } else { // multipart is created, just send
	      self.uploadPart(chunk, partNumber);
	    }
	  },

	  /**
	   * @api private
	   */
	  uploadPart: function uploadPart(chunk, partNumber) {
	    var self = this;

	    var partParams = {
	      Body: chunk,
	      ContentLength: AWS.util.string.byteLength(chunk),
	      PartNumber: partNumber
	    };

	    var partInfo = {ETag: null, PartNumber: partNumber};
	    self.completeInfo[partNumber] = partInfo;

	    var req = self.service.uploadPart(partParams);
	    self.parts[partNumber] = req;
	    req._lastUploadedBytes = 0;
	    req._managedUpload = self;
	    req.on('httpUploadProgress', self.progress);
	    req.send(function(err, data) {
	      delete self.parts[partParams.PartNumber];
	      self.activeParts--;

	      if (!err && (!data || !data.ETag)) {
	        var message = 'No access to ETag property on response.';
	        if (AWS.util.isBrowser()) {
	          message += ' Check CORS configuration to expose ETag header.';
	        }

	        err = AWS.util.error(new Error(message), {
	          code: 'ETagMissing', retryable: false
	        });
	      }
	      if (err) return self.cleanup(err);

	      partInfo.ETag = data.ETag;
	      self.doneParts++;
	      if (self.isDoneChunking && self.doneParts === self.numParts) {
	        self.finishMultiPart();
	      } else {
	        self.fillQueue.call(self);
	      }
	    });
	  },

	  /**
	   * @api private
	   */
	  queueChunks: function queueChunks(chunk, partNumber) {
	    var self = this;
	    self.multipartReq.on('success', function() {
	      self.uploadPart(chunk, partNumber);
	    });
	  },

	  /**
	   * @api private
	   */
	  cleanup: function cleanup(err) {
	    var self = this;
	    if (self.failed) return;

	    // clean up stream
	    if (typeof self.body.removeAllListeners === 'function' &&
	        typeof self.body.resume === 'function') {
	      self.body.removeAllListeners('readable');
	      self.body.removeAllListeners('end');
	      self.body.resume();
	    }

	    if (self.service.config.params.UploadId && !self.leavePartsOnError) {
	      self.service.abortMultipartUpload().send();
	    }

	    AWS.util.each(self.parts, function(partNumber, part) {
	      part.removeAllListeners('complete');
	      part.abort();
	    });

	    self.activeParts = 0;
	    self.partPos = 0;
	    self.numParts = 0;
	    self.totalPartNumbers = 0;
	    self.parts = {};
	    self.failed = true;
	    self.callback(err);
	  },

	  /**
	   * @api private
	   */
	  finishMultiPart: function finishMultiPart() {
	    var self = this;
	    var completeParams = { MultipartUpload: { Parts: self.completeInfo.slice(1) } };
	    self.service.completeMultipartUpload(completeParams, function(err, data) {
	      if (err) return self.cleanup(err);
	      else self.callback(err, data);
	    });
	  },

	  /**
	   * @api private
	   */
	  finishSinglePart: function finishSinglePart(err, data) {
	    var upload = this.request._managedUpload;
	    var httpReq = this.request.httpRequest;
	    var endpoint = httpReq.endpoint;
	    if (err) return upload.callback(err);
	    data.Location =
	      [endpoint.protocol, '//', endpoint.host, httpReq.path].join('');
	    upload.callback(err, data);
	  },

	  /**
	   * @api private
	   */
	  progress: function progress(info) {
	    var upload = this._managedUpload;
	    if (this.operation === 'putObject') {
	      info.part = 1;
	    } else {
	      upload.totalUploadedBytes += info.loaded - this._lastUploadedBytes;
	      this._lastUploadedBytes = info.loaded;
	      info = {
	        loaded: upload.totalUploadedBytes,
	        total: upload.totalBytes,
	        part: this.params.PartNumber,
	        key: this.params.Key
	      };
	    }
	    upload.emit('httpUploadProgress', [info]);
	  }
	});

	AWS.util.mixin(AWS.S3.ManagedUpload, AWS.SequentialExecutor);
	module.exports = AWS.S3.ManagedUpload;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 645 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var Api = __webpack_require__(135);
	var regionConfig = __webpack_require__(640);
	var inherit = AWS.util.inherit;

	/**
	 * The service class representing an AWS service.
	 *
	 * @abstract
	 *
	 * @!attribute apiVersions
	 *   @return [Array<String>] the list of API versions supported by this service.
	 *   @readonly
	 */
	AWS.Service = inherit({
	  /**
	   * Create a new service object with a configuration object
	   *
	   * @param config [map] a map of configuration options
	   */
	  constructor: function Service(config) {
	    if (!this.loadServiceClass) {
	      throw AWS.util.error(new Error(),
	        'Service must be constructed with `new\' operator');
	    }
	    var ServiceClass = this.loadServiceClass(config || {});
	    if (ServiceClass) return new ServiceClass(config);
	    this.initialize(config);
	  },

	  /**
	   * @api private
	   */
	  initialize: function initialize(config) {
	    var svcConfig = AWS.config[this.serviceIdentifier];

	    this.config = new AWS.Config(AWS.config);
	    if (svcConfig) this.config.update(svcConfig, true);
	    if (config) this.config.update(config, true);

	    this.validateService();
	    if (!this.config.endpoint) regionConfig(this);

	    this.config.endpoint = this.endpointFromTemplate(this.config.endpoint);
	    this.setEndpoint(this.config.endpoint);
	  },

	  /**
	   * @api private
	   */
	  validateService: function validateService() {
	  },

	  /**
	   * @api private
	   */
	  loadServiceClass: function loadServiceClass(serviceConfig) {
	    var config = serviceConfig;
	    if (!AWS.util.isEmpty(this.api)) {
	      return null;
	    } else if (config.apiConfig) {
	      return AWS.Service.defineServiceApi(this.constructor, config.apiConfig);
	    } else if (!this.constructor.services) {
	      return null;
	    } else {
	      config = new AWS.Config(AWS.config);
	      config.update(serviceConfig, true);
	      var version = config.apiVersions[this.constructor.serviceIdentifier];
	      version = version || config.apiVersion;
	      return this.getLatestServiceClass(version);
	    }
	  },

	  /**
	   * @api private
	   */
	  getLatestServiceClass: function getLatestServiceClass(version) {
	    version = this.getLatestServiceVersion(version);
	    if (this.constructor.services[version] === null) {
	      AWS.Service.defineServiceApi(this.constructor, version);
	    }

	    return this.constructor.services[version];
	  },

	  /**
	   * @api private
	   */
	  getLatestServiceVersion: function getLatestServiceVersion(version) {
	    if (!this.constructor.services || this.constructor.services.length === 0) {
	      throw new Error('No services defined on ' +
	                      this.constructor.serviceIdentifier);
	    }

	    if (!version) {
	      version = 'latest';
	    } else if (AWS.util.isType(version, Date)) {
	      version = AWS.util.date.iso8601(version).split('T')[0];
	    }

	    if (Object.hasOwnProperty(this.constructor.services, version)) {
	      return version;
	    }

	    var keys = Object.keys(this.constructor.services).sort();
	    var selectedVersion = null;
	    for (var i = keys.length - 1; i >= 0; i--) {
	      // versions that end in "*" are not available on disk and can be
	      // skipped, so do not choose these as selectedVersions
	      if (keys[i][keys[i].length - 1] !== '*') {
	        selectedVersion = keys[i];
	      }
	      if (keys[i].substr(0, 10) <= version) {
	        return selectedVersion;
	      }
	    }

	    throw new Error('Could not find ' + this.constructor.serviceIdentifier +
	                    ' API to satisfy version constraint `' + version + '\'');
	  },

	  /**
	   * @api private
	   */
	  api: {},

	  /**
	   * @api private
	   */
	  defaultRetryCount: 3,

	  /**
	   * Calls an operation on a service with the given input parameters.
	   *
	   * @param operation [String] the name of the operation to call on the service.
	   * @param params [map] a map of input options for the operation
	   * @callback callback function(err, data)
	   *   If a callback is supplied, it is called when a response is returned
	   *   from the service.
	   *   @param err [Error] the error object returned from the request.
	   *     Set to `null` if the request is successful.
	   *   @param data [Object] the de-serialized data returned from
	   *     the request. Set to `null` if a request error occurs.
	   */
	  makeRequest: function makeRequest(operation, params, callback) {
	    if (typeof params === 'function') {
	      callback = params;
	      params = null;
	    }

	    params = params || {};
	    if (this.config.params) { // copy only toplevel bound params
	      var rules = this.api.operations[operation];
	      if (rules) {
	        params = AWS.util.copy(params);
	        AWS.util.each(this.config.params, function(key, value) {
	          if (rules.input.members[key]) {
	            if (params[key] === undefined || params[key] === null) {
	              params[key] = value;
	            }
	          }
	        });
	      }
	    }

	    var request = new AWS.Request(this, operation, params);
	    this.addAllRequestListeners(request);

	    if (callback) request.send(callback);
	    return request;
	  },

	  /**
	   * Calls an operation on a service with the given input parameters, without
	   * any authentication data. This method is useful for "public" API operations.
	   *
	   * @param operation [String] the name of the operation to call on the service.
	   * @param params [map] a map of input options for the operation
	   * @callback callback function(err, data)
	   *   If a callback is supplied, it is called when a response is returned
	   *   from the service.
	   *   @param err [Error] the error object returned from the request.
	   *     Set to `null` if the request is successful.
	   *   @param data [Object] the de-serialized data returned from
	   *     the request. Set to `null` if a request error occurs.
	   */
	  makeUnauthenticatedRequest: function makeUnauthenticatedRequest(operation, params, callback) {
	    if (typeof params === 'function') {
	      callback = params;
	      params = {};
	    }

	    var request = this.makeRequest(operation, params).toUnauthenticated();
	    return callback ? request.send(callback) : request;
	  },

	  /**
	   * Waits for a given state
	   *
	   * @param state [String] the state on the service to wait for
	   * @param params [map] a map of parameters to pass with each request
	   * @callback callback function(err, data)
	   *   If a callback is supplied, it is called when a response is returned
	   *   from the service.
	   *   @param err [Error] the error object returned from the request.
	   *     Set to `null` if the request is successful.
	   *   @param data [Object] the de-serialized data returned from
	   *     the request. Set to `null` if a request error occurs.
	   */
	  waitFor: function waitFor(state, params, callback) {
	    var waiter = new AWS.ResourceWaiter(this, state);
	    return waiter.wait(params, callback);
	  },

	  /**
	   * @api private
	   */
	  addAllRequestListeners: function addAllRequestListeners(request) {
	    var list = [AWS.events, AWS.EventListeners.Core, this.serviceInterface(),
	                AWS.EventListeners.CorePost];
	    for (var i = 0; i < list.length; i++) {
	      if (list[i]) request.addListeners(list[i]);
	    }

	    // disable parameter validation
	    if (!this.config.paramValidation) {
	      request.removeListener('validate',
	        AWS.EventListeners.Core.VALIDATE_PARAMETERS);
	    }

	    if (this.config.logger) { // add logging events
	      request.addListeners(AWS.EventListeners.Logger);
	    }

	    this.setupRequestListeners(request);
	  },

	  /**
	   * Override this method to setup any custom request listeners for each
	   * new request to the service.
	   *
	   * @abstract
	   */
	  setupRequestListeners: function setupRequestListeners() {
	  },

	  /**
	   * Gets the signer class for a given request
	   * @api private
	   */
	  getSignerClass: function getSignerClass() {
	    var version;
	    if (this.config.signatureVersion) {
	      version = this.config.signatureVersion;
	    } else {
	      version = this.api.signatureVersion;
	    }
	    return AWS.Signers.RequestSigner.getVersion(version);
	  },

	  /**
	   * @api private
	   */
	  serviceInterface: function serviceInterface() {
	    switch (this.api.protocol) {
	      case 'ec2': return AWS.EventListeners.Query;
	      case 'query': return AWS.EventListeners.Query;
	      case 'json': return AWS.EventListeners.Json;
	      case 'rest-json': return AWS.EventListeners.RestJson;
	      case 'rest-xml': return AWS.EventListeners.RestXml;
	    }
	    if (this.api.protocol) {
	      throw new Error('Invalid service `protocol\' ' +
	        this.api.protocol + ' in API config');
	    }
	  },

	  /**
	   * @api private
	   */
	  successfulResponse: function successfulResponse(resp) {
	    return resp.httpResponse.statusCode < 300;
	  },

	  /**
	   * How many times a failed request should be retried before giving up.
	   * the defaultRetryCount can be overriden by service classes.
	   *
	   * @api private
	   */
	  numRetries: function numRetries() {
	    if (this.config.maxRetries !== undefined) {
	      return this.config.maxRetries;
	    } else {
	      return this.defaultRetryCount;
	    }
	  },

	  /**
	   * @api private
	   */
	  retryDelays: function retryDelays() {
	    var retryCount = this.numRetries();
	    var delays = [];
	    for (var i = 0; i < retryCount; ++i) {
	      delays[i] = Math.pow(2, i) * 30;
	    }
	    return delays;
	  },

	  /**
	   * @api private
	   */
	  retryableError: function retryableError(error) {
	    if (this.networkingError(error)) return true;
	    if (this.expiredCredentialsError(error)) return true;
	    if (this.throttledError(error)) return true;
	    if (error.statusCode >= 500) return true;
	    return false;
	  },

	  /**
	   * @api private
	   */
	  networkingError: function networkingError(error) {
	    return error.code === 'NetworkingError';
	  },

	  /**
	   * @api private
	   */
	  expiredCredentialsError: function expiredCredentialsError(error) {
	    // TODO : this only handles *one* of the expired credential codes
	    return (error.code === 'ExpiredTokenException');
	  },

	  /**
	   * @api private
	   */
	  clockSkewError: function clockSkewError(error) {
	    switch (error.code) {
	      case 'RequestTimeTooSkewed':
	      case 'RequestExpired':
	      case 'InvalidSignatureException':
	      case 'SignatureDoesNotMatch':
	      case 'AuthFailure':
	      case 'RequestInTheFuture':
	        return true;
	      default: return false;
	    }
	  },

	  /**
	   * @api private
	   */
	  throttledError: function throttledError(error) {
	    // this logic varies between services
	    switch (error.code) {
	      case 'ProvisionedThroughputExceededException':
	      case 'Throttling':
	      case 'ThrottlingException':
	      case 'RequestLimitExceeded':
	      case 'RequestThrottled':
	        return true;
	      default:
	        return false;
	    }
	  },

	  /**
	   * @api private
	   */
	  endpointFromTemplate: function endpointFromTemplate(endpoint) {
	    if (typeof endpoint !== 'string') return endpoint;

	    var e = endpoint;
	    e = e.replace(/\{service\}/g, this.api.endpointPrefix);
	    e = e.replace(/\{region\}/g, this.config.region);
	    e = e.replace(/\{scheme\}/g, this.config.sslEnabled ? 'https' : 'http');
	    return e;
	  },

	  /**
	   * @api private
	   */
	  setEndpoint: function setEndpoint(endpoint) {
	    this.endpoint = new AWS.Endpoint(endpoint, this.config);
	  },

	  /**
	   * @api private
	   */
	  paginationConfig: function paginationConfig(operation, throwException) {
	    var paginator = this.api.operations[operation].paginator;
	    if (!paginator) {
	      if (throwException) {
	        var e = new Error();
	        throw AWS.util.error(e, 'No pagination configuration for ' + operation);
	      }
	      return null;
	    }

	    return paginator;
	  }
	});

	AWS.util.update(AWS.Service, {

	  /**
	   * Adds one method for each operation described in the api configuration
	   *
	   * @api private
	   */
	  defineMethods: function defineMethods(svc) {
	    AWS.util.each(svc.prototype.api.operations, function iterator(method) {
	      if (svc.prototype[method]) return;
	      svc.prototype[method] = function (params, callback) {
	        return this.makeRequest(method, params, callback);
	      };
	    });
	  },

	  /**
	   * Defines a new Service class using a service identifier and list of versions
	   * including an optional set of features (functions) to apply to the class
	   * prototype.
	   *
	   * @param serviceIdentifier [String] the identifier for the service
	   * @param versions [Array<String>] a list of versions that work with this
	   *   service
	   * @param features [Object] an object to attach to the prototype
	   * @return [Class<Service>] the service class defined by this function.
	   */
	  defineService: function defineService(serviceIdentifier, versions, features) {
	    AWS.Service._serviceMap[serviceIdentifier] = true;
	    if (!Array.isArray(versions)) {
	      features = versions;
	      versions = [];
	    }

	    var svc = inherit(AWS.Service, features || {});

	    if (typeof serviceIdentifier === 'string') {
	      AWS.Service.addVersions(svc, versions);

	      var identifier = svc.serviceIdentifier || serviceIdentifier;
	      svc.serviceIdentifier = identifier;
	    } else { // defineService called with an API
	      svc.prototype.api = serviceIdentifier;
	      AWS.Service.defineMethods(svc);
	    }

	    return svc;
	  },

	  /**
	   * @api private
	   */
	  addVersions: function addVersions(svc, versions) {
	    if (!Array.isArray(versions)) versions = [versions];

	    svc.services = svc.services || {};
	    for (var i = 0; i < versions.length; i++) {
	      if (svc.services[versions[i]] === undefined) {
	        svc.services[versions[i]] = null;
	      }
	    }

	    svc.apiVersions = Object.keys(svc.services).sort();
	  },

	  /**
	   * @api private
	   */
	  defineServiceApi: function defineServiceApi(superclass, version, apiConfig) {
	    var svc = inherit(superclass, {
	      serviceIdentifier: superclass.serviceIdentifier
	    });

	    function setApi(api) {
	      if (api.isApi) {
	        svc.prototype.api = api;
	      } else {
	        svc.prototype.api = new Api(api);
	      }
	    }

	    if (typeof version === 'string') {
	      if (apiConfig) {
	        setApi(apiConfig);
	      } else {
	        try {
	          setApi(AWS.apiLoader(superclass.serviceIdentifier, version));
	        } catch (err) {
	          throw AWS.util.error(err, {
	            message: 'Could not find API configuration ' +
	              superclass.serviceIdentifier + '-' + version
	          });
	        }
	      }
	      if (!superclass.services.hasOwnProperty(version)) {
	        superclass.apiVersions = superclass.apiVersions.concat(version).sort();
	      }
	      superclass.services[version] = svc;
	    } else {
	      setApi(version);
	    }

	    AWS.Service.defineMethods(svc);
	    return svc;
	  },

	  /**
	   * @api private
	   */
	  hasService: function(identifier) {
	    return AWS.Service._serviceMap.hasOwnProperty(identifier);
	  },

	  /**
	   * @api private
	   */
	  _serviceMap: {}
	});


/***/ },
/* 646 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {
	var path = __webpack_require__(14);
	var AWS = __webpack_require__(2);
	var apis = __webpack_require__(130);

	// define services using map
	apis.services.forEach(function(identifier) {
	  var name = apis.serviceName(identifier);
	  var versions = apis.serviceVersions(identifier);
	  AWS[name] = AWS.Service.defineService(identifier, versions);

	  // load any customizations from lib/services/<svcidentifier>.js
	  var svcFile = path.join(__dirname, 'services', identifier + '.js');
	  if (fs.existsSync(svcFile)) __webpack_require__(163)("./" + identifier);
	});

	/* WEBPACK VAR INJECTION */}.call(exports, "node_modules/aws-sdk/lib"))

/***/ },
/* 647 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * @api private
	 */
	var expiresHeader = 'presigned-expires';

	/**
	 * @api private
	 */
	function signedUrlBuilder(request) {
	  var expires = request.httpRequest.headers[expiresHeader];

	  delete request.httpRequest.headers['User-Agent'];
	  delete request.httpRequest.headers['X-Amz-User-Agent'];

	  if (request.service.getSignerClass() === AWS.Signers.V4) {
	    if (expires > 604800) { // one week expiry is invalid
	      var message = 'Presigning does not support expiry time greater ' +
	                    'than a week with SigV4 signing.';
	      throw AWS.util.error(new Error(), {
	        code: 'InvalidExpiryTime', message: message, retryable: false
	      });
	    }
	    request.httpRequest.headers[expiresHeader] = expires;
	  } else if (request.service.getSignerClass() === AWS.Signers.S3) {
	    request.httpRequest.headers[expiresHeader] = parseInt(
	      AWS.util.date.unixTimestamp() + expires, 10).toString();
	  } else {
	    throw AWS.util.error(new Error(), {
	      message: 'Presigning only supports S3 or SigV4 signing.',
	      code: 'UnsupportedSigner', retryable: false
	    });
	  }
	}

	/**
	 * @api private
	 */
	function signedUrlSigner(request) {
	  var endpoint = request.httpRequest.endpoint;
	  var parsedUrl = AWS.util.urlParse(request.httpRequest.path);
	  var queryParams = {};

	  if (parsedUrl.search) {
	    queryParams = AWS.util.queryStringParse(parsedUrl.search.substr(1));
	  }

	  AWS.util.each(request.httpRequest.headers, function (key, value) {
	    if (key === expiresHeader) key = 'Expires';
	    if (key.indexOf('x-amz-') === 0) {
	      key = key.toLowerCase();
	    }
	    queryParams[key] = value;
	  });
	  delete request.httpRequest.headers[expiresHeader];

	  var auth = queryParams['Authorization'].split(' ');
	  if (auth[0] === 'AWS') {
	    auth = auth[1].split(':');
	    queryParams['AWSAccessKeyId'] = auth[0];
	    queryParams['Signature'] = auth[1];
	  } else if (auth[0] === 'AWS4-HMAC-SHA256') { // SigV4 signing
	    auth.shift();
	    var rest = auth.join(' ');
	    var signature = rest.match(/Signature=(.*?)(?:,|\s|\r?\n|$)/)[1];
	    queryParams['X-Amz-Signature'] = signature;
	    delete queryParams['Expires'];
	  }
	  delete queryParams['Authorization'];
	  delete queryParams['Host'];

	  // build URL
	  endpoint.pathname = parsedUrl.pathname;
	  endpoint.search = AWS.util.queryParamsToString(queryParams);
	}

	/**
	 * @api private
	 */
	AWS.Signers.Presign = inherit({
	  /**
	   * @api private
	   */
	  sign: function sign(request, expireTime, callback) {
	    request.httpRequest.headers[expiresHeader] = expireTime || 3600;
	    request.on('build', signedUrlBuilder);
	    request.on('sign', signedUrlSigner);
	    request.removeListener('afterBuild',
	      AWS.EventListeners.Core.SET_CONTENT_LENGTH);
	    request.removeListener('afterBuild',
	      AWS.EventListeners.Core.COMPUTE_SHA256);

	    request.emit('beforePresign', [request]);

	    if (callback) {
	      request.build(function() {
	        if (this.response.error) callback(this.response.error);
	        else {
	          callback(null, AWS.util.urlFormat(request.httpRequest.endpoint));
	        }
	      });
	    } else {
	      request.build();
	      if (request.response.error) throw request.response.error;
	      return AWS.util.urlFormat(request.httpRequest.endpoint);
	    }
	  }
	});

	module.exports = AWS.Signers.Presign;


/***/ },
/* 648 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * @api private
	 */
	AWS.Signers.RequestSigner = inherit({
	  constructor: function RequestSigner(request) {
	    this.request = request;
	  }
	});

	AWS.Signers.RequestSigner.getVersion = function getVersion(version) {
	  switch (version) {
	    case 'v2': return AWS.Signers.V2;
	    case 'v3': return AWS.Signers.V3;
	    case 'v4': return AWS.Signers.V4;
	    case 's3': return AWS.Signers.S3;
	    case 'v3https': return AWS.Signers.V3Https;
	  }
	  throw new Error('Unknown signing version ' + version);
	};

	__webpack_require__(650);
	__webpack_require__(158);
	__webpack_require__(651);
	__webpack_require__(652);
	__webpack_require__(649);
	__webpack_require__(647);


/***/ },
/* 649 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * @api private
	 */
	AWS.Signers.S3 = inherit(AWS.Signers.RequestSigner, {
	  /**
	   * When building the stringToSign, these sub resource params should be
	   * part of the canonical resource string with their NON-decoded values
	   */
	  subResources: {
	    'acl': 1,
	    'cors': 1,
	    'lifecycle': 1,
	    'delete': 1,
	    'location': 1,
	    'logging': 1,
	    'notification': 1,
	    'partNumber': 1,
	    'policy': 1,
	    'requestPayment': 1,
	    'restore': 1,
	    'tagging': 1,
	    'torrent': 1,
	    'uploadId': 1,
	    'uploads': 1,
	    'versionId': 1,
	    'versioning': 1,
	    'versions': 1,
	    'website': 1
	  },

	  // when building the stringToSign, these querystring params should be
	  // part of the canonical resource string with their NON-encoded values
	  responseHeaders: {
	    'response-content-type': 1,
	    'response-content-language': 1,
	    'response-expires': 1,
	    'response-cache-control': 1,
	    'response-content-disposition': 1,
	    'response-content-encoding': 1
	  },

	  addAuthorization: function addAuthorization(credentials, date) {
	    if (!this.request.headers['presigned-expires']) {
	      this.request.headers['X-Amz-Date'] = AWS.util.date.rfc822(date);
	    }

	    if (credentials.sessionToken) {
	      // presigned URLs require this header to be lowercased
	      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
	    }

	    var signature = this.sign(credentials.secretAccessKey, this.stringToSign());
	    var auth = 'AWS ' + credentials.accessKeyId + ':' + signature;

	    this.request.headers['Authorization'] = auth;
	  },

	  stringToSign: function stringToSign() {
	    var r = this.request;

	    var parts = [];
	    parts.push(r.method);
	    parts.push(r.headers['Content-MD5'] || '');
	    parts.push(r.headers['Content-Type'] || '');

	    // This is the "Date" header, but we use X-Amz-Date.
	    // The S3 signing mechanism requires us to pass an empty
	    // string for this Date header regardless.
	    parts.push(r.headers['presigned-expires'] || '');

	    var headers = this.canonicalizedAmzHeaders();
	    if (headers) parts.push(headers);
	    parts.push(this.canonicalizedResource());

	    return parts.join('\n');

	  },

	  canonicalizedAmzHeaders: function canonicalizedAmzHeaders() {

	    var amzHeaders = [];

	    AWS.util.each(this.request.headers, function (name) {
	      if (name.match(/^x-amz-/i))
	        amzHeaders.push(name);
	    });

	    amzHeaders.sort(function (a, b) {
	      return a.toLowerCase() < b.toLowerCase() ? -1 : 1;
	    });

	    var parts = [];
	    AWS.util.arrayEach.call(this, amzHeaders, function (name) {
	      parts.push(name.toLowerCase() + ':' + String(this.request.headers[name]));
	    });

	    return parts.join('\n');

	  },

	  canonicalizedResource: function canonicalizedResource() {

	    var r = this.request;

	    var parts = r.path.split('?');
	    var path = parts[0];
	    var querystring = parts[1];

	    var resource = '';

	    if (r.virtualHostedBucket)
	      resource += '/' + r.virtualHostedBucket;

	    resource += path;

	    if (querystring) {

	      // collect a list of sub resources and query params that need to be signed
	      var resources = [];

	      AWS.util.arrayEach.call(this, querystring.split('&'), function (param) {
	        var name = param.split('=')[0];
	        var value = param.split('=')[1];
	        if (this.subResources[name] || this.responseHeaders[name]) {
	          var subresource = { name: name };
	          if (value !== undefined) {
	            if (this.subResources[name]) {
	              subresource.value = value;
	            } else {
	              subresource.value = decodeURIComponent(value);
	            }
	          }
	          resources.push(subresource);
	        }
	      });

	      resources.sort(function (a, b) { return a.name < b.name ? -1 : 1; });

	      if (resources.length) {

	        querystring = [];
	        AWS.util.arrayEach(resources, function (res) {
	          if (res.value === undefined) {
	            querystring.push(res.name);
	          } else {
	            querystring.push(res.name + '=' + res.value);
	          }
	        });

	        resource += '?' + querystring.join('&');
	      }

	    }

	    return resource;

	  },

	  sign: function sign(secret, string) {
	    return AWS.util.crypto.hmac(secret, string, 'base64', 'sha1');
	  }
	});

	module.exports = AWS.Signers.S3;


/***/ },
/* 650 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * @api private
	 */
	AWS.Signers.V2 = inherit(AWS.Signers.RequestSigner, {
	  addAuthorization: function addAuthorization(credentials, date) {

	    if (!date) date = AWS.util.date.getDate();

	    var r = this.request;

	    r.params.Timestamp = AWS.util.date.iso8601(date);
	    r.params.SignatureVersion = '2';
	    r.params.SignatureMethod = 'HmacSHA256';
	    r.params.AWSAccessKeyId = credentials.accessKeyId;

	    if (credentials.sessionToken) {
	      r.params.SecurityToken = credentials.sessionToken;
	    }

	    delete r.params.Signature; // delete old Signature for re-signing
	    r.params.Signature = this.signature(credentials);

	    r.body = AWS.util.queryParamsToString(r.params);
	    r.headers['Content-Length'] = r.body.length;
	  },

	  signature: function signature(credentials) {
	    return AWS.util.crypto.hmac(credentials.secretAccessKey, this.stringToSign(), 'base64');
	  },

	  stringToSign: function stringToSign() {
	    var parts = [];
	    parts.push(this.request.method);
	    parts.push(this.request.endpoint.host.toLowerCase());
	    parts.push(this.request.pathname());
	    parts.push(AWS.util.queryParamsToString(this.request.params));
	    return parts.join('\n');
	  }

	});

	module.exports = AWS.Signers.V2;


/***/ },
/* 651 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	__webpack_require__(158);

	/**
	 * @api private
	 */
	AWS.Signers.V3Https = inherit(AWS.Signers.V3, {
	  authorization: function authorization(credentials) {
	    return 'AWS3-HTTPS ' +
	      'AWSAccessKeyId=' + credentials.accessKeyId + ',' +
	      'Algorithm=HmacSHA256,' +
	      'Signature=' + this.signature(credentials);
	  },

	  stringToSign: function stringToSign() {
	    return this.request.headers['X-Amz-Date'];
	  }
	});

	module.exports = AWS.Signers.V3Https;


/***/ },
/* 652 */
/***/ function(module, exports, __webpack_require__) {

	var AWS = __webpack_require__(2);
	var inherit = AWS.util.inherit;

	/**
	 * @api private
	 */
	var cachedSecret = {};

	/**
	 * @api private
	 */
	var expiresHeader = 'presigned-expires';

	/**
	 * @api private
	 */
	AWS.Signers.V4 = inherit(AWS.Signers.RequestSigner, {
	  constructor: function V4(request, serviceName, signatureCache) {
	    AWS.Signers.RequestSigner.call(this, request);
	    this.serviceName = serviceName;
	    this.signatureCache = signatureCache;
	  },

	  algorithm: 'AWS4-HMAC-SHA256',

	  addAuthorization: function addAuthorization(credentials, date) {
	    var datetime = AWS.util.date.iso8601(date).replace(/[:\-]|\.\d{3}/g, '');

	    if (this.isPresigned()) {
	      this.updateForPresigned(credentials, datetime);
	    } else {
	      this.addHeaders(credentials, datetime);
	    }

	    this.request.headers['Authorization'] =
	      this.authorization(credentials, datetime);
	  },

	  addHeaders: function addHeaders(credentials, datetime) {
	    this.request.headers['X-Amz-Date'] = datetime;
	    if (credentials.sessionToken) {
	      this.request.headers['x-amz-security-token'] = credentials.sessionToken;
	    }
	  },

	  updateForPresigned: function updateForPresigned(credentials, datetime) {
	    var credString = this.credentialString(datetime);
	    var qs = {
	      'X-Amz-Date': datetime,
	      'X-Amz-Algorithm': this.algorithm,
	      'X-Amz-Credential': credentials.accessKeyId + '/' + credString,
	      'X-Amz-Expires': this.request.headers[expiresHeader],
	      'X-Amz-SignedHeaders': this.signedHeaders()
	    };

	    if (credentials.sessionToken) {
	      qs['X-Amz-Security-Token'] = credentials.sessionToken;
	    }

	    if (this.request.headers['Content-Type']) {
	      qs['Content-Type'] = this.request.headers['Content-Type'];
	    }
	    if (this.request.headers['Content-MD5']) {
	      qs['Content-MD5'] = this.request.headers['Content-MD5'];
	    }

	    // need to pull in any other X-Amz-* headers
	    AWS.util.each.call(this, this.request.headers, function(key, value) {
	      if (key === expiresHeader) return;
	      if (this.isSignableHeader(key) &&
	          key.toLowerCase().indexOf('x-amz-') === 0) {
	        qs[key] = value;
	      }
	    });

	    var sep = this.request.path.indexOf('?') >= 0 ? '&' : '?';
	    this.request.path += sep + AWS.util.queryParamsToString(qs);
	  },

	  authorization: function authorization(credentials, datetime) {
	    var parts = [];
	    var credString = this.credentialString(datetime);
	    parts.push(this.algorithm + ' Credential=' +
	      credentials.accessKeyId + '/' + credString);
	    parts.push('SignedHeaders=' + this.signedHeaders());
	    parts.push('Signature=' + this.signature(credentials, datetime));
	    return parts.join(', ');
	  },

	  signature: function signature(credentials, datetime) {
	    var cache = null;
	    if (this.signatureCache) {
	      var cache = cachedSecret[this.serviceName];
	    }
	    var date = datetime.substr(0, 8);

	    if (!cache ||
	        cache.akid !== credentials.accessKeyId ||
	        cache.region !== this.request.region ||
	        cache.date !== date) {

	      var kSecret = credentials.secretAccessKey;
	      var kDate = AWS.util.crypto.hmac('AWS4' + kSecret, date, 'buffer');
	      var kRegion = AWS.util.crypto.hmac(kDate, this.request.region, 'buffer');
	      var kService = AWS.util.crypto.hmac(kRegion, this.serviceName, 'buffer');
	      var kCredentials = AWS.util.crypto.hmac(kService, 'aws4_request', 'buffer');

	      if (!this.signatureCache) {
	        return AWS.util.crypto.hmac(kCredentials, this.stringToSign(datetime), 'hex');
	      }

	      cachedSecret[this.serviceName] = {
	        region: this.request.region, date: date,
	        key: kCredentials, akid: credentials.accessKeyId
	      };
	    }

	    var key = cachedSecret[this.serviceName].key;
	    return AWS.util.crypto.hmac(key, this.stringToSign(datetime), 'hex');
	  },

	  stringToSign: function stringToSign(datetime) {
	    var parts = [];
	    parts.push('AWS4-HMAC-SHA256');
	    parts.push(datetime);
	    parts.push(this.credentialString(datetime));
	    parts.push(this.hexEncodedHash(this.canonicalString()));
	    return parts.join('\n');
	  },

	  canonicalString: function canonicalString() {
	    var parts = [], pathname = this.request.pathname();
	    if (this.serviceName !== 's3') pathname = AWS.util.uriEscapePath(pathname);

	    parts.push(this.request.method);
	    parts.push(pathname);
	    parts.push(this.request.search());
	    parts.push(this.canonicalHeaders() + '\n');
	    parts.push(this.signedHeaders());
	    parts.push(this.hexEncodedBodyHash());
	    return parts.join('\n');
	  },

	  canonicalHeaders: function canonicalHeaders() {
	    var headers = [];
	    AWS.util.each.call(this, this.request.headers, function (key, item) {
	      headers.push([key, item]);
	    });
	    headers.sort(function (a, b) {
	      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;
	    });
	    var parts = [];
	    AWS.util.arrayEach.call(this, headers, function (item) {
	      var key = item[0].toLowerCase();
	      if (this.isSignableHeader(key)) {
	        parts.push(key + ':' +
	          this.canonicalHeaderValues(item[1].toString()));
	      }
	    });
	    return parts.join('\n');
	  },

	  canonicalHeaderValues: function canonicalHeaderValues(values) {
	    return values.replace(/\s+/g, ' ').replace(/^\s+|\s+$/g, '');
	  },

	  signedHeaders: function signedHeaders() {
	    var keys = [];
	    AWS.util.each.call(this, this.request.headers, function (key) {
	      key = key.toLowerCase();
	      if (this.isSignableHeader(key)) keys.push(key);
	    });
	    return keys.sort().join(';');
	  },

	  credentialString: function credentialString(datetime) {
	    var parts = [];
	    parts.push(datetime.substr(0, 8));
	    parts.push(this.request.region);
	    parts.push(this.serviceName);
	    parts.push('aws4_request');
	    return parts.join('/');
	  },

	  hexEncodedHash: function hash(string) {
	    return AWS.util.crypto.sha256(string, 'hex');
	  },

	  hexEncodedBodyHash: function hexEncodedBodyHash() {
	    if (this.isPresigned() && this.serviceName === 's3') {
	      return 'UNSIGNED-PAYLOAD';
	    } else if (this.request.headers['X-Amz-Content-Sha256']) {
	      return this.request.headers['X-Amz-Content-Sha256'];
	    } else {
	      return this.hexEncodedHash(this.request.body || '');
	    }
	  },

	  unsignableHeaders: ['authorization', 'content-type', 'content-length',
	                      'user-agent', expiresHeader],

	  isSignableHeader: function isSignableHeader(key) {
	    if (key.toLowerCase().indexOf('x-amz-') === 0) return true;
	    return this.unsignableHeaders.indexOf(key) < 0;
	  },

	  isPresigned: function isPresigned() {
	    return this.request.headers[expiresHeader] ? true : false;
	  }

	});

	module.exports = AWS.Signers.V4;


/***/ },
/* 653 */
/***/ function(module, exports) {

	function AcceptorStateMachine(states, state) {
	  this.currentState = state || null;
	  this.states = states || {};
	}

	AcceptorStateMachine.prototype.runTo = function runTo(finalState, done, bindObject, inputError) {
	  if (typeof finalState === 'function') {
	    inputError = bindObject; bindObject = done;
	    done = finalState; finalState = null;
	  }

	  var self = this;
	  var state = self.states[self.currentState];
	  state.fn.call(bindObject || self, inputError, function(err) {
	    if (err) {
	      if (state.fail) self.currentState = state.fail;
	      else return done ? done.call(bindObject, err) : null;
	    } else {
	      if (state.accept) self.currentState = state.accept;
	      else return done ? done.call(bindObject) : null;
	    }
	    if (self.currentState === finalState) {
	      return done ? done.call(bindObject, err) : null;
	    }

	    self.runTo(finalState, done, bindObject, err);
	  });
	};

	AcceptorStateMachine.prototype.addState = function addState(name, acceptState, failState, fn) {
	  if (typeof acceptState === 'function') {
	    fn = acceptState; acceptState = null; failState = null;
	  } else if (typeof failState === 'function') {
	    fn = failState; failState = null;
	  }

	  if (!this.currentState) this.currentState = name;
	  this.states[name] = { accept: acceptState, fail: failState, fn: fn };
	  return this;
	};

	module.exports = AcceptorStateMachine;


/***/ },
/* 654 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);
	var builder = __webpack_require__(660);

	function XmlBuilder() { }

	XmlBuilder.prototype.toXML = function(params, shape, rootElement, noEmpty) {
	  var xml = builder.create(rootElement);
	  applyNamespaces(xml, shape);
	  serialize(xml, params, shape);
	  return xml.children.length > 0 || noEmpty ? xml.root().toString() : '';
	};

	function serialize(xml, value, shape) {
	  switch (shape.type) {
	    case 'structure': return serializeStructure(xml, value, shape);
	    case 'map': return serializeMap(xml, value, shape);
	    case 'list': return serializeList(xml, value, shape);
	    default: return serializeScalar(xml, value, shape);
	  }
	}

	function serializeStructure(xml, params, shape) {
	  util.arrayEach(shape.memberNames, function(memberName) {
	    var memberShape = shape.members[memberName];
	    if (memberShape.location !== 'body') return;

	    var value = params[memberName];
	    var name = memberShape.name;
	    if (value !== undefined && value !== null) {
	      if (memberShape.isXmlAttribute) {
	        xml.att(name, value);
	      } else if (memberShape.flattened) {
	        serialize(xml, value, memberShape);
	      } else {
	        var element = xml.ele(name);
	        applyNamespaces(element, memberShape);
	        serialize(element, value, memberShape);
	      }
	    }
	  });
	}

	function serializeMap(xml, map, shape) {
	  var xmlKey = shape.key.name || 'key';
	  var xmlValue = shape.value.name || 'value';

	  util.each(map, function(key, value) {
	    var entry = xml.ele(shape.flattened ? shape.name : 'entry');
	    serialize(entry.ele(xmlKey), key, shape.key);
	    serialize(entry.ele(xmlValue), value, shape.value);
	  });
	}

	function serializeList(xml, list, shape) {
	  if (shape.flattened) {
	    util.arrayEach(list, function(value) {
	      var name = shape.member.name || shape.name;
	      var element = xml.ele(name);
	      serialize(element, value, shape.member);
	    });
	  } else {
	    util.arrayEach(list, function(value) {
	      var name = shape.member.name || 'member';
	      var element = xml.ele(name);
	      serialize(element, value, shape.member);
	    });
	  }
	}

	function serializeScalar(xml, value, shape) {
	  xml.txt(shape.toWireFormat(value));
	}

	function applyNamespaces(xml, shape) {
	  var uri, prefix = 'xmlns';
	  if (shape.xmlNamespaceUri) {
	    uri = shape.xmlNamespaceUri;
	    if (shape.xmlNamespacePrefix) prefix += ':' + shape.xmlNamespacePrefix;
	  } else if (xml.isRoot && shape.api.xmlNamespaceUri) {
	    uri = shape.api.xmlNamespaceUri;
	  }

	  if (uri) xml.att(prefix, uri);
	}

	module.exports = XmlBuilder;


/***/ },
/* 655 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(5);
	var Shape = __webpack_require__(31);

	var xml2js = __webpack_require__(657);

	/**
	 * @api private
	 */
	var options = {  // options passed to xml2js parser
	  explicitCharkey: false, // undocumented
	  trim: false,            // trim the leading/trailing whitespace from text nodes
	  normalize: false,       // trim interior whitespace inside text nodes
	  explicitRoot: false,    // return the root node in the resulting object?
	  emptyTag: null,         // the default value for empty nodes
	  explicitArray: true,    // always put child nodes in an array
	  ignoreAttrs: false,     // ignore attributes, only create text nodes
	  mergeAttrs: false,      // merge attributes and child elements
	  validator: null         // a callable validator
	};

	function NodeXmlParser() { }

	NodeXmlParser.prototype.parse = function(xml, shape) {
	  shape = shape || {};

	  var result = null;
	  var error = null;

	  var parser = new xml2js.Parser(options);
	  parser.parseString(xml, function (e, r) {
	    error = e;
	    result = r;
	  });

	  if (result) {
	    var data = parseXml(result, shape);
	    if (result.ResponseMetadata) {
	      data.ResponseMetadata = parseXml(result.ResponseMetadata[0], {});
	    }
	    return data;
	  } else if (error) {
	    throw util.error(error, {code: 'XMLParserError'});
	  } else { // empty xml document
	    return parseXml({}, shape);
	  }
	};

	function parseXml(xml, shape) {
	  switch (shape.type) {
	    case 'structure': return parseStructure(xml, shape);
	    case 'map': return parseMap(xml, shape);
	    case 'list': return parseList(xml, shape);
	    case undefined: case null: return parseUnknown(xml);
	    default: return parseScalar(xml, shape);
	  }
	}

	function parseStructure(xml, shape) {
	  var data = {};
	  if (xml === null) return data;

	  util.each(shape.members, function(memberName, memberShape) {
	    var xmlName = memberShape.name;
	    if (xml.hasOwnProperty(xmlName) && Array.isArray(xml[xmlName])) {
	      var xmlChild = xml[xmlName];
	      if (!memberShape.flattened) xmlChild = xmlChild[0];

	      data[memberName] = parseXml(xmlChild, memberShape);
	    } else if (memberShape.isXmlAttribute &&
	               xml.$ && xml.$.hasOwnProperty(xmlName)) {
	      data[memberName] = parseScalar(xml.$[xmlName], memberShape);
	    } else if (memberShape.type === 'list') {
	      data[memberName] = memberShape.defaultValue;
	    }
	  });

	  return data;
	}

	function parseMap(xml, shape) {
	  var data = {};
	  if (xml === null) return data;

	  var xmlKey = shape.key.name || 'key';
	  var xmlValue = shape.value.name || 'value';
	  var iterable = shape.flattened ? xml : xml.entry;

	  if (Array.isArray(iterable)) {
	    util.arrayEach(iterable, function(child) {
	      data[child[xmlKey][0]] = parseXml(child[xmlValue][0], shape.value);
	    });
	  }

	  return data;
	}

	function parseList(xml, shape) {
	  var data = [];
	  var name = shape.member.name || 'member';
	  if (shape.flattened) {
	    util.arrayEach(xml, function(xmlChild) {
	      data.push(parseXml(xmlChild, shape.member));
	    });
	  } else if (xml && Array.isArray(xml[name])) {
	    util.arrayEach(xml[name], function(child) {
	      data.push(parseXml(child, shape.member));
	    });
	  }

	  return data;
	}

	function parseScalar(text, shape) {
	  if (text && text.$ && text.$.encoding === 'base64') {
	    shape = new Shape.create({type: text.$.encoding});
	  }
	  if (text && text._) text = text._;

	  if (typeof shape.toType === 'function') {
	    return shape.toType(text);
	  } else {
	    return text;
	  }
	}

	function parseUnknown(xml) {
	  if (xml === undefined || xml === null) return '';
	  if (typeof xml === 'string') return xml;

	  // parse a list
	  if (Array.isArray(xml)) {
	    var arr = [];
	    for (i = 0; i < xml.length; i++) {
	      arr.push(parseXml(xml[i], {}));
	    }
	    return arr;
	  }

	  // empty object
	  var keys = Object.keys(xml), i;
	  if (keys.length === 0 || keys === ['$']) {
	    return {};
	  }

	  // object, parse as structure
	  var data = {};
	  for (i = 0; i < keys.length; i++) {
	    var key = keys[i], value = xml[key];
	    if (key === '$') continue;
	    if (value.length > 1) { // this member is a list
	      data[key] = parseList(value, {member: {}});
	    } else { // this member is a single item
	      data[key] = parseXml(value[0], {});
	    }
	  }
	  return data;
	}

	module.exports = NodeXmlParser;


/***/ },
/* 656 */
/***/ function(module, exports, __webpack_require__) {

	// wrapper for non-node envs
	;(function (sax) {

	sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
	sax.SAXParser = SAXParser
	sax.SAXStream = SAXStream
	sax.createStream = createStream

	// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
	// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
	// since that's the earliest that a buffer overrun could occur.  This way, checks are
	// as rare as required, but as often as necessary to ensure never crossing this bound.
	// Furthermore, buffers are only tested at most once per write(), so passing a very
	// large string into write() might have undesirable effects, but this is manageable by
	// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
	// edge case, result in creating at most one complete copy of the string passed in.
	// Set to Infinity to have unlimited buffers.
	sax.MAX_BUFFER_LENGTH = 64 * 1024

	var buffers = [
	  "comment", "sgmlDecl", "textNode", "tagName", "doctype",
	  "procInstName", "procInstBody", "entity", "attribName",
	  "attribValue", "cdata", "script"
	]

	sax.EVENTS = // for discoverability.
	  [ "text"
	  , "processinginstruction"
	  , "sgmldeclaration"
	  , "doctype"
	  , "comment"
	  , "attribute"
	  , "opentag"
	  , "closetag"
	  , "opencdata"
	  , "cdata"
	  , "closecdata"
	  , "error"
	  , "end"
	  , "ready"
	  , "script"
	  , "opennamespace"
	  , "closenamespace"
	  ]

	function SAXParser (strict, opt) {
	  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)

	  var parser = this
	  clearBuffers(parser)
	  parser.q = parser.c = ""
	  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
	  parser.opt = opt || {}
	  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
	  parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase"
	  parser.tags = []
	  parser.closed = parser.closedRoot = parser.sawRoot = false
	  parser.tag = parser.error = null
	  parser.strict = !!strict
	  parser.noscript = !!(strict || parser.opt.noscript)
	  parser.state = S.BEGIN
	  parser.ENTITIES = Object.create(sax.ENTITIES)
	  parser.attribList = []

	  // namespaces form a prototype chain.
	  // it always points at the current tag,
	  // which protos to its parent tag.
	  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)

	  // mostly just for error reporting
	  parser.trackPosition = parser.opt.position !== false
	  if (parser.trackPosition) {
	    parser.position = parser.line = parser.column = 0
	  }
	  emit(parser, "onready")
	}

	if (!Object.create) Object.create = function (o) {
	  function f () { this.__proto__ = o }
	  f.prototype = o
	  return new f
	}

	if (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {
	  return o.__proto__
	}

	if (!Object.keys) Object.keys = function (o) {
	  var a = []
	  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
	  return a
	}

	function checkBufferLength (parser) {
	  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
	    , maxActual = 0
	  for (var i = 0, l = buffers.length; i < l; i ++) {
	    var len = parser[buffers[i]].length
	    if (len > maxAllowed) {
	      // Text/cdata nodes can get big, and since they're buffered,
	      // we can get here under normal conditions.
	      // Avoid issues by emitting the text node now,
	      // so at least it won't get any bigger.
	      switch (buffers[i]) {
	        case "textNode":
	          closeText(parser)
	        break

	        case "cdata":
	          emitNode(parser, "oncdata", parser.cdata)
	          parser.cdata = ""
	        break

	        case "script":
	          emitNode(parser, "onscript", parser.script)
	          parser.script = ""
	        break

	        default:
	          error(parser, "Max buffer length exceeded: "+buffers[i])
	      }
	    }
	    maxActual = Math.max(maxActual, len)
	  }
	  // schedule the next check for the earliest possible buffer overrun.
	  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)
	                             + parser.position
	}

	function clearBuffers (parser) {
	  for (var i = 0, l = buffers.length; i < l; i ++) {
	    parser[buffers[i]] = ""
	  }
	}

	SAXParser.prototype =
	  { end: function () { end(this) }
	  , write: write
	  , resume: function () { this.error = null; return this }
	  , close: function () { return this.write(null) }
	  }

	try {
	  var Stream = __webpack_require__(16).Stream
	} catch (ex) {
	  var Stream = function () {}
	}


	var streamWraps = sax.EVENTS.filter(function (ev) {
	  return ev !== "error" && ev !== "end"
	})

	function createStream (strict, opt) {
	  return new SAXStream(strict, opt)
	}

	function SAXStream (strict, opt) {
	  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)

	  Stream.apply(this)

	  this._parser = new SAXParser(strict, opt)
	  this.writable = true
	  this.readable = true


	  var me = this

	  this._parser.onend = function () {
	    me.emit("end")
	  }

	  this._parser.onerror = function (er) {
	    me.emit("error", er)

	    // if didn't throw, then means error was handled.
	    // go ahead and clear error, so we can write again.
	    me._parser.error = null
	  }

	  streamWraps.forEach(function (ev) {
	    Object.defineProperty(me, "on" + ev, {
	      get: function () { return me._parser["on" + ev] },
	      set: function (h) {
	        if (!h) {
	          me.removeAllListeners(ev)
	          return me._parser["on"+ev] = h
	        }
	        me.on(ev, h)
	      },
	      enumerable: true,
	      configurable: false
	    })
	  })
	}

	SAXStream.prototype = Object.create(Stream.prototype,
	  { constructor: { value: SAXStream } })

	SAXStream.prototype.write = function (data) {
	  this._parser.write(data.toString())
	  this.emit("data", data)
	  return true
	}

	SAXStream.prototype.end = function (chunk) {
	  if (chunk && chunk.length) this._parser.write(chunk.toString())
	  this._parser.end()
	  return true
	}

	SAXStream.prototype.on = function (ev, handler) {
	  var me = this
	  if (!me._parser["on"+ev] && streamWraps.indexOf(ev) !== -1) {
	    me._parser["on"+ev] = function () {
	      var args = arguments.length === 1 ? [arguments[0]]
	               : Array.apply(null, arguments)
	      args.splice(0, 0, ev)
	      me.emit.apply(me, args)
	    }
	  }

	  return Stream.prototype.on.call(me, ev, handler)
	}



	// character classes and tokens
	var whitespace = "\r\n\t "
	  // this really needs to be replaced with character classes.
	  // XML allows all manner of ridiculous numbers and digits.
	  , number = "0124356789"
	  , letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	  // (Letter | "_" | ":")
	  , quote = "'\""
	  , entity = number+letter+"#"
	  , attribEnd = whitespace + ">"
	  , CDATA = "[CDATA["
	  , DOCTYPE = "DOCTYPE"
	  , XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
	  , XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
	  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

	// turn all the string character sets into character class objects.
	whitespace = charClass(whitespace)
	number = charClass(number)
	letter = charClass(letter)

	// http://www.w3.org/TR/REC-xml/#NT-NameStartChar
	// This implementation works on strings, a single character at a time
	// as such, it cannot ever support astral-plane characters (10000-EFFFF)
	// without a significant breaking change to either this  parser, or the
	// JavaScript language.  Implementation of an emoji-capable xml parser
	// is left as an exercise for the reader.
	var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

	var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	quote = charClass(quote)
	entity = charClass(entity)
	attribEnd = charClass(attribEnd)

	function charClass (str) {
	  return str.split("").reduce(function (s, c) {
	    s[c] = true
	    return s
	  }, {})
	}

	function isRegExp (c) {
	  return Object.prototype.toString.call(c) === '[object RegExp]'
	}

	function is (charclass, c) {
	  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
	}

	function not (charclass, c) {
	  return !is(charclass, c)
	}

	var S = 0
	sax.STATE =
	{ BEGIN                     : S++
	, TEXT                      : S++ // general stuff
	, TEXT_ENTITY               : S++ // &amp and such.
	, OPEN_WAKA                 : S++ // <
	, SGML_DECL                 : S++ // <!BLARG
	, SGML_DECL_QUOTED          : S++ // <!BLARG foo "bar
	, DOCTYPE                   : S++ // <!DOCTYPE
	, DOCTYPE_QUOTED            : S++ // <!DOCTYPE "//blah
	, DOCTYPE_DTD               : S++ // <!DOCTYPE "//blah" [ ...
	, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE "//blah" [ "foo
	, COMMENT_STARTING          : S++ // <!-
	, COMMENT                   : S++ // <!--
	, COMMENT_ENDING            : S++ // <!-- blah -
	, COMMENT_ENDED             : S++ // <!-- blah --
	, CDATA                     : S++ // <![CDATA[ something
	, CDATA_ENDING              : S++ // ]
	, CDATA_ENDING_2            : S++ // ]]
	, PROC_INST                 : S++ // <?hi
	, PROC_INST_BODY            : S++ // <?hi there
	, PROC_INST_ENDING          : S++ // <?hi "there" ?
	, OPEN_TAG                  : S++ // <strong
	, OPEN_TAG_SLASH            : S++ // <strong /
	, ATTRIB                    : S++ // <a
	, ATTRIB_NAME               : S++ // <a foo
	, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _
	, ATTRIB_VALUE              : S++ // <a foo=
	, ATTRIB_VALUE_QUOTED       : S++ // <a foo="bar
	, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar
	, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar="&quot;"
	, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;
	, CLOSE_TAG                 : S++ // </a
	, CLOSE_TAG_SAW_WHITE       : S++ // </a   >
	, SCRIPT                    : S++ // <script> ...
	, SCRIPT_ENDING             : S++ // <script> ... <
	}

	sax.ENTITIES =
	{ "amp" : "&"
	, "gt" : ">"
	, "lt" : "<"
	, "quot" : "\""
	, "apos" : "'"
	, "AElig" : 198
	, "Aacute" : 193
	, "Acirc" : 194
	, "Agrave" : 192
	, "Aring" : 197
	, "Atilde" : 195
	, "Auml" : 196
	, "Ccedil" : 199
	, "ETH" : 208
	, "Eacute" : 201
	, "Ecirc" : 202
	, "Egrave" : 200
	, "Euml" : 203
	, "Iacute" : 205
	, "Icirc" : 206
	, "Igrave" : 204
	, "Iuml" : 207
	, "Ntilde" : 209
	, "Oacute" : 211
	, "Ocirc" : 212
	, "Ograve" : 210
	, "Oslash" : 216
	, "Otilde" : 213
	, "Ouml" : 214
	, "THORN" : 222
	, "Uacute" : 218
	, "Ucirc" : 219
	, "Ugrave" : 217
	, "Uuml" : 220
	, "Yacute" : 221
	, "aacute" : 225
	, "acirc" : 226
	, "aelig" : 230
	, "agrave" : 224
	, "aring" : 229
	, "atilde" : 227
	, "auml" : 228
	, "ccedil" : 231
	, "eacute" : 233
	, "ecirc" : 234
	, "egrave" : 232
	, "eth" : 240
	, "euml" : 235
	, "iacute" : 237
	, "icirc" : 238
	, "igrave" : 236
	, "iuml" : 239
	, "ntilde" : 241
	, "oacute" : 243
	, "ocirc" : 244
	, "ograve" : 242
	, "oslash" : 248
	, "otilde" : 245
	, "ouml" : 246
	, "szlig" : 223
	, "thorn" : 254
	, "uacute" : 250
	, "ucirc" : 251
	, "ugrave" : 249
	, "uuml" : 252
	, "yacute" : 253
	, "yuml" : 255
	, "copy" : 169
	, "reg" : 174
	, "nbsp" : 160
	, "iexcl" : 161
	, "cent" : 162
	, "pound" : 163
	, "curren" : 164
	, "yen" : 165
	, "brvbar" : 166
	, "sect" : 167
	, "uml" : 168
	, "ordf" : 170
	, "laquo" : 171
	, "not" : 172
	, "shy" : 173
	, "macr" : 175
	, "deg" : 176
	, "plusmn" : 177
	, "sup1" : 185
	, "sup2" : 178
	, "sup3" : 179
	, "acute" : 180
	, "micro" : 181
	, "para" : 182
	, "middot" : 183
	, "cedil" : 184
	, "ordm" : 186
	, "raquo" : 187
	, "frac14" : 188
	, "frac12" : 189
	, "frac34" : 190
	, "iquest" : 191
	, "times" : 215
	, "divide" : 247
	, "OElig" : 338
	, "oelig" : 339
	, "Scaron" : 352
	, "scaron" : 353
	, "Yuml" : 376
	, "fnof" : 402
	, "circ" : 710
	, "tilde" : 732
	, "Alpha" : 913
	, "Beta" : 914
	, "Gamma" : 915
	, "Delta" : 916
	, "Epsilon" : 917
	, "Zeta" : 918
	, "Eta" : 919
	, "Theta" : 920
	, "Iota" : 921
	, "Kappa" : 922
	, "Lambda" : 923
	, "Mu" : 924
	, "Nu" : 925
	, "Xi" : 926
	, "Omicron" : 927
	, "Pi" : 928
	, "Rho" : 929
	, "Sigma" : 931
	, "Tau" : 932
	, "Upsilon" : 933
	, "Phi" : 934
	, "Chi" : 935
	, "Psi" : 936
	, "Omega" : 937
	, "alpha" : 945
	, "beta" : 946
	, "gamma" : 947
	, "delta" : 948
	, "epsilon" : 949
	, "zeta" : 950
	, "eta" : 951
	, "theta" : 952
	, "iota" : 953
	, "kappa" : 954
	, "lambda" : 955
	, "mu" : 956
	, "nu" : 957
	, "xi" : 958
	, "omicron" : 959
	, "pi" : 960
	, "rho" : 961
	, "sigmaf" : 962
	, "sigma" : 963
	, "tau" : 964
	, "upsilon" : 965
	, "phi" : 966
	, "chi" : 967
	, "psi" : 968
	, "omega" : 969
	, "thetasym" : 977
	, "upsih" : 978
	, "piv" : 982
	, "ensp" : 8194
	, "emsp" : 8195
	, "thinsp" : 8201
	, "zwnj" : 8204
	, "zwj" : 8205
	, "lrm" : 8206
	, "rlm" : 8207
	, "ndash" : 8211
	, "mdash" : 8212
	, "lsquo" : 8216
	, "rsquo" : 8217
	, "sbquo" : 8218
	, "ldquo" : 8220
	, "rdquo" : 8221
	, "bdquo" : 8222
	, "dagger" : 8224
	, "Dagger" : 8225
	, "bull" : 8226
	, "hellip" : 8230
	, "permil" : 8240
	, "prime" : 8242
	, "Prime" : 8243
	, "lsaquo" : 8249
	, "rsaquo" : 8250
	, "oline" : 8254
	, "frasl" : 8260
	, "euro" : 8364
	, "image" : 8465
	, "weierp" : 8472
	, "real" : 8476
	, "trade" : 8482
	, "alefsym" : 8501
	, "larr" : 8592
	, "uarr" : 8593
	, "rarr" : 8594
	, "darr" : 8595
	, "harr" : 8596
	, "crarr" : 8629
	, "lArr" : 8656
	, "uArr" : 8657
	, "rArr" : 8658
	, "dArr" : 8659
	, "hArr" : 8660
	, "forall" : 8704
	, "part" : 8706
	, "exist" : 8707
	, "empty" : 8709
	, "nabla" : 8711
	, "isin" : 8712
	, "notin" : 8713
	, "ni" : 8715
	, "prod" : 8719
	, "sum" : 8721
	, "minus" : 8722
	, "lowast" : 8727
	, "radic" : 8730
	, "prop" : 8733
	, "infin" : 8734
	, "ang" : 8736
	, "and" : 8743
	, "or" : 8744
	, "cap" : 8745
	, "cup" : 8746
	, "int" : 8747
	, "there4" : 8756
	, "sim" : 8764
	, "cong" : 8773
	, "asymp" : 8776
	, "ne" : 8800
	, "equiv" : 8801
	, "le" : 8804
	, "ge" : 8805
	, "sub" : 8834
	, "sup" : 8835
	, "nsub" : 8836
	, "sube" : 8838
	, "supe" : 8839
	, "oplus" : 8853
	, "otimes" : 8855
	, "perp" : 8869
	, "sdot" : 8901
	, "lceil" : 8968
	, "rceil" : 8969
	, "lfloor" : 8970
	, "rfloor" : 8971
	, "lang" : 9001
	, "rang" : 9002
	, "loz" : 9674
	, "spades" : 9824
	, "clubs" : 9827
	, "hearts" : 9829
	, "diams" : 9830
	}

	Object.keys(sax.ENTITIES).forEach(function (key) {
	    var e = sax.ENTITIES[key]
	    var s = typeof e === 'number' ? String.fromCharCode(e) : e
	    sax.ENTITIES[key] = s
	})

	for (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S

	// shorthand
	S = sax.STATE

	function emit (parser, event, data) {
	  parser[event] && parser[event](data)
	}

	function emitNode (parser, nodeType, data) {
	  if (parser.textNode) closeText(parser)
	  emit(parser, nodeType, data)
	}

	function closeText (parser) {
	  parser.textNode = textopts(parser.opt, parser.textNode)
	  if (parser.textNode) emit(parser, "ontext", parser.textNode)
	  parser.textNode = ""
	}

	function textopts (opt, text) {
	  if (opt.trim) text = text.trim()
	  if (opt.normalize) text = text.replace(/\s+/g, " ")
	  return text
	}

	function error (parser, er) {
	  closeText(parser)
	  if (parser.trackPosition) {
	    er += "\nLine: "+parser.line+
	          "\nColumn: "+parser.column+
	          "\nChar: "+parser.c
	  }
	  er = new Error(er)
	  parser.error = er
	  emit(parser, "onerror", er)
	  return parser
	}

	function end (parser) {
	  if (!parser.closedRoot) strictFail(parser, "Unclosed root tag")
	  if (parser.state !== S.TEXT) error(parser, "Unexpected end")
	  closeText(parser)
	  parser.c = ""
	  parser.closed = true
	  emit(parser, "onend")
	  SAXParser.call(parser, parser.strict, parser.opt)
	  return parser
	}

	function strictFail (parser, message) {
	  if (typeof parser !== 'object' || !(parser instanceof SAXParser))
	    throw new Error('bad call to strictFail');
	  if (parser.strict) error(parser, message)
	}

	function newTag (parser) {
	  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
	  var parent = parser.tags[parser.tags.length - 1] || parser
	    , tag = parser.tag = { name : parser.tagName, attributes : {} }

	  // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
	  if (parser.opt.xmlns) tag.ns = parent.ns
	  parser.attribList.length = 0
	}

	function qname (name) {
	  var i = name.indexOf(":")
	    , qualName = i < 0 ? [ "", name ] : name.split(":")
	    , prefix = qualName[0]
	    , local = qualName[1]

	  // <x "xmlns"="http://foo">
	  if (name === "xmlns") {
	    prefix = "xmlns"
	    local = ""
	  }

	  return { prefix: prefix, local: local }
	}

	function attrib (parser) {
	  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()

	  if (parser.attribList.indexOf(parser.attribName) !== -1 ||
	      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
	   return parser.attribName = parser.attribValue = ""
	  }

	  if (parser.opt.xmlns) {
	    var qn = qname(parser.attribName)
	      , prefix = qn.prefix
	      , local = qn.local

	    if (prefix === "xmlns") {
	      // namespace binding attribute; push the binding into scope
	      if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
	        strictFail( parser
	                  , "xml: prefix must be bound to " + XML_NAMESPACE + "\n"
	                  + "Actual: " + parser.attribValue )
	      } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
	        strictFail( parser
	                  , "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n"
	                  + "Actual: " + parser.attribValue )
	      } else {
	        var tag = parser.tag
	          , parent = parser.tags[parser.tags.length - 1] || parser
	        if (tag.ns === parent.ns) {
	          tag.ns = Object.create(parent.ns)
	        }
	        tag.ns[local] = parser.attribValue
	      }
	    }

	    // defer onattribute events until all attributes have been seen
	    // so any new bindings can take effect; preserve attribute order
	    // so deferred events can be emitted in document order
	    parser.attribList.push([parser.attribName, parser.attribValue])
	  } else {
	    // in non-xmlns mode, we can emit the event right away
	    parser.tag.attributes[parser.attribName] = parser.attribValue
	    emitNode( parser
	            , "onattribute"
	            , { name: parser.attribName
	              , value: parser.attribValue } )
	  }

	  parser.attribName = parser.attribValue = ""
	}

	function openTag (parser, selfClosing) {
	  if (parser.opt.xmlns) {
	    // emit namespace binding events
	    var tag = parser.tag

	    // add namespace info to tag
	    var qn = qname(parser.tagName)
	    tag.prefix = qn.prefix
	    tag.local = qn.local
	    tag.uri = tag.ns[qn.prefix] || qn.prefix

	    if (tag.prefix && !tag.uri) {
	      strictFail(parser, "Unbound namespace prefix: "
	                       + JSON.stringify(parser.tagName))
	    }

	    var parent = parser.tags[parser.tags.length - 1] || parser
	    if (tag.ns && parent.ns !== tag.ns) {
	      Object.keys(tag.ns).forEach(function (p) {
	        emitNode( parser
	                , "onopennamespace"
	                , { prefix: p , uri: tag.ns[p] } )
	      })
	    }

	    // handle deferred onattribute events
	    // Note: do not apply default ns to attributes:
	    //   http://www.w3.org/TR/REC-xml-names/#defaulting
	    for (var i = 0, l = parser.attribList.length; i < l; i ++) {
	      var nv = parser.attribList[i]
	      var name = nv[0]
	        , value = nv[1]
	        , qualName = qname(name)
	        , prefix = qualName.prefix
	        , local = qualName.local
	        , uri = prefix == "" ? "" : (tag.ns[prefix] || "")
	        , a = { name: name
	              , value: value
	              , prefix: prefix
	              , local: local
	              , uri: uri
	              }

	      // if there's any attributes with an undefined namespace,
	      // then fail on them now.
	      if (prefix && prefix != "xmlns" && !uri) {
	        strictFail(parser, "Unbound namespace prefix: "
	                         + JSON.stringify(prefix))
	        a.uri = prefix
	      }
	      parser.tag.attributes[name] = a
	      emitNode(parser, "onattribute", a)
	    }
	    parser.attribList.length = 0
	  }

	  parser.tag.isSelfClosing = !!selfClosing

	  // process the tag
	  parser.sawRoot = true
	  parser.tags.push(parser.tag)
	  emitNode(parser, "onopentag", parser.tag)
	  if (!selfClosing) {
	    // special case for <script> in non-strict mode.
	    if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
	      parser.state = S.SCRIPT
	    } else {
	      parser.state = S.TEXT
	    }
	    parser.tag = null
	    parser.tagName = ""
	  }
	  parser.attribName = parser.attribValue = ""
	  parser.attribList.length = 0
	}

	function closeTag (parser) {
	  if (!parser.tagName) {
	    strictFail(parser, "Weird empty close tag.")
	    parser.textNode += "</>"
	    parser.state = S.TEXT
	    return
	  }

	  if (parser.script) {
	    if (parser.tagName !== "script") {
	      parser.script += "</" + parser.tagName + ">"
	      parser.tagName = ""
	      parser.state = S.SCRIPT
	      return
	    }
	    emitNode(parser, "onscript", parser.script)
	    parser.script = ""
	  }

	  // first make sure that the closing tag actually exists.
	  // <a><b></c></b></a> will close everything, otherwise.
	  var t = parser.tags.length
	  var tagName = parser.tagName
	  if (!parser.strict) tagName = tagName[parser.looseCase]()
	  var closeTo = tagName
	  while (t --) {
	    var close = parser.tags[t]
	    if (close.name !== closeTo) {
	      // fail the first time in strict mode
	      strictFail(parser, "Unexpected close tag")
	    } else break
	  }

	  // didn't find it.  we already failed for strict, so just abort.
	  if (t < 0) {
	    strictFail(parser, "Unmatched closing tag: "+parser.tagName)
	    parser.textNode += "</" + parser.tagName + ">"
	    parser.state = S.TEXT
	    return
	  }
	  parser.tagName = tagName
	  var s = parser.tags.length
	  while (s --> t) {
	    var tag = parser.tag = parser.tags.pop()
	    parser.tagName = parser.tag.name
	    emitNode(parser, "onclosetag", parser.tagName)

	    var x = {}
	    for (var i in tag.ns) x[i] = tag.ns[i]

	    var parent = parser.tags[parser.tags.length - 1] || parser
	    if (parser.opt.xmlns && tag.ns !== parent.ns) {
	      // remove namespace bindings introduced by tag
	      Object.keys(tag.ns).forEach(function (p) {
	        var n = tag.ns[p]
	        emitNode(parser, "onclosenamespace", { prefix: p, uri: n })
	      })
	    }
	  }
	  if (t === 0) parser.closedRoot = true
	  parser.tagName = parser.attribValue = parser.attribName = ""
	  parser.attribList.length = 0
	  parser.state = S.TEXT
	}

	function parseEntity (parser) {
	  var entity = parser.entity
	    , entityLC = entity.toLowerCase()
	    , num
	    , numStr = ""
	  if (parser.ENTITIES[entity])
	    return parser.ENTITIES[entity]
	  if (parser.ENTITIES[entityLC])
	    return parser.ENTITIES[entityLC]
	  entity = entityLC
	  if (entity.charAt(0) === "#") {
	    if (entity.charAt(1) === "x") {
	      entity = entity.slice(2)
	      num = parseInt(entity, 16)
	      numStr = num.toString(16)
	    } else {
	      entity = entity.slice(1)
	      num = parseInt(entity, 10)
	      numStr = num.toString(10)
	    }
	  }
	  entity = entity.replace(/^0+/, "")
	  if (numStr.toLowerCase() !== entity) {
	    strictFail(parser, "Invalid character entity")
	    return "&"+parser.entity + ";"
	  }
	  return String.fromCharCode(num)
	}

	function write (chunk) {
	  var parser = this
	  if (this.error) throw this.error
	  if (parser.closed) return error(parser,
	    "Cannot write after close. Assign an onready handler.")
	  if (chunk === null) return end(parser)
	  var i = 0, c = ""
	  while (parser.c = c = chunk.charAt(i++)) {
	    if (parser.trackPosition) {
	      parser.position ++
	      if (c === "\n") {
	        parser.line ++
	        parser.column = 0
	      } else parser.column ++
	    }
	    switch (parser.state) {

	      case S.BEGIN:
	        if (c === "<") {
	          parser.state = S.OPEN_WAKA
	          parser.startTagPosition = parser.position
	        } else if (not(whitespace,c)) {
	          // have to process this as a text node.
	          // weird, but happens.
	          strictFail(parser, "Non-whitespace before first tag.")
	          parser.textNode = c
	          parser.state = S.TEXT
	        }
	      continue

	      case S.TEXT:
	        if (parser.sawRoot && !parser.closedRoot) {
	          var starti = i-1
	          while (c && c!=="<" && c!=="&") {
	            c = chunk.charAt(i++)
	            if (c && parser.trackPosition) {
	              parser.position ++
	              if (c === "\n") {
	                parser.line ++
	                parser.column = 0
	              } else parser.column ++
	            }
	          }
	          parser.textNode += chunk.substring(starti, i-1)
	        }
	        if (c === "<") {
	          parser.state = S.OPEN_WAKA
	          parser.startTagPosition = parser.position
	        } else {
	          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))
	            strictFail(parser, "Text data outside of root node.")
	          if (c === "&") parser.state = S.TEXT_ENTITY
	          else parser.textNode += c
	        }
	      continue

	      case S.SCRIPT:
	        // only non-strict
	        if (c === "<") {
	          parser.state = S.SCRIPT_ENDING
	        } else parser.script += c
	      continue

	      case S.SCRIPT_ENDING:
	        if (c === "/") {
	          parser.state = S.CLOSE_TAG
	        } else {
	          parser.script += "<" + c
	          parser.state = S.SCRIPT
	        }
	      continue

	      case S.OPEN_WAKA:
	        // either a /, ?, !, or text is coming next.
	        if (c === "!") {
	          parser.state = S.SGML_DECL
	          parser.sgmlDecl = ""
	        } else if (is(whitespace, c)) {
	          // wait for it...
	        } else if (is(nameStart,c)) {
	          parser.state = S.OPEN_TAG
	          parser.tagName = c
	        } else if (c === "/") {
	          parser.state = S.CLOSE_TAG
	          parser.tagName = ""
	        } else if (c === "?") {
	          parser.state = S.PROC_INST
	          parser.procInstName = parser.procInstBody = ""
	        } else {
	          strictFail(parser, "Unencoded <")
	          // if there was some whitespace, then add that in.
	          if (parser.startTagPosition + 1 < parser.position) {
	            var pad = parser.position - parser.startTagPosition
	            c = new Array(pad).join(" ") + c
	          }
	          parser.textNode += "<" + c
	          parser.state = S.TEXT
	        }
	      continue

	      case S.SGML_DECL:
	        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {
	          emitNode(parser, "onopencdata")
	          parser.state = S.CDATA
	          parser.sgmlDecl = ""
	          parser.cdata = ""
	        } else if (parser.sgmlDecl+c === "--") {
	          parser.state = S.COMMENT
	          parser.comment = ""
	          parser.sgmlDecl = ""
	        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {
	          parser.state = S.DOCTYPE
	          if (parser.doctype || parser.sawRoot) strictFail(parser,
	            "Inappropriately located doctype declaration")
	          parser.doctype = ""
	          parser.sgmlDecl = ""
	        } else if (c === ">") {
	          emitNode(parser, "onsgmldeclaration", parser.sgmlDecl)
	          parser.sgmlDecl = ""
	          parser.state = S.TEXT
	        } else if (is(quote, c)) {
	          parser.state = S.SGML_DECL_QUOTED
	          parser.sgmlDecl += c
	        } else parser.sgmlDecl += c
	      continue

	      case S.SGML_DECL_QUOTED:
	        if (c === parser.q) {
	          parser.state = S.SGML_DECL
	          parser.q = ""
	        }
	        parser.sgmlDecl += c
	      continue

	      case S.DOCTYPE:
	        if (c === ">") {
	          parser.state = S.TEXT
	          emitNode(parser, "ondoctype", parser.doctype)
	          parser.doctype = true // just remember that we saw it.
	        } else {
	          parser.doctype += c
	          if (c === "[") parser.state = S.DOCTYPE_DTD
	          else if (is(quote, c)) {
	            parser.state = S.DOCTYPE_QUOTED
	            parser.q = c
	          }
	        }
	      continue

	      case S.DOCTYPE_QUOTED:
	        parser.doctype += c
	        if (c === parser.q) {
	          parser.q = ""
	          parser.state = S.DOCTYPE
	        }
	      continue

	      case S.DOCTYPE_DTD:
	        parser.doctype += c
	        if (c === "]") parser.state = S.DOCTYPE
	        else if (is(quote,c)) {
	          parser.state = S.DOCTYPE_DTD_QUOTED
	          parser.q = c
	        }
	      continue

	      case S.DOCTYPE_DTD_QUOTED:
	        parser.doctype += c
	        if (c === parser.q) {
	          parser.state = S.DOCTYPE_DTD
	          parser.q = ""
	        }
	      continue

	      case S.COMMENT:
	        if (c === "-") parser.state = S.COMMENT_ENDING
	        else parser.comment += c
	      continue

	      case S.COMMENT_ENDING:
	        if (c === "-") {
	          parser.state = S.COMMENT_ENDED
	          parser.comment = textopts(parser.opt, parser.comment)
	          if (parser.comment) emitNode(parser, "oncomment", parser.comment)
	          parser.comment = ""
	        } else {
	          parser.comment += "-" + c
	          parser.state = S.COMMENT
	        }
	      continue

	      case S.COMMENT_ENDED:
	        if (c !== ">") {
	          strictFail(parser, "Malformed comment")
	          // allow <!-- blah -- bloo --> in non-strict mode,
	          // which is a comment of " blah -- bloo "
	          parser.comment += "--" + c
	          parser.state = S.COMMENT
	        } else parser.state = S.TEXT
	      continue

	      case S.CDATA:
	        if (c === "]") parser.state = S.CDATA_ENDING
	        else parser.cdata += c
	      continue

	      case S.CDATA_ENDING:
	        if (c === "]") parser.state = S.CDATA_ENDING_2
	        else {
	          parser.cdata += "]" + c
	          parser.state = S.CDATA
	        }
	      continue

	      case S.CDATA_ENDING_2:
	        if (c === ">") {
	          if (parser.cdata) emitNode(parser, "oncdata", parser.cdata)
	          emitNode(parser, "onclosecdata")
	          parser.cdata = ""
	          parser.state = S.TEXT
	        } else if (c === "]") {
	          parser.cdata += "]"
	        } else {
	          parser.cdata += "]]" + c
	          parser.state = S.CDATA
	        }
	      continue

	      case S.PROC_INST:
	        if (c === "?") parser.state = S.PROC_INST_ENDING
	        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY
	        else parser.procInstName += c
	      continue

	      case S.PROC_INST_BODY:
	        if (!parser.procInstBody && is(whitespace, c)) continue
	        else if (c === "?") parser.state = S.PROC_INST_ENDING
	        else parser.procInstBody += c
	      continue

	      case S.PROC_INST_ENDING:
	        if (c === ">") {
	          emitNode(parser, "onprocessinginstruction", {
	            name : parser.procInstName,
	            body : parser.procInstBody
	          })
	          parser.procInstName = parser.procInstBody = ""
	          parser.state = S.TEXT
	        } else {
	          parser.procInstBody += "?" + c
	          parser.state = S.PROC_INST_BODY
	        }
	      continue

	      case S.OPEN_TAG:
	        if (is(nameBody, c)) parser.tagName += c
	        else {
	          newTag(parser)
	          if (c === ">") openTag(parser)
	          else if (c === "/") parser.state = S.OPEN_TAG_SLASH
	          else {
	            if (not(whitespace, c)) strictFail(
	              parser, "Invalid character in tag name")
	            parser.state = S.ATTRIB
	          }
	        }
	      continue

	      case S.OPEN_TAG_SLASH:
	        if (c === ">") {
	          openTag(parser, true)
	          closeTag(parser)
	        } else {
	          strictFail(parser, "Forward-slash in opening tag not followed by >")
	          parser.state = S.ATTRIB
	        }
	      continue

	      case S.ATTRIB:
	        // haven't read the attribute name yet.
	        if (is(whitespace, c)) continue
	        else if (c === ">") openTag(parser)
	        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
	        else if (is(nameStart, c)) {
	          parser.attribName = c
	          parser.attribValue = ""
	          parser.state = S.ATTRIB_NAME
	        } else strictFail(parser, "Invalid attribute name")
	      continue

	      case S.ATTRIB_NAME:
	        if (c === "=") parser.state = S.ATTRIB_VALUE
	        else if (c === ">") {
	          strictFail(parser, "Attribute without value")
	          parser.attribValue = parser.attribName
	          attrib(parser)
	          openTag(parser)
	        }
	        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE
	        else if (is(nameBody, c)) parser.attribName += c
	        else strictFail(parser, "Invalid attribute name")
	      continue

	      case S.ATTRIB_NAME_SAW_WHITE:
	        if (c === "=") parser.state = S.ATTRIB_VALUE
	        else if (is(whitespace, c)) continue
	        else {
	          strictFail(parser, "Attribute without value")
	          parser.tag.attributes[parser.attribName] = ""
	          parser.attribValue = ""
	          emitNode(parser, "onattribute",
	                   { name : parser.attribName, value : "" })
	          parser.attribName = ""
	          if (c === ">") openTag(parser)
	          else if (is(nameStart, c)) {
	            parser.attribName = c
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, "Invalid attribute name")
	            parser.state = S.ATTRIB
	          }
	        }
	      continue

	      case S.ATTRIB_VALUE:
	        if (is(whitespace, c)) continue
	        else if (is(quote, c)) {
	          parser.q = c
	          parser.state = S.ATTRIB_VALUE_QUOTED
	        } else {
	          strictFail(parser, "Unquoted attribute value")
	          parser.state = S.ATTRIB_VALUE_UNQUOTED
	          parser.attribValue = c
	        }
	      continue

	      case S.ATTRIB_VALUE_QUOTED:
	        if (c !== parser.q) {
	          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q
	          else parser.attribValue += c
	          continue
	        }
	        attrib(parser)
	        parser.q = ""
	        parser.state = S.ATTRIB
	      continue

	      case S.ATTRIB_VALUE_UNQUOTED:
	        if (not(attribEnd,c)) {
	          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U
	          else parser.attribValue += c
	          continue
	        }
	        attrib(parser)
	        if (c === ">") openTag(parser)
	        else parser.state = S.ATTRIB
	      continue

	      case S.CLOSE_TAG:
	        if (!parser.tagName) {
	          if (is(whitespace, c)) continue
	          else if (not(nameStart, c)) {
	            if (parser.script) {
	              parser.script += "</" + c
	              parser.state = S.SCRIPT
	            } else {
	              strictFail(parser, "Invalid tagname in closing tag.")
	            }
	          } else parser.tagName = c
	        }
	        else if (c === ">") closeTag(parser)
	        else if (is(nameBody, c)) parser.tagName += c
	        else if (parser.script) {
	          parser.script += "</" + parser.tagName
	          parser.tagName = ""
	          parser.state = S.SCRIPT
	        } else {
	          if (not(whitespace, c)) strictFail(parser,
	            "Invalid tagname in closing tag")
	          parser.state = S.CLOSE_TAG_SAW_WHITE
	        }
	      continue

	      case S.CLOSE_TAG_SAW_WHITE:
	        if (is(whitespace, c)) continue
	        if (c === ">") closeTag(parser)
	        else strictFail(parser, "Invalid characters in closing tag")
	      continue

	      case S.TEXT_ENTITY:
	      case S.ATTRIB_VALUE_ENTITY_Q:
	      case S.ATTRIB_VALUE_ENTITY_U:
	        switch(parser.state) {
	          case S.TEXT_ENTITY:
	            var returnState = S.TEXT, buffer = "textNode"
	          break

	          case S.ATTRIB_VALUE_ENTITY_Q:
	            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = "attribValue"
	          break

	          case S.ATTRIB_VALUE_ENTITY_U:
	            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = "attribValue"
	          break
	        }
	        if (c === ";") {
	          parser[buffer] += parseEntity(parser)
	          parser.entity = ""
	          parser.state = returnState
	        }
	        else if (is(entity, c)) parser.entity += c
	        else {
	          strictFail(parser, "Invalid character entity")
	          parser[buffer] += "&" + parser.entity + c
	          parser.entity = ""
	          parser.state = returnState
	        }
	      continue

	      default:
	        throw new Error(parser, "Unknown state: " + parser.state)
	    }
	  } // while
	  // cdata blocks can get very big under normal conditions. emit and move on.
	  // if (parser.state === S.CDATA && parser.cdata) {
	  //   emitNode(parser, "oncdata", parser.cdata)
	  //   parser.cdata = ""
	  // }
	  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)
	  return parser
	}

	})( false ? sax = {} : exports)


/***/ },
/* 657 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.6.3
	(function() {
	  var events, isEmpty, sax,
	    __hasProp = {}.hasOwnProperty,
	    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  sax = __webpack_require__(656);

	  events = __webpack_require__(25);

	  isEmpty = function(thing) {
	    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
	  };

	  exports.defaults = {
	    "0.1": {
	      explicitCharkey: false,
	      trim: true,
	      normalize: true,
	      normalizeTags: false,
	      attrkey: "@",
	      charkey: "#",
	      explicitArray: false,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: false,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      childkey: '@@',
	      charsAsChildren: false,
	      async: false,
	      strict: true
	    },
	    "0.2": {
	      explicitCharkey: false,
	      trim: false,
	      normalize: false,
	      normalizeTags: false,
	      attrkey: "$",
	      charkey: "_",
	      explicitArray: true,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: true,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      childkey: '$$',
	      charsAsChildren: false,
	      async: false,
	      strict: true
	    }
	  };

	  exports.ValidationError = (function(_super) {
	    __extends(ValidationError, _super);

	    function ValidationError(message) {
	      this.message = message;
	    }

	    return ValidationError;

	  })(Error);

	  exports.Parser = (function(_super) {
	    __extends(Parser, _super);

	    function Parser(opts) {
	      this.parseString = __bind(this.parseString, this);
	      this.reset = __bind(this.reset, this);
	      var key, value, _ref;
	      if (!(this instanceof exports.Parser)) {
	        return new exports.Parser(opts);
	      }
	      this.options = {};
	      _ref = exports.defaults["0.2"];
	      for (key in _ref) {
	        if (!__hasProp.call(_ref, key)) continue;
	        value = _ref[key];
	        this.options[key] = value;
	      }
	      for (key in opts) {
	        if (!__hasProp.call(opts, key)) continue;
	        value = opts[key];
	        this.options[key] = value;
	      }
	      if (this.options.xmlns) {
	        this.options.xmlnskey = this.options.attrkey + "ns";
	      }
	      this.reset();
	    }

	    Parser.prototype.reset = function() {
	      var attrkey, charkey, err, ontext, stack,
	        _this = this;
	      this.removeAllListeners();
	      this.saxParser = sax.parser(this.options.strict, {
	        trim: false,
	        normalize: false,
	        xmlns: this.options.xmlns
	      });
	      err = false;
	      this.saxParser.onerror = function(error) {
	        if (!err) {
	          err = true;
	          return _this.emit("error", error);
	        }
	      };
	      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
	      this.resultObject = null;
	      stack = [];
	      attrkey = this.options.attrkey;
	      charkey = this.options.charkey;
	      this.saxParser.onopentag = function(node) {
	        var key, obj, _ref;
	        obj = {};
	        obj[charkey] = "";
	        if (!_this.options.ignoreAttrs) {
	          _ref = node.attributes;
	          for (key in _ref) {
	            if (!__hasProp.call(_ref, key)) continue;
	            if (!(attrkey in obj) && !_this.options.mergeAttrs) {
	              obj[attrkey] = {};
	            }
	            if (_this.options.mergeAttrs) {
	              obj[key] = node.attributes[key];
	            } else {
	              obj[attrkey][key] = node.attributes[key];
	            }
	          }
	        }
	        obj["#name"] = _this.options.normalizeTags ? node.name.toLowerCase() : node.name;
	        if (_this.options.xmlns) {
	          obj[_this.options.xmlnskey] = {
	            uri: node.uri,
	            local: node.local
	          };
	        }
	        return stack.push(obj);
	      };
	      this.saxParser.onclosetag = function() {
	        var cdata, emptyStr, node, nodeName, obj, old, s, xpath;
	        obj = stack.pop();
	        nodeName = obj["#name"];
	        delete obj["#name"];
	        cdata = obj.cdata;
	        delete obj.cdata;
	        s = stack[stack.length - 1];
	        if (obj[charkey].match(/^\s*$/) && !cdata) {
	          emptyStr = obj[charkey];
	          delete obj[charkey];
	        } else {
	          if (_this.options.trim) {
	            obj[charkey] = obj[charkey].trim();
	          }
	          if (_this.options.normalize) {
	            obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
	          }
	          if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
	            obj = obj[charkey];
	          }
	        }
	        if (isEmpty(obj)) {
	          obj = _this.options.emptyTag !== void 0 ? _this.options.emptyTag : emptyStr;
	        }
	        if (_this.options.validator != null) {
	          xpath = "/" + ((function() {
	            var _i, _len, _results;
	            _results = [];
	            for (_i = 0, _len = stack.length; _i < _len; _i++) {
	              node = stack[_i];
	              _results.push(node["#name"]);
	            }
	            return _results;
	          })()).concat(nodeName).join("/");
	          try {
	            obj = _this.options.validator(xpath, s && s[nodeName], obj);
	          } catch (_error) {
	            err = _error;
	            _this.emit("error", err);
	          }
	        }
	        if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
	          node = {};
	          if (_this.options.attrkey in obj) {
	            node[_this.options.attrkey] = obj[_this.options.attrkey];
	            delete obj[_this.options.attrkey];
	          }
	          if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
	            node[_this.options.charkey] = obj[_this.options.charkey];
	            delete obj[_this.options.charkey];
	          }
	          if (Object.getOwnPropertyNames(obj).length > 0) {
	            node[_this.options.childkey] = obj;
	          }
	          obj = node;
	        }
	        if (stack.length > 0) {
	          if (!_this.options.explicitArray) {
	            if (!(nodeName in s)) {
	              return s[nodeName] = obj;
	            } else if (s[nodeName] instanceof Array) {
	              return s[nodeName].push(obj);
	            } else {
	              old = s[nodeName];
	              s[nodeName] = [old];
	              return s[nodeName].push(obj);
	            }
	          } else {
	            if (!(s[nodeName] instanceof Array)) {
	              s[nodeName] = [];
	            }
	            return s[nodeName].push(obj);
	          }
	        } else {
	          if (_this.options.explicitRoot) {
	            old = obj;
	            obj = {};
	            obj[nodeName] = old;
	          }
	          _this.resultObject = obj;
	          return _this.emit("end", _this.resultObject);
	        }
	      };
	      ontext = function(text) {
	        var s;
	        s = stack[stack.length - 1];
	        if (s) {
	          s[charkey] += text;
	          return s;
	        }
	      };
	      this.saxParser.ontext = ontext;
	      return this.saxParser.oncdata = function(text) {
	        var s;
	        s = ontext(text);
	        if (s) {
	          return s.cdata = true;
	        }
	      };
	    };

	    Parser.prototype.parseString = function(str, cb) {
	      if ((cb != null) && typeof cb === "function") {
	        this.on("end", function(result) {
	          this.reset();
	          if (this.options.async) {
	            return process.nextTick(function() {
	              return cb(null, result);
	            });
	          } else {
	            return cb(null, result);
	          }
	        });
	        this.on("error", function(err) {
	          this.reset();
	          if (this.options.async) {
	            return process.nextTick(function() {
	              return cb(err);
	            });
	          } else {
	            return cb(err);
	          }
	        });
	      }
	      if (str.toString().trim() === '') {
	        this.emit("end", null);
	        return true;
	      }
	      return this.saxParser.write(str.toString());
	    };

	    return Parser;

	  })(events.EventEmitter);

	  exports.parseString = function(str, a, b) {
	    var cb, options, parser;
	    if (b != null) {
	      if (typeof b === 'function') {
	        cb = b;
	      }
	      if (typeof a === 'object') {
	        options = a;
	      }
	    } else {
	      if (typeof a === 'function') {
	        cb = a;
	      }
	      options = {};
	    }
	    parser = new exports.Parser(options);
	    return parser.parseString(str, cb);
	  };

	}).call(this);

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 658 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.3.3
	(function() {
	  var XMLBuilder, XMLFragment;

	  XMLFragment = __webpack_require__(659);

	  XMLBuilder = (function() {

	    function XMLBuilder(name, xmldec, doctype) {
	      var att, child, _ref;
	      this.children = [];
	      this.rootObject = null;
	      if (this.is(name, 'Object')) {
	        _ref = [name, xmldec], xmldec = _ref[0], doctype = _ref[1];
	        name = null;
	      }
	      if (name != null) {
	        name = '' + name || '';
	        if (xmldec == null) {
	          xmldec = {
	            'version': '1.0'
	          };
	        }
	      }
	      if ((xmldec != null) && !(xmldec.version != null)) {
	        throw new Error("Version number is required");
	      }
	      if (xmldec != null) {
	        xmldec.version = '' + xmldec.version || '';
	        if (!xmldec.version.match(/1\.[0-9]+/)) {
	          throw new Error("Invalid version number: " + xmldec.version);
	        }
	        att = {
	          version: xmldec.version
	        };
	        if (xmldec.encoding != null) {
	          xmldec.encoding = '' + xmldec.encoding || '';
	          if (!xmldec.encoding.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {
	            throw new Error("Invalid encoding: " + xmldec.encoding);
	          }
	          att.encoding = xmldec.encoding;
	        }
	        if (xmldec.standalone != null) {
	          att.standalone = xmldec.standalone ? "yes" : "no";
	        }
	        child = new XMLFragment(this, '?xml', att);
	        this.children.push(child);
	      }
	      if (doctype != null) {
	        att = {};
	        if (name != null) {
	          att.name = name;
	        }
	        if (doctype.ext != null) {
	          doctype.ext = '' + doctype.ext || '';
	          att.ext = doctype.ext;
	        }
	        child = new XMLFragment(this, '!DOCTYPE', att);
	        this.children.push(child);
	      }
	      if (name != null) {
	        this.begin(name);
	      }
	    }

	    XMLBuilder.prototype.begin = function(name, xmldec, doctype) {
	      var doc, root;
	      if (!(name != null)) {
	        throw new Error("Root element needs a name");
	      }
	      if (this.rootObject) {
	        this.children = [];
	        this.rootObject = null;
	      }
	      if (xmldec != null) {
	        doc = new XMLBuilder(name, xmldec, doctype);
	        return doc.root();
	      }
	      name = '' + name || '';
	      root = new XMLFragment(this, name, {});
	      root.isRoot = true;
	      root.documentObject = this;
	      this.children.push(root);
	      this.rootObject = root;
	      return root;
	    };

	    XMLBuilder.prototype.root = function() {
	      return this.rootObject;
	    };

	    XMLBuilder.prototype.end = function(options) {
	      return toString(options);
	    };

	    XMLBuilder.prototype.toString = function(options) {
	      var child, r, _i, _len, _ref;
	      r = '';
	      _ref = this.children;
	      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	        child = _ref[_i];
	        r += child.toString(options);
	      }
	      return r;
	    };

	    XMLBuilder.prototype.is = function(obj, type) {
	      var clas;
	      clas = Object.prototype.toString.call(obj).slice(8, -1);
	      return (obj != null) && clas === type;
	    };

	    return XMLBuilder;

	  })();

	  module.exports = XMLBuilder;

	}).call(this);


/***/ },
/* 659 */
/***/ function(module, exports) {

	// Generated by CoffeeScript 1.3.3
	(function() {
	  var XMLFragment,
	    __hasProp = {}.hasOwnProperty;

	  XMLFragment = (function() {

	    function XMLFragment(parent, name, attributes, text) {
	      this.isRoot = false;
	      this.documentObject = null;
	      this.parent = parent;
	      this.name = name;
	      this.attributes = attributes;
	      this.value = text;
	      this.children = [];
	    }

	    XMLFragment.prototype.element = function(name, attributes, text) {
	      var child, key, val, _ref, _ref1;
	      if (!(name != null)) {
	        throw new Error("Missing element name");
	      }
	      name = '' + name || '';
	      this.assertLegalChar(name);
	      if (attributes == null) {
	        attributes = {};
	      }
	      if (this.is(attributes, 'String') && this.is(text, 'Object')) {
	        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
	      } else if (this.is(attributes, 'String')) {
	        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
	      }
	      for (key in attributes) {
	        if (!__hasProp.call(attributes, key)) continue;
	        val = attributes[key];
	        val = '' + val || '';
	        attributes[key] = this.escape(val);
	      }
	      child = new XMLFragment(this, name, attributes);
	      if (text != null) {
	        text = '' + text || '';
	        text = this.escape(text);
	        this.assertLegalChar(text);
	        child.raw(text);
	      }
	      this.children.push(child);
	      return child;
	    };

	    XMLFragment.prototype.insertBefore = function(name, attributes, text) {
	      var child, i, key, val, _ref, _ref1;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      if (!(name != null)) {
	        throw new Error("Missing element name");
	      }
	      name = '' + name || '';
	      this.assertLegalChar(name);
	      if (attributes == null) {
	        attributes = {};
	      }
	      if (this.is(attributes, 'String') && this.is(text, 'Object')) {
	        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
	      } else if (this.is(attributes, 'String')) {
	        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
	      }
	      for (key in attributes) {
	        if (!__hasProp.call(attributes, key)) continue;
	        val = attributes[key];
	        val = '' + val || '';
	        attributes[key] = this.escape(val);
	      }
	      child = new XMLFragment(this.parent, name, attributes);
	      if (text != null) {
	        text = '' + text || '';
	        text = this.escape(text);
	        this.assertLegalChar(text);
	        child.raw(text);
	      }
	      i = this.parent.children.indexOf(this);
	      this.parent.children.splice(i, 0, child);
	      return child;
	    };

	    XMLFragment.prototype.insertAfter = function(name, attributes, text) {
	      var child, i, key, val, _ref, _ref1;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      if (!(name != null)) {
	        throw new Error("Missing element name");
	      }
	      name = '' + name || '';
	      this.assertLegalChar(name);
	      if (attributes == null) {
	        attributes = {};
	      }
	      if (this.is(attributes, 'String') && this.is(text, 'Object')) {
	        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];
	      } else if (this.is(attributes, 'String')) {
	        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];
	      }
	      for (key in attributes) {
	        if (!__hasProp.call(attributes, key)) continue;
	        val = attributes[key];
	        val = '' + val || '';
	        attributes[key] = this.escape(val);
	      }
	      child = new XMLFragment(this.parent, name, attributes);
	      if (text != null) {
	        text = '' + text || '';
	        text = this.escape(text);
	        this.assertLegalChar(text);
	        child.raw(text);
	      }
	      i = this.parent.children.indexOf(this);
	      this.parent.children.splice(i + 1, 0, child);
	      return child;
	    };

	    XMLFragment.prototype.remove = function() {
	      var i, _ref;
	      if (this.isRoot) {
	        throw new Error("Cannot remove the root element");
	      }
	      i = this.parent.children.indexOf(this);
	      [].splice.apply(this.parent.children, [i, i - i + 1].concat(_ref = [])), _ref;
	      return this.parent;
	    };

	    XMLFragment.prototype.text = function(value) {
	      var child;
	      if (!(value != null)) {
	        throw new Error("Missing element text");
	      }
	      value = '' + value || '';
	      value = this.escape(value);
	      this.assertLegalChar(value);
	      child = new XMLFragment(this, '', {}, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLFragment.prototype.cdata = function(value) {
	      var child;
	      if (!(value != null)) {
	        throw new Error("Missing CDATA text");
	      }
	      value = '' + value || '';
	      this.assertLegalChar(value);
	      if (value.match(/]]>/)) {
	        throw new Error("Invalid CDATA text: " + value);
	      }
	      child = new XMLFragment(this, '', {}, '<![CDATA[' + value + ']]>');
	      this.children.push(child);
	      return this;
	    };

	    XMLFragment.prototype.comment = function(value) {
	      var child;
	      if (!(value != null)) {
	        throw new Error("Missing comment text");
	      }
	      value = '' + value || '';
	      value = this.escape(value);
	      this.assertLegalChar(value);
	      if (value.match(/--/)) {
	        throw new Error("Comment text cannot contain double-hypen: " + value);
	      }
	      child = new XMLFragment(this, '', {}, '<!-- ' + value + ' -->');
	      this.children.push(child);
	      return this;
	    };

	    XMLFragment.prototype.raw = function(value) {
	      var child;
	      if (!(value != null)) {
	        throw new Error("Missing raw text");
	      }
	      value = '' + value || '';
	      child = new XMLFragment(this, '', {}, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLFragment.prototype.up = function() {
	      if (this.isRoot) {
	        throw new Error("This node has no parent. Use doc() if you need to get the document object.");
	      }
	      return this.parent;
	    };

	    XMLFragment.prototype.root = function() {
	      var child;
	      if (this.isRoot) {
	        return this;
	      }
	      child = this.parent;
	      while (!child.isRoot) {
	        child = child.parent;
	      }
	      return child;
	    };

	    XMLFragment.prototype.document = function() {
	      return this.root().documentObject;
	    };

	    XMLFragment.prototype.end = function(options) {
	      return this.document().toString(options);
	    };

	    XMLFragment.prototype.prev = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i < 1) {
	        throw new Error("Already at the first node");
	      }
	      return this.parent.children[i - 1];
	    };

	    XMLFragment.prototype.next = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i === -1 || i === this.parent.children.length - 1) {
	        throw new Error("Already at the last node");
	      }
	      return this.parent.children[i + 1];
	    };

	    XMLFragment.prototype.clone = function(deep) {
	      var clonedSelf;
	      clonedSelf = new XMLFragment(this.parent, this.name, this.attributes, this.value);
	      if (deep) {
	        this.children.forEach(function(child) {
	          var clonedChild;
	          clonedChild = child.clone(deep);
	          clonedChild.parent = clonedSelf;
	          return clonedSelf.children.push(clonedChild);
	        });
	      }
	      return clonedSelf;
	    };

	    XMLFragment.prototype.importXMLBuilder = function(xmlbuilder) {
	      var clonedRoot;
	      clonedRoot = xmlbuilder.root().clone(true);
	      clonedRoot.parent = this;
	      this.children.push(clonedRoot);
	      clonedRoot.isRoot = false;
	      return this;
	    };

	    XMLFragment.prototype.attribute = function(name, value) {
	      var _ref;
	      if (!(name != null)) {
	        throw new Error("Missing attribute name");
	      }
	      if (!(value != null)) {
	        throw new Error("Missing attribute value");
	      }
	      name = '' + name || '';
	      value = '' + value || '';
	      if ((_ref = this.attributes) == null) {
	        this.attributes = {};
	      }
	      this.attributes[name] = this.escape(value);
	      return this;
	    };

	    XMLFragment.prototype.removeAttribute = function(name) {
	      if (!(name != null)) {
	        throw new Error("Missing attribute name");
	      }
	      name = '' + name || '';
	      delete this.attributes[name];
	      return this;
	    };

	    XMLFragment.prototype.toString = function(options, level) {
	      var attName, attValue, child, indent, newline, pretty, r, space, _i, _len, _ref, _ref1;
	      pretty = (options != null) && options.pretty || false;
	      indent = (options != null) && options.indent || '  ';
	      newline = (options != null) && options.newline || '\n';
	      level || (level = 0);
	      space = new Array(level + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      if (!(this.value != null)) {
	        r += '<' + this.name;
	      } else {
	        r += '' + this.value;
	      }
	      _ref = this.attributes;
	      for (attName in _ref) {
	        attValue = _ref[attName];
	        if (this.name === '!DOCTYPE') {
	          r += ' ' + attValue;
	        } else {
	          r += ' ' + attName + '="' + attValue + '"';
	        }
	      }
	      if (this.children.length === 0) {
	        if (!(this.value != null)) {
	          r += this.name === '?xml' ? '?>' : this.name === '!DOCTYPE' ? '>' : '/>';
	        }
	        if (pretty) {
	          r += newline;
	        }
	      } else if (pretty && this.children.length === 1 && this.children[0].value) {
	        r += '>';
	        r += this.children[0].value;
	        r += '</' + this.name + '>';
	        r += newline;
	      } else {
	        r += '>';
	        if (pretty) {
	          r += newline;
	        }
	        _ref1 = this.children;
	        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
	          child = _ref1[_i];
	          r += child.toString(options, level + 1);
	        }
	        if (pretty) {
	          r += space;
	        }
	        r += '</' + this.name + '>';
	        if (pretty) {
	          r += newline;
	        }
	      }
	      return r;
	    };

	    XMLFragment.prototype.escape = function(str) {
	      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&apos;').replace(/"/g, '&quot;');
	    };

	    XMLFragment.prototype.assertLegalChar = function(str) {
	      var chars, chr;
	      chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
	      chr = str.match(chars);
	      if (chr) {
	        throw new Error("Invalid character (" + chr + ") in string: " + str);
	      }
	    };

	    XMLFragment.prototype.is = function(obj, type) {
	      var clas;
	      clas = Object.prototype.toString.call(obj).slice(8, -1);
	      return (obj != null) && clas === type;
	    };

	    XMLFragment.prototype.ele = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLFragment.prototype.txt = function(value) {
	      return this.text(value);
	    };

	    XMLFragment.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLFragment.prototype.att = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLFragment.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLFragment.prototype.doc = function() {
	      return this.document();
	    };

	    XMLFragment.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLFragment.prototype.t = function(value) {
	      return this.text(value);
	    };

	    XMLFragment.prototype.d = function(value) {
	      return this.cdata(value);
	    };

	    XMLFragment.prototype.a = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLFragment.prototype.c = function(value) {
	      return this.comment(value);
	    };

	    XMLFragment.prototype.r = function(value) {
	      return this.raw(value);
	    };

	    XMLFragment.prototype.u = function() {
	      return this.up();
	    };

	    return XMLFragment;

	  })();

	  module.exports = XMLFragment;

	}).call(this);


/***/ },
/* 660 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.3.3
	(function() {
	  var XMLBuilder;

	  XMLBuilder = __webpack_require__(658);

	  module.exports.create = function(name, xmldec, doctype) {
	    if (name != null) {
	      return new XMLBuilder(name, xmldec, doctype).root();
	    } else {
	      return new XMLBuilder();
	    }
	  };

	}).call(this);


/***/ },
/* 661 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(10);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 662 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 663 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 664 */
/***/ function(module, exports) {

	
	/**
	 * isArray
	 */

	var isArray = Array.isArray;

	/**
	 * toString
	 */

	var str = Object.prototype.toString;

	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */

	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 665 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var createHash = __webpack_require__(159)

	var zeroBuffer = new Buffer(128)
	zeroBuffer.fill(0)

	module.exports = Hmac

	function Hmac (alg, key) {
	  if(!(this instanceof Hmac)) return new Hmac(alg, key)
	  this._opad = opad
	  this._alg = alg

	  var blocksize = (alg === 'sha512') ? 128 : 64

	  key = this._key = !Buffer.isBuffer(key) ? new Buffer(key) : key

	  if(key.length > blocksize) {
	    key = createHash(alg).update(key).digest()
	  } else if(key.length < blocksize) {
	    key = Buffer.concat([key, zeroBuffer], blocksize)
	  }

	  var ipad = this._ipad = new Buffer(blocksize)
	  var opad = this._opad = new Buffer(blocksize)

	  for(var i = 0; i < blocksize; i++) {
	    ipad[i] = key[i] ^ 0x36
	    opad[i] = key[i] ^ 0x5C
	  }

	  this._hash = createHash(alg).update(ipad)
	}

	Hmac.prototype.update = function (data, enc) {
	  this._hash.update(data, enc)
	  return this
	}

	Hmac.prototype.digest = function (enc) {
	  var h = this._hash.digest()
	  return createHash(this._alg).update(this._opad).update(h).digest(enc)
	}


	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 666 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var intSize = 4;
	var zeroBuffer = new Buffer(intSize); zeroBuffer.fill(0);
	var chrsz = 8;

	function toArray(buf, bigEndian) {
	  if ((buf.length % intSize) !== 0) {
	    var len = buf.length + (intSize - (buf.length % intSize));
	    buf = Buffer.concat([buf, zeroBuffer], len);
	  }

	  var arr = [];
	  var fn = bigEndian ? buf.readInt32BE : buf.readInt32LE;
	  for (var i = 0; i < buf.length; i += intSize) {
	    arr.push(fn.call(buf, i));
	  }
	  return arr;
	}

	function toBuffer(arr, size, bigEndian) {
	  var buf = new Buffer(size);
	  var fn = bigEndian ? buf.writeInt32BE : buf.writeInt32LE;
	  for (var i = 0; i < arr.length; i++) {
	    fn.call(buf, arr[i], i * 4, true);
	  }
	  return buf;
	}

	function hash(buf, fn, hashSize, bigEndian) {
	  if (!Buffer.isBuffer(buf)) buf = new Buffer(buf);
	  var arr = fn(toArray(buf, bigEndian), buf.length * chrsz);
	  return toBuffer(arr, hashSize, bigEndian);
	}

	module.exports = { hash: hash };

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 667 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {var rng = __webpack_require__(677)

	function error () {
	  var m = [].slice.call(arguments).join(' ')
	  throw new Error([
	    m,
	    'we accept pull requests',
	    'http://github.com/dominictarr/crypto-browserify'
	    ].join('\n'))
	}

	exports.createHash = __webpack_require__(159)

	exports.createHmac = __webpack_require__(665)

	exports.randomBytes = function(size, callback) {
	  if (callback && callback.call) {
	    try {
	      callback.call(this, undefined, new Buffer(rng(size)))
	    } catch (err) { callback(err) }
	  } else {
	    return new Buffer(rng(size))
	  }
	}

	function each(a, f) {
	  for(var i in a)
	    f(a[i], i)
	}

	exports.getHashes = function () {
	  return ['sha1', 'sha256', 'sha512', 'md5', 'rmd160']
	}

	var p = __webpack_require__(676)(exports)
	exports.pbkdf2 = p.pbkdf2
	exports.pbkdf2Sync = p.pbkdf2Sync


	// the least I can do is make error messages for the rest of the node.js/crypto api.
	each(['createCredentials'
	, 'createCipher'
	, 'createCipheriv'
	, 'createDecipher'
	, 'createDecipheriv'
	, 'createSign'
	, 'createVerify'
	, 'createDiffieHellman'
	], function (name) {
	  exports[name] = function () {
	    error('sorry,', name, 'is not implemented yet')
	  }
	})

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 668 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
	 * Digest Algorithm, as defined in RFC 1321.
	 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for more info.
	 */

	var helpers = __webpack_require__(666);

	/*
	 * Calculate the MD5 of an array of little-endian words, and a bit length
	 */
	function core_md5(x, len)
	{
	  /* append padding */
	  x[len >> 5] |= 0x80 << ((len) % 32);
	  x[(((len + 64) >>> 9) << 4) + 14] = len;

	  var a =  1732584193;
	  var b = -271733879;
	  var c = -1732584194;
	  var d =  271733878;

	  for(var i = 0; i < x.length; i += 16)
	  {
	    var olda = a;
	    var oldb = b;
	    var oldc = c;
	    var oldd = d;

	    a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
	    d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
	    c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
	    b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
	    a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
	    d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
	    c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
	    b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
	    a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
	    d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
	    c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
	    b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
	    a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
	    d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
	    c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
	    b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

	    a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
	    d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
	    c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
	    b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
	    a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
	    d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
	    c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
	    b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
	    a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
	    d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
	    c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
	    b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
	    a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
	    d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
	    c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
	    b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

	    a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
	    d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
	    c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
	    b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
	    a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
	    d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
	    c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
	    b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
	    a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
	    d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
	    c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
	    b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
	    a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
	    d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
	    c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
	    b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

	    a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
	    d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
	    c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
	    b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
	    a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
	    d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
	    c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
	    b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
	    a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
	    d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
	    c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
	    b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
	    a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
	    d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
	    c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
	    b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

	    a = safe_add(a, olda);
	    b = safe_add(b, oldb);
	    c = safe_add(c, oldc);
	    d = safe_add(d, oldd);
	  }
	  return Array(a, b, c, d);

	}

	/*
	 * These functions implement the four basic operations the algorithm uses.
	 */
	function md5_cmn(q, a, b, x, s, t)
	{
	  return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t)
	{
	  return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t)
	{
	  return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t)
	{
	  return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	/*
	 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	 * to work around bugs in some JS interpreters.
	 */
	function safe_add(x, y)
	{
	  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  return (msw << 16) | (lsw & 0xFFFF);
	}

	/*
	 * Bitwise rotate a 32-bit number to the left.
	 */
	function bit_rol(num, cnt)
	{
	  return (num << cnt) | (num >>> (32 - cnt));
	}

	module.exports = function md5(buf) {
	  return helpers.hash(buf, core_md5, 16);
	};


/***/ },
/* 669 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {module.exports = function(crypto) {
	  function pbkdf2(password, salt, iterations, keylen, digest, callback) {
	    if ('function' === typeof digest) {
	      callback = digest
	      digest = undefined
	    }

	    if ('function' !== typeof callback)
	      throw new Error('No callback provided to pbkdf2')

	    setTimeout(function() {
	      var result

	      try {
	        result = pbkdf2Sync(password, salt, iterations, keylen, digest)
	      } catch (e) {
	        return callback(e)
	      }

	      callback(undefined, result)
	    })
	  }

	  function pbkdf2Sync(password, salt, iterations, keylen, digest) {
	    if ('number' !== typeof iterations)
	      throw new TypeError('Iterations not a number')

	    if (iterations < 0)
	      throw new TypeError('Bad iterations')

	    if ('number' !== typeof keylen)
	      throw new TypeError('Key length not a number')

	    if (keylen < 0)
	      throw new TypeError('Bad key length')

	    digest = digest || 'sha1'

	    if (!Buffer.isBuffer(password)) password = new Buffer(password)
	    if (!Buffer.isBuffer(salt)) salt = new Buffer(salt)

	    var hLen, l = 1, r, T
	    var DK = new Buffer(keylen)
	    var block1 = new Buffer(salt.length + 4)
	    salt.copy(block1, 0, 0, salt.length)

	    for (var i = 1; i <= l; i++) {
	      block1.writeUInt32BE(i, salt.length)

	      var U = crypto.createHmac(digest, password).update(block1).digest()

	      if (!hLen) {
	        hLen = U.length
	        T = new Buffer(hLen)
	        l = Math.ceil(keylen / hLen)
	        r = keylen - (l - 1) * hLen

	        if (keylen > (Math.pow(2, 32) - 1) * hLen)
	          throw new TypeError('keylen exceeds maximum length')
	      }

	      U.copy(T, 0, 0, hLen)

	      for (var j = 1; j < iterations; j++) {
	        U = crypto.createHmac(digest, password).update(U).digest()

	        for (var k = 0; k < hLen; k++) {
	          T[k] ^= U[k]
	        }
	      }

	      var destPos = (i - 1) * hLen
	      var len = (i == l ? r : hLen)
	      T.copy(DK, destPos, 0, len)
	    }

	    return DK
	  }

	  return {
	    pbkdf2: pbkdf2,
	    pbkdf2Sync: pbkdf2Sync
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 670 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {
	module.exports = ripemd160



	/*
	CryptoJS v3.1.2
	code.google.com/p/crypto-js
	(c) 2009-2013 by Jeff Mott. All rights reserved.
	code.google.com/p/crypto-js/wiki/License
	*/
	/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	// Constants table
	var zl = [
	    0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,
	    7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,
	    3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,
	    1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,
	    4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13];
	var zr = [
	    5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,
	    6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,
	    15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,
	    8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,
	    12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11];
	var sl = [
	     11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,
	    7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,
	    11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,
	      11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,
	    9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ];
	var sr = [
	    8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,
	    9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,
	    9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,
	    15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,
	    8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ];

	var hl =  [ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E];
	var hr =  [ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000];

	var bytesToWords = function (bytes) {
	  var words = [];
	  for (var i = 0, b = 0; i < bytes.length; i++, b += 8) {
	    words[b >>> 5] |= bytes[i] << (24 - b % 32);
	  }
	  return words;
	};

	var wordsToBytes = function (words) {
	  var bytes = [];
	  for (var b = 0; b < words.length * 32; b += 8) {
	    bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);
	  }
	  return bytes;
	};

	var processBlock = function (H, M, offset) {

	  // Swap endian
	  for (var i = 0; i < 16; i++) {
	    var offset_i = offset + i;
	    var M_offset_i = M[offset_i];

	    // Swap
	    M[offset_i] = (
	        (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |
	        (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)
	    );
	  }

	  // Working variables
	  var al, bl, cl, dl, el;
	  var ar, br, cr, dr, er;

	  ar = al = H[0];
	  br = bl = H[1];
	  cr = cl = H[2];
	  dr = dl = H[3];
	  er = el = H[4];
	  // Computation
	  var t;
	  for (var i = 0; i < 80; i += 1) {
	    t = (al +  M[offset+zl[i]])|0;
	    if (i<16){
	        t +=  f1(bl,cl,dl) + hl[0];
	    } else if (i<32) {
	        t +=  f2(bl,cl,dl) + hl[1];
	    } else if (i<48) {
	        t +=  f3(bl,cl,dl) + hl[2];
	    } else if (i<64) {
	        t +=  f4(bl,cl,dl) + hl[3];
	    } else {// if (i<80) {
	        t +=  f5(bl,cl,dl) + hl[4];
	    }
	    t = t|0;
	    t =  rotl(t,sl[i]);
	    t = (t+el)|0;
	    al = el;
	    el = dl;
	    dl = rotl(cl, 10);
	    cl = bl;
	    bl = t;

	    t = (ar + M[offset+zr[i]])|0;
	    if (i<16){
	        t +=  f5(br,cr,dr) + hr[0];
	    } else if (i<32) {
	        t +=  f4(br,cr,dr) + hr[1];
	    } else if (i<48) {
	        t +=  f3(br,cr,dr) + hr[2];
	    } else if (i<64) {
	        t +=  f2(br,cr,dr) + hr[3];
	    } else {// if (i<80) {
	        t +=  f1(br,cr,dr) + hr[4];
	    }
	    t = t|0;
	    t =  rotl(t,sr[i]) ;
	    t = (t+er)|0;
	    ar = er;
	    er = dr;
	    dr = rotl(cr, 10);
	    cr = br;
	    br = t;
	  }
	  // Intermediate hash value
	  t    = (H[1] + cl + dr)|0;
	  H[1] = (H[2] + dl + er)|0;
	  H[2] = (H[3] + el + ar)|0;
	  H[3] = (H[4] + al + br)|0;
	  H[4] = (H[0] + bl + cr)|0;
	  H[0] =  t;
	};

	function f1(x, y, z) {
	  return ((x) ^ (y) ^ (z));
	}

	function f2(x, y, z) {
	  return (((x)&(y)) | ((~x)&(z)));
	}

	function f3(x, y, z) {
	  return (((x) | (~(y))) ^ (z));
	}

	function f4(x, y, z) {
	  return (((x) & (z)) | ((y)&(~(z))));
	}

	function f5(x, y, z) {
	  return ((x) ^ ((y) |(~(z))));
	}

	function rotl(x,n) {
	  return (x<<n) | (x>>>(32-n));
	}

	function ripemd160(message) {
	  var H = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0];

	  if (typeof message == 'string')
	    message = new Buffer(message, 'utf8');

	  var m = bytesToWords(message);

	  var nBitsLeft = message.length * 8;
	  var nBitsTotal = message.length * 8;

	  // Add padding
	  m[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
	  m[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (
	      (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |
	      (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)
	  );

	  for (var i=0 ; i<m.length; i += 16) {
	    processBlock(H, m, i);
	  }

	  // Swap endian
	  for (var i = 0; i < 5; i++) {
	      // Shortcut
	    var H_i = H[i];

	    // Swap
	    H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |
	          (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);
	  }

	  var digestbytes = wordsToBytes(H);
	  return new Buffer(digestbytes);
	}



	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(7).Buffer))

/***/ },
/* 671 */
/***/ function(module, exports) {

	module.exports = function (Buffer) {

	  //prototype class for hash functions
	  function Hash (blockSize, finalSize) {
	    this._block = new Buffer(blockSize) //new Uint32Array(blockSize/4)
	    this._finalSize = finalSize
	    this._blockSize = blockSize
	    this._len = 0
	    this._s = 0
	  }

	  Hash.prototype.init = function () {
	    this._s = 0
	    this._len = 0
	  }

	  Hash.prototype.update = function (data, enc) {
	    if ("string" === typeof data) {
	      enc = enc || "utf8"
	      data = new Buffer(data, enc)
	    }

	    var l = this._len += data.length
	    var s = this._s = (this._s || 0)
	    var f = 0
	    var buffer = this._block

	    while (s < l) {
	      var t = Math.min(data.length, f + this._blockSize - (s % this._blockSize))
	      var ch = (t - f)

	      for (var i = 0; i < ch; i++) {
	        buffer[(s % this._blockSize) + i] = data[i + f]
	      }

	      s += ch
	      f += ch

	      if ((s % this._blockSize) === 0) {
	        this._update(buffer)
	      }
	    }
	    this._s = s

	    return this
	  }

	  Hash.prototype.digest = function (enc) {
	    // Suppose the length of the message M, in bits, is l
	    var l = this._len * 8

	    // Append the bit 1 to the end of the message
	    this._block[this._len % this._blockSize] = 0x80

	    // and then k zero bits, where k is the smallest non-negative solution to the equation (l + 1 + k) === finalSize mod blockSize
	    this._block.fill(0, this._len % this._blockSize + 1)

	    if (l % (this._blockSize * 8) >= this._finalSize * 8) {
	      this._update(this._block)
	      this._block.fill(0)
	    }

	    // to this append the block which is equal to the number l written in binary
	    // TODO: handle case where l is > Math.pow(2, 29)
	    this._block.writeInt32BE(l, this._blockSize - 4)

	    var hash = this._update(this._block) || this._hash()

	    return enc ? hash.toString(enc) : hash
	  }

	  Hash.prototype._update = function () {
	    throw new Error('_update must be implemented by subclass')
	  }

	  return Hash
	}


/***/ },
/* 672 */
/***/ function(module, exports, __webpack_require__) {

	var exports = module.exports = function (alg) {
	  var Alg = exports[alg]
	  if(!Alg) throw new Error(alg + ' is not supported (we accept pull requests)')
	  return new Alg()
	}

	var Buffer = __webpack_require__(7).Buffer
	var Hash   = __webpack_require__(671)(Buffer)

	exports.sha1 = __webpack_require__(673)(Buffer, Hash)
	exports.sha256 = __webpack_require__(674)(Buffer, Hash)
	exports.sha512 = __webpack_require__(675)(Buffer, Hash)


/***/ },
/* 673 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
	 * in FIPS PUB 180-1
	 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 * Distributed under the BSD License
	 * See http://pajhome.org.uk/crypt/md5 for details.
	 */

	var inherits = __webpack_require__(10).inherits

	module.exports = function (Buffer, Hash) {

	  var A = 0|0
	  var B = 4|0
	  var C = 8|0
	  var D = 12|0
	  var E = 16|0

	  var W = new (typeof Int32Array === 'undefined' ? Array : Int32Array)(80)

	  var POOL = []

	  function Sha1 () {
	    if(POOL.length)
	      return POOL.pop().init()

	    if(!(this instanceof Sha1)) return new Sha1()
	    this._w = W
	    Hash.call(this, 16*4, 14*4)

	    this._h = null
	    this.init()
	  }

	  inherits(Sha1, Hash)

	  Sha1.prototype.init = function () {
	    this._a = 0x67452301
	    this._b = 0xefcdab89
	    this._c = 0x98badcfe
	    this._d = 0x10325476
	    this._e = 0xc3d2e1f0

	    Hash.prototype.init.call(this)
	    return this
	  }

	  Sha1.prototype._POOL = POOL
	  Sha1.prototype._update = function (X) {

	    var a, b, c, d, e, _a, _b, _c, _d, _e

	    a = _a = this._a
	    b = _b = this._b
	    c = _c = this._c
	    d = _d = this._d
	    e = _e = this._e

	    var w = this._w

	    for(var j = 0; j < 80; j++) {
	      var W = w[j] = j < 16 ? X.readInt32BE(j*4)
	        : rol(w[j - 3] ^ w[j -  8] ^ w[j - 14] ^ w[j - 16], 1)

	      var t = add(
	        add(rol(a, 5), sha1_ft(j, b, c, d)),
	        add(add(e, W), sha1_kt(j))
	      )

	      e = d
	      d = c
	      c = rol(b, 30)
	      b = a
	      a = t
	    }

	    this._a = add(a, _a)
	    this._b = add(b, _b)
	    this._c = add(c, _c)
	    this._d = add(d, _d)
	    this._e = add(e, _e)
	  }

	  Sha1.prototype._hash = function () {
	    if(POOL.length < 100) POOL.push(this)
	    var H = new Buffer(20)
	    //console.log(this._a|0, this._b|0, this._c|0, this._d|0, this._e|0)
	    H.writeInt32BE(this._a|0, A)
	    H.writeInt32BE(this._b|0, B)
	    H.writeInt32BE(this._c|0, C)
	    H.writeInt32BE(this._d|0, D)
	    H.writeInt32BE(this._e|0, E)
	    return H
	  }

	  /*
	   * Perform the appropriate triplet combination function for the current
	   * iteration
	   */
	  function sha1_ft(t, b, c, d) {
	    if(t < 20) return (b & c) | ((~b) & d);
	    if(t < 40) return b ^ c ^ d;
	    if(t < 60) return (b & c) | (b & d) | (c & d);
	    return b ^ c ^ d;
	  }

	  /*
	   * Determine the appropriate additive constant for the current iteration
	   */
	  function sha1_kt(t) {
	    return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
	           (t < 60) ? -1894007588 : -899497514;
	  }

	  /*
	   * Add integers, wrapping at 2^32. This uses 16-bit operations internally
	   * to work around bugs in some JS interpreters.
	   * //dominictarr: this is 10 years old, so maybe this can be dropped?)
	   *
	   */
	  function add(x, y) {
	    return (x + y ) | 0
	  //lets see how this goes on testling.
	  //  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
	  //  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
	  //  return (msw << 16) | (lsw & 0xFFFF);
	  }

	  /*
	   * Bitwise rotate a 32-bit number to the left.
	   */
	  function rol(num, cnt) {
	    return (num << cnt) | (num >>> (32 - cnt));
	  }

	  return Sha1
	}


/***/ },
/* 674 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
	 * in FIPS 180-2
	 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
	 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
	 *
	 */

	var inherits = __webpack_require__(10).inherits

	module.exports = function (Buffer, Hash) {

	  var K = [
	      0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
	      0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
	      0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
	      0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
	      0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
	      0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
	      0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
	      0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
	      0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
	      0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
	      0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
	      0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
	      0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
	      0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
	      0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
	      0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
	    ]

	  var W = new Array(64)

	  function Sha256() {
	    this.init()

	    this._w = W //new Array(64)

	    Hash.call(this, 16*4, 14*4)
	  }

	  inherits(Sha256, Hash)

	  Sha256.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, n) {
	    return (X >>> n) | (X << (32 - n));
	  }

	  function R (X, n) {
	    return (X >>> n);
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  function Sigma0256 (x) {
	    return (S(x, 2) ^ S(x, 13) ^ S(x, 22));
	  }

	  function Sigma1256 (x) {
	    return (S(x, 6) ^ S(x, 11) ^ S(x, 25));
	  }

	  function Gamma0256 (x) {
	    return (S(x, 7) ^ S(x, 18) ^ R(x, 3));
	  }

	  function Gamma1256 (x) {
	    return (S(x, 17) ^ S(x, 19) ^ R(x, 10));
	  }

	  Sha256.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var T1, T2

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    for (var j = 0; j < 64; j++) {
	      var w = W[j] = j < 16
	        ? M.readInt32BE(j * 4)
	        : Gamma1256(W[j - 2]) + W[j - 7] + Gamma0256(W[j - 15]) + W[j - 16]

	      T1 = h + Sigma1256(e) + Ch(e, f, g) + K[j] + w

	      T2 = Sigma0256(a) + Maj(a, b, c);
	      h = g; g = f; f = e; e = d + T1; d = c; c = b; b = a; a = T1 + T2;
	    }

	    this._a = (a + this._a) | 0
	    this._b = (b + this._b) | 0
	    this._c = (c + this._c) | 0
	    this._d = (d + this._d) | 0
	    this._e = (e + this._e) | 0
	    this._f = (f + this._f) | 0
	    this._g = (g + this._g) | 0
	    this._h = (h + this._h) | 0

	  };

	  Sha256.prototype._hash = function () {
	    var H = new Buffer(32)

	    H.writeInt32BE(this._a,  0)
	    H.writeInt32BE(this._b,  4)
	    H.writeInt32BE(this._c,  8)
	    H.writeInt32BE(this._d, 12)
	    H.writeInt32BE(this._e, 16)
	    H.writeInt32BE(this._f, 20)
	    H.writeInt32BE(this._g, 24)
	    H.writeInt32BE(this._h, 28)

	    return H
	  }

	  return Sha256

	}


/***/ },
/* 675 */
/***/ function(module, exports, __webpack_require__) {

	var inherits = __webpack_require__(10).inherits

	module.exports = function (Buffer, Hash) {
	  var K = [
	    0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
	    0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
	    0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
	    0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
	    0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
	    0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
	    0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
	    0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
	    0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
	    0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
	    0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
	    0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
	    0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
	    0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
	    0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
	    0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
	    0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
	    0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
	    0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
	    0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
	    0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
	    0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
	    0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
	    0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
	    0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
	    0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
	    0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
	    0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
	    0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
	    0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
	    0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
	    0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
	    0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
	    0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
	    0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
	    0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
	    0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
	    0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
	    0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
	    0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
	  ]

	  var W = new Array(160)

	  function Sha512() {
	    this.init()
	    this._w = W

	    Hash.call(this, 128, 112)
	  }

	  inherits(Sha512, Hash)

	  Sha512.prototype.init = function () {

	    this._a = 0x6a09e667|0
	    this._b = 0xbb67ae85|0
	    this._c = 0x3c6ef372|0
	    this._d = 0xa54ff53a|0
	    this._e = 0x510e527f|0
	    this._f = 0x9b05688c|0
	    this._g = 0x1f83d9ab|0
	    this._h = 0x5be0cd19|0

	    this._al = 0xf3bcc908|0
	    this._bl = 0x84caa73b|0
	    this._cl = 0xfe94f82b|0
	    this._dl = 0x5f1d36f1|0
	    this._el = 0xade682d1|0
	    this._fl = 0x2b3e6c1f|0
	    this._gl = 0xfb41bd6b|0
	    this._hl = 0x137e2179|0

	    this._len = this._s = 0

	    return this
	  }

	  function S (X, Xl, n) {
	    return (X >>> n) | (Xl << (32 - n))
	  }

	  function Ch (x, y, z) {
	    return ((x & y) ^ ((~x) & z));
	  }

	  function Maj (x, y, z) {
	    return ((x & y) ^ (x & z) ^ (y & z));
	  }

	  Sha512.prototype._update = function(M) {

	    var W = this._w
	    var a, b, c, d, e, f, g, h
	    var al, bl, cl, dl, el, fl, gl, hl

	    a = this._a | 0
	    b = this._b | 0
	    c = this._c | 0
	    d = this._d | 0
	    e = this._e | 0
	    f = this._f | 0
	    g = this._g | 0
	    h = this._h | 0

	    al = this._al | 0
	    bl = this._bl | 0
	    cl = this._cl | 0
	    dl = this._dl | 0
	    el = this._el | 0
	    fl = this._fl | 0
	    gl = this._gl | 0
	    hl = this._hl | 0

	    for (var i = 0; i < 80; i++) {
	      var j = i * 2

	      var Wi, Wil

	      if (i < 16) {
	        Wi = W[j] = M.readInt32BE(j * 4)
	        Wil = W[j + 1] = M.readInt32BE(j * 4 + 4)

	      } else {
	        var x  = W[j - 15*2]
	        var xl = W[j - 15*2 + 1]
	        var gamma0  = S(x, xl, 1) ^ S(x, xl, 8) ^ (x >>> 7)
	        var gamma0l = S(xl, x, 1) ^ S(xl, x, 8) ^ S(xl, x, 7)

	        x  = W[j - 2*2]
	        xl = W[j - 2*2 + 1]
	        var gamma1  = S(x, xl, 19) ^ S(xl, x, 29) ^ (x >>> 6)
	        var gamma1l = S(xl, x, 19) ^ S(x, xl, 29) ^ S(xl, x, 6)

	        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
	        var Wi7  = W[j - 7*2]
	        var Wi7l = W[j - 7*2 + 1]

	        var Wi16  = W[j - 16*2]
	        var Wi16l = W[j - 16*2 + 1]

	        Wil = gamma0l + Wi7l
	        Wi  = gamma0  + Wi7 + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0)
	        Wil = Wil + gamma1l
	        Wi  = Wi  + gamma1  + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0)
	        Wil = Wil + Wi16l
	        Wi  = Wi  + Wi16 + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0)

	        W[j] = Wi
	        W[j + 1] = Wil
	      }

	      var maj = Maj(a, b, c)
	      var majl = Maj(al, bl, cl)

	      var sigma0h = S(a, al, 28) ^ S(al, a, 2) ^ S(al, a, 7)
	      var sigma0l = S(al, a, 28) ^ S(a, al, 2) ^ S(a, al, 7)
	      var sigma1h = S(e, el, 14) ^ S(e, el, 18) ^ S(el, e, 9)
	      var sigma1l = S(el, e, 14) ^ S(el, e, 18) ^ S(e, el, 9)

	      // t1 = h + sigma1 + ch + K[i] + W[i]
	      var Ki = K[j]
	      var Kil = K[j + 1]

	      var ch = Ch(e, f, g)
	      var chl = Ch(el, fl, gl)

	      var t1l = hl + sigma1l
	      var t1 = h + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0)
	      t1l = t1l + chl
	      t1 = t1 + ch + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0)
	      t1l = t1l + Kil
	      t1 = t1 + Ki + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0)
	      t1l = t1l + Wil
	      t1 = t1 + Wi + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0)

	      // t2 = sigma0 + maj
	      var t2l = sigma0l + majl
	      var t2 = sigma0h + maj + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0)

	      h  = g
	      hl = gl
	      g  = f
	      gl = fl
	      f  = e
	      fl = el
	      el = (dl + t1l) | 0
	      e  = (d + t1 + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	      d  = c
	      dl = cl
	      c  = b
	      cl = bl
	      b  = a
	      bl = al
	      al = (t1l + t2l) | 0
	      a  = (t1 + t2 + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0
	    }

	    this._al = (this._al + al) | 0
	    this._bl = (this._bl + bl) | 0
	    this._cl = (this._cl + cl) | 0
	    this._dl = (this._dl + dl) | 0
	    this._el = (this._el + el) | 0
	    this._fl = (this._fl + fl) | 0
	    this._gl = (this._gl + gl) | 0
	    this._hl = (this._hl + hl) | 0

	    this._a = (this._a + a + ((this._al >>> 0) < (al >>> 0) ? 1 : 0)) | 0
	    this._b = (this._b + b + ((this._bl >>> 0) < (bl >>> 0) ? 1 : 0)) | 0
	    this._c = (this._c + c + ((this._cl >>> 0) < (cl >>> 0) ? 1 : 0)) | 0
	    this._d = (this._d + d + ((this._dl >>> 0) < (dl >>> 0) ? 1 : 0)) | 0
	    this._e = (this._e + e + ((this._el >>> 0) < (el >>> 0) ? 1 : 0)) | 0
	    this._f = (this._f + f + ((this._fl >>> 0) < (fl >>> 0) ? 1 : 0)) | 0
	    this._g = (this._g + g + ((this._gl >>> 0) < (gl >>> 0) ? 1 : 0)) | 0
	    this._h = (this._h + h + ((this._hl >>> 0) < (hl >>> 0) ? 1 : 0)) | 0
	  }

	  Sha512.prototype._hash = function () {
	    var H = new Buffer(64)

	    function writeInt64BE(h, l, offset) {
	      H.writeInt32BE(h, offset)
	      H.writeInt32BE(l, offset + 4)
	    }

	    writeInt64BE(this._a, this._al, 0)
	    writeInt64BE(this._b, this._bl, 8)
	    writeInt64BE(this._c, this._cl, 16)
	    writeInt64BE(this._d, this._dl, 24)
	    writeInt64BE(this._e, this._el, 32)
	    writeInt64BE(this._f, this._fl, 40)
	    writeInt64BE(this._g, this._gl, 48)
	    writeInt64BE(this._h, this._hl, 56)

	    return H
	  }

	  return Sha512

	}


/***/ },
/* 676 */
/***/ function(module, exports, __webpack_require__) {

	var pbkdf2Export = __webpack_require__(669)

	module.exports = function (crypto, exports) {
	  exports = exports || {}

	  var exported = pbkdf2Export(crypto)

	  exports.pbkdf2 = exported.pbkdf2
	  exports.pbkdf2Sync = exported.pbkdf2Sync

	  return exports
	}


/***/ },
/* 677 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, Buffer) {(function() {
	  var g = ('undefined' === typeof window ? global : window) || {}
	  _crypto = (
	    g.crypto || g.msCrypto || __webpack_require__(700)
	  )
	  module.exports = function(size) {
	    // Modern Browsers
	    if(_crypto.getRandomValues) {
	      var bytes = new Buffer(size); //in browserify, this is an extended Uint8Array
	      /* This will not work in older browsers.
	       * See https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
	       */
	    
	      _crypto.getRandomValues(bytes);
	      return bytes;
	    }
	    else if (_crypto.randomBytes) {
	      return _crypto.randomBytes(size)
	    }
	    else
	      throw new Error(
	        'secure random number generation not supported by this browser\n'+
	        'use chrome, FireFox or Internet Explorer 11'
	      )
	  }
	}())

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(7).Buffer))

/***/ },
/* 678 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(16);
	var Response = __webpack_require__(679);
	var Base64 = __webpack_require__(680);
	var inherits = __webpack_require__(681);

	var Request = module.exports = function (xhr, params) {
	    var self = this;
	    self.writable = true;
	    self.xhr = xhr;
	    self.body = [];
	    
	    self.uri = (params.protocol || 'http:') + '//'
	        + params.host
	        + (params.port ? ':' + params.port : '')
	        + (params.path || '/')
	    ;
	    
	    if (typeof params.withCredentials === 'undefined') {
	        params.withCredentials = true;
	    }

	    try { xhr.withCredentials = params.withCredentials }
	    catch (e) {}
	    
	    if (params.responseType) try { xhr.responseType = params.responseType }
	    catch (e) {}
	    
	    xhr.open(
	        params.method || 'GET',
	        self.uri,
	        true
	    );

	    xhr.onerror = function(event) {
	        self.emit('error', new Error('Network error'));
	    };

	    self._headers = {};
	    
	    if (params.headers) {
	        var keys = objectKeys(params.headers);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	        }
	    }
	    
	    if (params.auth) {
	        //basic auth
	        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
	    }

	    var res = new Response;
	    res.on('close', function () {
	        self.emit('close');
	    });
	    
	    res.on('ready', function () {
	        self.emit('response', res);
	    });

	    res.on('error', function (err) {
	        self.emit('error', err);
	    });
	    
	    xhr.onreadystatechange = function () {
	        // Fix for IE9 bug
	        // SCRIPT575: Could not complete the operation due to error c00c023f
	        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	        if (xhr.__aborted) return;
	        res.handle(xhr);
	    };
	};

	inherits(Request, Stream);

	Request.prototype.setHeader = function (key, value) {
	    this._headers[key.toLowerCase()] = value
	};

	Request.prototype.getHeader = function (key) {
	    return this._headers[key.toLowerCase()]
	};

	Request.prototype.removeHeader = function (key) {
	    delete this._headers[key.toLowerCase()]
	};

	Request.prototype.write = function (s) {
	    this.body.push(s);
	};

	Request.prototype.destroy = function (s) {
	    this.xhr.__aborted = true;
	    this.xhr.abort();
	    this.emit('close');
	};

	Request.prototype.end = function (s) {
	    if (s !== undefined) this.body.push(s);

	    var keys = objectKeys(this._headers);
	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var value = this._headers[key];
	        if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	                this.xhr.setRequestHeader(key, value[j]);
	            }
	        }
	        else this.xhr.setRequestHeader(key, value)
	    }

	    if (this.body.length === 0) {
	        this.xhr.send('');
	    }
	    else if (typeof this.body[0] === 'string') {
	        this.xhr.send(this.body.join(''));
	    }
	    else if (isArray(this.body[0])) {
	        var body = [];
	        for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	        }
	        this.xhr.send(body);
	    }
	    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	        var len = 0;
	        for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	        }
	        var body = new(this.body[0].constructor)(len);
	        var k = 0;
	        
	        for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	                body[k++] = b[j];
	            }
	        }
	        this.xhr.send(body);
	    }
	    else if (isXHR2Compatible(this.body[0])) {
	        this.xhr.send(this.body[0]);
	    }
	    else {
	        var body = '';
	        for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	        }
	        this.xhr.send(body);
	    }
	};

	// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	Request.unsafeHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "cookie",
	    "cookie2",
	    "content-transfer-encoding",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "user-agent",
	    "via"
	];

	Request.prototype.isSafeRequestHeader = function (headerName) {
	    if (!headerName) return false;
	    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	};

	var objectKeys = Object.keys || function (obj) {
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    return keys;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

	var indexOf = function (xs, x) {
	    if (xs.indexOf) return xs.indexOf(x);
	    for (var i = 0; i < xs.length; i++) {
	        if (xs[i] === x) return i;
	    }
	    return -1;
	};

	var isXHR2Compatible = function (obj) {
	    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
	    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
	    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
	};


/***/ },
/* 679 */
/***/ function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(16);
	var util = __webpack_require__(10);

	var Response = module.exports = function (res) {
	    this.offset = 0;
	    this.readable = true;
	};

	util.inherits(Response, Stream);

	var capable = {
	    streaming : true,
	    status2 : true
	};

	function parseHeaders (res) {
	    var lines = res.getAllResponseHeaders().split(/\r?\n/);
	    var headers = {};
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i];
	        if (line === '') continue;
	        
	        var m = line.match(/^([^:]+):\s*(.*)/);
	        if (m) {
	            var key = m[1].toLowerCase(), value = m[2];
	            
	            if (headers[key] !== undefined) {
	            
	                if (isArray(headers[key])) {
	                    headers[key].push(value);
	                }
	                else {
	                    headers[key] = [ headers[key], value ];
	                }
	            }
	            else {
	                headers[key] = value;
	            }
	        }
	        else {
	            headers[line] = true;
	        }
	    }
	    return headers;
	}

	Response.prototype.getResponse = function (xhr) {
	    var respType = String(xhr.responseType).toLowerCase();
	    if (respType === 'blob') return xhr.responseBlob || xhr.response;
	    if (respType === 'arraybuffer') return xhr.response;
	    return xhr.responseText;
	}

	Response.prototype.getHeader = function (key) {
	    return this.headers[key.toLowerCase()];
	};

	Response.prototype.handle = function (res) {
	    if (res.readyState === 2 && capable.status2) {
	        try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	        }
	        catch (err) {
	            capable.status2 = false;
	        }
	        
	        if (capable.status2) {
	            this.emit('ready');
	        }
	    }
	    else if (capable.streaming && res.readyState === 3) {
	        try {
	            if (!this.statusCode) {
	                this.statusCode = res.status;
	                this.headers = parseHeaders(res);
	                this.emit('ready');
	            }
	        }
	        catch (err) {}
	        
	        try {
	            this._emitData(res);
	        }
	        catch (err) {
	            capable.streaming = false;
	        }
	    }
	    else if (res.readyState === 4) {
	        if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit('ready');
	        }
	        this._emitData(res);
	        
	        if (res.error) {
	            this.emit('error', this.getResponse(res));
	        }
	        else this.emit('end');
	        
	        this.emit('close');
	    }
	};

	Response.prototype._emitData = function (res) {
	    var respBody = this.getResponse(res);
	    if (respBody.toString().match(/ArrayBuffer/)) {
	        this.emit('data', new Uint8Array(respBody, this.offset));
	        this.offset = respBody.byteLength;
	        return;
	    }
	    if (respBody.length > this.offset) {
	        this.emit('data', respBody.slice(this.offset));
	        this.offset = respBody.length;
	    }
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 680 */
/***/ function(module, exports, __webpack_require__) {

	;(function () {

	  var object =  true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });

	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '');
	    if (input.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });

	}());


/***/ },
/* 681 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 682 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(62)(module), (function() { return this; }())))

/***/ },
/* 683 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 684 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return map(objectKeys(obj), function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (isArray(obj[k])) {
	        return map(obj[k], function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};

	var isArray = Array.isArray || function (xs) {
	  return Object.prototype.toString.call(xs) === '[object Array]';
	};

	function map (xs, f) {
	  if (xs.map) return xs.map(f);
	  var res = [];
	  for (var i = 0; i < xs.length; i++) {
	    res.push(f(xs[i], i));
	  }
	  return res;
	}

	var objectKeys = Object.keys || function (obj) {
	  var res = [];
	  for (var key in obj) {
	    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
	  }
	  return res;
	};


/***/ },
/* 685 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(683);
	exports.encode = exports.stringify = __webpack_require__(684);


/***/ },
/* 686 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(15)


/***/ },
/* 687 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 688 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(160)


/***/ },
/* 689 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(161);
	exports.Stream = __webpack_require__(16);
	exports.Readable = exports;
	exports.Writable = __webpack_require__(64);
	exports.Duplex = __webpack_require__(15);
	exports.Transform = __webpack_require__(63);
	exports.PassThrough = __webpack_require__(160);


/***/ },
/* 690 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(63)


/***/ },
/* 691 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(64)


/***/ },
/* 692 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 693 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ },
/* 694 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 695 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(693);
	exports.encode = exports.stringify = __webpack_require__(694);


/***/ },
/* 696 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 697 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 698 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 699 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 700 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 701 */
/***/ function(module, exports) {

	/* (ignored) */

/***/ }
/******/ ])
});
;